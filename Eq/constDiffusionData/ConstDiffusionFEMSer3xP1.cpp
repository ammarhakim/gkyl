void ConstDiffusionFEM3xSer_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((16.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]-8.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+((-8.0*phiUz[0])+4.0*phiUyUz[0]+4.0*phiUyLz[0]+16.0*phiUy[0]-2.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+((-8.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((8.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]-4.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-4.0*phiUz[0])+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((8.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]-4.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1]*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-4.0*phiUz[0])+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+4.0*phiUxUz[0]+phiUxUyUz[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUz[0]+2.0*bcVals[0]*phiUyUz[0]+4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_UxDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[5]+(phiUyLz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(phiUyLz[1]-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]-8.0*phiC[1]-8.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUz[1]+phiUyUz[1]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+((-2.0*phiUz[1])+phiUyUz[1]+phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]-8.0*phiC[1]-8.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+(8.0*phiUz[1]+2.0*phiUyUz[1]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])+2.0*phiUyUz[1]+2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUz[1]+phiUyUz[1]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+((-2.0*phiUz[1])+phiUyUz[1]+phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]-8.0*phiC[1]-8.0*phiUz[0]+4.0*phiUyUz[0]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+phiLxUyUz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+((8.0*phiUz[1]+2.0*phiUyUz[1]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])+2.0*phiUyUz[1]+2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+((-4.0*rdx2SqVol[0]*phiUz[1])-2.0*rdx2SqVol[0]*phiUyUz[1]-4.0*rdx2SqVol[0]*phiUy[1]-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_LyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-8.0*phiUz[0])-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-8.0*phiUz[0])-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_UyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((3.0*rdx2SqVol[2]+9.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+(phiUxLz[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(phiUxLz[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]+16.0*phiC[1]-8.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]-2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]-2.0*phiUx[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]+4.0*phiUx[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]+16.0*phiC[1]-8.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUxUz[1]+rdx2SqVol[0]*phiUxLz[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(8.0*phiUz[1]+2.0*phiUxUz[1]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-1.0*phiUxLz[1]-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUxUz[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]-2.0*phiUx[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]+4.0*phiUx[1]+4.0*phiLz[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]+16.0*phiC[1]-8.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUxUz[1]+rdx2SqVol[0]*phiUxLz[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((8.0*phiUz[1]+2.0*phiUxUz[1]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-1.0*phiUxLz[1]-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUxUz[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*phiUz[1])-2.0*phiUxUz[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[1]*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]-2.0*phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-2.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[11]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+7.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[11]+(phiUxLz[1]+2.0*phiLz[1]-4.0*phiC[1]+8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+2.0*phiLz[1]+8.0*phiC[1]-4.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((2.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]-2.0*phiUx[1]+2.0*phiLz[1]-4.0*phiC[1]+8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]+4.0*phiUx[1]+2.0*phiLz[1]+8.0*phiC[1]-4.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUxUz[1]+rdx2SqVol[0]*phiUxLz[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(4.0*phiUz[1]+2.0*phiUxUz[1]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-1.0*phiUxLz[1]-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUxUz[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((2.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]-2.0*phiUx[1]+2.0*phiLz[1]-4.0*phiC[1]+8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+phiUxLz[1]+4.0*phiUx[1]+2.0*phiLz[1]+8.0*phiC[1]-4.0*phiUz[0]-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUxUz[1]+rdx2SqVol[0]*phiUxLz[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((4.0*phiUz[1]+2.0*phiUxUz[1]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-1.0*phiUxLz[1]-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUxUz[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*phiUz[1])-2.0*phiUxUz[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[1]*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((bcVals[1]*rdx2SqVol[2]+7.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*bcVals[11]+(bcVals[1]*phiUxLz[1]+2.0*bcVals[1]*phiLz[1]-4.0*bcVals[1]*phiC[1]+(8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+2.0*bcVals[1]*phiLz[1]+8.0*bcVals[1]*phiC[1]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUz[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+bcVals[1]*phiUxLz[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]-4.0*bcVals[1]*phiC[1]+(8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+bcVals[1]*phiUxLz[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+8.0*bcVals[1]*phiC[1]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiUz[1]+rdx2SqVol[0]*bcVals[1]*phiUxUz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUz[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(4.0*bcVals[1]*phiUz[1]+2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-1.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUz[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUz[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+bcVals[1]*phiUxLz[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]-4.0*bcVals[1]*phiC[1]+(8.0*phiUz[0]+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+bcVals[1]*phiUxLz[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+8.0*bcVals[1]*phiC[1]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-2.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyUz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiUz[1]+rdx2SqVol[0]*bcVals[1]*phiUxUz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-4.0*phiUz[0])+4.0*phiUxUz[0]+4.0*phiUxLz[0]+phiUxLyUz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyUz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUz[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((4.0*bcVals[1]*phiUz[1]+2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-1.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUz[0]+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUz[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUz[0])+phiUxUz[0]+phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUz[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*bcVals[1]*phiUz[1])-2.0*bcVals[1]*phiUxUz[1]-4.0*bcVals[1]*phiUx[1]-8.0*bcVals[1]*phiC[1])*rdx2SqVol[1]*bcVals[9]))/(bcVals[1]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-7.0*rdx2SqVol[0])*bcVals[5]+((-1.0*phiUyLz[1])-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiUyLz[1])+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-7.0*rdx2SqVol[0])*bcVals[5]+((-1.0*phiUyLz[1])-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiUyLz[1])+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(((-4.0*phiC[1])-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[1]*bcVals[5])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-1.0*phiUyLz[1]-4.0*phiUy[1]+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*phiUz[1])-2.0*phiUyUz[1]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-2.0*phiUyLz[1]-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-1.0*phiUyLz[1]-4.0*phiUy[1]+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-4.0*phiUz[1])-2.0*phiUyUz[1]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-2.0*phiUyLz[1]-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-1.0*phiUyLz[1]-4.0*phiUy[1]+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+(((-4.0*phiUz[1])-2.0*phiUyUz[1]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-2.0*phiUyLz[1]-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]+4.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-1.0*phiUyLz[1]-4.0*phiUy[1]+phiLz[1]+4.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-4.0*phiUz[1])-2.0*phiUyUz[1]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-2.0*phiUyLz[1]-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-1.0*phiUyLz[0]-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.02777777777777778*((9.0*rdx2SqVol[2]+9.0*rdx2SqVol[1]-3.0*rdx2SqVol[0])*bcVals[11]+(9.0*rdx2SqVol[2]-3.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]-16.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+32.0*phiUz[0]+32.0*phiLz[0]+8.0*phiLyUz[0]+8.0*phiLyLz[0]-16.0*phiLy[0]+8.0*phiLxUz[0]+8.0*phiLxLz[0]+2.0*phiLxLyUz[0]+2.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLz[2]+(32.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]+8.0*phiLx[1]-16.0*phiC[1]-16.0*phiUz[0]-16.0*phiLz[0]+8.0*phiLyUz[0]+8.0*phiLyLz[0]+32.0*phiLy[0]-4.0*phiLxUz[0]-4.0*phiLxLz[0]+2.0*phiLxLyUz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[1]+8.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLyLz[1]+8.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+32.0*rdx2SqVol[0]*phiC[1]+((-16.0*phiUz[0])-16.0*phiLz[0]-4.0*phiLyUz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]+8.0*phiLxUz[0]+8.0*phiLxLz[0]+2.0*phiLxLyUz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]+32.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -0.5*(bcVals[11]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*bcVals[5])-4.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiUz[2]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[11]+18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUz[2]+phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiUz[1]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUz[1]+phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiUz[2]+2.0*phiLz[2]-4.0*phiC[2]+2.0*phiUz[1]+2.0*phiLz[1]-4.0*phiC[1]+phiUz[0]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiUz[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUz[2]+phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiUz[1]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUz[1]+phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUz[3])-4.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiUz[2]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiUz[2]+2.0*phiLz[2]-4.0*phiC[2]+2.0*phiUz[1]+2.0*phiLz[1]-4.0*phiC[1]+phiUz[0]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiUz[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUz[3])-8.0*rdx2SqVol[1]*phiC[3]-2.0*rdx2SqVol[1]*phiUz[2]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*bcVals[11]+18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUz[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUz[2]+phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUz[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiUz[1]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUz[1]+phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+18.0*rdx2SqVol[0]*bcVals[5]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiUz[2]+2.0*phiLz[2]-4.0*phiC[2]+2.0*phiUz[1]+2.0*phiLz[1]-4.0*phiC[1]+phiUz[0]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiUz[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUz[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUz[2]+4.0*phiLz[2]-8.0*phiC[2]+4.0*phiUz[1]+4.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiUz[0]+16.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-2.0*phiLz[1]+phiLyUz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUz[1]+phiLxLz[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiUz[0]-8.0*phiLz[0]+4.0*phiLyUz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxUz[0]-2.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyUz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUz[1]+rdx2SqVol[0]*phiLxLz[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiUz[0])-8.0*phiLz[0]-2.0*phiLyUz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxUz[0]+4.0*phiLxLz[0]+phiLxLyUz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUz[2]+phiLz[2]-2.0*phiC[2]+8.0*phiUz[1]+8.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiUz[1])-4.0*phiLz[1]+2.0*phiLyUz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiUz[0]-2.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+4.0*phiLz[0]+phiLyUz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUz[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiUz[2]+8.0*phiLz[2]-16.0*phiC[2]+phiUz[1]+phiLz[1]+2.0*phiLxUz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiUz[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUz[1]+phiLz[1]-1.0*phiLxUz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUz[0]+4.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-2.0*phiLz[0]+phiLxUz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUz[3])-4.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiUz[2]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(18.0*rdx2SqVol[0]*bcVals[5]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiUz[2]+2.0*phiLz[2]-4.0*phiC[2]+2.0*phiUz[1]+2.0*phiLz[1]-4.0*phiC[1]+phiUz[0]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiUz[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]+2.0*phiLz[1]+8.0*phiC[1]+phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUz[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUz[3])-8.0*rdx2SqVol[1]*phiC[3]-2.0*rdx2SqVol[1]*phiUz[2]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[4]*bcVals[9]))/(bcVals[4]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_LzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-16.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-16.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_UzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((9.0*rdx2SqVol[2]+3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[17]+(phiUxLy[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(phiUxLy[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLy[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiUxUy[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-4.0*phiUy[1])-1.0*phiUxUy[1]-1.0*phiUxLy[1]-4.0*phiUx[1]-4.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]+2.0*phiUxLy[1]-4.0*phiUx[1]+8.0*phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((4.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiUxUy[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-4.0*phiUy[1])-1.0*phiUxUy[1]-1.0*phiUxLy[1]-4.0*phiUx[1]-4.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]+2.0*phiUxLy[1]-4.0*phiUx[1]+8.0*phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-8.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-8.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_LxRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+((-8.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(4.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+(((-8.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(4.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-4.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]*bcVals[12]))/(bcVals[1]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((7.0*rdx2SqVol[2]+rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[17]+(phiUxLy[1]+2.0*phiLy[1]+8.0*phiC[1]+2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLy[1]+2.0*phiLy[1]-4.0*phiC[1]+2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLy[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((2.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLy[1]+8.0*phiC[1]+2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLy[1]-4.0*phiC[1]+2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiUxUy[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-2.0*phiUy[1])-1.0*phiUxUy[1]-1.0*phiUxLy[1]-4.0*phiUx[1]-2.0*phiLy[1]-8.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]+2.0*phiUxLy[1]-4.0*phiUx[1]+4.0*phiLy[1]-8.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((2.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLy[1]+8.0*phiC[1]+2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUy[1]+phiUxUy[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLy[1]-4.0*phiC[1]+2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiUxUy[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-2.0*phiUy[1])-1.0*phiUxUy[1]-1.0*phiUxLy[1]-4.0*phiUx[1]-2.0*phiLy[1]-8.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]+2.0*phiUxLy[1]-4.0*phiUx[1]+4.0*phiLy[1]-8.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_LxRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((7.0*bcVals[1]*rdx2SqVol[2]+bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*bcVals[17]+(bcVals[1]*phiUxLy[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLy[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((2.0*bcVals[1]*phiUy[1]+bcVals[1]*phiUxUy[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUy[1]+bcVals[1]*phiUxUy[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-1.0*bcVals[1]*phiUxLy[1]-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]+2.0*bcVals[1]*phiUxLy[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((2.0*bcVals[1]*phiUy[1]+bcVals[1]*phiUxUy[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUy[1]+bcVals[1]*phiUxUy[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+(((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-1.0*bcVals[1]*phiUxLy[1]-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]+2.0*bcVals[1]*phiUxLy[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*bcVals[1]*phiUy[1])-2.0*bcVals[1]*phiUxUy[1]-4.0*bcVals[1]*phiUx[1]-8.0*bcVals[1]*phiC[1])*rdx2SqVol[2]*bcVals[15]))/(bcVals[1]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-7.0*rdx2SqVol[0])*bcVals[5]+((-1.0*phiLyUz[1])+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-7.0*rdx2SqVol[0])*bcVals[5]+((-1.0*phiLyUz[1])+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[1])-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*bcVals[5])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]-1.0*phiLyUz[1]+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]-1.0*phiLyUz[1]-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+((-8.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]-1.0*phiLyUz[1]+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]-1.0*phiLyUz[1]-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-8.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_UxRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]-1.0*phiLyUz[1]+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]-1.0*phiLyUz[1]-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+(((-8.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]-1.0*phiLyUz[1]+phiLy[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]-1.0*phiLyUz[1]-2.0*phiLy[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-8.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.02777777777777778*((9.0*rdx2SqVol[2]+9.0*rdx2SqVol[1]-3.0*rdx2SqVol[0])*bcVals[17]+((-3.0*rdx2SqVol[2])+9.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLy[2]+32.0*phiC[2]+2.0*phiUyLz[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]+8.0*phiLx[1]-16.0*phiC[1]+8.0*phiUyLz[0]-16.0*phiUy[0]+32.0*phiLz[0]+8.0*phiLyLz[0]-16.0*phiLy[0]+2.0*phiLxUyLz[0]-4.0*phiLxUy[0]+8.0*phiLxLz[0]+2.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUyLz[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+8.0*phiUyLz[0]+32.0*phiUy[0]-16.0*phiLz[0]+8.0*phiLyLz[0]+32.0*phiLy[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]-4.0*phiLxLz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUyLz[1]+8.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLyLz[1]+8.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+32.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUyLz[0])-16.0*phiUy[0]-16.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]+8.0*phiLxLz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]+32.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]-1.0*phiUyLz[1]-4.0*phiLz[1]-1.0*phiLyLz[1]+2.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-16.0*phiLz[0]-4.0*phiLyLz[0]+8.0*phiLy[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLy[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+2.0*phiLz[1]-1.0*phiLyLz[1]-4.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+8.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+2.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-1.0*rdx2SqVol[0]*phiLxLy[1]-4.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+8.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]-1.0*phiUyLz[1]-4.0*phiLz[1]-1.0*phiLyLz[1]+2.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-16.0*phiLz[0]-4.0*phiLyLz[0]+8.0*phiLy[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLy[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+2.0*phiLz[1]-1.0*phiLyLz[1]-4.0*phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+8.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+2.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-1.0*rdx2SqVol[0]*phiLxLy[1]-4.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+8.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*bcVals[5])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[17]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[17]+18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUy[2]+4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUy[2]+phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiUy[1]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-1.0*phiLy[2]-4.0*phiC[2]+2.0*phiUy[1]+2.0*phiLy[1]+8.0*phiC[1]+phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]+2.0*phiLy[1]-4.0*phiC[1]+phiUy[0]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUy[2]+4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUy[2]+phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiUy[1]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-1.0*phiLy[2]-4.0*phiC[2]+2.0*phiUy[1]+2.0*phiLy[1]+8.0*phiC[1]+phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]+2.0*phiLy[1]-4.0*phiC[1]+phiUy[0]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_UxRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[17]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*bcVals[17]+18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUy[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUy[2]+4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUy[2]+phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUy[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiUy[1]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-1.0*phiLy[2]-4.0*phiC[2]+2.0*phiUy[1]+2.0*phiLy[1]+8.0*phiC[1]+phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]+2.0*phiLy[1]-4.0*phiC[1]+phiUy[0]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUy[2]+4.0*phiLy[2]+16.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-2.0*phiLz[1]+phiLyLz[1]+4.0*phiLy[1]+phiLxUy[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxUy[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUy[2]+phiLy[2]+4.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-4.0*phiLz[1]+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUy[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-4.0*phiLy[2]-16.0*phiC[2]+phiUy[1]+phiLy[1]-1.0*phiLxUy[1]-1.0*phiLxLy[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+phiLy[1]+2.0*phiLxUy[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiUy[0]+4.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])-2.0*phiLy[0]+phiLxUy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+(18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-1.0*phiLy[2]-4.0*phiC[2]+2.0*phiUy[1]+2.0*phiLy[1]+8.0*phiC[1]+phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]+2.0*phiLy[1]-4.0*phiC[1]+phiUy[0]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[4]*bcVals[15]))/(bcVals[4]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-8.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-8.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_LyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+(((-8.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_LyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+(((-8.0*phiUz[0])-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((7.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(phiLxUy[1]+2.0*phiLx[1]+8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+(phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_LyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*(((7.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[7]+2.0*rdx2SqVol[1]*bcVals[6])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((phiLxUy[1]+2.0*phiLx[1]+8.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+(phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiC[1]+4.0*phiUx[0]+8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiUx[1]+8.0*phiC[1]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_LyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(((-4.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-1.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiUx[1]+8.0*phiC[1]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*rdx2SqVol[2])-7.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[11]+((-1.0*phiLxUz[1])+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiLxUz[1])-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*rdx2SqVol[2])-7.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[11]+((-1.0*phiLxUz[1])+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-1.0*phiLxUz[1])-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[1])-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*bcVals[11])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-1.0*phiLxUz[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-8.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-1.0*phiLxUz[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-8.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUx[1])-8.0*phiC[1]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_UyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-4.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-1.0*phiLxUz[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+(((-8.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*phiUz[1]+2.0*phiUxUz[1]+4.0*phiUx[1]+8.0*phiC[1])*rdx2SqVol[1]*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_UyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-4.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+((-4.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-1.0*phiLxUz[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+(((-8.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*phiUz[1]+2.0*phiUxUz[1]+4.0*phiUx[1]+8.0*phiC[1])*rdx2SqVol[1]*bcVals[9])*bcVals[13]+((-4.0*phiUx[1])-8.0*phiC[1]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.02777777777777778*((9.0*rdx2SqVol[2]-3.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[17]+((-3.0*rdx2SqVol[2])+9.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[11]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLx[2]+32.0*phiC[2]+2.0*phiUxLz[1]+2.0*phiUxLy[1]+8.0*phiLz[1]+8.0*phiLy[1]+2.0*phiLxLz[1]+2.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+8.0*phiUxLz[0]+2.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+32.0*phiLz[0]+8.0*phiLyLz[0]-16.0*phiLy[0]+8.0*phiLxLz[0]+2.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLz[1]+2.0*phiUxLy[1]+8.0*phiLz[1]+8.0*phiLy[1]+2.0*phiLxLz[1]+2.0*phiLxLy[1]+8.0*phiLx[1]+32.0*phiC[1]-4.0*phiUxLz[0]+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]-16.0*phiUx[0]-16.0*phiLz[0]+8.0*phiLyLz[0]+32.0*phiLy[0]-4.0*phiLxLz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]-16.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-4.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUxLz[0]+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]+32.0*phiUx[0]-16.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]+8.0*phiLxLz[0]+2.0*phiLxLyLz[0]+8.0*phiLxLy[0]+32.0*phiLx[0]-64.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[11]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLz[1]-1.0*phiUxLy[1]-4.0*phiLz[1]-4.0*phiLy[1]-1.0*phiLxLz[1]-1.0*phiLxLy[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUxLz[0]-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-16.0*phiLz[0]-4.0*phiLyLz[0]+8.0*phiLy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-1.0*phiUxLy[1]-4.0*phiLz[1]-4.0*phiLy[1]-1.0*phiLxLz[1]-1.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+8.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]+2.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUxLz[1]-1.0*rdx2SqVol[0]*phiUxLy[1]+2.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxLz[1]-1.0*rdx2SqVol[0]*phiLxLy[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[11]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLz[1]-1.0*phiUxLy[1]-4.0*phiLz[1]-4.0*phiLy[1]-1.0*phiLxLz[1]-1.0*phiLxLy[1]+2.0*phiLx[1]+8.0*phiC[1]-4.0*phiUxLz[0]-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-16.0*phiLz[0]-4.0*phiLyLz[0]+8.0*phiLy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-1.0*phiUxLy[1]-4.0*phiLz[1]-4.0*phiLy[1]-1.0*phiLxLz[1]-1.0*phiLxLy[1]-4.0*phiLx[1]-16.0*phiC[1]+2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+8.0*phiLz[0]-4.0*phiLyLz[0]-16.0*phiLy[0]+2.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUxLz[1]-1.0*rdx2SqVol[0]*phiUxLy[1]+2.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxLz[1]-1.0*rdx2SqVol[0]*phiLxLy[1]-4.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-4.0*phiLxLz[0]-1.0*phiLxLyLz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*bcVals[11])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[17]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+phiUx[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-1.0*phiLx[2]-4.0*phiC[2]+2.0*phiUx[1]+2.0*phiLx[1]+8.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUx[1])-1.0*phiLx[1]-4.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]+phiLx[0]-2.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+phiUx[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUx[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-1.0*phiLx[2]-4.0*phiC[2]+2.0*phiUx[1]+2.0*phiLx[1]+8.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUx[1])-1.0*phiLx[1]-4.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]+phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUx[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUx[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_UyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[17]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[10]-2.0*rdx2SqVol[1]*bcVals[9])*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1]-4.0*rdx2SqVol[1]*phiC[3])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUx[3])-4.0*rdx2SqVol[1]*phiC[3]+((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+phiUx[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-1.0*phiLx[2]-4.0*phiC[2]+2.0*phiUx[1]+2.0*phiLx[1]+8.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUx[1])-1.0*phiLx[1]-4.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]+phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUx[3])-8.0*rdx2SqVol[1]*phiC[3]+((-2.0*phiUx[1])-4.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_UyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+4.0*phiLx[2]+16.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+4.0*phiLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]+16.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+phiLx[2]+4.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+8.0*phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-4.0*phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]-16.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-2.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUx[3])-4.0*rdx2SqVol[1]*phiC[3]+((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-4.0*phiLx[2]-16.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-4.0*phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUxLy[1]+phiUx[1]+8.0*phiLy[1]+2.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-2.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUx[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-1.0*phiLx[2]-4.0*phiC[2]+2.0*phiUx[1]+2.0*phiLx[1]+8.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUx[1])-1.0*phiLx[1]-4.0*phiC[1]+phiUx[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiLx[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]+phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUx[3])-8.0*rdx2SqVol[1]*phiC[3]+((-2.0*phiUx[1])-4.0*phiC[1])*rdx2SqVol[1])*bcVals[9])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUx[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUx[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[8]-1.0*phiC[0]*dxC[2]+dxC[0]*bcVals[2]-1.0*phiC[0]*dxC[1]-1.0*dxC[0]*phiC[0]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[0]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]*bcVals[12]))/(bcVals[1]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-4.0*phiUz[0])-2.0*phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[0]-2.0*phiUyUz[0]-4.0*phiUy[0]+phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1]*rdx2SqVol[1]+(2.0*phiUz[0]+phiUyUz[0]+2.0*phiUy[0]-2.0*phiUxUz[0]-1.0*phiUxUyUz[0]-2.0*phiUxUy[0]-4.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-2.0*bcVals[0]*phiUyUz[0]-4.0*bcVals[0]*phiUy[0]-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[0])-2.0*phiUxUz[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-4.0*phiUy[0])-2.0*phiUxUy[0]-4.0*phiUx[0]-8.0*phiC[0])*bcVals[1]*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[1]*bcVals[7]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(1.0*(dxC[1]*bcVals[8]+dxC[0]*bcVals[2]-1.0*phiC[0]*dxC[1]-1.0*dxC[0]*phiC[0]))/(dxC[1]+dxC[0]); 
  diffOut[1] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[8]-1.0*phiC[1]*dxC[2]+dxC[0]*bcVals[2]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[1]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(4.0*phiC[1]+2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+4.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiC[1])+2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]-2.0*phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]+2.0*phiC[1]-2.0*phiUyLz[0]-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]-2.0*phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]+2.0*phiC[1]-2.0*phiUyLz[0]-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*(((5.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[7]+2.0*rdx2SqVol[1]*bcVals[6])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((4.0*phiC[1]+2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+4.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiC[1])+2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiC[1]+4.0*phiUx[0]+8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]-2.0*phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]+2.0*phiC[1]-2.0*phiUyLz[0]-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiUx[1]+8.0*phiC[1]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_LxNeumannLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]-2.0*phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUy[1])-1.0*phiUxUy[1]+phiUx[1]+2.0*phiC[1]-2.0*phiUyLz[0]-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]-1.0*rdx2SqVol[0]*phiUxUy[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(((-2.0*phiUy[1])-1.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*phiUy[1]+2.0*phiUxUy[1]-2.0*phiUx[1]-4.0*phiC[1]+2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiUxUy[1]+4.0*rdx2SqVol[0]*phiUx[1]-4.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*phiUx[1]+8.0*phiC[1]+2.0*phiUx[0]+4.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[16]+((-4.0*phiUy[1])-2.0*phiUxUy[1]-4.0*phiUx[1]-8.0*phiC[1])*rdx2SqVol[2]*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((5.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*bcVals[17]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(4.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+4.0*phiLz[0]-8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*bcVals[1]-2.0*bcVals[1]*phiC[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUy[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUy[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(8.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUy[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUy[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+((-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8])+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(8.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*bcVals[1]*phiUy[1])-2.0*bcVals[1]*phiUxUy[1]-4.0*bcVals[1]*phiUx[1]-8.0*bcVals[1]*phiC[1])*rdx2SqVol[2]*bcVals[15]))/(bcVals[1]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*(((5.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*bcVals[7]+2.0*bcVals[1]*rdx2SqVol[1]*bcVals[6])*bcVals[17]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+((4.0*bcVals[1]*phiC[1]+(2.0*phiUyLz[0]-4.0*phiUy[0]+phiUxUyLz[0]-2.0*phiUxUy[0]+2.0*phiUxLz[0]-4.0*phiUx[0]+4.0*phiLz[0]-8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+((2.0*phiUyLz[0]+8.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]-1.0*phiUxLz[0]-4.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*bcVals[1]-2.0*bcVals[1]*phiC[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]+phiUxUyLz[0]+4.0*phiUxUy[0]+2.0*phiUxLz[0]+8.0*phiUx[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(4.0*bcVals[0]*phiUy[0]+8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*bcVals[1]*phiC[1]+(4.0*phiUx[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 
  diffOut[1] = phiC[1]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUy[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUy[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1]+((-4.0*phiUx[0])-8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(8.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*bcVals[1]*phiUx[1]+8.0*bcVals[1]*phiC[1]+(2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_LxRobinLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8]+(((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])+4.0*phiUy[0]-1.0*phiUxUyLz[0]+2.0*phiUxUy[0]-2.0*phiUxLz[0]+4.0*phiUx[0]-4.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUy[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]-1.0*phiUxUyLz[0]-4.0*phiUxUy[0]-2.0*phiUxLz[0]-8.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUy[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1]+((-4.0*phiUx[0])-8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]*bcVals[6]))/(bcVals[1]*bcVals[7]); 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[8])+(((-2.0*bcVals[1]*phiUy[1])-1.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]+2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]-18.0*rdx2SqVol[0]*bcVals[2]+(4.0*bcVals[1]*phiUy[1]+2.0*bcVals[1]*phiUxUy[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(2.0*phiUy[0]+phiUxUy[0]-1.0*phiUx[0]-2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiUy[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxUy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(8.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+((-1.0*phiUy[0])+phiUxUy[0]+2.0*phiUx[0]-2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+(2.0*bcVals[0]*phiUy[0]+4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*bcVals[1]*phiUx[1]+8.0*bcVals[1]*phiC[1]+(2.0*phiUx[0]+4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]*bcVals[6])*bcVals[16]+((-4.0*bcVals[1]*phiUy[1])-2.0*bcVals[1]*phiUxUy[1]-4.0*bcVals[1]*phiUx[1]-8.0*bcVals[1]*phiC[1])*rdx2SqVol[2]*bcVals[7]*bcVals[15]))/(bcVals[1]*bcVals[7]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(1.0*(dxC[2]*bcVals[14]-1.0*phiC[0]*dxC[2]+dxC[0]*bcVals[2]-1.0*dxC[0]*phiC[0]))/(dxC[2]+dxC[0]); 
  diffOut[1] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[11]-1.0*phiC[1]*dxC[2]+dxC[0]*bcVals[2]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[1]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[11]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[11]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[2]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-2.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[11]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-4.0*phiC[1])+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-2.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[11]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-4.0*phiC[1])+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[1])-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*bcVals[11])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-2.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-4.0*phiC[1]+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-4.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]+4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-2.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-4.0*phiC[1]+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-4.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]+4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUx[1])-8.0*phiC[1]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-2.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-4.0*phiC[1]+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+(((-4.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]+4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*phiUz[1]+2.0*phiUxUz[1]+4.0*phiUx[1]+8.0*phiC[1])*rdx2SqVol[1]*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-2.0*phiUz[1])-1.0*phiUxUz[1]+phiUx[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*phiUz[1])-1.0*phiUxUz[1]-2.0*phiUx[1]-4.0*phiC[1]+4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUxUz[1]-2.0*rdx2SqVol[0]*phiUx[1]+2.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUx[1])-4.0*phiC[1]-4.0*phiUx[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+(((-4.0*phiUz[1])-2.0*phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUz[1]+phiUxUz[1]+2.0*phiUx[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiUxUz[1]-4.0*rdx2SqVol[0]*phiUx[1]+4.0*rdx2SqVol[0]*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*phiUz[1]+2.0*phiUxUz[1]+4.0*phiUx[1]+8.0*phiC[1])*rdx2SqVol[1]*bcVals[9])*bcVals[13]+((-4.0*phiUx[1])-8.0*phiC[1]-2.0*phiUx[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+((-2.0*bcVals[1]*rdx2SqVol[2])-5.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*bcVals[11]+(2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1]-4.0*bcVals[1]*phiC[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+(((-2.0*bcVals[1]*rdx2SqVol[2])-5.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*bcVals[11]+(2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1]-4.0*bcVals[1]*phiC[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((((-4.0*phiUx[0])-8.0*phiC[0])*bcVals[1]-4.0*bcVals[1]*phiC[1])*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[2]*bcVals[11])*bcVals[12]))/(bcVals[1]*bcVals[13]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((-4.0*bcVals[1]*phiUz[1])-2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-2.0*bcVals[0]*phiUz[0])-4.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+(((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1]+((-4.0*phiUx[0])-8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]*bcVals[12]))/(bcVals[1]*bcVals[13]); 
  diffOut[1] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+((-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11])+((-4.0*bcVals[1]*phiUz[1])-2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-2.0*bcVals[0]*phiUz[0])-4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*bcVals[1]*phiUx[1])-8.0*bcVals[1]*phiC[1]+((-2.0*phiUx[0])-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]*bcVals[12]))/(bcVals[1]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(((-4.0*bcVals[1]*phiUz[1])-2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-2.0*bcVals[0]*phiUz[0])-4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*bcVals[1]*phiUz[1]+2.0*bcVals[1]*phiUxUz[1]+4.0*bcVals[1]*phiUx[1]+8.0*bcVals[1]*phiC[1])*rdx2SqVol[1]*bcVals[9]))/(bcVals[1]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[14]+(((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]+bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiC[1]+((-8.0*phiUz[0])-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]+phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-2.0*bcVals[1]*phiUz[1])-1.0*bcVals[1]*phiUxUz[1]-2.0*bcVals[1]*phiUx[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUz[0]+2.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]+4.0*phiUx[0]-2.0*phiLyUz[0]-4.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(4.0*phiUz[0]-4.0*phiUxUz[0]-1.0*phiUxLyUz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+phiLyUz[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-4.0*bcVals[0]*phiUz[0])-8.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1]+((-4.0*phiUx[0])-8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]*bcVals[12]))/(bcVals[1]*bcVals[13]); 
  diffOut[1] = -(0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11])+(((-4.0*bcVals[1]*phiUz[1])-2.0*bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]+phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUz[1]+bcVals[1]*phiUxUz[1]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUxUz[0]-2.0*phiUx[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+(2.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiUz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiUxUz[1]-4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+(phiUz[0]-1.0*phiUxUz[0]-2.0*phiUx[0]+2.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+((-2.0*bcVals[0]*phiUz[0])-4.0*bcVals[0]*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*bcVals[1]*phiUz[1]+2.0*bcVals[1]*phiUxUz[1]+4.0*bcVals[1]*phiUx[1]+8.0*bcVals[1]*phiC[1])*rdx2SqVol[1]*bcVals[9])*bcVals[13]+((-4.0*bcVals[1]*phiUx[1])-8.0*bcVals[1]*phiC[1]+((-2.0*phiUx[0])-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]*bcVals[10]*bcVals[12]))/(bcVals[1]*bcVals[10]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -(1.0*(dxC[1]*bcVals[11]+dxC[0]*bcVals[2]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[1]))/(dxC[1]+dxC[0]); 
  diffOut[2] = -(1.0*(dxC[2]*bcVals[17]+((-1.0*dxC[2])-1.0*dxC[0])*phiC[2]+dxC[0]*bcVals[2]))/(dxC[2]+dxC[0]); 
  diffOut[3] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[11]+((-1.0*dxC[2])-1.0*dxC[1]-1.0*dxC[0])*phiC[3]+dxC[0]*bcVals[2]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[11]+bcVals[2]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = -0.5*(bcVals[11]-2.0*phiC[3]+bcVals[2]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = -0.5*(bcVals[11]+bcVals[2]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = -0.5*(bcVals[11]-2.0*phiC[3]+bcVals[2]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = -0.5*(bcVals[17]-2.0*phiC[2]+bcVals[2]); 
  diffOut[3] = -0.5*(bcVals[17]-2.0*phiC[3]+bcVals[2]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = phiC[3]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = phiC[3]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = -0.5*(bcVals[17]-2.0*phiC[2]+bcVals[2]); 
  diffOut[3] = -0.5*(bcVals[17]-2.0*phiC[3]+bcVals[2]); 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = phiC[3]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxDirichletUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[2]; 
  diffOut[1] = phiC[1]-1.0*bcVals[2]; 
  diffOut[2] = phiC[2]-1.0*bcVals[2]; 
  diffOut[3] = phiC[3]-1.0*bcVals[2]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.02777777777777778*((9.0*rdx2SqVol[2]-3.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[17]+((-3.0*rdx2SqVol[2])+9.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[11]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(16.0*phiC[2]+2.0*phiUxLz[1]+2.0*phiUxLy[1]+4.0*phiLz[1]+4.0*phiLy[1]-8.0*phiC[1]+8.0*phiUxLz[0]+2.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]-32.0*phiC[0])*rdx2SqVol[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-36.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLz[1]+2.0*phiUxLy[1]+4.0*phiLz[1]+4.0*phiLy[1]+16.0*phiC[1]-4.0*phiUxLz[0]+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]-16.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-32.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-2.0*rdx2SqVol[0]*phiLz[1]-2.0*rdx2SqVol[0]*phiLy[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUxLz[0]+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]+32.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLz[1]-1.0*phiUxLy[1]-2.0*phiLz[1]-2.0*phiLy[1]+4.0*phiC[1]-4.0*phiUxLz[0]-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-1.0*phiUxLy[1]-2.0*phiLz[1]-2.0*phiLy[1]-8.0*phiC[1]+2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUxLz[1]-1.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLz[1]-1.0*phiUxLy[1]-2.0*phiLz[1]-2.0*phiLy[1]+4.0*phiC[1]-4.0*phiUxLz[0]-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-1.0*phiUxLy[1]-2.0*phiLz[1]-2.0*phiLy[1]-8.0*phiC[1]+2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUxLz[1]-1.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*bcVals[11])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[17]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+phiUx[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-2.0*phiC[2]+2.0*phiUx[1]+4.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUx[1])-2.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_LxNeumannUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+phiUx[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUx[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-2.0*phiC[2]+2.0*phiUx[1]+4.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUx[1])-2.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUx[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUx[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+5.0*rdx2SqVol[0])*bcVals[17]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[0])*bcVals[10]-2.0*rdx2SqVol[1]*bcVals[9])*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1]-4.0*rdx2SqVol[1]*phiC[3])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUx[3])-4.0*rdx2SqVol[1]*phiC[3]+((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+phiUx[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-2.0*phiC[2]+2.0*phiUx[1]+4.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUx[1])-2.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUx[3])-8.0*rdx2SqVol[1]*phiC[3]+((-2.0*phiUx[1])-4.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_LxNeumannUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiUx[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+(4.0*phiUx[2]+8.0*phiC[2]+phiUxLz[1]+phiUxLy[1]-2.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]-4.0*phiC[1]+4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiUx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(phiUxLz[1]+phiUxLy[1]+4.0*phiUx[1]+2.0*phiLz[1]+2.0*phiLy[1]+8.0*phiC[1]-2.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUxLz[1]+rdx2SqVol[0]*phiUxLy[1]+4.0*rdx2SqVol[0]*phiUx[1]-1.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(phiUx[2]+2.0*phiC[2]+2.0*phiUxLz[1]-4.0*phiUx[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiUx[2]+(2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUxLz[1])-4.0*phiUx[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLz[1]+8.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiUx[3])-4.0*rdx2SqVol[1]*phiC[3]+((-4.0*phiUx[1])-8.0*phiC[1])*rdx2SqVol[1])*bcVals[9]))/bcVals[10]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2]-1.0*phiUxLy[1]+phiUx[1]-2.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUx[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*phiUxLy[1]+phiUx[1]+4.0*phiLy[1]+2.0*phiC[1]+phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUxLy[1]+rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUx[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUx[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUx[2])-2.0*phiC[2]+2.0*phiUx[1]+4.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*phiUx[1])-2.0*phiC[1]+phiUx[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUx[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiUx[3])-8.0*rdx2SqVol[1]*phiC[3]+((-2.0*phiUx[1])-4.0*phiC[1])*rdx2SqVol[1])*bcVals[9])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUx[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUx[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.02777777777777778*((9.0*bcVals[1]*rdx2SqVol[2]-3.0*bcVals[1]*rdx2SqVol[1]+9.0*rdx2SqVol[0]*bcVals[1])*bcVals[17]+((-3.0*bcVals[1]*rdx2SqVol[2])+9.0*bcVals[1]*rdx2SqVol[1]+9.0*rdx2SqVol[0]*bcVals[1])*bcVals[11]+(4.0*bcVals[1]*rdx2SqVol[2]+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(16.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]+2.0*bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiLz[1]+4.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(8.0*phiUxLz[0]+2.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]-32.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-36.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLz[1]+2.0*bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiLz[1]+4.0*bcVals[1]*phiLy[1]+16.0*bcVals[1]*phiC[1]+((-4.0*phiUxLz[0])+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]-16.0*phiUx[0]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-32.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(8.0*phiUxLz[0]+2.0*phiUxLyLz[0]+8.0*phiUxLy[0]+32.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]-32.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+16.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*((bcVals[1]*rdx2SqVol[2]-5.0*bcVals[1]*rdx2SqVol[1]-5.0*rdx2SqVol[0]*bcVals[1])*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLz[1]-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLz[1]-2.0*bcVals[1]*phiLy[1]+4.0*bcVals[1]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLz[1]-2.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiLz[1]+rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+(3.0*bcVals[1]*rdx2SqVol[1]+3.0*rdx2SqVol[0]*bcVals[1])*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*((bcVals[1]*rdx2SqVol[2]-5.0*bcVals[1]*rdx2SqVol[1]-5.0*rdx2SqVol[0]*bcVals[1])*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]-2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLz[1]-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLz[1]-2.0*bcVals[1]*phiLy[1]+4.0*bcVals[1]*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]+2.0*phiUxLy[0]+8.0*phiUx[0]-8.0*phiLz[0]-2.0*phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]+18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLz[1]-2.0*bcVals[1]*phiLy[1]-8.0*bcVals[1]*phiC[1]+(2.0*phiUxLz[0]-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]+8.0*phiUx[0]+4.0*phiLz[0]-2.0*phiLyLz[0]-8.0*phiLy[0]+16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiLz[1]+rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[0]*rdx2SqVol[0])*phiC[1]+((-4.0*phiUxLz[0])-1.0*phiUxLyLz[0]-4.0*phiUxLy[0]-16.0*phiUx[0]+4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]-8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = phiC[1]-1.0*bcVals[11]; 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+((3.0*bcVals[1]*rdx2SqVol[1]+3.0*rdx2SqVol[0]*bcVals[1])*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[16]+((-2.0*bcVals[1]*rdx2SqVol[2]*bcVals[11])-4.0*bcVals[1]*rdx2SqVol[2]*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2])*rdx2SqVol[2])*bcVals[15]))/(bcVals[1]*bcVals[16]); 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((5.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+5.0*rdx2SqVol[0]*bcVals[1])*bcVals[17]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*((3.0*bcVals[1]*rdx2SqVol[2]+3.0*rdx2SqVol[0]*bcVals[1])*bcVals[17]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((bcVals[1]*rdx2SqVol[2]+bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[3]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(4.0*bcVals[1]*phiUx[2]+8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(2.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+(4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(bcVals[1]*phiUx[2]+2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+((-1.0*bcVals[1]*rdx2SqVol[2])+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[3] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-4.0*bcVals[1]*rdx2SqVol[2])-4.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-1.0*bcVals[1]*phiUx[2])-2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUx[1])-2.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((bcVals[1]*rdx2SqVol[2]+bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[3]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(4.0*bcVals[1]*phiUx[2]+8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(2.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+(4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(bcVals[1]*phiUx[2]+2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+(((-1.0*bcVals[1]*rdx2SqVol[2])+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[16]+((-2.0*bcVals[1]*rdx2SqVol[2]*phiUx[3])-4.0*bcVals[1]*rdx2SqVol[2]*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2])*rdx2SqVol[2])*bcVals[15]))/(bcVals[1]*bcVals[16]); 
  diffOut[3] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-4.0*bcVals[1]*rdx2SqVol[2])-4.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-1.0*bcVals[1]*phiUx[2])-2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUx[1])-2.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[16]+((-4.0*bcVals[1]*rdx2SqVol[2]*phiUx[3])-8.0*bcVals[1]*rdx2SqVol[2]*phiC[3]+((-2.0*bcVals[1]*phiUx[2])-4.0*bcVals[1]*phiC[2])*rdx2SqVol[2])*bcVals[15]))/(bcVals[1]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((5.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+5.0*rdx2SqVol[0]*bcVals[1])*bcVals[17]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(((3.0*bcVals[1]*rdx2SqVol[2]+3.0*rdx2SqVol[0]*bcVals[1])*bcVals[10]-2.0*bcVals[1]*rdx2SqVol[1]*bcVals[9])*bcVals[17]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[10]+(((-4.0*bcVals[1]*phiUx[1])-8.0*bcVals[1]*phiC[1])*rdx2SqVol[1]-4.0*bcVals[1]*rdx2SqVol[1]*phiC[3])*bcVals[9]))/(bcVals[1]*bcVals[10]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((bcVals[1]*rdx2SqVol[2]+bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[3]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(4.0*bcVals[1]*phiUx[2]+8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((2.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+(4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(bcVals[1]*phiUx[2]+2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[10]+((-2.0*bcVals[1]*rdx2SqVol[1]*phiUx[3])-4.0*bcVals[1]*rdx2SqVol[1]*phiC[3]+((-4.0*bcVals[1]*phiUx[1])-8.0*bcVals[1]*phiC[1])*rdx2SqVol[1])*bcVals[9]))/(bcVals[1]*bcVals[10]); 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+((-1.0*bcVals[1]*rdx2SqVol[2])+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[3] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-4.0*bcVals[1]*rdx2SqVol[2])-4.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-1.0*bcVals[1]*phiUx[2])-2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUx[1])-2.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[10]+((-4.0*bcVals[1]*rdx2SqVol[1]*phiUx[3])-8.0*bcVals[1]*rdx2SqVol[1]*phiC[3]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1])*rdx2SqVol[1])*bcVals[9]))/(bcVals[1]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_LxRobinUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((bcVals[1]*rdx2SqVol[2]+bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[3]+(2.0*bcVals[1]*rdx2SqVol[2]+2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(4.0*bcVals[1]*phiUx[2]+8.0*bcVals[1]*phiC[2]+bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]-2.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]-4.0*bcVals[1]*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]-2.0*phiUxLy[0]-8.0*phiUx[0]+8.0*phiLz[0]+2.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]*bcVals[1]-2.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-4.0*bcVals[1]*rdx2SqVol[1])-4.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(bcVals[1]*phiUxLz[1]+bcVals[1]*phiUxLy[1]+4.0*bcVals[1]*phiUx[1]+2.0*bcVals[1]*phiLz[1]+2.0*bcVals[1]*phiLy[1]+8.0*bcVals[1]*phiC[1]+((-2.0*phiUxLz[0])+phiUxLyLz[0]+4.0*phiUxLy[0]-8.0*phiUx[0]-4.0*phiLz[0]+2.0*phiLyLz[0]+8.0*phiLy[0]-16.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+4.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]-1.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(4.0*bcVals[0]*rdx2SqVol[0]-4.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(4.0*phiUxLz[0]+phiUxLyLz[0]+4.0*phiUxLy[0]+16.0*phiUx[0]-4.0*phiLz[0]-1.0*phiLyLz[0]-4.0*phiLy[0]-16.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*phiC[0]*rdx2SqVol[0]))/bcVals[1]; 
  diffOut[1] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+((2.0*bcVals[1]*rdx2SqVol[2]-1.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+(4.0*bcVals[1]*rdx2SqVol[2]-2.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+(bcVals[1]*phiUx[2]+2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUxLz[1]-4.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]-2.0*phiUx[0]+2.0*phiLz[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(bcVals[1]*rdx2SqVol[1]+rdx2SqVol[0]*bcVals[1])*phiUx[2]+(2.0*bcVals[1]*rdx2SqVol[1]-1.0*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUxLz[1])-4.0*bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLz[1]-8.0*bcVals[1]*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]+2.0*phiLz[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLz[1]+8.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLz[1]+(8.0*bcVals[0]*rdx2SqVol[0]-8.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLz[0]+4.0*phiUx[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[10]+((-2.0*bcVals[1]*rdx2SqVol[1]*phiUx[3])-4.0*bcVals[1]*rdx2SqVol[1]*phiC[3]+((-4.0*bcVals[1]*phiUx[1])-8.0*bcVals[1]*phiC[1])*rdx2SqVol[1])*bcVals[9]))/(bcVals[1]*bcVals[10]); 
  diffOut[2] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[17]+(((-1.0*bcVals[1]*rdx2SqVol[2])+2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-2.0*bcVals[1]*rdx2SqVol[2])+4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2]-1.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]-2.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]+2.0*phiLy[0]+8.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]*bcVals[1]-4.0*bcVals[1]*rdx2SqVol[1])*phiUx[2]+((-8.0*bcVals[1]*rdx2SqVol[1])-8.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+(2.0*bcVals[1]*phiUxLy[1]+bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiLy[1]+2.0*bcVals[1]*phiC[1]+(phiUxLy[0]-2.0*phiUx[0]+2.0*phiLy[0]-4.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUxLy[1]+rdx2SqVol[0]*bcVals[1]*phiUx[1]-2.0*rdx2SqVol[0]*bcVals[1]*phiLy[1]+(2.0*bcVals[0]*rdx2SqVol[0]-1.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUxLy[0]+4.0*phiUx[0]-1.0*phiLy[0]-4.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[16]+((-2.0*bcVals[1]*rdx2SqVol[2]*phiUx[3])-4.0*bcVals[1]*rdx2SqVol[2]*phiC[3]+((-4.0*bcVals[1]*phiUx[2])-8.0*bcVals[1]*phiC[2])*rdx2SqVol[2])*bcVals[15]))/(bcVals[1]*bcVals[16]); 
  diffOut[3] = (0.05555555555555555*(18.0*bcVals[1]*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*bcVals[1]*rdx2SqVol[1]*bcVals[11]+(((-2.0*bcVals[1]*rdx2SqVol[2])-2.0*bcVals[1]*rdx2SqVol[1]+4.0*rdx2SqVol[0]*bcVals[1])*phiUx[3]+((-4.0*bcVals[1]*rdx2SqVol[2])-4.0*bcVals[1]*rdx2SqVol[1]-4.0*rdx2SqVol[0]*bcVals[1]+8.0*bcVals[0]*rdx2SqVol[0])*phiC[3]+((-1.0*bcVals[1]*phiUx[2])-2.0*bcVals[1]*phiC[2]+2.0*bcVals[1]*phiUx[1]+4.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[2]+(2.0*bcVals[1]*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1])*phiUx[2]+(4.0*bcVals[1]*rdx2SqVol[1]-2.0*rdx2SqVol[0]*bcVals[1]+4.0*bcVals[0]*rdx2SqVol[0])*phiC[2]-18.0*rdx2SqVol[0]*bcVals[2]+((-1.0*bcVals[1]*phiUx[1])-2.0*bcVals[1]*phiC[1]+(phiUx[0]+2.0*phiC[0])*bcVals[1])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*bcVals[1]*phiUx[1]+(4.0*bcVals[0]*rdx2SqVol[0]-2.0*rdx2SqVol[0]*bcVals[1])*phiC[1]+(phiUx[0]-1.0*phiC[0])*rdx2SqVol[0]*bcVals[1]+2.0*bcVals[0]*phiC[0]*rdx2SqVol[0])*bcVals[10]+((-4.0*bcVals[1]*rdx2SqVol[1]*phiUx[3])-8.0*bcVals[1]*rdx2SqVol[1]*phiC[3]+((-2.0*bcVals[1]*phiUx[1])-4.0*bcVals[1]*phiC[1])*rdx2SqVol[1])*bcVals[9])*bcVals[16]+((-4.0*bcVals[1]*rdx2SqVol[2]*phiUx[3])-8.0*bcVals[1]*rdx2SqVol[2]*phiC[3]+((-2.0*bcVals[1]*phiUx[2])-4.0*bcVals[1]*phiC[2])*rdx2SqVol[2])*bcVals[10]*bcVals[15]))/(bcVals[1]*bcVals[10]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[8]-1.0*phiC[0]*dxC[2]-1.0*phiC[0]*dxC[1]))/(dxC[2]+dxC[1]); 
  diffOut[1] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[8]+dxC[0]*bcVals[5]-1.0*phiC[1]*dxC[2]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[1]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[1])-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*bcVals[5])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(((-4.0*phiC[1])-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[1]*bcVals[5])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(((-4.0*phiC[1])-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[1]*bcVals[5])*bcVals[6])*bcVals[13]+(((-4.0*phiC[1])-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*bcVals[5])*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[0]); 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[8]-2.0*phiC[1]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+(((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+(((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[7]*bcVals[14]+18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[8]+(((-2.0*phiUz[1])-1.0*phiUyUz[1]+phiUy[1]+2.0*phiC[1]-8.0*phiUz[0]-4.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(phiUz[1]-1.0*phiUyUz[1]-2.0*phiUy[1]+2.0*phiC[1]+4.0*phiUz[0]-4.0*phiUyUz[0]-8.0*phiUy[0]+phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiUyUz[1]-2.0*rdx2SqVol[0]*phiUy[1]-4.0*rdx2SqVol[0]*phiC[1]+(4.0*phiUz[0]+2.0*phiUyUz[0]+4.0*phiUy[0]-2.0*phiLxUz[0]-1.0*phiLxUyUz[0]-2.0*phiLxUy[0]-4.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*phiUz[1])-4.0*phiC[1]-4.0*phiUz[0]-8.0*phiC[0])*rdx2SqVol[1]*bcVals[6])*bcVals[13]+((-2.0*phiUy[1])-4.0*phiC[1]-4.0*phiUy[0]-8.0*phiC[0])*rdx2SqVol[2]*bcVals[7]*bcVals[12]))/(bcVals[7]*bcVals[13]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[7]*bcVals[14]+(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-4.0*phiUz[1])-2.0*phiUyUz[1]+2.0*phiUy[1]+4.0*phiC[1]-2.0*phiUz[0]-1.0*phiUyUz[0]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*phiUz[1]-2.0*phiUyUz[1]-4.0*phiUy[1]+4.0*phiC[1]+phiUz[0]-1.0*phiUyUz[0]-2.0*phiUy[0]+2.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiUyUz[1]+2.0*rdx2SqVol[0]*phiUy[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUz[0])-1.0*phiUyUz[0]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+(4.0*rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiUyUz[1]+4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+((-4.0*phiUz[1])-8.0*phiC[1]-2.0*phiUz[0]-4.0*phiC[0])*rdx2SqVol[1]*bcVals[4]*bcVals[6])*bcVals[13]+((-4.0*phiUy[1])-8.0*phiC[1]-2.0*phiUy[0]-4.0*phiC[0])*rdx2SqVol[2]*bcVals[4]*bcVals[7]*bcVals[12]))/(bcVals[4]*bcVals[7]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -(1.0*(dxC[1]*bcVals[8]+dxC[0]*bcVals[5]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[1]))/(dxC[1]+dxC[0]); 
  diffOut[2] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[8]+((-1.0*dxC[2])-1.0*dxC[1])*phiC[2]))/(dxC[2]+dxC[1]); 
  diffOut[3] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[8]+dxC[0]*bcVals[5]+((-1.0*dxC[2])-1.0*dxC[1]-1.0*dxC[0])*phiC[3]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = -0.5*(bcVals[8]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.02777777777777778*((9.0*rdx2SqVol[2]+9.0*rdx2SqVol[1]-3.0*rdx2SqVol[0])*bcVals[17]-36.0*rdx2SqVol[1]*bcVals[8]+((-3.0*rdx2SqVol[2])+9.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(16.0*phiC[2]+2.0*phiUyLz[1]+4.0*phiLz[1]+2.0*phiLxUy[1]+4.0*phiLx[1]-8.0*phiC[1]+8.0*phiUyLz[0]-16.0*phiUy[0]+16.0*phiLz[0]+2.0*phiLxUyLz[0]-4.0*phiLxUy[0]+4.0*phiLxLz[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUyLz[1]-2.0*phiLz[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUyLz[0]+32.0*phiUy[0]-8.0*phiLz[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUyLz[0])-16.0*phiUy[0]-8.0*phiLz[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]+4.0*phiLxLz[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*bcVals[5])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.02777777777777778*((9.0*rdx2SqVol[2]+9.0*rdx2SqVol[1]-3.0*rdx2SqVol[0])*bcVals[7]*bcVals[17]-36.0*rdx2SqVol[1]*bcVals[8]+(((-3.0*rdx2SqVol[2])+9.0*rdx2SqVol[1]+9.0*rdx2SqVol[0])*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(16.0*phiC[2]+2.0*phiUyLz[1]+4.0*phiLz[1]+2.0*phiLxUy[1]+4.0*phiLx[1]-8.0*phiC[1]+8.0*phiUyLz[0]-16.0*phiUy[0]+16.0*phiLz[0]+2.0*phiLxUyLz[0]-4.0*phiLxUy[0]+4.0*phiLxLz[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiUyLz[1]-2.0*phiLz[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-8.0*phiC[1]+8.0*phiUyLz[0]+32.0*phiUy[0]-8.0*phiLz[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUyLz[0])-16.0*phiUy[0]-8.0*phiLz[0]+2.0*phiLxUyLz[0]+8.0*phiLxUy[0]+4.0*phiLxLz[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(8.0*phiC[1]+16.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((rdx2SqVol[2]-5.0*rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+((3.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6])*bcVals[16]+((-2.0*rdx2SqVol[2]*bcVals[5])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[2]); 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = phiC[3]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = phiC[3]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+2.0*phiLz[1]+phiLxUy[1]+2.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-1.0*phiLz[1]+phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+2.0*phiLz[1]+phiLxUy[1]+2.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-1.0*phiLz[1]+phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(2.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiC[2]+(8.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2]+((-8.0*phiC[1])-4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(8.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+2.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 

}

void ConstDiffusionFEM3xSer_UxNeumannLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2]+((-8.0*phiC[1])-4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(8.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+2.0*phiC[0])*rdx2SqVol[1])*bcVals[6])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[2]); 
  diffOut[3] = -0.5*(bcVals[17]+bcVals[8]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = phiC[3]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[8]; 
  diffOut[1] = phiC[1]-1.0*bcVals[8]; 
  diffOut[2] = phiC[2]-1.0*bcVals[8]; 
  diffOut[3] = phiC[3]-1.0*bcVals[8]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+2.0*phiLz[1]+phiLxUy[1]+2.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-1.0*phiLz[1]+phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+18.0*rdx2SqVol[0]*bcVals[5]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUy[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]-18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[15]))/bcVals[16]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8])+18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[4]*bcVals[15]))/(bcVals[4]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = (0.05555555555555555*((5.0*rdx2SqVol[2]+5.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]+phiUyLz[1]-2.0*phiUy[1]+2.0*phiLz[1]+phiLxUy[1]+2.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]-8.0*phiUy[0]+8.0*phiLz[0]+phiLxUyLz[0]-2.0*phiLxUy[0]+2.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+(phiUyLz[1]+4.0*phiUy[1]-1.0*phiLz[1]+phiLxUy[1]-1.0*phiLx[1]-4.0*phiC[1]+4.0*phiUyLz[0]+16.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]-1.0*phiLxLz[0]-4.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLxUy[1]+2.0*rdx2SqVol[0]*phiLx[1]+8.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUyLz[0])-8.0*phiUy[0]-4.0*phiLz[0]+phiLxUyLz[0]+4.0*phiLxUy[0]+2.0*phiLxLz[0]+8.0*phiLx[0]-16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(2.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = (0.05555555555555555*(((3.0*rdx2SqVol[2]+3.0*rdx2SqVol[1])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+(18.0*rdx2SqVol[0]*bcVals[5]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiUyLz[1]-4.0*phiUy[1]+4.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]-2.0*phiUy[0]+2.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUyLz[1]+8.0*phiUy[1]-2.0*phiLz[1]-8.0*phiC[1]+phiUyLz[0]+4.0*phiUy[0]-1.0*phiLz[0]-4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-8.0*rdx2SqVol[0]*phiC[1]+(phiUyLz[0]+4.0*phiUy[0]+2.0*phiLz[0]+8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-4.0*rdx2SqVol[0]*phiUy[1])-8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiC[2]+(8.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 
  diffOut[2] = phiC[2]-1.0*bcVals[17]; 
  diffOut[3] = phiC[3]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2]+((-8.0*phiC[1])-4.0*phiC[0])*rdx2SqVol[1])*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[7]*bcVals[17]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+(18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+(8.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+2.0*phiC[0])*rdx2SqVol[1])*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 

}

void ConstDiffusionFEM3xSer_UxRobinLyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[8]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]-1.0*phiUyLz[1]+2.0*phiUy[1]-2.0*phiLz[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]+8.0*phiUy[0]-8.0*phiLz[0]-1.0*phiLxUyLz[0]+2.0*phiLxUy[0]-2.0*phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUyLz[1])-4.0*phiUy[1]+phiLz[1]-1.0*phiLxUy[1]+phiLx[1]+4.0*phiC[1]-4.0*phiUyLz[0]-16.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUyLz[1]-4.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLxUy[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUyLz[0]+8.0*phiUy[0]+4.0*phiLz[0]-1.0*phiLxUyLz[0]-4.0*phiLxUy[0]-2.0*phiLxLz[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+((-2.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2]+((-4.0*phiC[1])-8.0*phiC[0])*rdx2SqVol[1])*bcVals[6]))/bcVals[7]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]-2.0*phiUyLz[1]+4.0*phiUy[1]-4.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]+2.0*phiUy[0]-2.0*phiLz[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUy[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUyLz[1])-8.0*phiUy[1]+2.0*phiLz[1]+8.0*phiC[1]-1.0*phiUyLz[0]-4.0*phiUy[0]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUyLz[1]+4.0*rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLz[1]+8.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUyLz[0])-4.0*phiUy[0]-2.0*phiLz[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUy[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2]+((-8.0*phiC[1])-4.0*phiC[0])*rdx2SqVol[1])*bcVals[4]*bcVals[6]))/(bcVals[4]*bcVals[7]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[8])+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[3]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2]+phiUy[1]-1.0*phiLxUy[1]-2.0*phiLx[1]+2.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]+2.0*phiLx[0]+8.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiUy[2]+((-8.0*rdx2SqVol[1])-8.0*rdx2SqVol[0])*phiC[2]+(phiUy[1]+2.0*phiLxUy[1]-2.0*phiLx[1]-1.0*phiC[1]+4.0*phiUy[0]+phiLxUy[0]-1.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUy[1]+2.0*rdx2SqVol[0]*phiLxUy[1]+4.0*rdx2SqVol[0]*phiLx[1]+2.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiUy[0])+phiLxUy[0]+2.0*phiLx[0]-4.0*phiC[0])*rdx2SqVol[0])*bcVals[7]+(4.0*rdx2SqVol[1]*phiC[3]+8.0*rdx2SqVol[1]*phiC[2]+(2.0*phiC[1]+4.0*phiC[0])*rdx2SqVol[1])*bcVals[6])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiUy[3])-4.0*rdx2SqVol[2]*phiC[3]+((-4.0*phiUy[2])-8.0*phiC[2])*rdx2SqVol[2])*bcVals[7]*bcVals[15]))/(bcVals[7]*bcVals[16]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[7]*bcVals[17]+((-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[8])+(18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUy[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUy[2])-2.0*phiC[2]+2.0*phiUy[1]+4.0*phiC[1]+phiUy[0]+2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUy[1]-2.0*phiC[1]+phiUy[0]-1.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUy[1]-2.0*rdx2SqVol[0]*phiC[1]+(phiUy[0]+2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiUy[3]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+((-2.0*rdx2SqVol[0]*phiUy[1])-4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[7]+(8.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiC[2]+(4.0*phiC[1]+2.0*phiC[0])*rdx2SqVol[1])*bcVals[4]*bcVals[6])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiUy[3])-8.0*rdx2SqVol[2]*phiC[3]+((-2.0*phiUy[2])-4.0*phiC[2])*rdx2SqVol[2])*bcVals[4]*bcVals[7]*bcVals[15]))/(bcVals[4]*bcVals[7]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -(1.0*(dxC[2]*bcVals[14]+dxC[0]*bcVals[5]-1.0*phiC[1]*dxC[2]-1.0*dxC[0]*phiC[1]))/(dxC[2]+dxC[0]); 
  diffOut[2] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[11]+((-1.0*dxC[2])-1.0*dxC[1])*phiC[2]))/(dxC[2]+dxC[1]); 
  diffOut[3] = -(1.0*(dxC[2]*bcVals[14]+dxC[1]*bcVals[11]+dxC[0]*bcVals[5]+((-1.0*dxC[2])-1.0*dxC[1]-1.0*dxC[0])*phiC[3]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.02777777777777778*(36.0*rdx2SqVol[2]*bcVals[14]+((-9.0*rdx2SqVol[2])-9.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-9.0*rdx2SqVol[2])+3.0*rdx2SqVol[1]-9.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]-2.0*phiLyUz[1]+2.0*phiLy[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-32.0*phiUz[0]-8.0*phiLyUz[0]+8.0*phiLy[0]-8.0*phiLxUz[0]-2.0*phiLxLyUz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-16.0*rdx2SqVol[1])*phiC[2]+((-2.0*phiLyUz[1])-4.0*phiLy[1]-2.0*phiLxUz[1]-4.0*phiLx[1]+8.0*phiC[1]+16.0*phiUz[0]-8.0*phiLyUz[0]-16.0*phiLy[0]+4.0*phiLxUz[0]-2.0*phiLxLyUz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLyUz[1]-4.0*rdx2SqVol[0]*phiLy[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(16.0*phiUz[0]+4.0*phiLyUz[0]+8.0*phiLy[0]-8.0*phiLxUz[0]-2.0*phiLxLyUz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -0.5*(bcVals[11]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.02777777777777778*(36.0*rdx2SqVol[2]*bcVals[14]+(((-9.0*rdx2SqVol[2])-9.0*rdx2SqVol[1]+3.0*rdx2SqVol[0])*bcVals[11]+((-9.0*rdx2SqVol[2])+3.0*rdx2SqVol[1]-9.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(8.0*phiC[2]-2.0*phiLyUz[1]+2.0*phiLy[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+8.0*phiC[1]-32.0*phiUz[0]-8.0*phiLyUz[0]+8.0*phiLy[0]-8.0*phiLxUz[0]-2.0*phiLxLyUz[0]+2.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[0]-16.0*rdx2SqVol[1])*phiC[2]+((-2.0*phiLyUz[1])-4.0*phiLy[1]-2.0*phiLxUz[1]-4.0*phiLx[1]+8.0*phiC[1]+16.0*phiUz[0]-8.0*phiLyUz[0]-16.0*phiLy[0]+4.0*phiLxUz[0]-2.0*phiLxLyUz[0]-4.0*phiLxLy[0]+8.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLyUz[1]-4.0*rdx2SqVol[0]*phiLy[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-16.0*rdx2SqVol[0]*phiC[1]+(16.0*phiUz[0]+4.0*phiLyUz[0]+8.0*phiLy[0]-8.0*phiLxUz[0]-2.0*phiLxLyUz[0]-4.0*phiLxLy[0]-16.0*phiLx[0]+32.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-8.0*phiC[2])-8.0*phiC[1]-16.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -0.5*(bcVals[11]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-5.0*rdx2SqVol[2])+rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+(phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-5.0*rdx2SqVol[2])+rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+(phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[1]); 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = -0.5*(bcVals[14]+bcVals[5]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-5.0*rdx2SqVol[2])+rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+(((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+(phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*bcVals[5]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-5.0*rdx2SqVol[2])+rdx2SqVol[1]-5.0*rdx2SqVol[0])*bcVals[5]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+((-1.0*phiLyUz[1])-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+(((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[0])*bcVals[5]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+(phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*bcVals[5]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[2]); 
  diffOut[3] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-5.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[1])*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-5.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[1])*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = phiC[3]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])-18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-2.0*phiC[0])*rdx2SqVol[2]-8.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = phiC[3]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*phiUz[3]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*rdx2SqVol[1]*phiUz[3]+8.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiUz[2]+4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+(((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*phiUz[3]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-18.0*rdx2SqVol[0]*bcVals[5])+((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(4.0*rdx2SqVol[1]*phiUz[3]+8.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiUz[2]+4.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-2.0*phiC[0])*rdx2SqVol[2]-8.0*rdx2SqVol[2]*phiC[3])*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[2]); 
  diffOut[3] = -0.5*(bcVals[14]+bcVals[11]-2.0*phiC[3]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-5.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+(((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[1])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3])*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-5.0*rdx2SqVol[2])-5.0*rdx2SqVol[1]+rdx2SqVol[0])*bcVals[11]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+((((-3.0*rdx2SqVol[2])-3.0*rdx2SqVol[1])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3])*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+((2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+(phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = phiC[3]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]-18.0*rdx2SqVol[0]*bcVals[5]+(((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(2.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11])-18.0*rdx2SqVol[0]*bcVals[5]+(((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(2.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-2.0*phiC[0])*rdx2SqVol[2]-8.0*rdx2SqVol[2]*phiC[3])*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinLzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = phiC[0]-1.0*bcVals[14]; 
  diffOut[1] = phiC[1]-1.0*bcVals[14]; 
  diffOut[2] = phiC[2]-1.0*bcVals[14]; 
  diffOut[3] = phiC[3]-1.0*bcVals[14]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinLzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]-18.0*rdx2SqVol[0]*bcVals[5]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3]))/bcVals[4]; 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*phiUz[3]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[10]*bcVals[14]-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(2.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[10]+(4.0*rdx2SqVol[1]*phiUz[3]+8.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiUz[2]+4.0*rdx2SqVol[1]*phiC[2])*bcVals[4]*bcVals[9]))/(bcVals[4]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinLzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[14]+(((-1.0*rdx2SqVol[2])-1.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiUz[3]+(rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+((-4.0*phiUz[2])+4.0*phiC[2]-4.0*phiUz[1]-1.0*phiLyUz[1]+phiLy[1]-1.0*phiLxUz[1]+phiLx[1]+4.0*phiC[1]-16.0*phiUz[0]-4.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiUz[2]+(4.0*rdx2SqVol[0]-8.0*rdx2SqVol[1])*phiC[2]+(2.0*phiUz[1]-1.0*phiLyUz[1]-2.0*phiLy[1]-1.0*phiLxUz[1]-2.0*phiLx[1]+4.0*phiC[1]+8.0*phiUz[0]-4.0*phiLyUz[0]-8.0*phiLy[0]+2.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiUz[1]-1.0*rdx2SqVol[0]*phiLyUz[1]-2.0*rdx2SqVol[0]*phiLy[1]-1.0*rdx2SqVol[0]*phiLxUz[1]-2.0*rdx2SqVol[0]*phiLx[1]-8.0*rdx2SqVol[0]*phiC[1]+(8.0*phiUz[0]+2.0*phiLyUz[0]+4.0*phiLy[0]-4.0*phiLxUz[0]-1.0*phiLxLyUz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-8.0*phiC[0])*rdx2SqVol[2]-2.0*rdx2SqVol[2]*phiC[3])*bcVals[12]))/bcVals[13]; 
  diffOut[1] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[14]+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiUz[2])+phiC[2]-8.0*phiUz[1]-2.0*phiLyUz[1]+2.0*phiLy[1]+8.0*phiC[1]-4.0*phiUz[0]-1.0*phiLyUz[0]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+((-1.0*rdx2SqVol[1])-1.0*rdx2SqVol[0])*phiUz[2]+((-2.0*rdx2SqVol[1])-2.0*rdx2SqVol[0])*phiC[2]+(4.0*phiUz[1]-2.0*phiLyUz[1]-4.0*phiLy[1]+8.0*phiC[1]+2.0*phiUz[0]-1.0*phiLyUz[0]-2.0*phiLy[0]+4.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiUz[1]+rdx2SqVol[0]*phiLyUz[1]+2.0*rdx2SqVol[0]*phiLy[1]+8.0*rdx2SqVol[0]*phiC[1]+((-4.0*phiUz[0])-1.0*phiLyUz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+2.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(4.0*rdx2SqVol[0]*phiUz[1]+8.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[13]+(((-2.0*phiC[2])-8.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[4]*bcVals[12]))/(bcVals[4]*bcVals[13]); 
  diffOut[2] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[11])+(((-2.0*rdx2SqVol[2])+rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+((-8.0*phiUz[2])+8.0*phiC[2]-1.0*phiUz[1]-2.0*phiLxUz[1]+2.0*phiLx[1]+phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiUz[2]+(8.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiUz[1])+phiLxUz[1]+2.0*phiLx[1]-2.0*phiC[1]-4.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiUz[1]-2.0*rdx2SqVol[0]*phiLxUz[1]-4.0*rdx2SqVol[0]*phiLx[1]-2.0*rdx2SqVol[0]*phiC[1]+(2.0*phiUz[0]-1.0*phiLxUz[0]-2.0*phiLx[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+(2.0*rdx2SqVol[1]*phiUz[3]+4.0*rdx2SqVol[1]*phiC[3]+4.0*rdx2SqVol[1]*phiUz[2]+8.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[13]+(((-8.0*phiC[2])-2.0*phiC[1]-4.0*phiC[0])*rdx2SqVol[2]-4.0*rdx2SqVol[2]*phiC[3])*bcVals[10]*bcVals[12]))/(bcVals[10]*bcVals[13]); 
  diffOut[3] = -(0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[10]*bcVals[14]+((-18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11])+((-18.0*rdx2SqVol[0]*bcVals[5])+(((-4.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiUz[3]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+((-2.0*phiUz[2])+2.0*phiC[2]-2.0*phiUz[1]+2.0*phiC[1]-1.0*phiUz[0]+phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiUz[2]+(2.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiUz[1])-4.0*phiC[1]-1.0*phiUz[0]-2.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiUz[1]+2.0*rdx2SqVol[0]*phiC[1]+((-1.0*phiUz[0])-2.0*phiC[0])*rdx2SqVol[0])*bcVals[4]+4.0*rdx2SqVol[0]*bcVals[3]*phiUz[3]+8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]+(2.0*rdx2SqVol[0]*phiUz[1]+4.0*rdx2SqVol[0]*phiC[1])*bcVals[3])*bcVals[10]+(4.0*rdx2SqVol[1]*phiUz[3]+8.0*rdx2SqVol[1]*phiC[3]+2.0*rdx2SqVol[1]*phiUz[2]+4.0*rdx2SqVol[1]*phiC[2])*bcVals[4]*bcVals[9])*bcVals[13]+(((-4.0*phiC[2])-4.0*phiC[1]-2.0*phiC[0])*rdx2SqVol[2]-8.0*rdx2SqVol[2]*phiC[3])*bcVals[4]*bcVals[10]*bcVals[12]))/(bcVals[4]*bcVals[10]*bcVals[13]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -(1.0*(dxC[1]*bcVals[11]+dxC[0]*bcVals[5]+((-1.0*dxC[1])-1.0*dxC[0])*phiC[3]))/(dxC[1]+dxC[0]); 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = -(1.0*(dxC[2]*bcVals[17]+((-1.0*dxC[2])-1.0*dxC[0])*phiC[5]+dxC[0]*bcVals[5]))/(dxC[2]+dxC[0]); 
  diffOut[6] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[11]+((-1.0*dxC[2])-1.0*dxC[1])*phiC[6]))/(dxC[2]+dxC[1]); 
  diffOut[7] = -(1.0*(dxC[2]*bcVals[17]+dxC[1]*bcVals[11]+((-1.0*dxC[2])-1.0*dxC[1]-1.0*dxC[0])*phiC[7]+dxC[0]*bcVals[5]))/(dxC[2]+dxC[1]+dxC[0]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -0.5*(bcVals[11]+bcVals[5]-2.0*phiC[3]); 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = -0.5*(bcVals[11]-2.0*phiC[7]+bcVals[5]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = -0.5*(bcVals[11]+bcVals[5]-2.0*phiC[3]); 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = -0.5*(bcVals[11]-2.0*phiC[7]+bcVals[5]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = -0.5*(bcVals[17]-2.0*phiC[5]+bcVals[5]); 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = -0.5*(bcVals[17]-2.0*phiC[7]+bcVals[5]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[7] = phiC[7]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[7] = phiC[7]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = -0.5*(bcVals[17]-2.0*phiC[5]+bcVals[5]); 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = -0.5*(bcVals[17]-2.0*phiC[7]+bcVals[5]); 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[7] = phiC[7]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxDirichletUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = phiC[1]-1.0*bcVals[5]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = phiC[3]-1.0*bcVals[5]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = phiC[5]-1.0*bcVals[5]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 
  diffOut[7] = phiC[7]-1.0*bcVals[5]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[6]); 
  diffOut[7] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[7]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = phiC[7]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-2.0*rdx2SqVol[2]*phiC[6]-8.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = phiC[7]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = phiC[7]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[6] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[7] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[6]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0]); 

}

void ConstDiffusionFEM3xSer_UxNeumannUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-2.0*rdx2SqVol[2]*phiC[6]-8.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[6]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[16]+((-8.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-2.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-2.0*rdx2SqVol[1]*phiC[6]-8.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = phiC[7]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-2.0*rdx2SqVol[1]*phiC[6]-8.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[6]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[10]+((-8.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-2.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 

}

void ConstDiffusionFEM3xSer_UxNeumannUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = 0.05555555555555555*((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[6]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-2.0*rdx2SqVol[1]*phiC[6]-8.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[6]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-2.0*rdx2SqVol[2]*phiC[6]-8.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[6]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[4]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[10]+((-8.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-2.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[16]+((-8.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-2.0*rdx2SqVol[2]*phiC[4])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[6]); 
  diffOut[7] = -0.5*(bcVals[17]+bcVals[11]-2.0*phiC[7]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = phiC[7]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyDirichletUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = phiC[2]-1.0*bcVals[11]; 
  diffOut[3] = phiC[3]-1.0*bcVals[11]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+((((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[16]+((-4.0*rdx2SqVol[2]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[2]*bcVals[4]*phiC[6]-8.0*rdx2SqVol[2]*bcVals[4]*phiC[5]-4.0*rdx2SqVol[2]*bcVals[4]*phiC[4])*bcVals[15]))/(bcVals[4]*bcVals[16]); 
  diffOut[6] = phiC[6]-1.0*bcVals[11]; 
  diffOut[7] = phiC[7]-1.0*bcVals[11]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = phiC[7]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[6] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-2.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyNeumannUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = 0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+((((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[16]+((-4.0*rdx2SqVol[2]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[2]*bcVals[4]*phiC[6]-8.0*rdx2SqVol[2]*bcVals[4]*phiC[5]-4.0*rdx2SqVol[2]*bcVals[4]*phiC[4])*bcVals[15]))/(bcVals[4]*bcVals[16]); 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-2.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[16]+((-8.0*rdx2SqVol[2]*bcVals[4]*phiC[7])-4.0*rdx2SqVol[2]*bcVals[4]*phiC[6]-4.0*rdx2SqVol[2]*bcVals[4]*phiC[5]-2.0*rdx2SqVol[2]*bcVals[4]*phiC[4])*bcVals[15]))/(bcVals[4]*bcVals[16]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinUzDirichlet_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[10]+((-4.0*rdx2SqVol[1]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[1]*bcVals[4]*phiC[6]+((-8.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2])*bcVals[4])*bcVals[9]))/(bcVals[4]*bcVals[10]); 
  diffOut[4] = phiC[4]-1.0*bcVals[17]; 
  diffOut[5] = phiC[5]-1.0*bcVals[17]; 
  diffOut[6] = phiC[6]-1.0*bcVals[17]; 
  diffOut[7] = phiC[7]-1.0*bcVals[17]; 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinUzNeumann_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[10]+((-4.0*rdx2SqVol[1]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[1]*bcVals[4]*phiC[6]+((-8.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2])*bcVals[4])*bcVals[9]))/(bcVals[4]*bcVals[10]); 
  diffOut[4] = 0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[10]*bcVals[17]+18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-2.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[10]+((-8.0*rdx2SqVol[1]*bcVals[4]*phiC[7])-4.0*rdx2SqVol[1]*bcVals[4]*phiC[6]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2])*bcVals[4])*bcVals[9]))/(bcVals[4]*bcVals[10]); 

}

void ConstDiffusionFEM3xSer_UxRobinUyRobinUzRobin_P1(double **dx, const double *bcVals, double **phi, double *diffOut) 
{ 
  // dx:      cell lengths of cells pointed to by the stencil.
  // bcVals:  values to impose as BCs.
  // phi:     iterate cells pointed to by the stencil.
  // diffOut: diffusion term.

  double *dxC  = dx[0]; 

  double volFac = 0.125*dxC[0]*dxC[1]*dxC[2]; 

  double rdx2SqVol[3]; 
  rdx2SqVol[0] = volFac*4.0/(dxC[0]*dxC[0]); 
  rdx2SqVol[1] = volFac*4.0/(dxC[1]*dxC[1]); 
  rdx2SqVol[2] = volFac*4.0/(dxC[2]*dxC[2]); 

  double *phiC = phi[0]; 
  double *phiLx = phi[1]; 
  double *phiUx = phi[2]; 
  double *phiLy = phi[3]; 
  double *phiUy = phi[4]; 
  double *phiLxLy = phi[5]; 
  double *phiLxUy = phi[6]; 
  double *phiUxLy = phi[7]; 
  double *phiUxUy = phi[8]; 
  double *phiLz = phi[9]; 
  double *phiUz = phi[10]; 
  double *phiLxLz = phi[11]; 
  double *phiLxUz = phi[12]; 
  double *phiUxLz = phi[13]; 
  double *phiUxUz = phi[14]; 
  double *phiLyLz = phi[15]; 
  double *phiLyUz = phi[16]; 
  double *phiUyLz = phi[17]; 
  double *phiUyUz = phi[18]; 
  double *phiLxLyLz = phi[19]; 
  double *phiLxLyUz = phi[20]; 
  double *phiLxUyLz = phi[21]; 
  double *phiLxUyUz = phi[22]; 
  double *phiUxLyLz = phi[23]; 
  double *phiUxLyUz = phi[24]; 
  double *phiUxUyLz = phi[25]; 
  double *phiUxUyUz = phi[26]; 


  diffOut[0] = 0.05555555555555555*((rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[7]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[6]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[5]+(16.0*rdx2SqVol[2]-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[4]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLz[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLy[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiLx[3]+((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[3]+(4.0*phiLz[2]+4.0*phiLy[2]+4.0*phiLx[2]-8.0*phiC[2]+4.0*phiLz[1]+phiLyLz[1]-2.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]-2.0*phiLx[1]-8.0*phiC[1]+16.0*phiLz[0]+4.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]-2.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[0]-2.0*rdx2SqVol[1])*phiLx[2]+(16.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[2]+((-2.0*phiLz[1])+phiLyLz[1]+4.0*phiLy[1]+phiLxLz[1]+phiLxLy[1]+4.0*phiLx[1]-8.0*phiC[1]-8.0*phiLz[0]+4.0*phiLyLz[0]+16.0*phiLy[0]-2.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]-8.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[1]+4.0*rdx2SqVol[0]*phiLz[1]+rdx2SqVol[0]*phiLyLz[1]+4.0*rdx2SqVol[0]*phiLy[1]+rdx2SqVol[0]*phiLxLz[1]+rdx2SqVol[0]*phiLxLy[1]+4.0*rdx2SqVol[0]*phiLx[1]+16.0*rdx2SqVol[0]*phiC[1]+((-8.0*phiLz[0])-2.0*phiLyLz[0]-8.0*phiLy[0]+4.0*phiLxLz[0]+phiLxLyLz[0]+4.0*phiLxLy[0]+16.0*phiLx[0]-32.0*phiC[0])*rdx2SqVol[0]); 
  diffOut[1] = (0.05555555555555555*(((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[6]+((8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiLy[3]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[3]+(phiLz[2]+phiLy[2]-2.0*phiC[2]+8.0*phiLz[1]+2.0*phiLyLz[1]-4.0*phiLy[1]-16.0*phiC[1]+4.0*phiLz[0]+phiLyLz[0]-2.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLy[2]+(4.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[2]+((-4.0*phiLz[1])+2.0*phiLyLz[1]+8.0*phiLy[1]-16.0*phiC[1]-2.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]-8.0*phiC[0])*rdx2SqVol[1]-4.0*rdx2SqVol[0]*phiLz[1]-1.0*rdx2SqVol[0]*phiLyLz[1]-4.0*rdx2SqVol[0]*phiLy[1]-16.0*rdx2SqVol[0]*phiC[1]+(4.0*phiLz[0]+phiLyLz[0]+4.0*phiLy[0]+16.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-8.0*rdx2SqVol[0]*phiC[1]*bcVals[3]))/bcVals[4]; 
  diffOut[2] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[11]+((2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+(8.0*rdx2SqVol[2]-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[5]+(4.0*rdx2SqVol[2]+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[4]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLz[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[3]+(8.0*phiLz[2]+phiLx[2]-16.0*phiC[2]+phiLz[1]+2.0*phiLxLz[1]-4.0*phiLx[1]-2.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiLz[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiLx[2]+((-16.0*rdx2SqVol[1])-16.0*rdx2SqVol[0])*phiC[2]+(phiLz[1]-1.0*phiLxLz[1]-4.0*phiLx[1]+4.0*phiC[1]+4.0*phiLz[0]+phiLxLz[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLz[1]+2.0*rdx2SqVol[0]*phiLxLz[1]+8.0*rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLz[0])+phiLxLz[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-2.0*rdx2SqVol[1]*phiC[7])-4.0*rdx2SqVol[1]*phiC[6]-4.0*rdx2SqVol[1]*phiC[3]-8.0*rdx2SqVol[1]*phiC[2])*bcVals[9]))/bcVals[10]; 
  diffOut[3] = (0.05555555555555555*(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+(((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+((2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLz[3]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[3]+(2.0*phiLz[2]-4.0*phiC[2]+2.0*phiLz[1]-4.0*phiC[1]+phiLz[0]-2.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiLz[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiC[2]+(2.0*phiLz[1]+8.0*phiC[1]+phiLz[0]+4.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLz[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLz[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[10]+((-4.0*rdx2SqVol[1]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[1]*bcVals[4]*phiC[6]+((-8.0*rdx2SqVol[1]*phiC[3])-4.0*rdx2SqVol[1]*phiC[2])*bcVals[4])*bcVals[9]))/(bcVals[4]*bcVals[10]); 
  diffOut[4] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[17]+(((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[7]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[6]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*phiC[5]+((-16.0*rdx2SqVol[2])-16.0*rdx2SqVol[1]-16.0*rdx2SqVol[0])*phiC[4]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[3]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[3]+(rdx2SqVol[2]+rdx2SqVol[1]+rdx2SqVol[0])*phiC[3]+((-4.0*phiLy[2])-4.0*phiLx[2]+4.0*phiC[2]+phiLy[1]-1.0*phiLxLy[1]+phiLx[1]+4.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]+4.0*phiLx[0]+16.0*phiC[0])*rdx2SqVol[2]+(8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiLy[2]+(8.0*rdx2SqVol[0]-4.0*rdx2SqVol[1])*phiLx[2]+(4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[2]+(phiLy[1]+2.0*phiLxLy[1]+phiLx[1]-2.0*phiC[1]+4.0*phiLy[0]+phiLxLy[0]-2.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[1]+rdx2SqVol[0]*phiLy[1]+2.0*rdx2SqVol[0]*phiLxLy[1]+rdx2SqVol[0]*phiLx[1]+4.0*rdx2SqVol[0]*phiC[1]+((-2.0*phiLy[0])+phiLxLy[0]+4.0*phiLx[0]-8.0*phiC[0])*rdx2SqVol[0])*bcVals[16]+((-2.0*rdx2SqVol[2]*phiC[7])-4.0*rdx2SqVol[2]*phiC[6]-4.0*rdx2SqVol[2]*phiC[5]-8.0*rdx2SqVol[2]*phiC[4])*bcVals[15]))/bcVals[16]; 
  diffOut[5] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[17]+((((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]+8.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiLy[3]+(2.0*rdx2SqVol[2]+2.0*rdx2SqVol[1]-1.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLy[2])+phiC[2]+2.0*phiLy[1]+8.0*phiC[1]+phiLy[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLy[2]+(rdx2SqVol[1]+rdx2SqVol[0])*phiC[2]+(2.0*phiLy[1]-4.0*phiC[1]+phiLy[0]-2.0*phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiLy[1]-4.0*rdx2SqVol[0]*phiC[1]+(phiLy[0]+4.0*phiC[0])*rdx2SqVol[0])*bcVals[4]-2.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-4.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[16]+((-4.0*rdx2SqVol[2]*bcVals[4]*phiC[7])-2.0*rdx2SqVol[2]*bcVals[4]*phiC[6]-8.0*rdx2SqVol[2]*bcVals[4]*phiC[5]-4.0*rdx2SqVol[2]*bcVals[4]*phiC[4])*bcVals[15]))/(bcVals[4]*bcVals[16]); 
  diffOut[6] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[11]+(((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiC[7]+((-8.0*rdx2SqVol[2])-8.0*rdx2SqVol[1]-8.0*rdx2SqVol[0])*phiC[6]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[5]+((-4.0*rdx2SqVol[2])+8.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*phiC[4]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*phiLx[3]+(2.0*rdx2SqVol[2]-1.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiC[3]+((-1.0*phiLx[2])+8.0*phiC[2]+2.0*phiLx[1]+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*phiLx[2]+((-4.0*rdx2SqVol[1])-4.0*rdx2SqVol[0])*phiC[2]+((-1.0*phiLx[1])+phiC[1]+phiLx[0]+4.0*phiC[0])*rdx2SqVol[1]+2.0*rdx2SqVol[0]*phiLx[1]+rdx2SqVol[0]*phiC[1]+(phiLx[0]-2.0*phiC[0])*rdx2SqVol[0])*bcVals[10]+((-4.0*rdx2SqVol[1]*phiC[7])-8.0*rdx2SqVol[1]*phiC[6]-2.0*rdx2SqVol[1]*phiC[3]-4.0*rdx2SqVol[1]*phiC[2])*bcVals[9])*bcVals[16]+((-4.0*rdx2SqVol[2]*phiC[7])-8.0*rdx2SqVol[2]*phiC[6]-2.0*rdx2SqVol[2]*phiC[5]-4.0*rdx2SqVol[2]*phiC[4])*bcVals[10]*bcVals[15]))/(bcVals[10]*bcVals[16]); 
  diffOut[7] = (0.05555555555555555*(18.0*rdx2SqVol[2]*bcVals[4]*bcVals[10]*bcVals[17]+(18.0*rdx2SqVol[1]*bcVals[4]*bcVals[11]+((((-4.0*rdx2SqVol[2])-4.0*rdx2SqVol[1]-4.0*rdx2SqVol[0])*bcVals[4]-8.0*rdx2SqVol[0]*bcVals[3])*phiC[7]+((-2.0*rdx2SqVol[2])-2.0*rdx2SqVol[1]+4.0*rdx2SqVol[0])*bcVals[4]*phiC[6]+(((-2.0*rdx2SqVol[2])+4.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3])*phiC[5]+18.0*rdx2SqVol[0]*bcVals[5]+((-1.0*rdx2SqVol[2])+2.0*rdx2SqVol[1]+2.0*rdx2SqVol[0])*bcVals[4]*phiC[4]+((4.0*rdx2SqVol[2]-2.0*rdx2SqVol[1]-2.0*rdx2SqVol[0])*phiC[3]+(2.0*phiC[2]+2.0*phiC[1]+phiC[0])*rdx2SqVol[2]+(2.0*rdx2SqVol[0]-1.0*rdx2SqVol[1])*phiC[2]+(2.0*phiC[1]+phiC[0])*rdx2SqVol[1]-1.0*rdx2SqVol[0]*phiC[1]+phiC[0]*rdx2SqVol[0])*bcVals[4]-4.0*rdx2SqVol[0]*bcVals[3]*phiC[3]-2.0*rdx2SqVol[0]*phiC[1]*bcVals[3])*bcVals[10]+((-8.0*rdx2SqVol[1]*bcVals[4]*phiC[7])-4.0*rdx2SqVol[1]*bcVals[4]*phiC[6]+((-4.0*rdx2SqVol[1]*phiC[3])-2.0*rdx2SqVol[1]*phiC[2])*bcVals[4])*bcVals[9])*bcVals[16]+((-8.0*rdx2SqVol[2]*bcVals[4]*phiC[7])-4.0*rdx2SqVol[2]*bcVals[4]*phiC[6]-4.0*rdx2SqVol[2]*bcVals[4]*phiC[5]-2.0*rdx2SqVol[2]*bcVals[4]*phiC[4])*bcVals[10]*bcVals[15]))/(bcVals[4]*bcVals[10]*bcVals[16]); 

}

