#include <VlasovModDecl.h> 
double VlasovVolStream1x3vTensorP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+f[0]*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 3.464101615137754*f[7]*w0dx0+f[3]*dv0dx0; 
  out[12] += 3.464101615137754*f[9]*w0dx0+f[4]*dv0dx0; 
  out[13] += 3.464101615137754*f[10]*w0dx0+f[14]*dv0dx0; 
  out[15] += 3.464101615137754*f[14]*w0dx0+f[10]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vTensorP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[12]+f[0])*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[5]*dv0dx0; 
  out[15] += 3.464101615137754*f[7]*w0dx0+(0.8944271909999161*f[22]+f[3])*dv0dx0; 
  out[16] += 3.464101615137754*f[9]*w0dx0+(0.8944271909999161*f[26]+f[4])*dv0dx0; 
  out[17] += 3.464101615137754*f[10]*w0dx0+f[18]*dv0dx0; 
  out[19] += 7.745966692414834*f[5]*w0dx0+(2.0*f[20]+2.23606797749979*f[1])*dv0dx0; 
  out[20] += 3.464101615137755*f[12]*w0dx0+0.8944271909999161*f[2]*dv0dx0; 
  out[21] += 7.745966692414834*f[6]*w0dx0+2.23606797749979*f[15]*dv0dx0; 
  out[23] += 3.464101615137755*f[13]*w0dx0+f[24]*dv0dx0; 
  out[25] += 7.745966692414834*f[8]*w0dx0+2.23606797749979*f[16]*dv0dx0; 
  out[28] += 3.464101615137755*f[14]*w0dx0+f[29]*dv0dx0; 
  out[31] += 3.464101615137754*f[18]*w0dx0+(0.8944271909999159*f[38]+f[10])*dv0dx0; 
  out[32] += 7.745966692414834*f[15]*w0dx0+(2.0*f[33]+2.23606797749979*f[6])*dv0dx0; 
  out[33] += 3.464101615137755*f[22]*w0dx0+0.8944271909999159*f[7]*dv0dx0; 
  out[34] += 3.464101615137755*f[24]*w0dx0+(0.8944271909999159*f[46]+f[13])*dv0dx0; 
  out[35] += 7.745966692414834*f[16]*w0dx0+(2.0*f[36]+2.23606797749979*f[8])*dv0dx0; 
  out[36] += 3.464101615137755*f[26]*w0dx0+0.8944271909999159*f[9]*dv0dx0; 
  out[37] += 7.745966692414834*f[17]*w0dx0+2.23606797749979*f[31]*dv0dx0; 
  out[39] += 3.464101615137755*f[27]*w0dx0+f[40]*dv0dx0; 
  out[41] += 3.464101615137755*f[29]*w0dx0+(0.8944271909999159*f[48]+f[14])*dv0dx0; 
  out[42] += 3.464101615137755*f[30]*w0dx0+f[43]*dv0dx0; 
  out[44] += 7.745966692414834*f[20]*w0dx0+2.0*f[5]*dv0dx0; 
  out[45] += 7.745966692414834*f[23]*w0dx0+2.23606797749979*f[34]*dv0dx0; 
  out[47] += 7.745966692414834*f[28]*w0dx0+2.23606797749979*f[41]*dv0dx0; 
  out[50] += 7.745966692414834*f[31]*w0dx0+(2.0*f[51]+2.23606797749979*f[17])*dv0dx0; 
  out[51] += 3.464101615137755*f[38]*w0dx0+0.8944271909999161*f[18]*dv0dx0; 
  out[52] += 3.464101615137755*f[40]*w0dx0+(0.8944271909999161*f[59]+f[27])*dv0dx0; 
  out[53] += 3.464101615137755*f[43]*w0dx0+(0.8944271909999161*f[63]+f[30])*dv0dx0; 
  out[54] += 7.745966692414834*f[33]*w0dx0+2.0*f[15]*dv0dx0; 
  out[55] += 7.745966692414834*f[34]*w0dx0+(2.0*f[56]+2.23606797749979*f[23])*dv0dx0; 
  out[56] += 3.464101615137754*f[46]*w0dx0+0.8944271909999161*f[24]*dv0dx0; 
  out[57] += 7.745966692414834*f[36]*w0dx0+2.0*f[16]*dv0dx0; 
  out[58] += 7.745966692414834*f[39]*w0dx0+2.23606797749979*f[52]*dv0dx0; 
  out[60] += 7.745966692414834*f[41]*w0dx0+(2.0*f[61]+2.23606797749979*f[28])*dv0dx0; 
  out[61] += 3.464101615137754*f[48]*w0dx0+0.8944271909999161*f[29]*dv0dx0; 
  out[62] += 7.745966692414834*f[42]*w0dx0+2.23606797749979*f[53]*dv0dx0; 
  out[64] += 3.464101615137754*f[49]*w0dx0+f[65]*dv0dx0; 
  out[66] += 7.745966692414834*f[51]*w0dx0+2.0*f[31]*dv0dx0; 
  out[67] += 7.745966692414834*f[52]*w0dx0+(2.0*f[68]+2.23606797749979*f[39])*dv0dx0; 
  out[68] += 3.464101615137754*f[59]*w0dx0+0.8944271909999159*f[40]*dv0dx0; 
  out[69] += 7.745966692414834*f[53]*w0dx0+(2.0*f[70]+2.23606797749979*f[42])*dv0dx0; 
  out[70] += 3.464101615137754*f[63]*w0dx0+0.8944271909999159*f[43]*dv0dx0; 
  out[71] += 3.464101615137754*f[65]*w0dx0+(0.8944271909999159*f[75]+f[49])*dv0dx0; 
  out[72] += 7.745966692414834*f[56]*w0dx0+2.0*f[34]*dv0dx0; 
  out[73] += 7.745966692414834*f[61]*w0dx0+2.0*f[41]*dv0dx0; 
  out[74] += 7.745966692414834*f[64]*w0dx0+2.23606797749979*f[71]*dv0dx0; 
  out[76] += 7.745966692414834*f[68]*w0dx0+2.0*f[52]*dv0dx0; 
  out[77] += 7.745966692414834*f[70]*w0dx0+2.0*f[53]*dv0dx0; 
  out[78] += 7.745966692414834*f[71]*w0dx0+(2.0*f[79]+2.23606797749979*f[64])*dv0dx0; 
  out[79] += 3.464101615137755*f[75]*w0dx0+0.8944271909999161*f[65]*dv0dx0; 
  out[80] += 7.745966692414834*f[79]*w0dx0+2.0*f[71]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
