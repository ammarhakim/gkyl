#include <VlasovModDecl.h> 
double VlasovVolStream2x3vSerP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[2]/dxv[0]; 
  double w0dx0 = w[2]/dxv[0]; 
  double dv1dx1 = dxv[3]/dxv[1]; 
  double w1dx1 = w[3]/dxv[1]; 
  double alpha0[32]; 

  double alpha1[32]; 

  alpha0[0] = 11.31370849898477*w0dx0; 
  alpha0[3] = 3.265986323710906*dv0dx0; 

  alpha1[0] = 11.31370849898477*w1dx1; 
  alpha1[4] = 3.265986323710906*dv1dx1; 

  out[1] += 0.3061862178478971*(alpha0[3]*f[3]+alpha0[0]*f[0]); 
  out[2] += 0.3061862178478971*(alpha1[4]*f[4]+alpha1[0]*f[0]); 
  out[6] += 0.3061862178478971*(alpha1[4]*f[9]+alpha0[3]*f[8]+alpha0[0]*f[2]+alpha1[0]*f[1]); 
  out[7] += 0.3061862178478971*(alpha0[0]*f[3]+f[0]*alpha0[3]); 
  out[8] += 0.3061862178478971*(alpha1[4]*f[11]+alpha1[0]*f[3]); 
  out[9] += 0.3061862178478971*(alpha0[3]*f[11]+alpha0[0]*f[4]); 
  out[10] += 0.3061862178478971*(alpha1[0]*f[4]+f[0]*alpha1[4]); 
  out[12] += 0.3061862178478971*(alpha0[3]*f[14]+alpha0[0]*f[5]); 
  out[13] += 0.3061862178478971*(alpha1[4]*f[15]+alpha1[0]*f[5]); 
  out[16] += 0.3061862178478971*(alpha1[4]*f[18]+alpha0[0]*f[8]+alpha1[0]*f[7]+f[2]*alpha0[3]); 
  out[17] += 0.3061862178478971*(alpha0[3]*f[19]+alpha0[0]*f[10]+alpha1[0]*f[9]+f[1]*alpha1[4]); 
  out[18] += 0.3061862178478971*(alpha0[0]*f[11]+alpha0[3]*f[4]); 
  out[19] += 0.3061862178478971*(alpha1[0]*f[11]+f[3]*alpha1[4]); 
  out[20] += 0.3061862178478971*(alpha1[4]*f[23]+alpha0[3]*f[22]+alpha0[0]*f[13]+alpha1[0]*f[12]); 
  out[21] += 0.3061862178478971*(alpha0[0]*f[14]+alpha0[3]*f[5]); 
  out[22] += 0.3061862178478971*(alpha1[4]*f[25]+alpha1[0]*f[14]); 
  out[23] += 0.3061862178478971*(alpha0[3]*f[25]+alpha0[0]*f[15]); 
  out[24] += 0.3061862178478971*(alpha1[0]*f[15]+alpha1[4]*f[5]); 
  out[26] += 0.3061862178478971*(alpha0[0]*f[19]+alpha1[0]*f[18]+alpha0[3]*f[10]+alpha1[4]*f[7]); 
  out[27] += 0.3061862178478971*(alpha1[4]*f[29]+alpha0[0]*f[22]+alpha1[0]*f[21]+alpha0[3]*f[13]); 
  out[28] += 0.3061862178478971*(alpha0[3]*f[30]+alpha0[0]*f[24]+alpha1[0]*f[23]+alpha1[4]*f[12]); 
  out[29] += 0.3061862178478971*(alpha0[0]*f[25]+alpha0[3]*f[15]); 
  out[30] += 0.3061862178478971*(alpha1[0]*f[25]+alpha1[4]*f[14]); 
  out[31] += 0.3061862178478971*(alpha0[0]*f[30]+alpha1[0]*f[29]+alpha0[3]*f[24]+alpha1[4]*f[21]); 
return std::abs(w0dx0)+std::abs(w1dx1)+0.5*(dv0dx0+dv1dx1); 
} 
double VlasovVolStream2x3vSerP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[2]/dxv[0]; 
  double w0dx0 = w[2]/dxv[0]; 
  double dv1dx1 = dxv[3]/dxv[1]; 
  double w1dx1 = w[3]/dxv[1]; 
  double alpha0[112]; 

  double alpha1[112]; 

  alpha0[0] = 11.31370849898477*w0dx0; 
  alpha0[3] = 3.265986323710906*dv0dx0; 

  alpha1[0] = 11.31370849898477*w1dx1; 
  alpha1[4] = 3.265986323710906*dv1dx1; 

  out[1] += 0.3061862178478971*(alpha0[3]*f[3]+alpha0[0]*f[0]); 
  out[2] += 0.3061862178478971*(alpha1[4]*f[4]+alpha1[0]*f[0]); 
  out[6] += 0.3061862178478971*(alpha1[4]*f[9]+alpha0[3]*f[8]+alpha0[0]*f[2]+alpha1[0]*f[1]); 
  out[7] += 0.273861278752583*alpha0[3]*f[18]+0.3061862178478971*(alpha0[0]*f[3]+f[0]*alpha0[3]); 
  out[8] += 0.3061862178478971*(alpha1[4]*f[11]+alpha1[0]*f[3]); 
  out[9] += 0.3061862178478971*(alpha0[3]*f[11]+alpha0[0]*f[4]); 
  out[10] += 0.273861278752583*alpha1[4]*f[19]+0.3061862178478971*(alpha1[0]*f[4]+f[0]*alpha1[4]); 
  out[12] += 0.3061862178478971*(alpha0[3]*f[14]+alpha0[0]*f[5]); 
  out[13] += 0.3061862178478971*(alpha1[4]*f[15]+alpha1[0]*f[5]); 
  out[16] += 0.6846531968814573*(alpha0[3]*f[7]+alpha0[0]*f[1]); 
  out[17] += 0.6846531968814573*(alpha1[4]*f[10]+alpha1[0]*f[2]); 
  out[21] += 0.273861278752583*alpha0[3]*f[36]+0.3061862178478971*(alpha1[4]*f[23]+alpha0[0]*f[8]+alpha1[0]*f[7]+f[2]*alpha0[3]); 
  out[22] += 0.273861278752583*alpha1[4]*f[40]+0.3061862178478971*(alpha0[3]*f[24]+alpha0[0]*f[10]+alpha1[0]*f[9]+f[1]*alpha1[4]); 
  out[23] += 0.273861278752583*alpha0[3]*f[39]+0.3061862178478971*(alpha0[0]*f[11]+alpha0[3]*f[4]); 
  out[24] += 0.273861278752583*alpha1[4]*f[42]+0.3061862178478971*(alpha1[0]*f[11]+f[3]*alpha1[4]); 
  out[25] += 0.3061862178478971*(alpha1[4]*f[28]+alpha0[3]*f[27]+alpha0[0]*f[13]+alpha1[0]*f[12]); 
  out[26] += 0.273861278752583*alpha0[3]*f[45]+0.3061862178478971*(alpha0[0]*f[14]+alpha0[3]*f[5]); 
  out[27] += 0.3061862178478971*(alpha1[4]*f[30]+alpha1[0]*f[14]); 
  out[28] += 0.3061862178478971*(alpha0[3]*f[30]+alpha0[0]*f[15]); 
  out[29] += 0.273861278752583*alpha1[4]*f[46]+0.3061862178478971*(alpha1[0]*f[15]+alpha1[4]*f[5]); 
  out[31] += 0.3061862178478971*alpha1[4]*f[37]+0.6846531968814573*alpha0[3]*f[21]+0.3061862178478971*alpha1[0]*f[16]+0.6846531968814573*alpha0[0]*f[6]; 
  out[32] += 0.3061862178478971*alpha0[3]*f[34]+0.6846531968814573*alpha1[4]*f[22]+0.3061862178478971*alpha0[0]*f[17]+0.6846531968814573*alpha1[0]*f[6]; 
  out[33] += 0.6123724356957944*alpha0[3]*f[35]+0.6846531968814573*(alpha0[0]*f[7]+f[1]*alpha0[3]); 
  out[34] += 0.6846531968814573*(alpha1[4]*f[24]+alpha1[0]*f[8]); 
  out[35] += 0.3061862178478971*alpha0[0]*f[18]+0.273861278752583*alpha0[3]*f[3]; 
  out[36] += 0.3061862178478971*(alpha1[4]*f[39]+alpha1[0]*f[18]); 
  out[37] += 0.6846531968814573*(alpha0[3]*f[23]+alpha0[0]*f[9]); 
  out[38] += 0.6123724356957944*alpha1[4]*f[41]+0.6846531968814573*(alpha1[0]*f[10]+f[2]*alpha1[4]); 
  out[40] += 0.3061862178478971*(alpha0[3]*f[42]+alpha0[0]*f[19]); 
  out[41] += 0.3061862178478971*alpha1[0]*f[19]+0.273861278752583*alpha1[4]*f[4]; 
  out[43] += 0.6846531968814573*(alpha0[3]*f[26]+alpha0[0]*f[12]); 
  out[44] += 0.6846531968814573*(alpha1[4]*f[29]+alpha1[0]*f[13]); 
  out[47] += 0.3061862178478971*(alpha0[3]*f[49]+alpha0[0]*f[20]); 
  out[48] += 0.3061862178478971*(alpha1[4]*f[50]+alpha1[0]*f[20]); 
  out[51] += 0.273861278752583*(alpha1[4]*f[66]+alpha0[3]*f[64])+0.3061862178478971*(alpha0[0]*f[24]+alpha1[0]*f[23]+alpha0[3]*f[10]+alpha1[4]*f[7]); 
  out[52] += 0.273861278752583*alpha0[3]*f[73]+0.3061862178478971*(alpha1[4]*f[54]+alpha0[0]*f[27]+alpha1[0]*f[26]+alpha0[3]*f[13]); 
  out[53] += 0.273861278752583*alpha1[4]*f[77]+0.3061862178478971*(alpha0[3]*f[55]+alpha0[0]*f[29]+alpha1[0]*f[28]+alpha1[4]*f[12]); 
  out[54] += 0.273861278752583*alpha0[3]*f[76]+0.3061862178478971*(alpha0[0]*f[30]+alpha0[3]*f[15]); 
  out[55] += 0.273861278752583*alpha1[4]*f[79]+0.3061862178478971*(alpha1[0]*f[30]+alpha1[4]*f[14]); 
  out[56] += 0.3061862178478971*alpha1[4]*f[61]+0.6123724356957944*alpha0[3]*f[58]+0.3061862178478971*alpha1[0]*f[33]+0.6846531968814573*(alpha0[0]*f[21]+alpha0[3]*f[6]); 
  out[57] += 0.6846531968814573*alpha1[4]*f[51]+0.3061862178478971*alpha0[0]*f[34]+0.6846531968814573*alpha1[0]*f[21]+0.3061862178478971*alpha0[3]*f[17]; 
  out[58] += 0.3061862178478971*(alpha1[4]*f[63]+alpha0[0]*f[36]+alpha1[0]*f[35])+0.273861278752583*alpha0[3]*f[8]; 
  out[59] += 0.6846531968814573*alpha0[3]*f[51]+0.3061862178478971*alpha1[0]*f[37]+0.6846531968814573*alpha0[0]*f[22]+0.3061862178478971*alpha1[4]*f[16]; 
  out[60] += 0.6123724356957944*alpha1[4]*f[65]+0.3061862178478971*(alpha0[3]*f[62]+alpha0[0]*f[38])+0.6846531968814573*(alpha1[0]*f[22]+alpha1[4]*f[6]); 
  out[61] += 0.6123724356957944*alpha0[3]*f[63]+0.6846531968814573*(alpha0[0]*f[23]+alpha0[3]*f[9]); 
  out[62] += 0.6123724356957944*alpha1[4]*f[67]+0.6846531968814573*(alpha1[0]*f[24]+alpha1[4]*f[8]); 
  out[63] += 0.3061862178478971*alpha0[0]*f[39]+0.273861278752583*alpha0[3]*f[11]; 
  out[64] += 0.3061862178478971*(alpha1[0]*f[39]+alpha1[4]*f[18]); 
  out[65] += 0.3061862178478971*(alpha0[3]*f[67]+alpha0[0]*f[41]+alpha1[0]*f[40])+0.273861278752583*alpha1[4]*f[9]; 
  out[66] += 0.3061862178478971*(alpha0[0]*f[42]+alpha0[3]*f[19]); 
  out[67] += 0.3061862178478971*alpha1[0]*f[42]+0.273861278752583*alpha1[4]*f[11]; 
  out[68] += 0.3061862178478971*alpha1[4]*f[74]+0.6846531968814573*alpha0[3]*f[52]+0.3061862178478971*alpha1[0]*f[43]+0.6846531968814573*alpha0[0]*f[25]; 
  out[69] += 0.3061862178478971*alpha0[3]*f[71]+0.6846531968814573*alpha1[4]*f[53]+0.3061862178478971*alpha0[0]*f[44]+0.6846531968814573*alpha1[0]*f[25]; 
  out[70] += 0.6123724356957944*alpha0[3]*f[72]+0.6846531968814573*(alpha0[0]*f[26]+alpha0[3]*f[12]); 
  out[71] += 0.6846531968814573*(alpha1[4]*f[55]+alpha1[0]*f[27]); 
  out[72] += 0.3061862178478971*alpha0[0]*f[45]+0.273861278752583*alpha0[3]*f[14]; 
  out[73] += 0.3061862178478971*(alpha1[4]*f[76]+alpha1[0]*f[45]); 
  out[74] += 0.6846531968814573*(alpha0[3]*f[54]+alpha0[0]*f[28]); 
  out[75] += 0.6123724356957944*alpha1[4]*f[78]+0.6846531968814573*(alpha1[0]*f[29]+alpha1[4]*f[13]); 
  out[77] += 0.3061862178478971*(alpha0[3]*f[79]+alpha0[0]*f[46]); 
  out[78] += 0.3061862178478971*alpha1[0]*f[46]+0.273861278752583*alpha1[4]*f[15]; 
  out[80] += 0.3061862178478971*(alpha1[4]*f[83]+alpha0[3]*f[82]+alpha0[0]*f[48]+alpha1[0]*f[47]); 
  out[81] += 0.3061862178478971*(alpha0[0]*f[49]+alpha0[3]*f[20]); 
  out[82] += 0.3061862178478971*(alpha1[4]*f[85]+alpha1[0]*f[49]); 
  out[83] += 0.3061862178478971*(alpha0[3]*f[85]+alpha0[0]*f[50]); 
  out[84] += 0.3061862178478971*(alpha1[0]*f[50]+alpha1[4]*f[20]); 
  out[86] += 0.273861278752583*(alpha1[4]*f[101]+alpha0[3]*f[99])+0.3061862178478971*(alpha0[0]*f[55]+alpha1[0]*f[54]+alpha0[3]*f[29]+alpha1[4]*f[26]); 
  out[87] += 0.6123724356957944*alpha0[3]*f[89]+0.3061862178478971*alpha1[0]*f[61]+0.6846531968814573*alpha0[0]*f[51]+0.3061862178478971*alpha1[4]*f[33]+0.6846531968814573*alpha0[3]*f[22]; 
  out[88] += 0.6123724356957944*alpha1[4]*f[90]+0.3061862178478971*alpha0[0]*f[62]+0.6846531968814573*alpha1[0]*f[51]+0.3061862178478971*alpha0[3]*f[38]+0.6846531968814573*alpha1[4]*f[21]; 
  out[89] += 0.3061862178478971*(alpha0[0]*f[64]+alpha1[0]*f[63]+alpha1[4]*f[35])+0.273861278752583*alpha0[3]*f[24]; 
  out[90] += 0.3061862178478971*(alpha0[0]*f[67]+alpha1[0]*f[66]+alpha0[3]*f[41])+0.273861278752583*alpha1[4]*f[23]; 
  out[91] += 0.3061862178478971*alpha1[4]*f[96]+0.6123724356957944*alpha0[3]*f[93]+0.3061862178478971*alpha1[0]*f[70]+0.6846531968814573*(alpha0[0]*f[52]+alpha0[3]*f[25]); 
  out[92] += 0.6846531968814573*alpha1[4]*f[86]+0.3061862178478971*alpha0[0]*f[71]+0.6846531968814573*alpha1[0]*f[52]+0.3061862178478971*alpha0[3]*f[44]; 
  out[93] += 0.3061862178478971*(alpha1[4]*f[98]+alpha0[0]*f[73]+alpha1[0]*f[72])+0.273861278752583*alpha0[3]*f[27]; 
  out[94] += 0.6846531968814573*alpha0[3]*f[86]+0.3061862178478971*alpha1[0]*f[74]+0.6846531968814573*alpha0[0]*f[53]+0.3061862178478971*alpha1[4]*f[43]; 
  out[95] += 0.6123724356957944*alpha1[4]*f[100]+0.3061862178478971*(alpha0[3]*f[97]+alpha0[0]*f[75])+0.6846531968814573*(alpha1[0]*f[53]+alpha1[4]*f[25]); 
  out[96] += 0.6123724356957944*alpha0[3]*f[98]+0.6846531968814573*(alpha0[0]*f[54]+alpha0[3]*f[28]); 
  out[97] += 0.6123724356957944*alpha1[4]*f[102]+0.6846531968814573*(alpha1[0]*f[55]+alpha1[4]*f[27]); 
  out[98] += 0.3061862178478971*alpha0[0]*f[76]+0.273861278752583*alpha0[3]*f[30]; 
  out[99] += 0.3061862178478971*(alpha1[0]*f[76]+alpha1[4]*f[45]); 
  out[100] += 0.3061862178478971*(alpha0[3]*f[102]+alpha0[0]*f[78]+alpha1[0]*f[77])+0.273861278752583*alpha1[4]*f[28]; 
  out[101] += 0.3061862178478971*(alpha0[0]*f[79]+alpha0[3]*f[46]); 
  out[102] += 0.3061862178478971*alpha1[0]*f[79]+0.273861278752583*alpha1[4]*f[30]; 
  out[103] += 0.3061862178478971*(alpha1[4]*f[105]+alpha0[0]*f[82]+alpha1[0]*f[81]+alpha0[3]*f[48]); 
  out[104] += 0.3061862178478971*(alpha0[3]*f[106]+alpha0[0]*f[84]+alpha1[0]*f[83]+alpha1[4]*f[47]); 
  out[105] += 0.3061862178478971*(alpha0[0]*f[85]+alpha0[3]*f[50]); 
  out[106] += 0.3061862178478971*(alpha1[0]*f[85]+alpha1[4]*f[49]); 
  out[107] += 0.6123724356957944*alpha0[3]*f[109]+0.3061862178478971*alpha1[0]*f[96]+0.6846531968814573*alpha0[0]*f[86]+0.3061862178478971*alpha1[4]*f[70]+0.6846531968814573*alpha0[3]*f[53]; 
  out[108] += 0.6123724356957944*alpha1[4]*f[110]+0.3061862178478971*alpha0[0]*f[97]+0.6846531968814573*alpha1[0]*f[86]+0.3061862178478971*alpha0[3]*f[75]+0.6846531968814573*alpha1[4]*f[52]; 
  out[109] += 0.3061862178478971*(alpha0[0]*f[99]+alpha1[0]*f[98]+alpha1[4]*f[72])+0.273861278752583*alpha0[3]*f[55]; 
  out[110] += 0.3061862178478971*(alpha0[0]*f[102]+alpha1[0]*f[101]+alpha0[3]*f[78])+0.273861278752583*alpha1[4]*f[54]; 
  out[111] += 0.3061862178478971*(alpha0[0]*f[106]+alpha1[0]*f[105]+alpha0[3]*f[84]+alpha1[4]*f[81]); 
return std::abs(w0dx0)+std::abs(w1dx1)+0.5*(dv0dx0+dv1dx1); 
} 
