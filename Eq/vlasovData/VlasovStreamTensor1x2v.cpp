#include <VlasovModDecl.h> 
double VlasovVolStream1x2vTensorP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[4] += 3.464101615137754*f[2]*w0dx0+f[0]*dv0dx0; 
  out[5] += 3.464101615137754*f[3]*w0dx0+f[6]*dv0dx0; 
  out[7] += 3.464101615137754*f[6]*w0dx0+f[3]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x2vTensorP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[4] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[8]+f[0])*dv0dx0; 
  out[5] += 3.464101615137754*f[3]*w0dx0+f[6]*dv0dx0; 
  out[7] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[4]*dv0dx0; 
  out[10] += 3.464101615137754*f[6]*w0dx0+(0.8944271909999161*f[14]+f[3])*dv0dx0; 
  out[11] += 7.745966692414834*f[4]*w0dx0+(2.0*f[12]+2.23606797749979*f[1])*dv0dx0; 
  out[12] += 3.464101615137755*f[8]*w0dx0+0.8944271909999161*f[2]*dv0dx0; 
  out[13] += 7.745966692414834*f[5]*w0dx0+2.23606797749979*f[10]*dv0dx0; 
  out[15] += 3.464101615137755*f[9]*w0dx0+f[16]*dv0dx0; 
  out[17] += 7.745966692414834*f[10]*w0dx0+(2.0*f[18]+2.23606797749979*f[5])*dv0dx0; 
  out[18] += 3.464101615137755*f[14]*w0dx0+0.8944271909999159*f[6]*dv0dx0; 
  out[19] += 3.464101615137755*f[16]*w0dx0+(0.8944271909999159*f[22]+f[9])*dv0dx0; 
  out[20] += 7.745966692414834*f[12]*w0dx0+2.0*f[4]*dv0dx0; 
  out[21] += 7.745966692414834*f[15]*w0dx0+2.23606797749979*f[19]*dv0dx0; 
  out[23] += 7.745966692414834*f[18]*w0dx0+2.0*f[10]*dv0dx0; 
  out[24] += 7.745966692414834*f[19]*w0dx0+(2.0*f[25]+2.23606797749979*f[15])*dv0dx0; 
  out[25] += 3.464101615137754*f[22]*w0dx0+0.8944271909999161*f[16]*dv0dx0; 
  out[26] += 7.745966692414834*f[25]*w0dx0+2.0*f[19]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x2vTensorP3(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[4] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[8]+f[0])*dv0dx0; 
  out[5] += 3.464101615137754*f[3]*w0dx0+f[6]*dv0dx0; 
  out[7] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[4]*dv0dx0; 
  out[10] += 3.464101615137754*f[6]*w0dx0+(0.8944271909999161*f[14]+f[3])*dv0dx0; 
  out[11] += 7.745966692414834*f[4]*w0dx0+(2.0*f[12]+2.23606797749979*f[1])*dv0dx0; 
  out[12] += 3.464101615137755*f[8]*w0dx0+(0.8783100656536798*f[18]+0.8944271909999161*f[2])*dv0dx0; 
  out[13] += 7.745966692414834*f[5]*w0dx0+2.23606797749979*f[10]*dv0dx0; 
  out[15] += 3.464101615137755*f[9]*w0dx0+f[16]*dv0dx0; 
  out[17] += (11.83215956619923*f[7]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[11]+1.527525231651947*f[2])*dv0dx0; 
  out[20] += 7.745966692414834*f[10]*w0dx0+(2.0*f[21]+2.23606797749979*f[5])*dv0dx0; 
  out[21] += 3.464101615137755*f[14]*w0dx0+(0.8783100656536798*f[29]+0.8944271909999159*f[6])*dv0dx0; 
  out[22] += 3.464101615137755*f[16]*w0dx0+(0.8944271909999159*f[25]+f[9])*dv0dx0; 
  out[23] += 7.745966692414834*f[12]*w0dx0+(1.963961012123931*f[27]+2.0*f[4])*dv0dx0; 
  out[24] += 7.745966692414834*f[15]*w0dx0+2.23606797749979*f[22]*dv0dx0; 
  out[26] += (11.83215956619923*f[11]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[23]+1.366260102127946*f[8]+3.415650255319866*f[7]+1.527525231651947*f[0])*dv0dx0; 
  out[27] += 3.464101615137754*f[18]*w0dx0+0.8783100656536798*f[8]*dv0dx0; 
  out[28] += (11.83215956619923*f[13]+5.291502622129181*f[3])*w0dx0+(3.415650255319866*f[20]+1.527525231651947*f[6])*dv0dx0; 
  out[30] += 3.464101615137754*f[19]*w0dx0+f[31]*dv0dx0; 
  out[32] += 7.745966692414834*f[21]*w0dx0+(1.963961012123931*f[36]+2.0*f[10])*dv0dx0; 
  out[33] += 7.745966692414834*f[22]*w0dx0+(2.0*f[34]+2.23606797749979*f[15])*dv0dx0; 
  out[34] += 3.464101615137754*f[25]*w0dx0+(0.8783100656536796*f[41]+0.8944271909999161*f[16])*dv0dx0; 
  out[35] += (11.83215956619923*f[20]+5.291502622129181*f[6])*w0dx0+(3.055050463303894*f[32]+1.366260102127946*f[14]+3.415650255319866*f[13]+1.527525231651947*f[3])*dv0dx0; 
  out[36] += 3.464101615137754*f[29]*w0dx0+0.8783100656536798*f[14]*dv0dx0; 
  out[37] += 3.464101615137754*f[31]*w0dx0+(0.8944271909999159*f[43]+f[19])*dv0dx0; 
  out[38] += (11.83215956619923*f[23]+5.291502622129181*f[8])*w0dx0+(3.0*f[39]+1.341640786499874*f[18]+3.055050463303893*f[11]+1.366260102127947*f[2])*dv0dx0; 
  out[39] += 7.745966692414833*f[27]*w0dx0+1.963961012123931*f[12]*dv0dx0; 
  out[40] += (11.83215956619923*f[24]+5.291502622129181*f[9])*w0dx0+(3.415650255319866*f[33]+1.527525231651947*f[16])*dv0dx0; 
  out[42] += 7.745966692414833*f[30]*w0dx0+2.236067977499789*f[37]*dv0dx0; 
  out[44] += 7.745966692414834*f[34]*w0dx0+(1.963961012123931*f[48]+2.0*f[22])*dv0dx0; 
  out[45] += (11.83215956619923*f[32]+5.291502622129181*f[14])*w0dx0+(3.0*f[46]+1.341640786499874*f[29]+3.055050463303893*f[20]+1.366260102127946*f[6])*dv0dx0; 
  out[46] += 7.745966692414833*f[36]*w0dx0+1.963961012123931*f[21]*dv0dx0; 
  out[47] += (11.83215956619923*f[33]+5.291502622129181*f[16])*w0dx0+(3.055050463303893*f[44]+1.366260102127946*f[25]+3.415650255319866*f[24]+1.527525231651946*f[9])*dv0dx0; 
  out[48] += 3.464101615137754*f[41]*w0dx0+0.8783100656536799*f[25]*dv0dx0; 
  out[49] += 7.745966692414833*f[37]*w0dx0+(2.0*f[50]+2.23606797749979*f[30])*dv0dx0; 
  out[50] += 3.464101615137754*f[43]*w0dx0+(0.8783100656536799*f[53]+0.894427190999916*f[31])*dv0dx0; 
  out[51] += (11.83215956619923*f[39]+5.291502622129181*f[18])*w0dx0+(3.0*f[23]+1.341640786499874*f[8])*dv0dx0; 
  out[52] += (11.83215956619923*f[42]+5.291502622129181*f[19])*w0dx0+(3.415650255319866*f[49]+1.527525231651947*f[31])*dv0dx0; 
  out[54] += (11.83215956619923*f[44]+5.291502622129181*f[25])*w0dx0+(3.0*f[55]+1.341640786499874*f[41]+3.055050463303894*f[33]+1.366260102127946*f[16])*dv0dx0; 
  out[55] += 7.745966692414833*f[48]*w0dx0+1.963961012123931*f[34]*dv0dx0; 
  out[56] += 7.745966692414833*f[50]*w0dx0+(1.963961012123931*f[59]+2.0*f[37])*dv0dx0; 
  out[57] += (11.83215956619923*f[46]+5.291502622129181*f[29])*w0dx0+(3.0*f[32]+1.341640786499874*f[14])*dv0dx0; 
  out[58] += (11.83215956619923*f[49]+5.291502622129181*f[31])*w0dx0+(3.055050463303894*f[56]+1.366260102127947*f[43]+3.415650255319866*f[42]+1.527525231651947*f[19])*dv0dx0; 
  out[59] += 3.464101615137754*f[53]*w0dx0+0.8783100656536796*f[43]*dv0dx0; 
  out[60] += (11.83215956619923*f[55]+5.291502622129181*f[41])*w0dx0+(3.0*f[44]+1.341640786499874*f[25])*dv0dx0; 
  out[61] += (11.83215956619923*f[56]+5.291502622129181*f[43])*w0dx0+(3.0*f[62]+1.341640786499874*f[53]+3.055050463303893*f[49]+1.366260102127946*f[31])*dv0dx0; 
  out[62] += 7.745966692414834*f[59]*w0dx0+1.963961012123931*f[50]*dv0dx0; 
  out[63] += (11.83215956619923*f[62]+5.291502622129181*f[53])*w0dx0+(3.0*f[56]+1.341640786499874*f[43])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
