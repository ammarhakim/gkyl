#include <VlasovModDecl.h> 
double VlasovSurfElcMag1x2vSer_VX_P1(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv10l = 2/dxvl[1]; 
  double dv10r = 2/dxvr[1]; 
  const double *E0 = &EM[0]; 

  const double dv1 = dxvr[1], wv1 = wr[1]; 
  const double dv2 = dxvr[2], wv2 = wr[2]; 

  const double *B0 = &EM[6]; 
  const double *B1 = &EM[8]; 
  const double *B2 = &EM[10]; 

  double abar0[2]; 

  double abar1[2]; 


  abar0[0] = E0[0]+wv2*B2[0]; 
  abar0[1] = E0[1]+wv2*B2[1]; 

  double Ghat[8]; 

  for(unsigned int i=0; i<8; ++i){ 

    Ghat[i]=0.0; 

  }; 

  double favg[8]; 

  favg[0] = 1*fr[0]+fl[0]; 
  favg[1] = 1*fr[1]+fl[1]; 
  favg[2] = -1*fr[2]+fl[2]; 
  favg[3] = 1*fr[3]+fl[3]; 
  favg[4] = -1*fr[4]+fl[4]; 
  favg[5] = 1*fr[5]+fl[5]; 
  favg[6] = -1*fr[6]+fl[6]; 
  favg[7] = -1*fr[7]+fl[7]; 
  double fjump[8]; 

  fjump[0] = amax*(1*fr[0]-fl[0]); 
  fjump[1] = amax*(1*fr[1]-fl[1]); 
  fjump[2] = amax*(-1*fr[2]-fl[2]); 
  fjump[3] = amax*(1*fr[3]-fl[3]); 
  fjump[4] = amax*(-1*fr[4]-fl[4]); 
  fjump[5] = amax*(1*fr[5]-fl[5]); 
  fjump[6] = amax*(-1*fr[6]-fl[6]); 
  fjump[7] = amax*(-1*fr[7]-fl[7]); 
  const double amid = 0.7071067811865475*abar0[0]; 
  Ghat[0] = (0.1767766952966368*B2[1]*favg[7]+0.1767766952966368*B2[0]*favg[6]+0.1020620726159657*B2[1]*favg[5]+0.1020620726159657*B2[0]*favg[3])*dv2+abar0[1]*(0.6123724356957942*favg[4]+0.3535533905932737*favg[1])-0.8660254037844385*fjump[2]+abar0[0]*(0.6123724356957942*favg[2]+0.3535533905932737*favg[0])-0.5*fjump[0]; 
  Ghat[1] = (0.1767766952966368*B2[0]*favg[7]+0.1767766952966368*B2[1]*favg[6]+0.1020620726159657*B2[0]*favg[5]+0.1020620726159657*B2[1]*favg[3])*dv2-0.8660254037844385*fjump[4]+abar0[0]*(0.6123724356957942*favg[4]+0.3535533905932737*favg[1])+abar0[1]*(0.6123724356957942*favg[2]+0.3535533905932737*favg[0])-0.5*fjump[1]; 
  Ghat[3] = (0.1767766952966368*B2[1]*favg[4]+0.1767766952966368*B2[0]*favg[2]+0.1020620726159657*favg[1]*B2[1]+0.1020620726159657*favg[0]*B2[0])*dv2+abar0[1]*(0.6123724356957942*favg[7]+0.3535533905932737*favg[5])-0.8660254037844385*fjump[6]+abar0[0]*(0.6123724356957942*favg[6]+0.3535533905932737*favg[3])-0.5*fjump[3]; 
  Ghat[5] = (0.1767766952966368*B2[0]*favg[4]+0.1767766952966368*B2[1]*favg[2]+0.1020620726159657*favg[0]*B2[1]+0.1020620726159657*B2[0]*favg[1])*dv2-0.8660254037844385*fjump[7]+abar0[0]*(0.6123724356957942*favg[7]+0.3535533905932737*favg[5])+abar0[1]*(0.6123724356957942*favg[6]+0.3535533905932737*favg[3])-0.5*fjump[5]; 

  outr[0] += 0.5*Ghat[0]*dv10r; 
  outr[1] += 0.5*Ghat[1]*dv10r; 
  outr[2] += -0.8660254037844386*Ghat[0]*dv10r; 
  outr[3] += 0.5*Ghat[3]*dv10r; 
  outr[4] += -0.8660254037844386*Ghat[1]*dv10r; 
  outr[5] += 0.5*Ghat[5]*dv10r; 
  outr[6] += -0.8660254037844386*Ghat[3]*dv10r; 
  outr[7] += -0.8660254037844386*Ghat[5]*dv10r; 

  outl[0] += -0.5*Ghat[0]*dv10l; 
  outl[1] += -0.5*Ghat[1]*dv10l; 
  outl[2] += -0.8660254037844386*Ghat[0]*dv10l; 
  outl[3] += -0.5*Ghat[3]*dv10l; 
  outl[4] += -0.8660254037844386*Ghat[1]*dv10l; 
  outl[5] += -0.5*Ghat[5]*dv10l; 
  outl[6] += -0.8660254037844386*Ghat[3]*dv10l; 
  outl[7] += -0.8660254037844386*Ghat[5]*dv10l; 
return std::abs(amid); 
} 
double VlasovSurfElcMag1x2vSer_VX_P2(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv10l = 2/dxvl[1]; 
  double dv10r = 2/dxvr[1]; 
  const double *E0 = &EM[0]; 

  const double dv1 = dxvr[1], wv1 = wr[1]; 
  const double dv2 = dxvr[2], wv2 = wr[2]; 

  const double *B0 = &EM[9]; 
  const double *B1 = &EM[12]; 
  const double *B2 = &EM[15]; 

  double abar0[3]; 

  double abar1[3]; 


  abar0[0] = E0[0]+wv2*B2[0]; 
  abar0[1] = E0[1]+wv2*B2[1]; 
  abar0[2] = E0[2]+wv2*B2[2]; 

  double Ghat[20]; 

  for(unsigned int i=0; i<20; ++i){ 

    Ghat[i]=0.0; 

  }; 

  double favg[20]; 

  favg[0] = 1*fr[0]+fl[0]; 
  favg[1] = 1*fr[1]+fl[1]; 
  favg[2] = -1*fr[2]+fl[2]; 
  favg[3] = 1*fr[3]+fl[3]; 
  favg[4] = -1*fr[4]+fl[4]; 
  favg[5] = 1*fr[5]+fl[5]; 
  favg[6] = -1*fr[6]+fl[6]; 
  favg[7] = 1*fr[7]+fl[7]; 
  favg[8] = 1*fr[8]+fl[8]; 
  favg[9] = 1*fr[9]+fl[9]; 
  favg[10] = -1*fr[10]+fl[10]; 
  favg[11] = -1*fr[11]+fl[11]; 
  favg[12] = 1*fr[12]+fl[12]; 
  favg[13] = 1*fr[13]+fl[13]; 
  favg[14] = 1*fr[14]+fl[14]; 
  favg[15] = 1*fr[15]+fl[15]; 
  favg[16] = -1*fr[16]+fl[16]; 
  favg[17] = -1*fr[17]+fl[17]; 
  favg[18] = 1*fr[18]+fl[18]; 
  favg[19] = -1*fr[19]+fl[19]; 
  double fjump[20]; 

  fjump[0] = amax*(1*fr[0]-fl[0]); 
  fjump[1] = amax*(1*fr[1]-fl[1]); 
  fjump[2] = amax*(-1*fr[2]-fl[2]); 
  fjump[3] = amax*(1*fr[3]-fl[3]); 
  fjump[4] = amax*(-1*fr[4]-fl[4]); 
  fjump[5] = amax*(1*fr[5]-fl[5]); 
  fjump[6] = amax*(-1*fr[6]-fl[6]); 
  fjump[7] = amax*(1*fr[7]-fl[7]); 
  fjump[8] = amax*(1*fr[8]-fl[8]); 
  fjump[9] = amax*(1*fr[9]-fl[9]); 
  fjump[10] = amax*(-1*fr[10]-fl[10]); 
  fjump[11] = amax*(-1*fr[11]-fl[11]); 
  fjump[12] = amax*(1*fr[12]-fl[12]); 
  fjump[13] = amax*(1*fr[13]-fl[13]); 
  fjump[14] = amax*(1*fr[14]-fl[14]); 
  fjump[15] = amax*(1*fr[15]-fl[15]); 
  fjump[16] = amax*(-1*fr[16]-fl[16]); 
  fjump[17] = amax*(-1*fr[17]-fl[17]); 
  fjump[18] = amax*(1*fr[18]-fl[18]); 
  fjump[19] = amax*(-1*fr[19]-fl[19]); 
  const double amid = 0.7071067811865475*abar0[0]-0.7905694150420947*abar0[2]; 
  Ghat[0] = (0.2282177322938192*B2[1]*favg[18]+0.1767766952966368*B2[2]*favg[17]+0.2282177322938192*B2[0]*favg[14]+0.1020620726159657*B2[2]*favg[13]+0.1767766952966368*B2[1]*favg[10]+0.1767766952966368*B2[0]*favg[6]+0.1020620726159657*B2[1]*favg[5]+0.1020620726159657*B2[0]*favg[3])*dv2+abar0[1]*(0.7905694150420947*favg[12]+0.6123724356957942*favg[4]+0.3535533905932737*favg[1])+abar0[2]*(0.6123724356957945*favg[11]+0.3535533905932737*favg[7])-1.118033988749895*fjump[8]+abar0[0]*(0.7905694150420949*favg[8]+0.6123724356957942*favg[2]+0.3535533905932737*favg[0])-0.8660254037844385*fjump[2]-0.5*fjump[0]; 
  Ghat[1] = (0.2041241452319315*B2[2]*favg[18]+0.2282177322938192*B2[0]*favg[18]+0.1581138830084189*B2[1]*favg[17]+0.2282177322938192*B2[1]*favg[14]+0.09128709291752767*B2[1]*favg[13]+0.1581138830084189*B2[2]*favg[10]+0.1767766952966368*B2[0]*favg[10]+0.1767766952966368*B2[1]*favg[6]+0.09128709291752765*B2[2]*favg[5]+0.1020620726159657*B2[0]*favg[5]+0.1020620726159657*B2[1]*favg[3])*dv2-1.118033988749895*fjump[12]+abar0[0]*(0.7905694150420947*favg[12]+0.6123724356957942*favg[4]+0.3535533905932737*favg[1])+abar0[2]*(0.7071067811865472*favg[12]+0.5477225575051659*favg[4]+0.3162277660168379*favg[1])+abar0[1]*(0.5477225575051661*favg[11]+0.7905694150420949*favg[8]+0.3162277660168379*favg[7]+0.6123724356957942*favg[2]+0.3535533905932737*favg[0])-0.8660254037844385*fjump[4]-0.5*fjump[1]; 
  Ghat[3] = (0.1581138830084189*B2[1]*favg[19]+0.1581138830084189*B2[0]*favg[16]+0.09128709291752767*B2[1]*favg[15]+0.2282177322938192*B2[1]*favg[12]+0.1767766952966368*B2[2]*favg[11]+0.09128709291752765*B2[0]*favg[9]+0.2282177322938192*B2[0]*favg[8]+0.1020620726159657*B2[2]*favg[7]+0.1767766952966368*B2[1]*favg[4]+0.1767766952966368*B2[0]*favg[2]+0.1020620726159657*favg[1]*B2[1]+0.1020620726159657*favg[0]*B2[0])*dv2+abar0[1]*(0.7905694150420949*favg[18]+0.6123724356957942*favg[10]+0.3535533905932737*favg[5])+abar0[2]*(0.6123724356957942*favg[17]+0.3535533905932736*favg[13])-1.118033988749895*fjump[14]+abar0[0]*(0.7905694150420947*favg[14]+0.6123724356957942*favg[6]+0.3535533905932737*favg[3])-0.8660254037844385*fjump[6]-0.5*fjump[3]; 
  Ghat[5] = (0.1414213562373095*B2[2]*favg[19]+0.158113883008419*B2[0]*favg[19]+0.1581138830084189*B2[1]*favg[16]+0.0816496580927726*B2[2]*favg[15]+0.09128709291752767*B2[0]*favg[15]+0.2041241452319315*B2[2]*favg[12]+0.2282177322938192*B2[0]*favg[12]+0.1581138830084189*B2[1]*favg[11]+0.09128709291752768*B2[1]*favg[9]+0.2282177322938192*B2[1]*favg[8]+0.09128709291752768*B2[1]*favg[7]+0.158113883008419*B2[2]*favg[4]+0.1767766952966368*B2[0]*favg[4]+0.09128709291752768*favg[1]*B2[2]+0.1767766952966368*B2[1]*favg[2]+0.1020620726159657*favg[0]*B2[1]+0.1020620726159657*B2[0]*favg[1])*dv2-1.118033988749895*fjump[18]+abar0[0]*(0.7905694150420949*favg[18]+0.6123724356957944*favg[10]+0.3535533905932737*favg[5])+abar0[2]*(0.7071067811865474*favg[18]+0.547722557505166*favg[10]+0.3162277660168379*favg[5])+abar0[1]*(0.547722557505166*favg[17]+0.7905694150420948*favg[14]+0.3162277660168378*favg[13]+0.6123724356957944*favg[6]+0.3535533905932737*favg[3])-0.8660254037844386*fjump[10]-0.5*fjump[5]; 
  Ghat[7] = (0.2041241452319315*B2[1]*favg[18]+0.1129384878631564*B2[2]*favg[17]+0.1767766952966368*B2[0]*favg[17]+0.2282177322938192*B2[2]*favg[14]+0.06520506636966263*B2[2]*favg[13]+0.1020620726159658*B2[0]*favg[13]+0.1581138830084189*B2[1]*favg[10]+0.1767766952966368*B2[2]*favg[6]+0.09128709291752768*B2[1]*favg[5]+0.1020620726159657*B2[2]*favg[3])*dv2+abar0[1]*(0.7071067811865475*favg[12]+0.5477225575051661*favg[4]+0.3162277660168379*favg[1])-0.8660254037844387*fjump[11]+abar0[0]*(0.6123724356957945*favg[11]+0.3535533905932737*favg[7])+abar0[2]*(0.3912303982179758*favg[11]+0.7905694150420949*favg[8]+0.2258769757263128*favg[7]+0.6123724356957944*favg[2]+0.3535533905932737*favg[0])-0.5*fjump[7]; 
  Ghat[9] = (0.2041241452319315*B2[1]*favg[18]+0.158113883008419*B2[2]*favg[17]+0.2041241452319315*B2[0]*favg[14]+0.09128709291752768*B2[2]*favg[13]+0.158113883008419*B2[1]*favg[10]+0.158113883008419*B2[0]*favg[6]+0.09128709291752767*B2[1]*favg[5]+0.09128709291752767*B2[0]*favg[3])*dv2+abar0[1]*(0.6123724356957944*favg[19]+0.3535533905932737*favg[15])-0.8660254037844387*fjump[16]+abar0[0]*(0.6123724356957946*favg[16]+0.3535533905932737*favg[9])-0.5*fjump[9]; 
  Ghat[13] = (0.1414213562373095*B2[1]*favg[19]+0.158113883008419*B2[2]*favg[16]+0.08164965809277257*B2[1]*favg[15]+0.2041241452319315*B2[1]*favg[12]+0.1129384878631564*B2[2]*favg[11]+0.1767766952966368*B2[0]*favg[11]+0.09128709291752767*B2[2]*favg[9]+0.2282177322938192*B2[2]*favg[8]+0.06520506636966261*B2[2]*favg[7]+0.1020620726159658*B2[0]*favg[7]+0.1581138830084189*B2[1]*favg[4]+0.1767766952966369*favg[2]*B2[2]+0.1020620726159658*favg[0]*B2[2]+0.09128709291752767*favg[1]*B2[1])*dv2+abar0[1]*(0.7071067811865475*favg[18]+0.5477225575051661*favg[10]+0.3162277660168378*favg[5])-0.8660254037844388*fjump[17]+abar0[0]*(0.6123724356957946*favg[17]+0.3535533905932737*favg[13])+abar0[2]*(0.3912303982179758*favg[17]+0.7905694150420949*favg[14]+0.2258769757263128*favg[13]+0.6123724356957946*favg[6]+0.3535533905932737*favg[3])-0.5*fjump[13]; 
  Ghat[15] = (0.1825741858350554*B2[2]*favg[18]+0.2041241452319315*B2[0]*favg[18]+0.1414213562373095*B2[1]*favg[17]+0.2041241452319315*B2[1]*favg[14]+0.08164965809277258*B2[1]*favg[13]+0.1414213562373095*B2[2]*favg[10]+0.1581138830084189*B2[0]*favg[10]+0.1581138830084189*B2[1]*favg[6]+0.08164965809277261*B2[2]*favg[5]+0.09128709291752768*B2[0]*favg[5]+0.09128709291752768*B2[1]*favg[3])*dv2-0.8660254037844388*fjump[19]+abar0[0]*(0.6123724356957946*favg[19]+0.3535533905932737*favg[15])+abar0[2]*(0.5477225575051662*favg[19]+0.3162277660168379*favg[15])+abar0[1]*(0.6123724356957945*favg[16]+0.3535533905932738*favg[9])-0.5*fjump[15]; 

  outr[0] += 0.5*Ghat[0]*dv10r; 
  outr[1] += 0.5*Ghat[1]*dv10r; 
  outr[2] += -0.8660254037844386*Ghat[0]*dv10r; 
  outr[3] += 0.5*Ghat[3]*dv10r; 
  outr[4] += -0.8660254037844386*Ghat[1]*dv10r; 
  outr[5] += 0.5*Ghat[5]*dv10r; 
  outr[6] += -0.8660254037844386*Ghat[3]*dv10r; 
  outr[7] += 0.5*Ghat[7]*dv10r; 
  outr[8] += 1.118033988749895*Ghat[0]*dv10r; 
  outr[9] += 0.5*Ghat[9]*dv10r; 
  outr[10] += -0.8660254037844386*Ghat[5]*dv10r; 
  outr[11] += -0.8660254037844387*Ghat[7]*dv10r; 
  outr[12] += 1.118033988749895*Ghat[1]*dv10r; 
  outr[13] += 0.5*Ghat[13]*dv10r; 
  outr[14] += 1.118033988749895*Ghat[3]*dv10r; 
  outr[15] += 0.5*Ghat[15]*dv10r; 
  outr[16] += -0.8660254037844387*Ghat[9]*dv10r; 
  outr[17] += -0.8660254037844387*Ghat[13]*dv10r; 
  outr[18] += 1.118033988749895*Ghat[5]*dv10r; 
  outr[19] += -0.8660254037844387*Ghat[15]*dv10r; 

  outl[0] += -0.5*Ghat[0]*dv10l; 
  outl[1] += -0.5*Ghat[1]*dv10l; 
  outl[2] += -0.8660254037844386*Ghat[0]*dv10l; 
  outl[3] += -0.5*Ghat[3]*dv10l; 
  outl[4] += -0.8660254037844386*Ghat[1]*dv10l; 
  outl[5] += -0.5*Ghat[5]*dv10l; 
  outl[6] += -0.8660254037844386*Ghat[3]*dv10l; 
  outl[7] += -0.5*Ghat[7]*dv10l; 
  outl[8] += -1.118033988749895*Ghat[0]*dv10l; 
  outl[9] += -0.5*Ghat[9]*dv10l; 
  outl[10] += -0.8660254037844386*Ghat[5]*dv10l; 
  outl[11] += -0.8660254037844387*Ghat[7]*dv10l; 
  outl[12] += -1.118033988749895*Ghat[1]*dv10l; 
  outl[13] += -0.5*Ghat[13]*dv10l; 
  outl[14] += -1.118033988749895*Ghat[3]*dv10l; 
  outl[15] += -0.5*Ghat[15]*dv10l; 
  outl[16] += -0.8660254037844387*Ghat[9]*dv10l; 
  outl[17] += -0.8660254037844387*Ghat[13]*dv10l; 
  outl[18] += -1.118033988749895*Ghat[5]*dv10l; 
  outl[19] += -0.8660254037844387*Ghat[15]*dv10l; 
return std::abs(amid); 
} 
double VlasovSurfElcMag1x2vSer_VY_P1(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv11l = 2/dxvl[2]; 
  double dv11r = 2/dxvr[2]; 
  const double *E1 = &EM[2]; 

  const double dv1 = dxvr[1], wv1 = wr[1]; 
  const double dv2 = dxvr[2], wv2 = wr[2]; 

  const double *B0 = &EM[6]; 
  const double *B1 = &EM[8]; 
  const double *B2 = &EM[10]; 

  double abar0[2]; 

  double abar1[2]; 


  abar1[0] = E1[0]-wv1*B2[0]; 
  abar1[1] = E1[1]-wv1*B2[1]; 

  double Ghat[8]; 

  for(unsigned int i=0; i<8; ++i){ 

    Ghat[i]=0.0; 

  }; 

  double favg[8]; 

  favg[0] = 1*fr[0]+fl[0]; 
  favg[1] = 1*fr[1]+fl[1]; 
  favg[2] = 1*fr[2]+fl[2]; 
  favg[3] = -1*fr[3]+fl[3]; 
  favg[4] = 1*fr[4]+fl[4]; 
  favg[5] = -1*fr[5]+fl[5]; 
  favg[6] = -1*fr[6]+fl[6]; 
  favg[7] = -1*fr[7]+fl[7]; 
  double fjump[8]; 

  fjump[0] = amax*(1*fr[0]-fl[0]); 
  fjump[1] = amax*(1*fr[1]-fl[1]); 
  fjump[2] = amax*(1*fr[2]-fl[2]); 
  fjump[3] = amax*(-1*fr[3]-fl[3]); 
  fjump[4] = amax*(1*fr[4]-fl[4]); 
  fjump[5] = amax*(-1*fr[5]-fl[5]); 
  fjump[6] = amax*(-1*fr[6]-fl[6]); 
  fjump[7] = amax*(-1*fr[7]-fl[7]); 
  const double amid = 0.7071067811865475*abar1[0]; 
  Ghat[0] = ((-0.1767766952966368*B2[1]*favg[7])-0.1767766952966368*B2[0]*favg[6]-0.1020620726159657*B2[1]*favg[4]-0.1020620726159657*B2[0]*favg[2])*dv1+abar1[1]*(0.6123724356957942*favg[5]+0.3535533905932737*favg[1])-0.8660254037844385*fjump[3]+abar1[0]*(0.6123724356957942*favg[3]+0.3535533905932737*favg[0])-0.5*fjump[0]; 
  Ghat[1] = ((-0.1767766952966368*B2[0]*favg[7])-0.1767766952966368*B2[1]*favg[6]-0.1020620726159657*B2[0]*favg[4]-0.1020620726159657*B2[1]*favg[2])*dv1-0.8660254037844385*fjump[5]+abar1[0]*(0.6123724356957942*favg[5]+0.3535533905932737*favg[1])+abar1[1]*(0.6123724356957942*favg[3]+0.3535533905932737*favg[0])-0.5*fjump[1]; 
  Ghat[2] = ((-0.1767766952966368*B2[1]*favg[5])-0.1767766952966368*B2[0]*favg[3]-0.1020620726159657*favg[1]*B2[1]-0.1020620726159657*favg[0]*B2[0])*dv1+abar1[1]*(0.6123724356957942*favg[7]+0.3535533905932737*favg[4])-0.8660254037844385*fjump[6]+abar1[0]*(0.6123724356957942*favg[6]+0.3535533905932737*favg[2])-0.5*fjump[2]; 
  Ghat[4] = ((-0.1767766952966368*B2[0]*favg[5])-0.1767766952966368*B2[1]*favg[3]-0.1020620726159657*favg[0]*B2[1]-0.1020620726159657*B2[0]*favg[1])*dv1-0.8660254037844385*fjump[7]+abar1[0]*(0.6123724356957942*favg[7]+0.3535533905932737*favg[4])+abar1[1]*(0.6123724356957942*favg[6]+0.3535533905932737*favg[2])-0.5*fjump[4]; 

  outr[0] += 0.5*Ghat[0]*dv11r; 
  outr[1] += 0.5*Ghat[1]*dv11r; 
  outr[2] += 0.5*Ghat[2]*dv11r; 
  outr[3] += -0.8660254037844386*Ghat[0]*dv11r; 
  outr[4] += 0.5*Ghat[4]*dv11r; 
  outr[5] += -0.8660254037844386*Ghat[1]*dv11r; 
  outr[6] += -0.8660254037844386*Ghat[2]*dv11r; 
  outr[7] += -0.8660254037844386*Ghat[4]*dv11r; 

  outl[0] += -0.5*Ghat[0]*dv11l; 
  outl[1] += -0.5*Ghat[1]*dv11l; 
  outl[2] += -0.5*Ghat[2]*dv11l; 
  outl[3] += -0.8660254037844386*Ghat[0]*dv11l; 
  outl[4] += -0.5*Ghat[4]*dv11l; 
  outl[5] += -0.8660254037844386*Ghat[1]*dv11l; 
  outl[6] += -0.8660254037844386*Ghat[2]*dv11l; 
  outl[7] += -0.8660254037844386*Ghat[4]*dv11l; 
return std::abs(amid); 
} 
double VlasovSurfElcMag1x2vSer_VY_P2(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv11l = 2/dxvl[2]; 
  double dv11r = 2/dxvr[2]; 
  const double *E1 = &EM[3]; 

  const double dv1 = dxvr[1], wv1 = wr[1]; 
  const double dv2 = dxvr[2], wv2 = wr[2]; 

  const double *B0 = &EM[9]; 
  const double *B1 = &EM[12]; 
  const double *B2 = &EM[15]; 

  double abar0[3]; 

  double abar1[3]; 


  abar1[0] = E1[0]-wv1*B2[0]; 
  abar1[1] = E1[1]-wv1*B2[1]; 
  abar1[2] = E1[2]-wv1*B2[2]; 

  double Ghat[20]; 

  for(unsigned int i=0; i<20; ++i){ 

    Ghat[i]=0.0; 

  }; 

  double favg[20]; 

  favg[0] = 1*fr[0]+fl[0]; 
  favg[1] = 1*fr[1]+fl[1]; 
  favg[2] = 1*fr[2]+fl[2]; 
  favg[3] = -1*fr[3]+fl[3]; 
  favg[4] = 1*fr[4]+fl[4]; 
  favg[5] = -1*fr[5]+fl[5]; 
  favg[6] = -1*fr[6]+fl[6]; 
  favg[7] = 1*fr[7]+fl[7]; 
  favg[8] = 1*fr[8]+fl[8]; 
  favg[9] = 1*fr[9]+fl[9]; 
  favg[10] = -1*fr[10]+fl[10]; 
  favg[11] = 1*fr[11]+fl[11]; 
  favg[12] = 1*fr[12]+fl[12]; 
  favg[13] = -1*fr[13]+fl[13]; 
  favg[14] = -1*fr[14]+fl[14]; 
  favg[15] = 1*fr[15]+fl[15]; 
  favg[16] = 1*fr[16]+fl[16]; 
  favg[17] = -1*fr[17]+fl[17]; 
  favg[18] = -1*fr[18]+fl[18]; 
  favg[19] = 1*fr[19]+fl[19]; 
  double fjump[20]; 

  fjump[0] = amax*(1*fr[0]-fl[0]); 
  fjump[1] = amax*(1*fr[1]-fl[1]); 
  fjump[2] = amax*(1*fr[2]-fl[2]); 
  fjump[3] = amax*(-1*fr[3]-fl[3]); 
  fjump[4] = amax*(1*fr[4]-fl[4]); 
  fjump[5] = amax*(-1*fr[5]-fl[5]); 
  fjump[6] = amax*(-1*fr[6]-fl[6]); 
  fjump[7] = amax*(1*fr[7]-fl[7]); 
  fjump[8] = amax*(1*fr[8]-fl[8]); 
  fjump[9] = amax*(1*fr[9]-fl[9]); 
  fjump[10] = amax*(-1*fr[10]-fl[10]); 
  fjump[11] = amax*(1*fr[11]-fl[11]); 
  fjump[12] = amax*(1*fr[12]-fl[12]); 
  fjump[13] = amax*(-1*fr[13]-fl[13]); 
  fjump[14] = amax*(-1*fr[14]-fl[14]); 
  fjump[15] = amax*(1*fr[15]-fl[15]); 
  fjump[16] = amax*(1*fr[16]-fl[16]); 
  fjump[17] = amax*(-1*fr[17]-fl[17]); 
  fjump[18] = amax*(-1*fr[18]-fl[18]); 
  fjump[19] = amax*(1*fr[19]-fl[19]); 
  const double amid = 0.7071067811865475*abar1[0]-0.7905694150420947*abar1[2]; 
  Ghat[0] = ((-0.2282177322938192*B2[1]*favg[19])-0.1767766952966368*B2[2]*favg[17]-0.2282177322938192*B2[0]*favg[16]-0.1020620726159657*B2[2]*favg[11]-0.1767766952966368*B2[1]*favg[10]-0.1767766952966368*B2[0]*favg[6]-0.1020620726159657*B2[1]*favg[4]-0.1020620726159657*B2[0]*favg[2])*dv1+abar1[1]*(0.7905694150420947*favg[15]+0.6123724356957942*favg[5]+0.3535533905932737*favg[1])+abar1[2]*(0.6123724356957945*favg[13]+0.3535533905932737*favg[7])-1.118033988749895*fjump[9]+abar1[0]*(0.7905694150420949*favg[9]+0.6123724356957942*favg[3]+0.3535533905932737*favg[0])-0.8660254037844385*fjump[3]-0.5*fjump[0]; 
  Ghat[1] = ((-0.2041241452319315*B2[2]*favg[19])-0.2282177322938192*B2[0]*favg[19]-0.1581138830084189*B2[1]*favg[17]-0.2282177322938192*B2[1]*favg[16]-0.09128709291752767*B2[1]*favg[11]-0.1581138830084189*B2[2]*favg[10]-0.1767766952966368*B2[0]*favg[10]-0.1767766952966368*B2[1]*favg[6]-0.09128709291752765*B2[2]*favg[4]-0.1020620726159657*B2[0]*favg[4]-0.1020620726159657*B2[1]*favg[2])*dv1-1.118033988749895*fjump[15]+abar1[0]*(0.7905694150420947*favg[15]+0.6123724356957942*favg[5]+0.3535533905932737*favg[1])+abar1[2]*(0.7071067811865472*favg[15]+0.5477225575051659*favg[5]+0.3162277660168379*favg[1])+abar1[1]*(0.5477225575051661*favg[13]+0.7905694150420949*favg[9]+0.3162277660168379*favg[7]+0.6123724356957942*favg[3]+0.3535533905932737*favg[0])-0.8660254037844385*fjump[5]-0.5*fjump[1]; 
  Ghat[2] = ((-0.1581138830084189*B2[1]*favg[18])-0.2282177322938192*B2[1]*favg[15]-0.1581138830084189*B2[0]*favg[14]-0.1767766952966368*B2[2]*favg[13]-0.09128709291752767*B2[1]*favg[12]-0.2282177322938192*B2[0]*favg[9]-0.09128709291752765*B2[0]*favg[8]-0.1020620726159657*B2[2]*favg[7]-0.1767766952966368*B2[1]*favg[5]-0.1767766952966368*B2[0]*favg[3]-0.1020620726159657*favg[1]*B2[1]-0.1020620726159657*favg[0]*B2[0])*dv1+abar1[1]*(0.7905694150420949*favg[19]+0.6123724356957942*favg[10]+0.3535533905932737*favg[4])+abar1[2]*(0.6123724356957942*favg[17]+0.3535533905932736*favg[11])-1.118033988749895*fjump[16]+abar1[0]*(0.7905694150420947*favg[16]+0.6123724356957942*favg[6]+0.3535533905932737*favg[2])-0.8660254037844385*fjump[6]-0.5*fjump[2]; 
  Ghat[4] = ((-0.1414213562373095*B2[2]*favg[18])-0.158113883008419*B2[0]*favg[18]-0.2041241452319315*B2[2]*favg[15]-0.2282177322938192*B2[0]*favg[15]-0.1581138830084189*B2[1]*favg[14]-0.1581138830084189*B2[1]*favg[13]-0.0816496580927726*B2[2]*favg[12]-0.09128709291752767*B2[0]*favg[12]-0.2282177322938192*B2[1]*favg[9]-0.09128709291752768*B2[1]*favg[8]-0.09128709291752768*B2[1]*favg[7]-0.158113883008419*B2[2]*favg[5]-0.1767766952966368*B2[0]*favg[5]-0.1767766952966368*B2[1]*favg[3]-0.09128709291752768*favg[1]*B2[2]-0.1020620726159657*favg[0]*B2[1]-0.1020620726159657*B2[0]*favg[1])*dv1-1.118033988749895*fjump[19]+abar1[0]*(0.7905694150420949*favg[19]+0.6123724356957944*favg[10]+0.3535533905932737*favg[4])+abar1[2]*(0.7071067811865474*favg[19]+0.547722557505166*favg[10]+0.3162277660168379*favg[4])+abar1[1]*(0.547722557505166*favg[17]+0.7905694150420948*favg[16]+0.3162277660168378*favg[11]+0.6123724356957944*favg[6]+0.3535533905932737*favg[2])-0.8660254037844386*fjump[10]-0.5*fjump[4]; 
  Ghat[7] = ((-0.2041241452319315*B2[1]*favg[19])-0.1129384878631564*B2[2]*favg[17]-0.1767766952966368*B2[0]*favg[17]-0.2282177322938192*B2[2]*favg[16]-0.06520506636966263*B2[2]*favg[11]-0.1020620726159658*B2[0]*favg[11]-0.1581138830084189*B2[1]*favg[10]-0.1767766952966368*B2[2]*favg[6]-0.09128709291752768*B2[1]*favg[4]-0.1020620726159657*favg[2]*B2[2])*dv1+abar1[1]*(0.7071067811865475*favg[15]+0.5477225575051661*favg[5]+0.3162277660168379*favg[1])-0.8660254037844387*fjump[13]+abar1[0]*(0.6123724356957945*favg[13]+0.3535533905932737*favg[7])+abar1[2]*(0.3912303982179758*favg[13]+0.7905694150420949*favg[9]+0.2258769757263128*favg[7]+0.6123724356957944*favg[3]+0.3535533905932737*favg[0])-0.5*fjump[7]; 
  Ghat[8] = ((-0.2041241452319315*B2[1]*favg[19])-0.158113883008419*B2[2]*favg[17]-0.2041241452319315*B2[0]*favg[16]-0.09128709291752768*B2[2]*favg[11]-0.158113883008419*B2[1]*favg[10]-0.158113883008419*B2[0]*favg[6]-0.09128709291752767*B2[1]*favg[4]-0.09128709291752767*B2[0]*favg[2])*dv1+abar1[1]*(0.6123724356957944*favg[18]+0.3535533905932737*favg[12])-0.8660254037844387*fjump[14]+abar1[0]*(0.6123724356957946*favg[14]+0.3535533905932737*favg[8])-0.5*fjump[8]; 
  Ghat[11] = ((-0.1414213562373095*B2[1]*favg[18])-0.2041241452319315*B2[1]*favg[15]-0.158113883008419*B2[2]*favg[14]-0.1129384878631564*B2[2]*favg[13]-0.1767766952966368*B2[0]*favg[13]-0.08164965809277257*B2[1]*favg[12]-0.2282177322938192*B2[2]*favg[9]-0.09128709291752767*B2[2]*favg[8]-0.06520506636966261*B2[2]*favg[7]-0.1020620726159658*B2[0]*favg[7]-0.1581138830084189*B2[1]*favg[5]-0.1767766952966369*B2[2]*favg[3]-0.1020620726159658*favg[0]*B2[2]-0.09128709291752767*favg[1]*B2[1])*dv1+abar1[1]*(0.7071067811865475*favg[19]+0.5477225575051661*favg[10]+0.3162277660168378*favg[4])-0.8660254037844388*fjump[17]+abar1[0]*(0.6123724356957946*favg[17]+0.3535533905932737*favg[11])+abar1[2]*(0.3912303982179758*favg[17]+0.7905694150420949*favg[16]+0.2258769757263128*favg[11]+0.6123724356957946*favg[6]+0.3535533905932737*favg[2])-0.5*fjump[11]; 
  Ghat[12] = ((-0.1825741858350554*B2[2]*favg[19])-0.2041241452319315*B2[0]*favg[19]-0.1414213562373095*B2[1]*favg[17]-0.2041241452319315*B2[1]*favg[16]-0.08164965809277258*B2[1]*favg[11]-0.1414213562373095*B2[2]*favg[10]-0.1581138830084189*B2[0]*favg[10]-0.1581138830084189*B2[1]*favg[6]-0.08164965809277261*B2[2]*favg[4]-0.09128709291752768*B2[0]*favg[4]-0.09128709291752768*B2[1]*favg[2])*dv1-0.8660254037844388*fjump[18]+abar1[0]*(0.6123724356957946*favg[18]+0.3535533905932737*favg[12])+abar1[2]*(0.5477225575051662*favg[18]+0.3162277660168379*favg[12])+abar1[1]*(0.6123724356957945*favg[14]+0.3535533905932738*favg[8])-0.5*fjump[12]; 

  outr[0] += 0.5*Ghat[0]*dv11r; 
  outr[1] += 0.5*Ghat[1]*dv11r; 
  outr[2] += 0.5*Ghat[2]*dv11r; 
  outr[3] += -0.8660254037844386*Ghat[0]*dv11r; 
  outr[4] += 0.5*Ghat[4]*dv11r; 
  outr[5] += -0.8660254037844386*Ghat[1]*dv11r; 
  outr[6] += -0.8660254037844386*Ghat[2]*dv11r; 
  outr[7] += 0.5*Ghat[7]*dv11r; 
  outr[8] += 0.5*Ghat[8]*dv11r; 
  outr[9] += 1.118033988749895*Ghat[0]*dv11r; 
  outr[10] += -0.8660254037844386*Ghat[4]*dv11r; 
  outr[11] += 0.5*Ghat[11]*dv11r; 
  outr[12] += 0.5*Ghat[12]*dv11r; 
  outr[13] += -0.8660254037844387*Ghat[7]*dv11r; 
  outr[14] += -0.8660254037844387*Ghat[8]*dv11r; 
  outr[15] += 1.118033988749895*Ghat[1]*dv11r; 
  outr[16] += 1.118033988749895*Ghat[2]*dv11r; 
  outr[17] += -0.8660254037844387*Ghat[11]*dv11r; 
  outr[18] += -0.8660254037844387*Ghat[12]*dv11r; 
  outr[19] += 1.118033988749895*Ghat[4]*dv11r; 

  outl[0] += -0.5*Ghat[0]*dv11l; 
  outl[1] += -0.5*Ghat[1]*dv11l; 
  outl[2] += -0.5*Ghat[2]*dv11l; 
  outl[3] += -0.8660254037844386*Ghat[0]*dv11l; 
  outl[4] += -0.5*Ghat[4]*dv11l; 
  outl[5] += -0.8660254037844386*Ghat[1]*dv11l; 
  outl[6] += -0.8660254037844386*Ghat[2]*dv11l; 
  outl[7] += -0.5*Ghat[7]*dv11l; 
  outl[8] += -0.5*Ghat[8]*dv11l; 
  outl[9] += -1.118033988749895*Ghat[0]*dv11l; 
  outl[10] += -0.8660254037844386*Ghat[4]*dv11l; 
  outl[11] += -0.5*Ghat[11]*dv11l; 
  outl[12] += -0.5*Ghat[12]*dv11l; 
  outl[13] += -0.8660254037844387*Ghat[7]*dv11l; 
  outl[14] += -0.8660254037844387*Ghat[8]*dv11l; 
  outl[15] += -1.118033988749895*Ghat[1]*dv11l; 
  outl[16] += -1.118033988749895*Ghat[2]*dv11l; 
  outl[17] += -0.8660254037844387*Ghat[11]*dv11l; 
  outl[18] += -0.8660254037844387*Ghat[12]*dv11l; 
  outl[19] += -1.118033988749895*Ghat[4]*dv11l; 
return std::abs(amid); 
} 
