#include <VlasovModDecl.h> 
double VlasovVolStream1x3vSerP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  double alpha0[16]; 

  alpha0[0] = 8.0*w0dx0; 
  alpha0[2] = 2.309401076758503*dv0dx0; 

  out[1] += 0.4330127018922193*(alpha0[2]*f[2]+alpha0[0]*f[0]); 
  out[5] += 0.4330127018922193*(alpha0[0]*f[2]+f[0]*alpha0[2]); 
  out[6] += 0.4330127018922193*(alpha0[2]*f[7]+alpha0[0]*f[3]); 
  out[8] += 0.4330127018922193*(alpha0[2]*f[9]+alpha0[0]*f[4]); 
  out[11] += 0.4330127018922193*(alpha0[0]*f[7]+alpha0[2]*f[3]); 
  out[12] += 0.4330127018922193*(alpha0[0]*f[9]+alpha0[2]*f[4]); 
  out[13] += 0.4330127018922193*(alpha0[2]*f[14]+alpha0[0]*f[10]); 
  out[15] += 0.4330127018922193*(alpha0[0]*f[14]+alpha0[2]*f[10]); 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vSerP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  double alpha0[48]; 

  alpha0[0] = 8.0*w0dx0; 
  alpha0[2] = 2.309401076758503*dv0dx0; 

  out[1] += 0.4330127018922193*(alpha0[2]*f[2]+alpha0[0]*f[0]); 
  out[5] += 0.3872983346207416*alpha0[2]*f[12]+0.4330127018922193*(alpha0[0]*f[2]+f[0]*alpha0[2]); 
  out[6] += 0.4330127018922193*(alpha0[2]*f[7]+alpha0[0]*f[3]); 
  out[8] += 0.4330127018922193*(alpha0[2]*f[9]+alpha0[0]*f[4]); 
  out[11] += 0.9682458365518543*(alpha0[2]*f[5]+alpha0[0]*f[1]); 
  out[15] += 0.3872983346207416*alpha0[2]*f[22]+0.4330127018922193*(alpha0[0]*f[7]+alpha0[2]*f[3]); 
  out[16] += 0.3872983346207416*alpha0[2]*f[26]+0.4330127018922193*(alpha0[0]*f[9]+alpha0[2]*f[4]); 
  out[17] += 0.4330127018922193*(alpha0[2]*f[18]+alpha0[0]*f[10]); 
  out[19] += 0.8660254037844386*alpha0[2]*f[20]+0.9682458365518543*(alpha0[0]*f[5]+f[1]*alpha0[2]); 
  out[20] += 0.4330127018922193*alpha0[0]*f[12]+0.3872983346207416*alpha0[2]*f[2]; 
  out[21] += 0.9682458365518543*(alpha0[2]*f[15]+alpha0[0]*f[6]); 
  out[23] += 0.4330127018922193*(alpha0[2]*f[24]+alpha0[0]*f[13]); 
  out[25] += 0.9682458365518543*(alpha0[2]*f[16]+alpha0[0]*f[8]); 
  out[28] += 0.4330127018922193*(alpha0[2]*f[29]+alpha0[0]*f[14]); 
  out[31] += 0.3872983346207416*alpha0[2]*f[38]+0.4330127018922193*(alpha0[0]*f[18]+alpha0[2]*f[10]); 
  out[32] += 0.8660254037844386*alpha0[2]*f[33]+0.9682458365518543*(alpha0[0]*f[15]+alpha0[2]*f[6]); 
  out[33] += 0.4330127018922193*alpha0[0]*f[22]+0.3872983346207416*alpha0[2]*f[7]; 
  out[34] += 0.4330127018922193*(alpha0[0]*f[24]+alpha0[2]*f[13]); 
  out[35] += 0.8660254037844386*alpha0[2]*f[36]+0.9682458365518543*(alpha0[0]*f[16]+alpha0[2]*f[8]); 
  out[36] += 0.4330127018922193*alpha0[0]*f[26]+0.3872983346207416*alpha0[2]*f[9]; 
  out[37] += 0.9682458365518543*(alpha0[2]*f[31]+alpha0[0]*f[17]); 
  out[39] += 0.4330127018922193*(alpha0[2]*f[40]+alpha0[0]*f[27]); 
  out[41] += 0.4330127018922193*(alpha0[0]*f[29]+alpha0[2]*f[14]); 
  out[42] += 0.4330127018922193*(alpha0[2]*f[43]+alpha0[0]*f[30]); 
  out[44] += 0.8660254037844386*alpha0[2]*f[45]+0.9682458365518543*(alpha0[0]*f[31]+alpha0[2]*f[17]); 
  out[45] += 0.4330127018922193*alpha0[0]*f[38]+0.3872983346207416*alpha0[2]*f[18]; 
  out[46] += 0.4330127018922193*(alpha0[0]*f[40]+alpha0[2]*f[27]); 
  out[47] += 0.4330127018922193*(alpha0[0]*f[43]+alpha0[2]*f[30]); 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vSerP3(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  double alpha0[80]; 

  alpha0[0] = 8.0*w0dx0; 
  alpha0[2] = 2.309401076758503*dv0dx0; 

  out[1] += 0.4330127018922193*(alpha0[2]*f[2]+alpha0[0]*f[0]); 
  out[5] += 0.3872983346207416*alpha0[2]*f[12]+0.4330127018922193*(alpha0[0]*f[2]+f[0]*alpha0[2]); 
  out[6] += 0.4330127018922193*(alpha0[2]*f[7]+alpha0[0]*f[3]); 
  out[8] += 0.4330127018922193*(alpha0[2]*f[9]+alpha0[0]*f[4]); 
  out[11] += 0.9682458365518543*(alpha0[2]*f[5]+alpha0[0]*f[1]); 
  out[15] += 0.3872983346207416*alpha0[2]*f[22]+0.4330127018922193*(alpha0[0]*f[7]+alpha0[2]*f[3]); 
  out[16] += 0.3872983346207416*alpha0[2]*f[26]+0.4330127018922193*(alpha0[0]*f[9]+alpha0[2]*f[4]); 
  out[17] += 0.4330127018922193*(alpha0[2]*f[18]+alpha0[0]*f[10]); 
  out[19] += 0.8660254037844386*alpha0[2]*f[20]+0.9682458365518543*(alpha0[0]*f[5]+f[1]*alpha0[2]); 
  out[20] += 0.3803194146278324*alpha0[2]*f[32]+0.4330127018922193*alpha0[0]*f[12]+0.3872983346207416*alpha0[2]*f[2]; 
  out[21] += 0.9682458365518543*(alpha0[2]*f[15]+alpha0[0]*f[6]); 
  out[23] += 0.4330127018922193*(alpha0[2]*f[24]+alpha0[0]*f[13]); 
  out[25] += 0.9682458365518543*(alpha0[2]*f[16]+alpha0[0]*f[8]); 
  out[28] += 0.4330127018922193*(alpha0[2]*f[29]+alpha0[0]*f[14]); 
  out[31] += 1.479019945774904*(alpha0[2]*f[19]+alpha0[0]*f[11])+0.6614378277661477*(alpha0[2]*f[2]+alpha0[0]*f[0]); 
  out[35] += 0.3872983346207416*alpha0[2]*f[42]+0.4330127018922193*(alpha0[0]*f[18]+alpha0[2]*f[10]); 
  out[36] += 0.8660254037844386*alpha0[2]*f[37]+0.9682458365518543*(alpha0[0]*f[15]+alpha0[2]*f[6]); 
  out[37] += 0.3803194146278324*alpha0[2]*f[51]+0.4330127018922193*alpha0[0]*f[22]+0.3872983346207416*alpha0[2]*f[7]; 
  out[38] += 0.4330127018922193*(alpha0[0]*f[24]+alpha0[2]*f[13]); 
  out[39] += 0.8660254037844386*alpha0[2]*f[40]+0.9682458365518543*(alpha0[0]*f[16]+alpha0[2]*f[8]); 
  out[40] += 0.3803194146278324*alpha0[2]*f[55]+0.4330127018922193*alpha0[0]*f[26]+0.3872983346207416*alpha0[2]*f[9]; 
  out[41] += 0.9682458365518543*(alpha0[2]*f[35]+alpha0[0]*f[17]); 
  out[43] += 0.4330127018922193*(alpha0[2]*f[44]+alpha0[0]*f[27]); 
  out[45] += 0.4330127018922193*(alpha0[0]*f[29]+alpha0[2]*f[14]); 
  out[46] += 0.4330127018922193*(alpha0[2]*f[47]+alpha0[0]*f[30]); 
  out[48] += 1.479019945774904*alpha0[0]*f[19]+alpha0[2]*(0.5916079783099616*f[12]+1.479019945774904*f[11])+0.6614378277661477*(alpha0[0]*f[2]+f[0]*alpha0[2]); 
  out[49] += 0.4330127018922193*alpha0[0]*f[32]+0.3803194146278324*alpha0[2]*f[12]; 
  out[50] += 1.479019945774904*(alpha0[2]*f[36]+alpha0[0]*f[21])+0.6614378277661477*(alpha0[2]*f[7]+alpha0[0]*f[3]); 
  out[52] += 0.4330127018922193*(alpha0[2]*f[53]+alpha0[0]*f[33]); 
  out[54] += 1.479019945774904*(alpha0[2]*f[39]+alpha0[0]*f[25])+0.6614378277661477*(alpha0[2]*f[9]+alpha0[0]*f[4]); 
  out[57] += 0.4330127018922193*(alpha0[2]*f[58]+alpha0[0]*f[34]); 
  out[60] += 0.8660254037844386*alpha0[2]*f[61]+0.9682458365518543*(alpha0[0]*f[35]+alpha0[2]*f[17]); 
  out[61] += 0.3803194146278324*alpha0[2]*f[70]+0.4330127018922193*alpha0[0]*f[42]+0.3872983346207416*alpha0[2]*f[18]; 
  out[62] += 0.4330127018922193*(alpha0[0]*f[44]+alpha0[2]*f[27]); 
  out[63] += 0.4330127018922193*(alpha0[0]*f[47]+alpha0[2]*f[30]); 
  out[64] += 1.479019945774904*alpha0[0]*f[36]+alpha0[2]*(0.5916079783099616*f[22]+1.479019945774904*f[21])+0.6614378277661477*(alpha0[0]*f[7]+alpha0[2]*f[3]); 
  out[65] += 0.4330127018922193*alpha0[0]*f[51]+0.3803194146278324*alpha0[2]*f[22]; 
  out[66] += 0.4330127018922193*(alpha0[0]*f[53]+alpha0[2]*f[33]); 
  out[67] += 1.479019945774904*alpha0[0]*f[39]+alpha0[2]*(0.5916079783099616*f[26]+1.479019945774904*f[25])+0.6614378277661477*(alpha0[0]*f[9]+alpha0[2]*f[4]); 
  out[68] += 0.4330127018922193*alpha0[0]*f[55]+0.3803194146278324*alpha0[2]*f[26]; 
  out[69] += 1.479019945774904*(alpha0[2]*f[60]+alpha0[0]*f[41])+0.6614378277661477*(alpha0[2]*f[18]+alpha0[0]*f[10]); 
  out[71] += 0.4330127018922193*(alpha0[2]*f[72]+alpha0[0]*f[56]); 
  out[73] += 0.4330127018922193*(alpha0[0]*f[58]+alpha0[2]*f[34]); 
  out[74] += 0.4330127018922193*(alpha0[2]*f[75]+alpha0[0]*f[59]); 
  out[76] += 1.479019945774904*alpha0[0]*f[60]+alpha0[2]*(0.5916079783099616*f[42]+1.479019945774904*f[41])+0.6614378277661477*(alpha0[0]*f[18]+alpha0[2]*f[10]); 
  out[77] += 0.4330127018922193*alpha0[0]*f[70]+0.3803194146278324*alpha0[2]*f[42]; 
  out[78] += 0.4330127018922193*(alpha0[0]*f[72]+alpha0[2]*f[56]); 
  out[79] += 0.4330127018922193*(alpha0[0]*f[75]+alpha0[2]*f[59]); 
return std::abs(w0dx0)+dv0dx0/2; 
} 
