#include <VlasovModDecl.h> 
double VlasovVolStream1x3vMaxP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vMaxP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[12]+f[0])*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[5]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vMaxP3(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[12]+f[0])*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[5]*dv0dx0; 
  out[15] += 3.464101615137754*f[7]*w0dx0+(0.8944271909999161*f[22]+f[3])*dv0dx0; 
  out[16] += 3.464101615137754*f[9]*w0dx0+(0.8944271909999161*f[26]+f[4])*dv0dx0; 
  out[17] += 3.464101615137754*f[10]*w0dx0+f[18]*dv0dx0; 
  out[19] += 7.745966692414834*f[5]*w0dx0+(2.0*f[20]+2.23606797749979*f[1])*dv0dx0; 
  out[20] += 3.464101615137755*f[12]*w0dx0+(0.8783100656536798*f[32]+0.8944271909999161*f[2])*dv0dx0; 
  out[21] += 7.745966692414834*f[6]*w0dx0+2.23606797749979*f[15]*dv0dx0; 
  out[23] += 3.464101615137755*f[13]*w0dx0+f[24]*dv0dx0; 
  out[25] += 7.745966692414834*f[8]*w0dx0+2.23606797749979*f[16]*dv0dx0; 
  out[28] += 3.464101615137755*f[14]*w0dx0+f[29]*dv0dx0; 
  out[31] += (11.83215956619923*f[11]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[19]+1.527525231651947*f[2])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vMaxP4(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[12]+f[0])*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[5]*dv0dx0; 
  out[15] += 3.464101615137754*f[7]*w0dx0+(0.8944271909999161*f[22]+f[3])*dv0dx0; 
  out[16] += 3.464101615137754*f[9]*w0dx0+(0.8944271909999161*f[26]+f[4])*dv0dx0; 
  out[17] += 3.464101615137754*f[10]*w0dx0+f[18]*dv0dx0; 
  out[19] += 7.745966692414834*f[5]*w0dx0+(2.0*f[20]+2.23606797749979*f[1])*dv0dx0; 
  out[20] += 3.464101615137755*f[12]*w0dx0+(0.8783100656536798*f[32]+0.8944271909999161*f[2])*dv0dx0; 
  out[21] += 7.745966692414834*f[6]*w0dx0+2.23606797749979*f[15]*dv0dx0; 
  out[23] += 3.464101615137755*f[13]*w0dx0+f[24]*dv0dx0; 
  out[25] += 7.745966692414834*f[8]*w0dx0+2.23606797749979*f[16]*dv0dx0; 
  out[28] += 3.464101615137755*f[14]*w0dx0+f[29]*dv0dx0; 
  out[31] += (11.83215956619923*f[11]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[19]+1.527525231651947*f[2])*dv0dx0; 
  out[35] += 3.464101615137754*f[18]*w0dx0+(0.8944271909999159*f[42]+f[10])*dv0dx0; 
  out[36] += 7.745966692414834*f[15]*w0dx0+(2.0*f[37]+2.23606797749979*f[6])*dv0dx0; 
  out[37] += 3.464101615137755*f[22]*w0dx0+(0.8783100656536798*f[57]+0.8944271909999159*f[7])*dv0dx0; 
  out[38] += 3.464101615137755*f[24]*w0dx0+(0.8944271909999159*f[50]+f[13])*dv0dx0; 
  out[39] += 7.745966692414834*f[16]*w0dx0+(2.0*f[40]+2.23606797749979*f[8])*dv0dx0; 
  out[40] += 3.464101615137755*f[26]*w0dx0+(0.8783100656536798*f[61]+0.8944271909999159*f[9])*dv0dx0; 
  out[41] += 7.745966692414834*f[17]*w0dx0+2.23606797749979*f[35]*dv0dx0; 
  out[43] += 3.464101615137755*f[27]*w0dx0+f[44]*dv0dx0; 
  out[45] += 3.464101615137755*f[29]*w0dx0+(0.8944271909999159*f[52]+f[14])*dv0dx0; 
  out[46] += 3.464101615137755*f[30]*w0dx0+f[47]*dv0dx0; 
  out[48] += 7.745966692414834*f[20]*w0dx0+(1.963961012123931*f[55]+2.0*f[5])*dv0dx0; 
  out[49] += 7.745966692414834*f[23]*w0dx0+2.23606797749979*f[38]*dv0dx0; 
  out[51] += 7.745966692414834*f[28]*w0dx0+2.23606797749979*f[45]*dv0dx0; 
  out[54] += (11.83215956619923*f[19]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[48]+1.366260102127946*f[12]+3.415650255319866*f[11]+1.527525231651947*f[0])*dv0dx0; 
  out[55] += 3.464101615137754*f[32]*w0dx0+(0.8728715609439696*f[67]+0.8783100656536798*f[12])*dv0dx0; 
  out[56] += (11.83215956619923*f[21]+5.291502622129181*f[3])*w0dx0+(3.415650255319866*f[36]+1.527525231651947*f[7])*dv0dx0; 
  out[58] += 3.464101615137754*f[33]*w0dx0+f[59]*dv0dx0; 
  out[60] += (11.83215956619923*f[25]+5.291502622129181*f[4])*w0dx0+(3.415650255319866*f[39]+1.527525231651947*f[9])*dv0dx0; 
  out[63] += 3.464101615137754*f[34]*w0dx0+f[64]*dv0dx0; 
  out[66] += (15.87450786638754*f[31]+10.39230484541326*f[1])*w0dx0+(4.58257569495584*f[54]+3.0*f[5])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x3vMaxP5(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[5] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[12]+f[0])*dv0dx0; 
  out[6] += 3.464101615137754*f[3]*w0dx0+f[7]*dv0dx0; 
  out[8] += 3.464101615137754*f[4]*w0dx0+f[9]*dv0dx0; 
  out[11] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[5]*dv0dx0; 
  out[15] += 3.464101615137754*f[7]*w0dx0+(0.8944271909999161*f[22]+f[3])*dv0dx0; 
  out[16] += 3.464101615137754*f[9]*w0dx0+(0.8944271909999161*f[26]+f[4])*dv0dx0; 
  out[17] += 3.464101615137754*f[10]*w0dx0+f[18]*dv0dx0; 
  out[19] += 7.745966692414834*f[5]*w0dx0+(2.0*f[20]+2.23606797749979*f[1])*dv0dx0; 
  out[20] += 3.464101615137755*f[12]*w0dx0+(0.8783100656536798*f[32]+0.8944271909999161*f[2])*dv0dx0; 
  out[21] += 7.745966692414834*f[6]*w0dx0+2.23606797749979*f[15]*dv0dx0; 
  out[23] += 3.464101615137755*f[13]*w0dx0+f[24]*dv0dx0; 
  out[25] += 7.745966692414834*f[8]*w0dx0+2.23606797749979*f[16]*dv0dx0; 
  out[28] += 3.464101615137755*f[14]*w0dx0+f[29]*dv0dx0; 
  out[31] += (11.83215956619923*f[11]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[19]+1.527525231651947*f[2])*dv0dx0; 
  out[35] += 3.464101615137754*f[18]*w0dx0+(0.8944271909999159*f[42]+f[10])*dv0dx0; 
  out[36] += 7.745966692414834*f[15]*w0dx0+(2.0*f[37]+2.23606797749979*f[6])*dv0dx0; 
  out[37] += 3.464101615137755*f[22]*w0dx0+(0.8783100656536798*f[57]+0.8944271909999159*f[7])*dv0dx0; 
  out[38] += 3.464101615137755*f[24]*w0dx0+(0.8944271909999159*f[50]+f[13])*dv0dx0; 
  out[39] += 7.745966692414834*f[16]*w0dx0+(2.0*f[40]+2.23606797749979*f[8])*dv0dx0; 
  out[40] += 3.464101615137755*f[26]*w0dx0+(0.8783100656536798*f[61]+0.8944271909999159*f[9])*dv0dx0; 
  out[41] += 7.745966692414834*f[17]*w0dx0+2.23606797749979*f[35]*dv0dx0; 
  out[43] += 3.464101615137755*f[27]*w0dx0+f[44]*dv0dx0; 
  out[45] += 3.464101615137755*f[29]*w0dx0+(0.8944271909999159*f[52]+f[14])*dv0dx0; 
  out[46] += 3.464101615137755*f[30]*w0dx0+f[47]*dv0dx0; 
  out[48] += 7.745966692414834*f[20]*w0dx0+(1.963961012123931*f[55]+2.0*f[5])*dv0dx0; 
  out[49] += 7.745966692414834*f[23]*w0dx0+2.23606797749979*f[38]*dv0dx0; 
  out[51] += 7.745966692414834*f[28]*w0dx0+2.23606797749979*f[45]*dv0dx0; 
  out[54] += (11.83215956619923*f[19]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[48]+1.366260102127946*f[12]+3.415650255319866*f[11]+1.527525231651947*f[0])*dv0dx0; 
  out[55] += 3.464101615137754*f[32]*w0dx0+(0.8728715609439696*f[67]+0.8783100656536798*f[12])*dv0dx0; 
  out[56] += (11.83215956619923*f[21]+5.291502622129181*f[3])*w0dx0+(3.415650255319866*f[36]+1.527525231651947*f[7])*dv0dx0; 
  out[58] += 3.464101615137754*f[33]*w0dx0+f[59]*dv0dx0; 
  out[60] += (11.83215956619923*f[25]+5.291502622129181*f[4])*w0dx0+(3.415650255319866*f[39]+1.527525231651947*f[9])*dv0dx0; 
  out[63] += 3.464101615137754*f[34]*w0dx0+f[64]*dv0dx0; 
  out[66] += (15.87450786638754*f[31]+10.39230484541326*f[1])*w0dx0+(4.58257569495584*f[54]+3.0*f[5])*dv0dx0; 
  out[70] += 7.745966692414834*f[35]*w0dx0+(2.0*f[71]+2.23606797749979*f[17])*dv0dx0; 
  out[71] += 3.464101615137755*f[42]*w0dx0+(0.8783100656536798*f[92]+0.8944271909999161*f[18])*dv0dx0; 
  out[72] += 3.464101615137755*f[44]*w0dx0+(0.8944271909999161*f[79]+f[27])*dv0dx0; 
  out[73] += 3.464101615137755*f[47]*w0dx0+(0.8944271909999161*f[83]+f[30])*dv0dx0; 
  out[74] += 7.745966692414834*f[37]*w0dx0+(1.963961012123931*f[87]+2.0*f[15])*dv0dx0; 
  out[75] += 7.745966692414834*f[38]*w0dx0+(2.0*f[76]+2.23606797749979*f[23])*dv0dx0; 
  out[76] += 3.464101615137754*f[50]*w0dx0+(0.8783100656536796*f[101]+0.8944271909999161*f[24])*dv0dx0; 
  out[77] += 7.745966692414834*f[40]*w0dx0+(1.963961012123931*f[90]+2.0*f[16])*dv0dx0; 
  out[78] += 7.745966692414834*f[43]*w0dx0+2.23606797749979*f[72]*dv0dx0; 
  out[80] += 7.745966692414834*f[45]*w0dx0+(2.0*f[81]+2.23606797749979*f[28])*dv0dx0; 
  out[81] += 3.464101615137754*f[52]*w0dx0+(0.8783100656536796*f[105]+0.8944271909999161*f[29])*dv0dx0; 
  out[82] += 7.745966692414834*f[46]*w0dx0+2.23606797749979*f[73]*dv0dx0; 
  out[84] += 3.464101615137754*f[53]*w0dx0+f[85]*dv0dx0; 
  out[86] += (11.83215956619923*f[36]+5.291502622129181*f[7])*w0dx0+(3.055050463303894*f[74]+1.366260102127946*f[22]+3.415650255319866*f[21]+1.527525231651947*f[3])*dv0dx0; 
  out[87] += 3.464101615137754*f[57]*w0dx0+(0.8728715609439696*f[113]+0.8783100656536798*f[22])*dv0dx0; 
  out[88] += 3.464101615137754*f[59]*w0dx0+(0.8944271909999159*f[103]+f[33])*dv0dx0; 
  out[89] += (11.83215956619923*f[39]+5.291502622129181*f[9])*w0dx0+(3.055050463303894*f[77]+1.366260102127946*f[26]+3.415650255319866*f[25]+1.527525231651947*f[4])*dv0dx0; 
  out[90] += 3.464101615137754*f[61]*w0dx0+(0.8728715609439696*f[117]+0.8783100656536798*f[26])*dv0dx0; 
  out[91] += (11.83215956619923*f[41]+5.291502622129181*f[10])*w0dx0+(3.415650255319866*f[70]+1.527525231651947*f[18])*dv0dx0; 
  out[93] += 3.464101615137754*f[62]*w0dx0+f[94]*dv0dx0; 
  out[95] += 3.464101615137754*f[64]*w0dx0+(0.8944271909999159*f[108]+f[34])*dv0dx0; 
  out[96] += 3.464101615137754*f[65]*w0dx0+f[97]*dv0dx0; 
  out[98] += (11.83215956619923*f[48]+5.291502622129181*f[12])*w0dx0+(3.0*f[99]+1.341640786499874*f[32]+3.055050463303893*f[19]+1.366260102127947*f[2])*dv0dx0; 
  out[99] += 7.745966692414833*f[55]*w0dx0+(1.951800145897067*f[111]+1.963961012123931*f[20])*dv0dx0; 
  out[100] += (11.83215956619923*f[49]+5.291502622129181*f[13])*w0dx0+(3.415650255319866*f[75]+1.527525231651947*f[24])*dv0dx0; 
  out[102] += 7.745966692414833*f[58]*w0dx0+2.236067977499789*f[88]*dv0dx0; 
  out[104] += (11.83215956619923*f[51]+5.291502622129181*f[14])*w0dx0+(3.415650255319866*f[80]+1.527525231651947*f[29])*dv0dx0; 
  out[107] += 7.745966692414833*f[63]*w0dx0+2.236067977499789*f[95]*dv0dx0; 
  out[110] += (15.87450786638754*f[54]+10.39230484541326*f[5])*w0dx0+(4.09878030638384*f[98]+4.58257569495584*f[31]+2.683281572999748*f[20]+3.0*f[1])*dv0dx0; 
  out[111] += 3.464101615137754*f[67]*w0dx0+(0.8703882797784893*f[123]+0.8728715609439696*f[32])*dv0dx0; 
  out[112] += (15.87450786638754*f[56]+10.39230484541326*f[6])*w0dx0+(4.58257569495584*f[86]+3.0*f[15])*dv0dx0; 
  out[114] += 3.464101615137754*f[68]*w0dx0+f[115]*dv0dx0; 
  out[116] += (15.87450786638754*f[60]+10.39230484541326*f[8])*w0dx0+(4.58257569495584*f[89]+3.0*f[16])*dv0dx0; 
  out[119] += 3.464101615137754*f[69]*w0dx0+f[120]*dv0dx0; 
  out[122] += (19.8997487421324*f[66]+14.83239697419133*f[11]+6.6332495807108*f[0])*w0dx0+(5.744562646538029*f[110]+4.281744192888376*f[19]+1.914854215512676*f[2])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
