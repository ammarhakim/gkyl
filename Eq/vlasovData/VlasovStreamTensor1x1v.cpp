#include <VlasovModDecl.h> 
double VlasovVolStream1x1vTensorP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+f[0]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x1vTensorP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[5]+f[0])*dv0dx0; 
  out[4] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[3]*dv0dx0; 
  out[6] += 7.745966692414834*f[3]*w0dx0+(2.0*f[7]+2.23606797749979*f[1])*dv0dx0; 
  out[7] += 3.464101615137755*f[5]*w0dx0+0.8944271909999161*f[2]*dv0dx0; 
  out[8] += 7.745966692414834*f[7]*w0dx0+2.0*f[3]*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x1vTensorP3(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[5]+f[0])*dv0dx0; 
  out[4] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[3]*dv0dx0; 
  out[6] += 7.745966692414834*f[3]*w0dx0+(2.0*f[7]+2.23606797749979*f[1])*dv0dx0; 
  out[7] += 3.464101615137755*f[5]*w0dx0+(0.8783100656536798*f[9]+0.8944271909999161*f[2])*dv0dx0; 
  out[8] += (11.83215956619923*f[4]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[6]+1.527525231651947*f[2])*dv0dx0; 
  out[10] += 7.745966692414834*f[7]*w0dx0+(1.963961012123931*f[12]+2.0*f[3])*dv0dx0; 
  out[11] += (11.83215956619923*f[6]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[10]+1.366260102127946*f[5]+3.415650255319866*f[4]+1.527525231651947*f[0])*dv0dx0; 
  out[12] += 3.464101615137754*f[9]*w0dx0+0.8783100656536798*f[5]*dv0dx0; 
  out[13] += (11.83215956619923*f[10]+5.291502622129181*f[5])*w0dx0+(3.0*f[14]+1.341640786499874*f[9]+3.055050463303893*f[6]+1.366260102127947*f[2])*dv0dx0; 
  out[14] += 7.745966692414833*f[12]*w0dx0+1.963961012123931*f[7]*dv0dx0; 
  out[15] += (11.83215956619923*f[14]+5.291502622129181*f[9])*w0dx0+(3.0*f[10]+1.341640786499874*f[5])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x1vTensorP4(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[5]+f[0])*dv0dx0; 
  out[4] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[3]*dv0dx0; 
  out[6] += 7.745966692414834*f[3]*w0dx0+(2.0*f[7]+2.23606797749979*f[1])*dv0dx0; 
  out[7] += 3.464101615137755*f[5]*w0dx0+(0.8783100656536798*f[9]+0.8944271909999161*f[2])*dv0dx0; 
  out[8] += (11.83215956619923*f[4]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[6]+1.527525231651947*f[2])*dv0dx0; 
  out[10] += 7.745966692414834*f[7]*w0dx0+(1.963961012123931*f[12]+2.0*f[3])*dv0dx0; 
  out[11] += (11.83215956619923*f[6]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[10]+1.366260102127946*f[5]+3.415650255319866*f[4]+1.527525231651947*f[0])*dv0dx0; 
  out[12] += 3.464101615137754*f[9]*w0dx0+(0.8728715609439696*f[14]+0.8783100656536798*f[5])*dv0dx0; 
  out[13] += (15.87450786638754*f[8]+10.39230484541326*f[1])*w0dx0+(4.58257569495584*f[11]+3.0*f[3])*dv0dx0; 
  out[15] += (11.83215956619923*f[10]+5.291502622129181*f[5])*w0dx0+(3.0*f[16]+1.341640786499874*f[9]+3.055050463303893*f[6]+1.366260102127947*f[2])*dv0dx0; 
  out[16] += 7.745966692414833*f[12]*w0dx0+(1.951800145897067*f[18]+1.963961012123931*f[7])*dv0dx0; 
  out[17] += (15.87450786638754*f[11]+10.39230484541326*f[3])*w0dx0+(4.09878030638384*f[15]+4.58257569495584*f[8]+2.683281572999748*f[7]+3.0*f[1])*dv0dx0; 
  out[18] += 3.464101615137754*f[14]*w0dx0+0.8728715609439696*f[9]*dv0dx0; 
  out[19] += (11.83215956619923*f[16]+5.291502622129181*f[9])*w0dx0+(2.98142396999972*f[21]+1.333333333333333*f[14]+3.0*f[10]+1.341640786499874*f[5])*dv0dx0; 
  out[20] += (15.87450786638754*f[15]+10.39230484541326*f[7])*w0dx0+(4.024922359499621*f[19]+2.63493019696104*f[12]+4.098780306383839*f[11]+2.683281572999748*f[3])*dv0dx0; 
  out[21] += 7.745966692414834*f[18]*w0dx0+1.951800145897067*f[12]*dv0dx0; 
  out[22] += (15.87450786638754*f[19]+10.39230484541326*f[12])*w0dx0+(4.0*f[23]+2.618614682831908*f[18]+4.024922359499621*f[15]+2.63493019696104*f[7])*dv0dx0; 
  out[23] += (11.83215956619923*f[21]+5.291502622129181*f[14])*w0dx0+(2.981423969999719*f[16]+1.333333333333333*f[9])*dv0dx0; 
  out[24] += (15.87450786638754*f[23]+10.39230484541326*f[18])*w0dx0+(4.0*f[19]+2.618614682831908*f[12])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x1vTensorP5(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[5]+f[0])*dv0dx0; 
  out[4] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[3]*dv0dx0; 
  out[6] += 7.745966692414834*f[3]*w0dx0+(2.0*f[7]+2.23606797749979*f[1])*dv0dx0; 
  out[7] += 3.464101615137755*f[5]*w0dx0+(0.8783100656536798*f[9]+0.8944271909999161*f[2])*dv0dx0; 
  out[8] += (11.83215956619923*f[4]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[6]+1.527525231651947*f[2])*dv0dx0; 
  out[10] += 7.745966692414834*f[7]*w0dx0+(1.963961012123931*f[12]+2.0*f[3])*dv0dx0; 
  out[11] += (11.83215956619923*f[6]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[10]+1.366260102127946*f[5]+3.415650255319866*f[4]+1.527525231651947*f[0])*dv0dx0; 
  out[12] += 3.464101615137754*f[9]*w0dx0+(0.8728715609439696*f[14]+0.8783100656536798*f[5])*dv0dx0; 
  out[13] += (15.87450786638754*f[8]+10.39230484541326*f[1])*w0dx0+(4.58257569495584*f[11]+3.0*f[3])*dv0dx0; 
  out[15] += (11.83215956619923*f[10]+5.291502622129181*f[5])*w0dx0+(3.0*f[16]+1.341640786499874*f[9]+3.055050463303893*f[6]+1.366260102127947*f[2])*dv0dx0; 
  out[16] += 7.745966692414833*f[12]*w0dx0+(1.951800145897067*f[18]+1.963961012123931*f[7])*dv0dx0; 
  out[17] += (15.87450786638754*f[11]+10.39230484541326*f[3])*w0dx0+(4.09878030638384*f[15]+4.58257569495584*f[8]+2.683281572999748*f[7]+3.0*f[1])*dv0dx0; 
  out[18] += 3.464101615137754*f[14]*w0dx0+(0.8703882797784893*f[20]+0.8728715609439696*f[9])*dv0dx0; 
  out[19] += (19.8997487421324*f[13]+14.83239697419133*f[4]+6.6332495807108*f[0])*w0dx0+(5.744562646538029*f[17]+4.281744192888376*f[6]+1.914854215512676*f[2])*dv0dx0; 
  out[21] += (11.83215956619923*f[16]+5.291502622129181*f[9])*w0dx0+(2.98142396999972*f[23]+1.333333333333333*f[14]+3.0*f[10]+1.341640786499874*f[5])*dv0dx0; 
  out[22] += (15.87450786638754*f[15]+10.39230484541326*f[7])*w0dx0+(4.024922359499621*f[21]+2.63493019696104*f[12]+4.098780306383839*f[11]+2.683281572999748*f[3])*dv0dx0; 
  out[23] += 7.745966692414834*f[18]*w0dx0+(1.946247360403808*f[25]+1.951800145897067*f[12])*dv0dx0; 
  out[24] += (19.8997487421324*f[17]+14.83239697419133*f[6]+6.633249580710801*f[2])*w0dx0+(5.138093031466052*f[22]+5.744562646538029*f[13]+3.829708431025352*f[10]+1.71269767715535*f[5]+4.281744192888376*f[4]+1.914854215512676*f[0])*dv0dx0; 
  out[25] += 3.464101615137755*f[20]*w0dx0+0.8703882797784892*f[14]*dv0dx0; 
  out[26] += (15.87450786638754*f[21]+10.39230484541326*f[12])*w0dx0+(4.0*f[27]+2.618614682831908*f[18]+4.024922359499621*f[15]+2.63493019696104*f[7])*dv0dx0; 
  out[27] += (11.83215956619923*f[23]+5.291502622129181*f[14])*w0dx0+(2.972941950052816*f[29]+1.329540058695776*f[20]+2.981423969999719*f[16]+1.333333333333333*f[9])*dv0dx0; 
  out[28] += (19.8997487421324*f[22]+14.83239697419133*f[10]+6.6332495807108*f[5])*w0dx0+(5.045507195232493*f[26]+5.138093031466052*f[17]+3.760699023168053*f[16]+1.681835731744164*f[9]+3.829708431025352*f[6]+1.712697677155351*f[2])*dv0dx0; 
  out[29] += 7.745966692414833*f[25]*w0dx0+1.946247360403808*f[18]*dv0dx0; 
  out[30] += (15.87450786638754*f[27]+10.39230484541326*f[18])*w0dx0+(3.988620176087328*f[32]+2.611164839335467*f[25]+4.0*f[21]+2.618614682831908*f[12])*dv0dx0; 
  out[31] += (19.8997487421324*f[26]+14.83239697419133*f[16]+6.6332495807108*f[9])*w0dx0+(5.01426536422407*f[30]+3.737412737209254*f[23]+5.045507195232494*f[22]+1.67142178807469*f[14]+3.760699023168052*f[10]+1.681835731744164*f[5])*dv0dx0; 
  out[32] += (11.83215956619923*f[29]+5.291502622129181*f[20])*w0dx0+(2.972941950052816*f[23]+1.329540058695776*f[14])*dv0dx0; 
  out[33] += (19.8997487421324*f[30]+14.83239697419133*f[23]+6.6332495807108*f[14])*w0dx0+(5.0*f[34]+3.726779962499649*f[29]+5.01426536422407*f[26]+1.666666666666667*f[20]+3.737412737209254*f[16]+1.67142178807469*f[9])*dv0dx0; 
  out[34] += (15.87450786638754*f[32]+10.39230484541326*f[25])*w0dx0+(3.988620176087328*f[27]+2.611164839335467*f[18])*dv0dx0; 
  out[35] += (19.8997487421324*f[34]+14.83239697419133*f[29]+6.6332495807108*f[20])*w0dx0+(5.0*f[30]+3.72677996249965*f[23]+1.666666666666667*f[14])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
double VlasovVolStream1x1vTensorP6(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[1]/dxv[0]; 
  double w0dx0 = w[1]/dxv[0]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[2]*dv0dx0; 
  out[3] += 3.464101615137754*f[2]*w0dx0+(0.8944271909999159*f[5]+f[0])*dv0dx0; 
  out[4] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[3]*dv0dx0; 
  out[6] += 7.745966692414834*f[3]*w0dx0+(2.0*f[7]+2.23606797749979*f[1])*dv0dx0; 
  out[7] += 3.464101615137755*f[5]*w0dx0+(0.8783100656536798*f[9]+0.8944271909999161*f[2])*dv0dx0; 
  out[8] += (11.83215956619923*f[4]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[6]+1.527525231651947*f[2])*dv0dx0; 
  out[10] += 7.745966692414834*f[7]*w0dx0+(1.963961012123931*f[12]+2.0*f[3])*dv0dx0; 
  out[11] += (11.83215956619923*f[6]+5.291502622129181*f[2])*w0dx0+(3.055050463303893*f[10]+1.366260102127946*f[5]+3.415650255319866*f[4]+1.527525231651947*f[0])*dv0dx0; 
  out[12] += 3.464101615137754*f[9]*w0dx0+(0.8728715609439696*f[14]+0.8783100656536798*f[5])*dv0dx0; 
  out[13] += (15.87450786638754*f[8]+10.39230484541326*f[1])*w0dx0+(4.58257569495584*f[11]+3.0*f[3])*dv0dx0; 
  out[15] += (11.83215956619923*f[10]+5.291502622129181*f[5])*w0dx0+(3.0*f[16]+1.341640786499874*f[9]+3.055050463303893*f[6]+1.366260102127947*f[2])*dv0dx0; 
  out[16] += 7.745966692414833*f[12]*w0dx0+(1.951800145897067*f[18]+1.963961012123931*f[7])*dv0dx0; 
  out[17] += (15.87450786638754*f[11]+10.39230484541326*f[3])*w0dx0+(4.09878030638384*f[15]+4.58257569495584*f[8]+2.683281572999748*f[7]+3.0*f[1])*dv0dx0; 
  out[18] += 3.464101615137754*f[14]*w0dx0+(0.8703882797784893*f[20]+0.8728715609439696*f[9])*dv0dx0; 
  out[19] += (19.8997487421324*f[13]+14.83239697419133*f[4]+6.6332495807108*f[0])*w0dx0+(5.744562646538029*f[17]+4.281744192888376*f[6]+1.914854215512676*f[2])*dv0dx0; 
  out[21] += (11.83215956619923*f[16]+5.291502622129181*f[9])*w0dx0+(2.98142396999972*f[23]+1.333333333333333*f[14]+3.0*f[10]+1.341640786499874*f[5])*dv0dx0; 
  out[22] += (15.87450786638754*f[15]+10.39230484541326*f[7])*w0dx0+(4.024922359499621*f[21]+2.63493019696104*f[12]+4.098780306383839*f[11]+2.683281572999748*f[3])*dv0dx0; 
  out[23] += 7.745966692414834*f[18]*w0dx0+(1.946247360403808*f[25]+1.951800145897067*f[12])*dv0dx0; 
  out[24] += (19.8997487421324*f[17]+14.83239697419133*f[6]+6.633249580710801*f[2])*w0dx0+(5.138093031466052*f[22]+5.744562646538029*f[13]+3.829708431025352*f[10]+1.71269767715535*f[5]+4.281744192888376*f[4]+1.914854215512676*f[0])*dv0dx0; 
  out[25] += 3.464101615137755*f[20]*w0dx0+(0.8690481892534816*f[27]+0.8703882797784892*f[14])*dv0dx0; 
  out[26] += (23.91652148620279*f[19]+19.07878402833891*f[8]+12.48999599679679*f[1])*w0dx0+(6.904105059069325*f[24]+5.507570547286101*f[11]+3.605551275463989*f[3])*dv0dx0; 
  out[28] += (15.87450786638754*f[21]+10.39230484541326*f[12])*w0dx0+(4.0*f[29]+2.618614682831908*f[18]+4.024922359499621*f[15]+2.63493019696104*f[7])*dv0dx0; 
  out[29] += (11.83215956619923*f[23]+5.291502622129181*f[14])*w0dx0+(2.972941950052816*f[31]+1.329540058695776*f[20]+2.981423969999719*f[16]+1.333333333333333*f[9])*dv0dx0; 
  out[30] += (19.8997487421324*f[22]+14.83239697419133*f[10]+6.6332495807108*f[5])*w0dx0+(5.045507195232493*f[28]+5.138093031466052*f[17]+3.760699023168053*f[16]+1.681835731744164*f[9]+3.829708431025352*f[6]+1.712697677155351*f[2])*dv0dx0; 
  out[31] += 7.745966692414833*f[25]*w0dx0+(1.943250826893888*f[33]+1.946247360403808*f[18])*dv0dx0; 
  out[32] += (23.9165214862028*f[24]+19.07878402833891*f[11]+12.4899959967968*f[3])*w0dx0+(6.175219294351685*f[30]+6.904105059069326*f[19]+4.926120853842978*f[15]+5.507570547286102*f[8]+3.22490309931942*f[7]+3.60555127546399*f[1])*dv0dx0; 
  out[33] += 3.464101615137755*f[27]*w0dx0+0.8690481892534818*f[20]*dv0dx0; 
  out[34] += (15.87450786638754*f[29]+10.39230484541326*f[18])*w0dx0+(3.988620176087328*f[36]+2.611164839335467*f[25]+4.0*f[21]+2.618614682831908*f[12])*dv0dx0; 
  out[35] += (19.8997487421324*f[28]+14.83239697419133*f[16]+6.6332495807108*f[9])*w0dx0+(5.01426536422407*f[34]+3.737412737209254*f[23]+5.045507195232494*f[22]+1.67142178807469*f[14]+3.760699023168052*f[10]+1.681835731744164*f[5])*dv0dx0; 
  out[36] += (11.83215956619923*f[31]+5.291502622129181*f[20])*w0dx0+(2.968364669508922*f[38]+1.327493036606129*f[27]+2.972941950052816*f[23]+1.329540058695776*f[14])*dv0dx0; 
  out[37] += (23.9165214862028*f[30]+19.07878402833891*f[15]+12.4899959967968*f[7])*w0dx0+(6.063944967711083*f[35]+6.175219294351685*f[24]+4.837354648979129*f[21]+3.166791977470485*f[12]+4.926120853842977*f[11]+3.22490309931942*f[3])*dv0dx0; 
  out[38] += 7.745966692414834*f[33]*w0dx0+1.943250826893887*f[25]*dv0dx0; 
  out[39] += (19.8997487421324*f[34]+14.83239697419133*f[23]+6.6332495807108*f[14])*w0dx0+(5.0*f[40]+3.726779962499649*f[31]+5.01426536422407*f[28]+1.666666666666667*f[20]+3.737412737209254*f[16]+1.67142178807469*f[9])*dv0dx0; 
  out[40] += (15.87450786638754*f[36]+10.39230484541326*f[25])*w0dx0+(3.982479109818388*f[42]+2.607144567760445*f[33]+3.988620176087328*f[29]+2.611164839335467*f[18])*dv0dx0; 
  out[41] += (23.91652148620279*f[35]+19.07878402833891*f[21]+12.48999599679679*f[12])*w0dx0+(6.026396959831*f[39]+6.063944967711083*f[30]+4.807401700618652*f[29]+3.147183169877773*f[18]+4.837354648979129*f[15]+3.166791977470486*f[7])*dv0dx0; 
  out[42] += (11.83215956619923*f[38]+5.291502622129181*f[27])*w0dx0+(2.968364669508922*f[31]+1.327493036606129*f[20])*dv0dx0; 
  out[43] += (19.8997487421324*f[40]+14.83239697419133*f[31]+6.6332495807108*f[20])*w0dx0+(4.992301766027063*f[45]+3.721042037676254*f[38]+5.0*f[34]+1.664100588675687*f[27]+3.72677996249965*f[23]+1.666666666666667*f[14])*dv0dx0; 
  out[44] += (23.91652148620279*f[39]+19.07878402833891*f[29]+12.48999599679679*f[18])*w0dx0+(6.009252125773315*f[43]+4.793724854411023*f[36]+6.026396959831*f[35]+3.138229572304239*f[25]+4.807401700618652*f[21]+3.147183169877772*f[12])*dv0dx0; 
  out[45] += (15.87450786638754*f[42]+10.39230484541326*f[33])*w0dx0+(3.982479109818389*f[36]+2.607144567760445*f[25])*dv0dx0; 
  out[46] += (23.9165214862028*f[43]+19.07878402833892*f[36]+12.4899959967968*f[25])*w0dx0+(6.0*f[47]+4.786344211304794*f[42]+6.009252125773315*f[39]+3.133397807202562*f[33]+4.793724854411024*f[29]+3.138229572304239*f[18])*dv0dx0; 
  out[47] += (19.8997487421324*f[45]+14.83239697419133*f[38]+6.633249580710801*f[27])*w0dx0+(4.992301766027063*f[40]+3.721042037676254*f[31]+1.664100588675688*f[20])*dv0dx0; 
  out[48] += (23.9165214862028*f[47]+19.07878402833891*f[42]+12.4899959967968*f[33])*w0dx0+(6.0*f[43]+4.786344211304794*f[36]+3.133397807202561*f[25])*dv0dx0; 
return std::abs(w0dx0)+dv0dx0/2; 
} 
