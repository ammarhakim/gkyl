#include <VlasovModDecl.h> 
double VlasovVolElcMag1x2vSerP1(const double *w, const double *dxv, const double *EM, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. EM/f: Input EM-field/distribution function. out: Incremented output 
  const double dv10 = 2/dxv[1]; 
  const double *E0 = &EM[0]; 
  const double dv1 = dxv[1], wv1 = w[1]; 
  const double dv11 = 2/dxv[2]; 
  const double *E1 = &EM[2]; 
  const double dv2 = dxv[2], wv2 = w[2]; 

  const double *B0 = &EM[6]; 
  const double *B1 = &EM[8]; 
  const double *B2 = &EM[10]; 

  double abar0[2]; 

  double abar1[2]; 


  abar0[0] = E0[0]+wv2*B2[0]; 
  abar1[0] = E1[0]-wv1*B2[0]; 
  abar0[1] = E0[1]+wv2*B2[1]; 
  abar1[1] = E1[1]-wv1*B2[1]; 

  double incr0[8]; 

  double incr1[8]; 

  for(unsigned int i=0; i<8; ++i){ 

    incr0[i]=0.0; 

    incr1[i]=0.0; 

  }; 

  const double amid1 = 0.3535533905932737*B2[0]*dv2+0.7071067811865475*abar0[0]; 
  incr0[2] = (0.3535533905932737*B2[1]*f[5]+0.3535533905932737*B2[0]*f[3])*dv2+1.224744871391589*abar0[1]*f[1]+1.224744871391589*abar0[0]*f[0]; 
  incr0[4] = (0.3535533905932737*B2[0]*f[5]+0.3535533905932737*B2[1]*f[3])*dv2+1.224744871391589*abar0[0]*f[1]+1.224744871391589*f[0]*abar0[1]; 
  incr0[6] = (0.3535533905932737*f[1]*B2[1]+0.3535533905932737*f[0]*B2[0])*dv2+1.224744871391589*abar0[1]*f[5]+1.224744871391589*abar0[0]*f[3]; 
  incr0[7] = (0.3535533905932737*f[0]*B2[1]+0.3535533905932737*B2[0]*f[1])*dv2+1.224744871391589*abar0[0]*f[5]+1.224744871391589*abar0[1]*f[3]; 
  const double amid2 = 0.7071067811865475*abar1[0]-0.3535533905932737*B2[0]*dv1; 
  incr1[3] = ((-0.3535533905932737*B2[1]*f[4])-0.3535533905932737*B2[0]*f[2])*dv1+1.224744871391589*abar1[1]*f[1]+1.224744871391589*abar1[0]*f[0]; 
  incr1[5] = ((-0.3535533905932737*B2[0]*f[4])-0.3535533905932737*B2[1]*f[2])*dv1+1.224744871391589*abar1[0]*f[1]+1.224744871391589*f[0]*abar1[1]; 
  incr1[6] = ((-0.3535533905932737*f[1]*B2[1])-0.3535533905932737*f[0]*B2[0])*dv1+1.224744871391589*abar1[1]*f[4]+1.224744871391589*abar1[0]*f[2]; 
  incr1[7] = ((-0.3535533905932737*f[0]*B2[1])-0.3535533905932737*B2[0]*f[1])*dv1+1.224744871391589*abar1[0]*f[4]+1.224744871391589*abar1[1]*f[2]; 

  out[0] += incr1[0]*dv11+incr0[0]*dv10; 
  out[1] += incr1[1]*dv11+incr0[1]*dv10; 
  out[2] += incr1[2]*dv11+incr0[2]*dv10; 
  out[3] += incr1[3]*dv11+incr0[3]*dv10; 
  out[4] += incr1[4]*dv11+incr0[4]*dv10; 
  out[5] += incr1[5]*dv11+incr0[5]*dv10; 
  out[6] += incr1[6]*dv11+incr0[6]*dv10; 
  out[7] += incr1[7]*dv11+incr0[7]*dv10; 
return std::abs(amid1)/dv1+std::abs(amid2)/dv2; 
} 
double VlasovVolElcMag1x2vSerP2(const double *w, const double *dxv, const double *EM, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. EM/f: Input EM-field/distribution function. out: Incremented output 
  const double dv10 = 2/dxv[1]; 
  const double *E0 = &EM[0]; 
  const double dv1 = dxv[1], wv1 = w[1]; 
  const double dv11 = 2/dxv[2]; 
  const double *E1 = &EM[3]; 
  const double dv2 = dxv[2], wv2 = w[2]; 

  const double *B0 = &EM[9]; 
  const double *B1 = &EM[12]; 
  const double *B2 = &EM[15]; 

  double abar0[3]; 

  double abar1[3]; 


  abar0[0] = E0[0]+wv2*B2[0]; 
  abar1[0] = E1[0]-wv1*B2[0]; 
  abar0[1] = E0[1]+wv2*B2[1]; 
  abar1[1] = E1[1]-wv1*B2[1]; 
  abar0[2] = E0[2]+wv2*B2[2]; 
  abar1[2] = E1[2]-wv1*B2[2]; 

  double incr0[20]; 

  double incr1[20]; 

  for(unsigned int i=0; i<20; ++i){ 

    incr0[i]=0.0; 

    incr1[i]=0.0; 

  }; 

  const double amid1 = (-0.3952847075210473*B2[2]*dv2)+0.3535533905932737*B2[0]*dv2-0.7905694150420947*abar0[2]+0.7071067811865475*abar0[0]; 
  incr0[2] = (0.3535533905932737*B2[2]*f[13]+0.3535533905932737*B2[1]*f[5]+0.3535533905932737*B2[0]*f[3])*dv2+1.224744871391589*abar0[2]*f[7]+1.224744871391589*abar0[1]*f[1]+1.224744871391589*abar0[0]*f[0]; 
  incr0[4] = (0.3162277660168379*B2[1]*f[13]+0.3162277660168379*B2[2]*f[5]+0.3535533905932737*B2[0]*f[5]+0.3535533905932737*B2[1]*f[3])*dv2+abar0[1]*(1.095445115010332*f[7]+1.224744871391589*f[0])+1.095445115010332*f[1]*abar0[2]+1.224744871391589*abar0[0]*f[1]; 
  incr0[6] = (0.3162277660168379*B2[1]*f[15]+0.3162277660168379*B2[0]*f[9]+0.3535533905932737*B2[2]*f[7]+0.3535533905932737*f[1]*B2[1]+0.3535533905932737*f[0]*B2[0])*dv2+1.224744871391589*abar0[2]*f[13]+1.224744871391589*abar0[1]*f[5]+1.224744871391589*abar0[0]*f[3]; 
  incr0[8] = (0.7905694150420947*B2[2]*f[17]+0.7905694150420947*B2[1]*f[10]+0.7905694150420947*B2[0]*f[6])*dv2+2.738612787525831*abar0[2]*f[11]+2.738612787525831*abar0[1]*f[4]+2.738612787525831*abar0[0]*f[2]; 
  incr0[10] = (0.282842712474619*B2[2]*f[15]+0.3162277660168379*B2[0]*f[15]+0.3162277660168379*B2[1]*f[9]+0.3162277660168379*B2[1]*f[7]+0.3162277660168379*f[1]*B2[2]+0.3535533905932737*f[0]*B2[1]+0.3535533905932737*B2[0]*f[1])*dv2+abar0[1]*(1.095445115010332*f[13]+1.224744871391589*f[3])+1.095445115010332*abar0[2]*f[5]+1.224744871391589*abar0[0]*f[5]; 
  incr0[11] = (0.2258769757263128*B2[2]*f[13]+0.3535533905932737*B2[0]*f[13]+0.3162277660168379*B2[1]*f[5]+0.3535533905932737*B2[2]*f[3])*dv2+1.224744871391589*abar0[0]*f[7]+abar0[2]*(0.7824607964359517*f[7]+1.224744871391589*f[0])+1.095445115010332*abar0[1]*f[1]; 
  incr0[12] = (0.7071067811865475*B2[1]*f[17]+0.7071067811865475*B2[2]*f[10]+0.7905694150420948*B2[0]*f[10]+0.7905694150420948*B2[1]*f[6])*dv2+abar0[1]*(2.449489742783178*f[11]+2.738612787525831*f[2])+2.449489742783178*abar0[2]*f[4]+2.738612787525831*abar0[0]*f[4]; 
  incr0[14] = (0.7071067811865475*B2[1]*f[19]+0.7071067811865475*B2[0]*f[16]+0.7905694150420947*B2[2]*f[11]+0.7905694150420948*B2[1]*f[4]+0.7905694150420948*B2[0]*f[2])*dv2+2.738612787525831*abar0[2]*f[17]+2.738612787525831*abar0[1]*f[10]+2.738612787525831*abar0[0]*f[6]; 
  incr0[16] = (0.3162277660168379*B2[2]*f[13]+0.3162277660168379*B2[1]*f[5]+0.3162277660168379*B2[0]*f[3])*dv2+1.224744871391589*abar0[1]*f[15]+1.224744871391589*abar0[0]*f[9]; 
  incr0[17] = (0.282842712474619*B2[1]*f[15]+0.3162277660168379*B2[2]*f[9]+0.2258769757263128*B2[2]*f[7]+0.3535533905932737*B2[0]*f[7]+0.3535533905932737*f[0]*B2[2]+0.3162277660168379*f[1]*B2[1])*dv2+1.224744871391589*abar0[0]*f[13]+abar0[2]*(0.7824607964359517*f[13]+1.224744871391589*f[3])+1.095445115010332*abar0[1]*f[5]; 
  incr0[18] = (0.6324555320336759*B2[2]*f[19]+0.7071067811865475*B2[0]*f[19]+0.7071067811865475*B2[1]*f[16]+0.7071067811865475*B2[1]*f[11]+0.7071067811865475*B2[2]*f[4]+0.7905694150420947*B2[0]*f[4]+0.7905694150420947*B2[1]*f[2])*dv2+abar0[1]*(2.449489742783178*f[17]+2.738612787525831*f[6])+2.449489742783178*abar0[2]*f[10]+2.738612787525831*abar0[0]*f[10]; 
  incr0[19] = (0.282842712474619*B2[1]*f[13]+0.2828427124746191*B2[2]*f[5]+0.3162277660168379*B2[0]*f[5]+0.3162277660168379*B2[1]*f[3])*dv2+1.095445115010332*abar0[2]*f[15]+1.224744871391589*abar0[0]*f[15]+1.224744871391589*abar0[1]*f[9]; 
  const double amid2 = 0.3952847075210473*B2[2]*dv1-0.3535533905932737*B2[0]*dv1-0.7905694150420947*abar1[2]+0.7071067811865475*abar1[0]; 
  incr1[3] = ((-0.3535533905932737*B2[2]*f[11])-0.3535533905932737*B2[1]*f[4]-0.3535533905932737*B2[0]*f[2])*dv1+1.224744871391589*abar1[2]*f[7]+1.224744871391589*abar1[1]*f[1]+1.224744871391589*abar1[0]*f[0]; 
  incr1[5] = ((-0.3162277660168379*B2[1]*f[11])-0.3162277660168379*B2[2]*f[4]-0.3535533905932737*B2[0]*f[4]-0.3535533905932737*B2[1]*f[2])*dv1+abar1[1]*(1.095445115010332*f[7]+1.224744871391589*f[0])+1.095445115010332*f[1]*abar1[2]+1.224744871391589*abar1[0]*f[1]; 
  incr1[6] = ((-0.3162277660168379*B2[1]*f[12])-0.3162277660168379*B2[0]*f[8]-0.3535533905932737*B2[2]*f[7]-0.3535533905932737*f[1]*B2[1]-0.3535533905932737*f[0]*B2[0])*dv1+1.224744871391589*abar1[2]*f[11]+1.224744871391589*abar1[1]*f[4]+1.224744871391589*abar1[0]*f[2]; 
  incr1[9] = ((-0.7905694150420947*B2[2]*f[17])-0.7905694150420947*B2[1]*f[10]-0.7905694150420947*B2[0]*f[6])*dv1+2.738612787525831*abar1[2]*f[13]+2.738612787525831*abar1[1]*f[5]+2.738612787525831*abar1[0]*f[3]; 
  incr1[10] = ((-0.282842712474619*B2[2]*f[12])-0.3162277660168379*B2[0]*f[12]-0.3162277660168379*B2[1]*f[8]-0.3162277660168379*B2[1]*f[7]-0.3162277660168379*f[1]*B2[2]-0.3535533905932737*f[0]*B2[1]-0.3535533905932737*B2[0]*f[1])*dv1+abar1[1]*(1.095445115010332*f[11]+1.224744871391589*f[2])+1.095445115010332*abar1[2]*f[4]+1.224744871391589*abar1[0]*f[4]; 
  incr1[13] = ((-0.2258769757263128*B2[2]*f[11])-0.3535533905932737*B2[0]*f[11]-0.3162277660168379*B2[1]*f[4]-0.3535533905932737*f[2]*B2[2])*dv1+1.224744871391589*abar1[0]*f[7]+abar1[2]*(0.7824607964359517*f[7]+1.224744871391589*f[0])+1.095445115010332*abar1[1]*f[1]; 
  incr1[14] = ((-0.3162277660168379*B2[2]*f[11])-0.3162277660168379*B2[1]*f[4]-0.3162277660168379*B2[0]*f[2])*dv1+1.224744871391589*abar1[1]*f[12]+1.224744871391589*abar1[0]*f[8]; 
  incr1[15] = ((-0.7071067811865475*B2[1]*f[17])-0.7071067811865475*B2[2]*f[10]-0.7905694150420948*B2[0]*f[10]-0.7905694150420948*B2[1]*f[6])*dv1+abar1[1]*(2.449489742783178*f[13]+2.738612787525831*f[3])+2.449489742783178*abar1[2]*f[5]+2.738612787525831*abar1[0]*f[5]; 
  incr1[16] = ((-0.7071067811865475*B2[1]*f[18])-0.7071067811865475*B2[0]*f[14]-0.7905694150420947*B2[2]*f[13]-0.7905694150420948*B2[1]*f[5]-0.7905694150420948*B2[0]*f[3])*dv1+2.738612787525831*abar1[2]*f[17]+2.738612787525831*abar1[1]*f[10]+2.738612787525831*abar1[0]*f[6]; 
  incr1[17] = ((-0.282842712474619*B2[1]*f[12])-0.3162277660168379*B2[2]*f[8]-0.2258769757263128*B2[2]*f[7]-0.3535533905932737*B2[0]*f[7]-0.3535533905932737*f[0]*B2[2]-0.3162277660168379*f[1]*B2[1])*dv1+1.224744871391589*abar1[0]*f[11]+abar1[2]*(0.7824607964359517*f[11]+1.224744871391589*f[2])+1.095445115010332*abar1[1]*f[4]; 
  incr1[18] = ((-0.282842712474619*B2[1]*f[11])-0.2828427124746191*B2[2]*f[4]-0.3162277660168379*B2[0]*f[4]-0.3162277660168379*B2[1]*f[2])*dv1+1.095445115010332*abar1[2]*f[12]+1.224744871391589*abar1[0]*f[12]+1.224744871391589*abar1[1]*f[8]; 
  incr1[19] = ((-0.6324555320336759*B2[2]*f[18])-0.7071067811865475*B2[0]*f[18]-0.7071067811865475*B2[1]*f[14]-0.7071067811865475*B2[1]*f[13]-0.7071067811865475*B2[2]*f[5]-0.7905694150420947*B2[0]*f[5]-0.7905694150420947*B2[1]*f[3])*dv1+abar1[1]*(2.449489742783178*f[17]+2.738612787525831*f[6])+2.449489742783178*abar1[2]*f[10]+2.738612787525831*abar1[0]*f[10]; 

  out[0] += incr1[0]*dv11+incr0[0]*dv10; 
  out[1] += incr1[1]*dv11+incr0[1]*dv10; 
  out[2] += incr1[2]*dv11+incr0[2]*dv10; 
  out[3] += incr1[3]*dv11+incr0[3]*dv10; 
  out[4] += incr1[4]*dv11+incr0[4]*dv10; 
  out[5] += incr1[5]*dv11+incr0[5]*dv10; 
  out[6] += incr1[6]*dv11+incr0[6]*dv10; 
  out[7] += incr1[7]*dv11+incr0[7]*dv10; 
  out[8] += incr1[8]*dv11+incr0[8]*dv10; 
  out[9] += incr1[9]*dv11+incr0[9]*dv10; 
  out[10] += incr1[10]*dv11+incr0[10]*dv10; 
  out[11] += incr1[11]*dv11+incr0[11]*dv10; 
  out[12] += incr1[12]*dv11+incr0[12]*dv10; 
  out[13] += incr1[13]*dv11+incr0[13]*dv10; 
  out[14] += incr1[14]*dv11+incr0[14]*dv10; 
  out[15] += incr1[15]*dv11+incr0[15]*dv10; 
  out[16] += incr1[16]*dv11+incr0[16]*dv10; 
  out[17] += incr1[17]*dv11+incr0[17]*dv10; 
  out[18] += incr1[18]*dv11+incr0[18]*dv10; 
  out[19] += incr1[19]*dv11+incr0[19]*dv10; 
return std::abs(amid1)/dv1+std::abs(amid2)/dv2; 
} 
