#include <VlasovModDecl.h> 
double VlasovVolStream3x3vMaxP1(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[3]/dxv[0]; 
  double w0dx0 = w[3]/dxv[0]; 
  double dv1dx1 = dxv[4]/dxv[1]; 
  double w1dx1 = w[4]/dxv[1]; 
  double dv2dx2 = dxv[5]/dxv[2]; 
  double w2dx2 = w[5]/dxv[2]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[4]*dv0dx0; 
  out[2] += 3.464101615137754*f[0]*w1dx1+f[5]*dv1dx1; 
  out[3] += 3.464101615137754*f[0]*w2dx2+f[6]*dv2dx2; 
return std::abs(w0dx0)+std::abs(w1dx1)+std::abs(w2dx2)+dv0dx0/2+dv1dx1/2+dv2dx2/2; 
} 
double VlasovVolStream3x3vMaxP2(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[3]/dxv[0]; 
  double w0dx0 = w[3]/dxv[0]; 
  double dv1dx1 = dxv[4]/dxv[1]; 
  double w1dx1 = w[4]/dxv[1]; 
  double dv2dx2 = dxv[5]/dxv[2]; 
  double w2dx2 = w[5]/dxv[2]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[4]*dv0dx0; 
  out[2] += 3.464101615137754*f[0]*w1dx1+f[5]*dv1dx1; 
  out[3] += 3.464101615137754*f[0]*w2dx2+f[6]*dv2dx2; 
  out[7] += 3.464101615137754*f[1]*w1dx1+3.464101615137754*f[2]*w0dx0+f[13]*dv1dx1+f[11]*dv0dx0; 
  out[8] += 3.464101615137754*f[1]*w2dx2+3.464101615137754*f[3]*w0dx0+f[17]*dv2dx2+f[12]*dv0dx0; 
  out[9] += 3.464101615137754*f[2]*w2dx2+3.464101615137754*f[3]*w1dx1+f[18]*dv2dx2+f[15]*dv1dx1; 
  out[10] += 3.464101615137754*f[4]*w0dx0+(0.8944271909999159*f[25]+f[0])*dv0dx0; 
  out[11] += 3.464101615137754*f[4]*w1dx1+f[16]*dv1dx1; 
  out[12] += 3.464101615137754*f[4]*w2dx2+f[20]*dv2dx2; 
  out[13] += 3.464101615137754*f[5]*w0dx0+f[16]*dv0dx0; 
  out[14] += 3.464101615137754*f[5]*w1dx1+(0.8944271909999159*f[26]+f[0])*dv1dx1; 
  out[15] += 3.464101615137754*f[5]*w2dx2+f[21]*dv2dx2; 
  out[17] += 3.464101615137754*f[6]*w0dx0+f[20]*dv0dx0; 
  out[18] += 3.464101615137754*f[6]*w1dx1+f[21]*dv1dx1; 
  out[19] += 3.464101615137754*f[6]*w2dx2+(0.8944271909999159*f[27]+f[0])*dv2dx2; 
  out[22] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[10]*dv0dx0; 
  out[23] += 7.745966692414834*f[2]*w1dx1+2.23606797749979*f[14]*dv1dx1; 
  out[24] += 7.745966692414834*f[3]*w2dx2+2.23606797749979*f[19]*dv2dx2; 
return std::abs(w0dx0)+std::abs(w1dx1)+std::abs(w2dx2)+dv0dx0/2+dv1dx1/2+dv2dx2/2; 
} 
double VlasovVolStream3x3vMaxP3(const double *w, const double *dxv, const double *f, double *out) 
{ 
// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output 
  double dv0dx0 = dxv[3]/dxv[0]; 
  double w0dx0 = w[3]/dxv[0]; 
  double dv1dx1 = dxv[4]/dxv[1]; 
  double w1dx1 = w[4]/dxv[1]; 
  double dv2dx2 = dxv[5]/dxv[2]; 
  double w2dx2 = w[5]/dxv[2]; 
  out[1] += 3.464101615137754*f[0]*w0dx0+f[4]*dv0dx0; 
  out[2] += 3.464101615137754*f[0]*w1dx1+f[5]*dv1dx1; 
  out[3] += 3.464101615137754*f[0]*w2dx2+f[6]*dv2dx2; 
  out[7] += 3.464101615137754*f[1]*w1dx1+3.464101615137754*f[2]*w0dx0+f[13]*dv1dx1+f[11]*dv0dx0; 
  out[8] += 3.464101615137754*f[1]*w2dx2+3.464101615137754*f[3]*w0dx0+f[17]*dv2dx2+f[12]*dv0dx0; 
  out[9] += 3.464101615137754*f[2]*w2dx2+3.464101615137754*f[3]*w1dx1+f[18]*dv2dx2+f[15]*dv1dx1; 
  out[10] += 3.464101615137754*f[4]*w0dx0+(0.8944271909999159*f[25]+f[0])*dv0dx0; 
  out[11] += 3.464101615137754*f[4]*w1dx1+f[16]*dv1dx1; 
  out[12] += 3.464101615137754*f[4]*w2dx2+f[20]*dv2dx2; 
  out[13] += 3.464101615137754*f[5]*w0dx0+f[16]*dv0dx0; 
  out[14] += 3.464101615137754*f[5]*w1dx1+(0.8944271909999159*f[26]+f[0])*dv1dx1; 
  out[15] += 3.464101615137754*f[5]*w2dx2+f[21]*dv2dx2; 
  out[17] += 3.464101615137754*f[6]*w0dx0+f[20]*dv0dx0; 
  out[18] += 3.464101615137754*f[6]*w1dx1+f[21]*dv1dx1; 
  out[19] += 3.464101615137754*f[6]*w2dx2+(0.8944271909999159*f[27]+f[0])*dv2dx2; 
  out[22] += 7.745966692414834*f[1]*w0dx0+2.23606797749979*f[10]*dv0dx0; 
  out[23] += 7.745966692414834*f[2]*w1dx1+2.23606797749979*f[14]*dv1dx1; 
  out[24] += 7.745966692414834*f[3]*w2dx2+2.23606797749979*f[19]*dv2dx2; 
  out[28] += 3.464101615137754*f[7]*w2dx2+3.464101615137754*f[8]*w1dx1+3.464101615137754*f[9]*w0dx0+f[38]*dv2dx2+f[33]*dv1dx1+f[31]*dv0dx0; 
  out[29] += 3.464101615137754*f[10]*w1dx1+3.464101615137754*f[11]*w0dx0+f[35]*dv1dx1+(0.8944271909999161*f[58]+f[2])*dv0dx0; 
  out[30] += 3.464101615137754*f[10]*w2dx2+3.464101615137754*f[12]*w0dx0+f[41]*dv2dx2+(0.8944271909999161*f[59]+f[3])*dv0dx0; 
  out[31] += 3.464101615137754*f[11]*w2dx2+3.464101615137754*f[12]*w1dx1+f[42]*dv2dx2+f[37]*dv1dx1; 
  out[32] += 3.464101615137754*f[13]*w1dx1+3.464101615137754*f[14]*w0dx0+(0.8944271909999161*f[64]+f[1])*dv1dx1+f[36]*dv0dx0; 
  out[33] += 3.464101615137754*f[13]*w2dx2+3.464101615137754*f[15]*w0dx0+f[44]*dv2dx2+f[37]*dv0dx0; 
  out[34] += 3.464101615137754*f[14]*w2dx2+3.464101615137754*f[15]*w1dx1+f[45]*dv2dx2+(0.8944271909999161*f[66]+f[3])*dv1dx1; 
  out[35] += 3.464101615137754*f[16]*w0dx0+(0.8944271909999161*f[63]+f[5])*dv0dx0; 
  out[36] += 3.464101615137754*f[16]*w1dx1+(0.8944271909999161*f[67]+f[4])*dv1dx1; 
  out[37] += 3.464101615137754*f[16]*w2dx2+f[47]*dv2dx2; 
  out[38] += 3.464101615137754*f[17]*w1dx1+3.464101615137754*f[18]*w0dx0+f[44]*dv1dx1+f[42]*dv0dx0; 
  out[39] += 3.464101615137754*f[17]*w2dx2+3.464101615137754*f[19]*w0dx0+(0.8944271909999161*f[73]+f[1])*dv2dx2+f[43]*dv0dx0; 
  out[40] += 3.464101615137754*f[18]*w2dx2+3.464101615137754*f[19]*w1dx1+(0.8944271909999161*f[74]+f[2])*dv2dx2+f[46]*dv1dx1; 
  out[41] += 3.464101615137754*f[20]*w0dx0+(0.8944271909999161*f[71]+f[6])*dv0dx0; 
  out[42] += 3.464101615137754*f[20]*w1dx1+f[47]*dv1dx1; 
  out[43] += 3.464101615137754*f[20]*w2dx2+(0.8944271909999161*f[76]+f[4])*dv2dx2; 
  out[44] += 3.464101615137754*f[21]*w0dx0+f[47]*dv0dx0; 
  out[45] += 3.464101615137754*f[21]*w1dx1+(0.8944271909999161*f[72]+f[6])*dv1dx1; 
  out[46] += 3.464101615137754*f[21]*w2dx2+(0.8944271909999161*f[77]+f[5])*dv2dx2; 
  out[48] += 3.464101615137755*f[22]*w1dx1+7.745966692414834*f[7]*w0dx0+f[60]*dv1dx1+2.23606797749979*f[29]*dv0dx0; 
  out[49] += 7.745966692414834*f[7]*w1dx1+3.464101615137755*f[23]*w0dx0+2.23606797749979*f[32]*dv1dx1+f[55]*dv0dx0; 
  out[50] += 3.464101615137755*f[22]*w2dx2+7.745966692414834*f[8]*w0dx0+f[68]*dv2dx2+2.23606797749979*f[30]*dv0dx0; 
  out[51] += 3.464101615137755*f[23]*w2dx2+7.745966692414834*f[9]*w1dx1+f[69]*dv2dx2+2.23606797749979*f[34]*dv1dx1; 
  out[52] += 7.745966692414834*f[8]*w2dx2+3.464101615137755*f[24]*w0dx0+2.23606797749979*f[39]*dv2dx2+f[56]*dv0dx0; 
  out[53] += 7.745966692414834*f[9]*w2dx2+3.464101615137755*f[24]*w1dx1+2.23606797749979*f[40]*dv2dx2+f[62]*dv1dx1; 
  out[54] += 7.745966692414834*f[10]*w0dx0+(2.0*f[57]+2.23606797749979*f[1])*dv0dx0; 
  out[55] += 7.745966692414834*f[11]*w1dx1+2.23606797749979*f[36]*dv1dx1; 
  out[56] += 7.745966692414834*f[12]*w2dx2+2.23606797749979*f[43]*dv2dx2; 
  out[57] += 3.464101615137755*f[25]*w0dx0+(0.8783100656536798*f[81]+0.8944271909999161*f[4])*dv0dx0; 
  out[58] += 3.464101615137755*f[25]*w1dx1+f[63]*dv1dx1; 
  out[59] += 3.464101615137755*f[25]*w2dx2+f[71]*dv2dx2; 
  out[60] += 7.745966692414834*f[13]*w0dx0+2.23606797749979*f[35]*dv0dx0; 
  out[61] += 7.745966692414834*f[14]*w1dx1+(2.0*f[65]+2.23606797749979*f[2])*dv1dx1; 
  out[62] += 7.745966692414834*f[15]*w2dx2+2.23606797749979*f[46]*dv2dx2; 
  out[64] += 3.464101615137755*f[26]*w0dx0+f[67]*dv0dx0; 
  out[65] += 3.464101615137755*f[26]*w1dx1+(0.8783100656536798*f[82]+0.8944271909999161*f[5])*dv1dx1; 
  out[66] += 3.464101615137755*f[26]*w2dx2+f[72]*dv2dx2; 
  out[68] += 7.745966692414834*f[17]*w0dx0+2.23606797749979*f[41]*dv0dx0; 
  out[69] += 7.745966692414834*f[18]*w1dx1+2.23606797749979*f[45]*dv1dx1; 
  out[70] += 7.745966692414834*f[19]*w2dx2+(2.0*f[75]+2.23606797749979*f[3])*dv2dx2; 
  out[73] += 3.464101615137755*f[27]*w0dx0+f[76]*dv0dx0; 
  out[74] += 3.464101615137755*f[27]*w1dx1+f[77]*dv1dx1; 
  out[75] += 3.464101615137755*f[27]*w2dx2+(0.8783100656536798*f[83]+0.8944271909999161*f[6])*dv2dx2; 
  out[78] += (11.83215956619923*f[22]+5.291502622129181*f[0])*w0dx0+(3.415650255319866*f[54]+1.527525231651947*f[4])*dv0dx0; 
  out[79] += (11.83215956619923*f[23]+5.291502622129181*f[0])*w1dx1+(3.415650255319866*f[61]+1.527525231651947*f[5])*dv1dx1; 
  out[80] += (11.83215956619923*f[24]+5.291502622129181*f[0])*w2dx2+(3.415650255319866*f[70]+1.527525231651947*f[6])*dv2dx2; 
return std::abs(w0dx0)+std::abs(w1dx1)+std::abs(w2dx2)+dv0dx0/2+dv1dx1/2+dv2dx2/2; 
} 
