#include <VlasovModDecl.h> 
double VlasovSurfElcMag1x1vSer_VX_P1(const double *w, const double *dxv, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv10 = 2/dxv[1]; 
  const double *E0 = &EM[0]; 

  const double dv1 = dxv[1], wv1 = w[1]; 

  const double *B0 = &EM[6]; 
  const double *B1 = &EM[8]; 
  const double *B2 = &EM[10]; 

  double incr[4]; 

  const double amid = 0.7071067811865475*E0[0]; 
  incr[0] = 0.4330127018922193*fr[2]*amax*dv10+0.4330127018922193*fl[2]*amax*dv10-0.25*fr[0]*amax*dv10+0.25*fl[0]*amax*dv10-0.3061862178478973*E0[1]*fr[3]*dv10+0.3061862178478973*E0[1]*fl[3]*dv10-0.3061862178478973*E0[0]*fr[2]*dv10+0.3061862178478973*E0[0]*fl[2]*dv10+0.1767766952966369*fr[1]*E0[1]*dv10+0.1767766952966369*fl[1]*E0[1]*dv10+0.1767766952966369*fr[0]*E0[0]*dv10+0.1767766952966369*fl[0]*E0[0]*dv10; 
  incr[1] = 0.4330127018922193*fr[3]*amax*dv10+0.4330127018922193*fl[3]*amax*dv10-0.25*fr[1]*amax*dv10+0.25*fl[1]*amax*dv10-0.3061862178478973*E0[0]*fr[3]*dv10+0.3061862178478973*E0[0]*fl[3]*dv10-0.3061862178478973*E0[1]*fr[2]*dv10+0.3061862178478973*E0[1]*fl[2]*dv10+0.1767766952966369*fr[0]*E0[1]*dv10+0.1767766952966369*fl[0]*E0[1]*dv10+0.1767766952966369*E0[0]*fr[1]*dv10+0.1767766952966369*E0[0]*fl[1]*dv10; 
  incr[2] = (-0.75*fr[2]*amax*dv10)-0.75*fl[2]*amax*dv10+0.4330127018922193*fr[0]*amax*dv10-0.4330127018922193*fl[0]*amax*dv10+0.5303300858899107*E0[1]*fr[3]*dv10-0.5303300858899107*E0[1]*fl[3]*dv10+0.5303300858899107*E0[0]*fr[2]*dv10-0.5303300858899107*E0[0]*fl[2]*dv10-0.3061862178478973*fr[1]*E0[1]*dv10-0.3061862178478973*fl[1]*E0[1]*dv10-0.3061862178478973*fr[0]*E0[0]*dv10-0.3061862178478973*fl[0]*E0[0]*dv10; 
  incr[3] = (-0.75*fr[3]*amax*dv10)-0.75*fl[3]*amax*dv10+0.4330127018922193*fr[1]*amax*dv10-0.4330127018922193*fl[1]*amax*dv10+0.5303300858899107*E0[0]*fr[3]*dv10-0.5303300858899107*E0[0]*fl[3]*dv10+0.5303300858899107*E0[1]*fr[2]*dv10-0.5303300858899107*E0[1]*fl[2]*dv10-0.3061862178478973*fr[0]*E0[1]*dv10-0.3061862178478973*fl[0]*E0[1]*dv10-0.3061862178478973*E0[0]*fr[1]*dv10-0.3061862178478973*E0[0]*fl[1]*dv10; 

  outr[0] += incr[0]; 
  outr[1] += incr[1]; 
  outr[2] += incr[2]; 
  outr[3] += incr[3]; 

  outl[0] += -1.0*incr[0]; 
  outl[1] += -1.0*incr[1]; 
  outl[2] += incr[2]; 
  outl[3] += incr[3]; 
return std::abs(amid); 
} 
double VlasovSurfElcMag1x1vSer_VX_P2(const double *w, const double *dxv, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) 
{ 
// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells 
// outl/outr: output distribution function in left/right cells 
// returns abs(amid) for use in determining amax in cfl and global lax flux 
  double dv10 = 2/dxv[1]; 
  const double *E0 = &EM[0]; 

  const double dv1 = dxv[1], wv1 = w[1]; 

  const double *B0 = &EM[9]; 
  const double *B1 = &EM[12]; 
  const double *B2 = &EM[15]; 

  double incr[8]; 

  const double amid = 0.7071067811865475*E0[0]-0.7905694150420947*E0[2]; 
  incr[0] = (-0.5590169943749475*fr[5]*amax*dv10)+0.5590169943749475*fl[5]*amax*dv10+0.4330127018922193*fr[2]*amax*dv10+0.4330127018922193*fl[2]*amax*dv10-0.25*fr[0]*amax*dv10+0.25*fl[0]*amax*dv10+0.3952847075210474*E0[1]*fr[7]*dv10+0.3952847075210474*E0[1]*fl[7]*dv10-0.3061862178478973*E0[2]*fr[6]*dv10+0.3061862178478973*E0[2]*fl[6]*dv10+0.3952847075210476*E0[0]*fr[5]*dv10+0.3952847075210476*E0[0]*fl[5]*dv10+0.1767766952966369*E0[2]*fr[4]*dv10+0.1767766952966369*E0[2]*fl[4]*dv10-0.3061862178478972*E0[1]*fr[3]*dv10+0.3061862178478972*E0[1]*fl[3]*dv10-0.3061862178478972*E0[0]*fr[2]*dv10+0.3061862178478972*E0[0]*fl[2]*dv10+0.1767766952966369*fr[1]*E0[1]*dv10+0.1767766952966369*fl[1]*E0[1]*dv10+0.1767766952966369*fr[0]*E0[0]*dv10+0.1767766952966369*fl[0]*E0[0]*dv10; 
  incr[1] = (-0.5590169943749475*fr[7]*amax*dv10)+0.5590169943749475*fl[7]*amax*dv10+0.4330127018922192*fr[3]*amax*dv10+0.4330127018922192*fl[3]*amax*dv10-0.25*fr[1]*amax*dv10+0.25*fl[1]*amax*dv10+0.3535533905932738*E0[2]*fr[7]*dv10+0.3952847075210474*E0[0]*fr[7]*dv10+0.3535533905932738*E0[2]*fl[7]*dv10+0.3952847075210474*E0[0]*fl[7]*dv10-0.2738612787525831*E0[1]*fr[6]*dv10+0.2738612787525831*E0[1]*fl[6]*dv10+0.3952847075210476*E0[1]*fr[5]*dv10+0.3952847075210476*E0[1]*fl[5]*dv10+0.158113883008419*E0[1]*fr[4]*dv10+0.158113883008419*E0[1]*fl[4]*dv10-0.2738612787525831*E0[2]*fr[3]*dv10-0.3061862178478972*E0[0]*fr[3]*dv10+0.2738612787525831*E0[2]*fl[3]*dv10+0.3061862178478972*E0[0]*fl[3]*dv10+0.158113883008419*fr[1]*E0[2]*dv10+0.158113883008419*fl[1]*E0[2]*dv10-0.3061862178478972*E0[1]*fr[2]*dv10+0.3061862178478972*E0[1]*fl[2]*dv10+0.1767766952966369*fr[0]*E0[1]*dv10+0.1767766952966369*fl[0]*E0[1]*dv10+0.1767766952966369*E0[0]*fr[1]*dv10+0.1767766952966369*E0[0]*fl[1]*dv10; 
  incr[2] = 0.9682458365518543*fr[5]*amax*dv10-0.9682458365518543*fl[5]*amax*dv10-0.75*fr[2]*amax*dv10-0.75*fl[2]*amax*dv10+0.4330127018922193*fr[0]*amax*dv10-0.4330127018922193*fl[0]*amax*dv10-0.6846531968814578*E0[1]*fr[7]*dv10-0.6846531968814578*E0[1]*fl[7]*dv10+0.5303300858899107*E0[2]*fr[6]*dv10-0.5303300858899107*E0[2]*fl[6]*dv10-0.6846531968814579*E0[0]*fr[5]*dv10-0.6846531968814579*E0[0]*fl[5]*dv10-0.3061862178478973*E0[2]*fr[4]*dv10-0.3061862178478973*E0[2]*fl[4]*dv10+0.5303300858899107*E0[1]*fr[3]*dv10-0.5303300858899107*E0[1]*fl[3]*dv10+0.5303300858899107*E0[0]*fr[2]*dv10-0.5303300858899107*E0[0]*fl[2]*dv10-0.3061862178478973*fr[1]*E0[1]*dv10-0.3061862178478973*fl[1]*E0[1]*dv10-0.3061862178478973*fr[0]*E0[0]*dv10-0.3061862178478973*fl[0]*E0[0]*dv10; 
  incr[3] = 0.9682458365518543*fr[7]*amax*dv10-0.9682458365518543*fl[7]*amax*dv10-0.75*fr[3]*amax*dv10-0.75*fl[3]*amax*dv10+0.4330127018922193*fr[1]*amax*dv10-0.4330127018922193*fl[1]*amax*dv10-0.6123724356957947*E0[2]*fr[7]*dv10-0.6846531968814578*E0[0]*fr[7]*dv10-0.6123724356957947*E0[2]*fl[7]*dv10-0.6846531968814578*E0[0]*fl[7]*dv10+0.474341649025257*E0[1]*fr[6]*dv10-0.474341649025257*E0[1]*fl[6]*dv10-0.6846531968814579*E0[1]*fr[5]*dv10-0.6846531968814579*E0[1]*fl[5]*dv10-0.2738612787525831*E0[1]*fr[4]*dv10-0.2738612787525831*E0[1]*fl[4]*dv10+0.4743416490252571*E0[2]*fr[3]*dv10+0.5303300858899107*E0[0]*fr[3]*dv10-0.4743416490252571*E0[2]*fl[3]*dv10-0.5303300858899107*E0[0]*fl[3]*dv10-0.2738612787525831*fr[1]*E0[2]*dv10-0.2738612787525831*fl[1]*E0[2]*dv10+0.5303300858899107*E0[1]*fr[2]*dv10-0.5303300858899107*E0[1]*fl[2]*dv10-0.3061862178478973*fr[0]*E0[1]*dv10-0.3061862178478973*fl[0]*E0[1]*dv10-0.3061862178478973*E0[0]*fr[1]*dv10-0.3061862178478973*E0[0]*fl[1]*dv10; 
  incr[4] = 0.4330127018922194*fr[6]*amax*dv10+0.4330127018922194*fl[6]*amax*dv10-0.25*fr[4]*amax*dv10+0.25*fl[4]*amax*dv10+0.3535533905932739*E0[1]*fr[7]*dv10+0.3535533905932739*E0[1]*fl[7]*dv10-0.195615199108988*E0[2]*fr[6]*dv10-0.3061862178478973*E0[0]*fr[6]*dv10+0.195615199108988*E0[2]*fl[6]*dv10+0.3061862178478973*E0[0]*fl[6]*dv10+0.3952847075210476*E0[2]*fr[5]*dv10+0.3952847075210476*E0[2]*fl[5]*dv10+0.1129384878631565*E0[2]*fr[4]*dv10+0.1767766952966369*E0[0]*fr[4]*dv10+0.1129384878631565*E0[2]*fl[4]*dv10+0.1767766952966369*E0[0]*fl[4]*dv10-0.2738612787525831*E0[1]*fr[3]*dv10+0.2738612787525831*E0[1]*fl[3]*dv10-0.3061862178478973*fr[2]*E0[2]*dv10+0.3061862178478973*fl[2]*E0[2]*dv10+0.1767766952966369*fr[0]*E0[2]*dv10+0.1767766952966369*fl[0]*E0[2]*dv10+0.158113883008419*fr[1]*E0[1]*dv10+0.158113883008419*fl[1]*E0[1]*dv10; 
  incr[5] = (-1.25*fr[5]*amax*dv10)+1.25*fl[5]*amax*dv10+0.9682458365518543*fr[2]*amax*dv10+0.9682458365518543*fl[2]*amax*dv10-0.5590169943749475*fr[0]*amax*dv10+0.5590169943749475*fl[0]*amax*dv10+0.8838834764831843*E0[1]*fr[7]*dv10+0.8838834764831843*E0[1]*fl[7]*dv10-0.6846531968814578*E0[2]*fr[6]*dv10+0.6846531968814578*E0[2]*fl[6]*dv10+0.8838834764831844*E0[0]*fr[5]*dv10+0.8838834764831844*E0[0]*fl[5]*dv10+0.3952847075210474*E0[2]*fr[4]*dv10+0.3952847075210474*E0[2]*fl[4]*dv10-0.6846531968814576*E0[1]*fr[3]*dv10+0.6846531968814576*E0[1]*fl[3]*dv10-0.6846531968814576*E0[0]*fr[2]*dv10+0.6846531968814576*E0[0]*fl[2]*dv10+0.3952847075210474*fr[1]*E0[1]*dv10+0.3952847075210474*fl[1]*E0[1]*dv10+0.3952847075210474*fr[0]*E0[0]*dv10+0.3952847075210474*fl[0]*E0[0]*dv10; 
  incr[6] = (-0.75*fr[6]*amax*dv10)-0.75*fl[6]*amax*dv10+0.4330127018922194*fr[4]*amax*dv10-0.4330127018922194*fl[4]*amax*dv10-0.6123724356957946*E0[1]*fr[7]*dv10-0.6123724356957946*E0[1]*fl[7]*dv10+0.3388154635894693*E0[2]*fr[6]*dv10+0.5303300858899107*E0[0]*fr[6]*dv10-0.3388154635894693*E0[2]*fl[6]*dv10-0.5303300858899107*E0[0]*fl[6]*dv10-0.6846531968814578*E0[2]*fr[5]*dv10-0.6846531968814578*E0[2]*fl[5]*dv10-0.1956151991089879*E0[2]*fr[4]*dv10-0.3061862178478973*E0[0]*fr[4]*dv10-0.1956151991089879*E0[2]*fl[4]*dv10-0.3061862178478973*E0[0]*fl[4]*dv10+0.474341649025257*E0[1]*fr[3]*dv10-0.474341649025257*E0[1]*fl[3]*dv10+0.5303300858899106*fr[2]*E0[2]*dv10-0.5303300858899106*fl[2]*E0[2]*dv10-0.3061862178478973*fr[0]*E0[2]*dv10-0.3061862178478973*fl[0]*E0[2]*dv10-0.2738612787525831*fr[1]*E0[1]*dv10-0.2738612787525831*fl[1]*E0[1]*dv10; 
  incr[7] = (-1.25*fr[7]*amax*dv10)+1.25*fl[7]*amax*dv10+0.9682458365518543*fr[3]*amax*dv10+0.9682458365518543*fl[3]*amax*dv10-0.5590169943749475*fr[1]*amax*dv10+0.5590169943749475*fl[1]*amax*dv10+0.7905694150420951*E0[2]*fr[7]*dv10+0.8838834764831844*E0[0]*fr[7]*dv10+0.7905694150420951*E0[2]*fl[7]*dv10+0.8838834764831844*E0[0]*fl[7]*dv10-0.6123724356957946*E0[1]*fr[6]*dv10+0.6123724356957946*E0[1]*fl[6]*dv10+0.8838834764831844*E0[1]*fr[5]*dv10+0.8838834764831844*E0[1]*fl[5]*dv10+0.3535533905932738*E0[1]*fr[4]*dv10+0.3535533905932738*E0[1]*fl[4]*dv10-0.6123724356957947*E0[2]*fr[3]*dv10-0.6846531968814578*E0[0]*fr[3]*dv10+0.6123724356957947*E0[2]*fl[3]*dv10+0.6846531968814578*E0[0]*fl[3]*dv10+0.3535533905932738*fr[1]*E0[2]*dv10+0.3535533905932738*fl[1]*E0[2]*dv10-0.6846531968814578*E0[1]*fr[2]*dv10+0.6846531968814578*E0[1]*fl[2]*dv10+0.3952847075210474*fr[0]*E0[1]*dv10+0.3952847075210474*fl[0]*E0[1]*dv10+0.3952847075210474*E0[0]*fr[1]*dv10+0.3952847075210474*E0[0]*fl[1]*dv10; 

  outr[0] += incr[0]; 
  outr[1] += incr[1]; 
  outr[2] += incr[2]; 
  outr[3] += incr[3]; 
  outr[4] += incr[4]; 
  outr[5] += incr[5]; 
  outr[6] += incr[6]; 
  outr[7] += incr[7]; 

  outl[0] += -1.0*incr[0]; 
  outl[1] += -1.0*incr[1]; 
  outl[2] += incr[2]; 
  outl[3] += incr[3]; 
  outl[4] += -1.0*incr[4]; 
  outl[5] += -1.0*incr[5]; 
  outl[6] += incr[6]; 
  outl[7] += -1.0*incr[7]; 
return std::abs(amid); 
} 
