#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply3x2vMax_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[6]; 
  tmp[0] = 0.3535533905932737*A[3]*B[3]+0.3535533905932737*A[2]*B[2]+0.3535533905932737*A[1]*B[1]+0.3535533905932737*A[0]*B[0]; 
  tmp[1] = 0.3535533905932737*A[0]*B[1]+0.3535533905932737*B[0]*A[1]; 
  tmp[2] = 0.3535533905932737*A[0]*B[2]+0.3535533905932737*B[0]*A[2]; 
  tmp[3] = 0.3535533905932737*A[0]*B[3]+0.3535533905932737*B[0]*A[3]; 
  tmp[4] = 0.3535533905932737*A[0]*B[4]; 
  tmp[5] = 0.3535533905932737*A[0]*B[5]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<6; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply3x2vMax_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[21]; 
  tmp[0] = 0.3535533905932737*A[9]*B[18]+0.3535533905932737*A[8]*B[17]+0.3535533905932737*A[7]*B[16]+0.3535533905932737*A[6]*B[8]+0.3535533905932737*A[5]*B[7]+0.3535533905932737*A[4]*B[6]+0.3535533905932737*A[3]*B[3]+0.3535533905932737*A[2]*B[2]+0.3535533905932737*A[1]*B[1]+0.3535533905932737*A[0]*B[0]; 
  tmp[1] = 0.3162277660168379*A[1]*B[16]+0.3535533905932737*A[3]*B[7]+0.3162277660168379*B[1]*A[7]+0.3535533905932737*A[2]*B[6]+0.3535533905932737*B[3]*A[5]+0.3535533905932737*B[2]*A[4]+0.3535533905932737*A[0]*B[1]+0.3535533905932737*B[0]*A[1]; 
  tmp[2] = 0.3162277660168379*A[2]*B[17]+0.3535533905932737*A[3]*B[8]+0.3162277660168379*B[2]*A[8]+0.3535533905932737*A[1]*B[6]+0.3535533905932737*B[3]*A[6]+0.3535533905932737*B[1]*A[4]+0.3535533905932737*A[0]*B[2]+0.3535533905932737*B[0]*A[2]; 
  tmp[3] = 0.3162277660168379*A[3]*B[18]+0.3162277660168379*B[3]*A[9]+0.3535533905932737*A[2]*B[8]+0.3535533905932737*A[1]*B[7]+0.3535533905932737*B[2]*A[6]+0.3535533905932737*B[1]*A[5]+0.3535533905932737*A[0]*B[3]+0.3535533905932737*B[0]*A[3]; 
  tmp[4] = 0.3535533905932737*A[3]*B[11]+0.3535533905932737*A[2]*B[10]+0.3535533905932737*A[1]*B[9]+0.3535533905932737*A[0]*B[4]; 
  tmp[5] = 0.3535533905932737*A[3]*B[14]+0.3535533905932737*A[2]*B[13]+0.3535533905932737*A[1]*B[12]+0.3535533905932737*A[0]*B[5]; 
  tmp[6] = 0.3162277660168379*A[4]*B[17]+0.3162277660168379*A[4]*B[16]+0.3535533905932737*A[5]*B[8]+0.3162277660168379*B[6]*A[8]+0.3535533905932737*A[6]*B[7]+0.3162277660168379*B[6]*A[7]+0.3535533905932737*A[0]*B[6]+0.3535533905932737*B[0]*A[4]+0.3535533905932737*A[1]*B[2]+0.3535533905932737*B[1]*A[2]; 
  tmp[7] = 0.3162277660168379*A[5]*B[18]+0.3162277660168379*A[5]*B[16]+0.3162277660168379*B[7]*A[9]+0.3535533905932737*A[4]*B[8]+0.3162277660168379*A[7]*B[7]+0.3535533905932737*A[0]*B[7]+0.3535533905932737*A[6]*B[6]+0.3535533905932737*B[0]*A[5]+0.3535533905932737*A[1]*B[3]+0.3535533905932737*B[1]*A[3]; 
  tmp[8] = 0.3162277660168379*A[6]*B[18]+0.3162277660168379*A[6]*B[17]+0.3162277660168379*B[8]*A[9]+0.3162277660168379*A[8]*B[8]+0.3535533905932737*A[0]*B[8]+0.3535533905932737*A[4]*B[7]+0.3535533905932737*A[5]*B[6]+0.3535533905932737*B[0]*A[6]+0.3535533905932737*A[2]*B[3]+0.3535533905932737*B[2]*A[3]; 
  tmp[9] = 0.3535533905932737*A[5]*B[11]+0.3535533905932737*A[4]*B[10]+0.3162277660168379*A[7]*B[9]+0.3535533905932737*A[0]*B[9]+0.3535533905932737*A[1]*B[4]; 
  tmp[10] = 0.3535533905932737*A[6]*B[11]+0.3162277660168379*A[8]*B[10]+0.3535533905932737*A[0]*B[10]+0.3535533905932737*A[4]*B[9]+0.3535533905932737*A[2]*B[4]; 
  tmp[11] = 0.3162277660168379*A[9]*B[11]+0.3535533905932737*A[0]*B[11]+0.3535533905932737*A[6]*B[10]+0.3535533905932737*A[5]*B[9]+0.3535533905932737*A[3]*B[4]; 
  tmp[12] = 0.3535533905932737*A[5]*B[14]+0.3535533905932737*A[4]*B[13]+0.3162277660168379*A[7]*B[12]+0.3535533905932737*A[0]*B[12]+0.3535533905932737*A[1]*B[5]; 
  tmp[13] = 0.3535533905932737*A[6]*B[14]+0.3162277660168379*A[8]*B[13]+0.3535533905932737*A[0]*B[13]+0.3535533905932737*A[4]*B[12]+0.3535533905932737*A[2]*B[5]; 
  tmp[14] = 0.3162277660168379*A[9]*B[14]+0.3535533905932737*A[0]*B[14]+0.3535533905932737*A[6]*B[13]+0.3535533905932737*A[5]*B[12]+0.3535533905932737*A[3]*B[5]; 
  tmp[15] = 0.3535533905932737*A[0]*B[15]; 
  tmp[16] = 0.2258769757263128*A[7]*B[16]+0.3535533905932737*A[0]*B[16]+0.3162277660168379*A[5]*B[7]+0.3535533905932737*B[0]*A[7]+0.3162277660168379*A[4]*B[6]+0.3162277660168379*A[1]*B[1]; 
  tmp[17] = 0.2258769757263128*A[8]*B[17]+0.3535533905932737*A[0]*B[17]+0.3162277660168379*A[6]*B[8]+0.3535533905932737*B[0]*A[8]+0.3162277660168379*A[4]*B[6]+0.3162277660168379*A[2]*B[2]; 
  tmp[18] = 0.2258769757263128*A[9]*B[18]+0.3535533905932737*A[0]*B[18]+0.3535533905932737*B[0]*A[9]+0.3162277660168379*A[6]*B[8]+0.3162277660168379*A[5]*B[7]+0.3162277660168379*A[3]*B[3]; 
  tmp[19] = 0.3535533905932737*A[0]*B[19]; 
  tmp[20] = 0.3535533905932737*A[0]*B[20]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<21; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply3x2vMax_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[56]; 
  tmp[0] = 0.3535533905932737*A[19]*B[53]+0.3535533905932737*A[18]*B[52]+0.3535533905932737*A[17]*B[51]+0.3535533905932737*A[16]*B[36]+0.3535533905932737*A[15]*B[35]+0.3535533905932737*A[14]*B[34]+0.3535533905932737*A[13]*B[33]+0.3535533905932737*A[12]*B[32]+0.3535533905932737*A[11]*B[31]+0.3535533905932737*A[10]*B[21]+0.3535533905932737*A[9]*B[18]+0.3535533905932737*A[8]*B[17]+0.3535533905932737*A[7]*B[16]+0.3535533905932737*A[6]*B[8]+0.3535533905932737*A[5]*B[7]+0.3535533905932737*A[4]*B[6]+0.3535533905932737*A[3]*B[3]+0.3535533905932737*A[2]*B[2]+0.3535533905932737*A[1]*B[1]+0.3535533905932737*A[0]*B[0]; 
  tmp[1] = 0.3105295017040592*A[7]*B[51]+0.3535533905932737*A[9]*B[35]+0.3162277660168379*A[5]*B[33]+0.3535533905932737*A[8]*B[32]+0.3162277660168379*A[4]*B[31]+0.3535533905932737*A[6]*B[21]+0.3535533905932737*A[15]*B[18]+0.3535533905932737*A[12]*B[17]+0.3105295017040592*B[16]*A[17]+0.3162277660168379*A[1]*B[16]+0.3162277660168379*B[7]*A[13]+0.3162277660168379*B[6]*A[11]+0.3535533905932737*B[8]*A[10]+0.3535533905932737*A[3]*B[7]+0.3162277660168379*B[1]*A[7]+0.3535533905932737*A[2]*B[6]+0.3535533905932737*B[3]*A[5]+0.3535533905932737*B[2]*A[4]+0.3535533905932737*A[0]*B[1]+0.3535533905932737*B[0]*A[1]; 
  tmp[2] = 0.3105295017040592*A[8]*B[52]+0.3535533905932737*A[9]*B[36]+0.3162277660168379*A[6]*B[34]+0.3162277660168379*A[4]*B[32]+0.3535533905932737*A[7]*B[31]+0.3535533905932737*A[5]*B[21]+0.3535533905932737*A[16]*B[18]+0.3105295017040592*B[17]*A[18]+0.3162277660168379*A[2]*B[17]+0.3535533905932737*A[11]*B[16]+0.3162277660168379*B[8]*A[14]+0.3162277660168379*B[6]*A[12]+0.3535533905932737*B[7]*A[10]+0.3535533905932737*A[3]*B[8]+0.3162277660168379*B[2]*A[8]+0.3535533905932737*A[1]*B[6]+0.3535533905932737*B[3]*A[6]+0.3535533905932737*B[1]*A[4]+0.3535533905932737*A[0]*B[2]+0.3535533905932737*B[0]*A[2]; 
  tmp[3] = 0.3105295017040592*A[9]*B[53]+0.3162277660168379*A[6]*B[36]+0.3162277660168379*A[5]*B[35]+0.3535533905932737*A[8]*B[34]+0.3535533905932737*A[7]*B[33]+0.3535533905932737*A[4]*B[21]+0.3105295017040592*B[18]*A[19]+0.3162277660168379*A[3]*B[18]+0.3535533905932737*A[14]*B[17]+0.3535533905932737*A[13]*B[16]+0.3162277660168379*B[8]*A[16]+0.3162277660168379*B[7]*A[15]+0.3535533905932737*B[6]*A[10]+0.3162277660168379*B[3]*A[9]+0.3535533905932737*A[2]*B[8]+0.3535533905932737*A[1]*B[7]+0.3535533905932737*B[2]*A[6]+0.3535533905932737*B[1]*A[5]+0.3535533905932737*A[0]*B[3]+0.3535533905932737*B[0]*A[3]; 
  tmp[4] = 0.3535533905932737*A[9]*B[39]+0.3535533905932737*A[8]*B[38]+0.3535533905932737*A[7]*B[37]+0.3535533905932737*A[6]*B[24]+0.3535533905932737*A[5]*B[23]+0.3535533905932737*A[4]*B[22]+0.3535533905932737*A[3]*B[11]+0.3535533905932737*A[2]*B[10]+0.3535533905932737*A[1]*B[9]+0.3535533905932737*A[0]*B[4]; 
  tmp[5] = 0.3535533905932737*A[9]*B[45]+0.3535533905932737*A[8]*B[44]+0.3535533905932737*A[7]*B[43]+0.3535533905932737*A[6]*B[27]+0.3535533905932737*A[5]*B[26]+0.3535533905932737*A[4]*B[25]+0.3535533905932737*A[3]*B[14]+0.3535533905932737*A[2]*B[13]+0.3535533905932737*A[1]*B[12]+0.3535533905932737*A[0]*B[5]; 
  tmp[6] = 0.3105295017040593*A[12]*B[52]+0.3105295017040593*A[11]*B[51]+0.3535533905932737*A[15]*B[36]+0.3535533905932737*A[16]*B[35]+0.3162277660168379*A[10]*B[34]+0.3162277660168379*A[10]*B[33]+0.3105295017040593*A[18]*B[32]+0.2828427124746191*A[11]*B[32]+0.3162277660168379*A[2]*B[32]+0.3105295017040593*A[17]*B[31]+0.2828427124746191*A[12]*B[31]+0.3162277660168379*A[1]*B[31]+0.3162277660168379*A[14]*B[21]+0.3162277660168379*A[13]*B[21]+0.3535533905932737*A[3]*B[21]+0.3162277660168379*A[4]*B[17]+0.3162277660168379*A[4]*B[16]+0.3162277660168379*B[2]*A[12]+0.3162277660168379*B[1]*A[11]+0.3535533905932737*B[3]*A[10]+0.3535533905932737*A[5]*B[8]+0.3162277660168379*B[6]*A[8]+0.3535533905932737*A[6]*B[7]+0.3162277660168379*B[6]*A[7]+0.3535533905932737*A[0]*B[6]+0.3535533905932737*B[0]*A[4]+0.3535533905932737*A[1]*B[2]+0.3535533905932737*B[1]*A[2]; 
  tmp[7] = 0.3105295017040593*A[15]*B[53]+0.3105295017040593*A[13]*B[51]+0.3162277660168379*A[10]*B[36]+0.3105295017040593*A[19]*B[35]+0.2828427124746191*A[13]*B[35]+0.3162277660168379*A[3]*B[35]+0.3535533905932737*A[12]*B[34]+0.3105295017040593*A[17]*B[33]+0.2828427124746191*A[15]*B[33]+0.3162277660168379*A[1]*B[33]+0.3535533905932737*A[14]*B[32]+0.3162277660168379*A[10]*B[31]+0.3162277660168379*A[16]*B[21]+0.3162277660168379*A[11]*B[21]+0.3535533905932737*A[2]*B[21]+0.3162277660168379*A[5]*B[18]+0.3162277660168379*A[5]*B[16]+0.3162277660168379*B[3]*A[15]+0.3162277660168379*B[1]*A[13]+0.3535533905932737*B[2]*A[10]+0.3162277660168379*B[7]*A[9]+0.3535533905932737*A[4]*B[8]+0.3162277660168379*A[7]*B[7]+0.3535533905932737*A[0]*B[7]+0.3535533905932737*A[6]*B[6]+0.3535533905932737*B[0]*A[5]+0.3535533905932737*A[1]*B[3]+0.3535533905932737*B[1]*A[3]; 
  tmp[8] = 0.3105295017040593*A[16]*B[53]+0.3105295017040593*A[14]*B[52]+0.3105295017040593*A[19]*B[36]+0.2828427124746191*A[14]*B[36]+0.3162277660168379*A[3]*B[36]+0.3162277660168379*A[10]*B[35]+0.3105295017040593*A[18]*B[34]+0.2828427124746191*A[16]*B[34]+0.3162277660168379*A[2]*B[34]+0.3535533905932737*A[11]*B[33]+0.3162277660168379*A[10]*B[32]+0.3535533905932737*A[13]*B[31]+0.3162277660168379*A[15]*B[21]+0.3162277660168379*A[12]*B[21]+0.3535533905932737*A[1]*B[21]+0.3162277660168379*A[6]*B[18]+0.3162277660168379*A[6]*B[17]+0.3162277660168379*B[3]*A[16]+0.3162277660168379*B[2]*A[14]+0.3535533905932737*B[1]*A[10]+0.3162277660168379*B[8]*A[9]+0.3162277660168379*A[8]*B[8]+0.3535533905932737*A[0]*B[8]+0.3535533905932737*A[4]*B[7]+0.3535533905932737*A[5]*B[6]+0.3535533905932737*B[0]*A[6]+0.3535533905932737*A[2]*B[3]+0.3535533905932737*B[2]*A[3]; 
  tmp[9] = 0.3535533905932737*A[15]*B[39]+0.3535533905932737*A[12]*B[38]+0.3105295017040593*A[17]*B[37]+0.3162277660168379*A[1]*B[37]+0.3535533905932737*A[10]*B[24]+0.3162277660168379*A[13]*B[23]+0.3535533905932737*A[3]*B[23]+0.3162277660168379*A[11]*B[22]+0.3535533905932737*A[2]*B[22]+0.3535533905932737*A[5]*B[11]+0.3535533905932737*A[4]*B[10]+0.3162277660168379*A[7]*B[9]+0.3535533905932737*A[0]*B[9]+0.3535533905932737*A[1]*B[4]; 
  tmp[10] = 0.3535533905932737*A[16]*B[39]+0.3105295017040593*A[18]*B[38]+0.3162277660168379*A[2]*B[38]+0.3535533905932737*A[11]*B[37]+0.3162277660168379*A[14]*B[24]+0.3535533905932737*A[3]*B[24]+0.3535533905932737*A[10]*B[23]+0.3162277660168379*A[12]*B[22]+0.3535533905932737*A[1]*B[22]+0.3535533905932737*A[6]*B[11]+0.3162277660168379*A[8]*B[10]+0.3535533905932737*A[0]*B[10]+0.3535533905932737*A[4]*B[9]+0.3535533905932737*A[2]*B[4]; 
  tmp[11] = 0.3105295017040593*A[19]*B[39]+0.3162277660168379*A[3]*B[39]+0.3535533905932737*A[14]*B[38]+0.3535533905932737*A[13]*B[37]+0.3162277660168379*A[16]*B[24]+0.3535533905932737*A[2]*B[24]+0.3162277660168379*A[15]*B[23]+0.3535533905932737*A[1]*B[23]+0.3535533905932737*A[10]*B[22]+0.3162277660168379*A[9]*B[11]+0.3535533905932737*A[0]*B[11]+0.3535533905932737*A[6]*B[10]+0.3535533905932737*A[5]*B[9]+0.3535533905932737*A[3]*B[4]; 
  tmp[12] = 0.3535533905932737*A[15]*B[45]+0.3535533905932737*A[12]*B[44]+0.3105295017040593*A[17]*B[43]+0.3162277660168379*A[1]*B[43]+0.3535533905932737*A[10]*B[27]+0.3162277660168379*A[13]*B[26]+0.3535533905932737*A[3]*B[26]+0.3162277660168379*A[11]*B[25]+0.3535533905932737*A[2]*B[25]+0.3535533905932737*A[5]*B[14]+0.3535533905932737*A[4]*B[13]+0.3162277660168379*A[7]*B[12]+0.3535533905932737*A[0]*B[12]+0.3535533905932737*A[1]*B[5]; 
  tmp[13] = 0.3535533905932737*A[16]*B[45]+0.3105295017040593*A[18]*B[44]+0.3162277660168379*A[2]*B[44]+0.3535533905932737*A[11]*B[43]+0.3162277660168379*A[14]*B[27]+0.3535533905932737*A[3]*B[27]+0.3535533905932737*A[10]*B[26]+0.3162277660168379*A[12]*B[25]+0.3535533905932737*A[1]*B[25]+0.3535533905932737*A[6]*B[14]+0.3162277660168379*A[8]*B[13]+0.3535533905932737*A[0]*B[13]+0.3535533905932737*A[4]*B[12]+0.3535533905932737*A[2]*B[5]; 
  tmp[14] = 0.3105295017040593*A[19]*B[45]+0.3162277660168379*A[3]*B[45]+0.3535533905932737*A[14]*B[44]+0.3535533905932737*A[13]*B[43]+0.3162277660168379*A[16]*B[27]+0.3535533905932737*A[2]*B[27]+0.3162277660168379*A[15]*B[26]+0.3535533905932737*A[1]*B[26]+0.3535533905932737*A[10]*B[25]+0.3162277660168379*A[9]*B[14]+0.3535533905932737*A[0]*B[14]+0.3535533905932737*A[6]*B[13]+0.3535533905932737*A[5]*B[12]+0.3535533905932737*A[3]*B[5]; 
  tmp[15] = 0.3535533905932737*A[3]*B[30]+0.3535533905932737*A[2]*B[29]+0.3535533905932737*A[1]*B[28]+0.3535533905932737*A[0]*B[15]; 
  tmp[16] = 0.210818510677892*A[17]*B[51]+0.3105295017040592*A[1]*B[51]+0.3162277660168379*A[15]*B[35]+0.2258769757263128*A[13]*B[33]+0.3535533905932737*A[3]*B[33]+0.3162277660168379*A[12]*B[32]+0.2258769757263128*A[11]*B[31]+0.3535533905932737*A[2]*B[31]+0.3162277660168379*A[10]*B[21]+0.3105295017040592*B[1]*A[17]+0.2258769757263128*A[7]*B[16]+0.3535533905932737*A[0]*B[16]+0.3535533905932737*B[3]*A[13]+0.3535533905932737*B[2]*A[11]+0.3162277660168379*A[5]*B[7]+0.3535533905932737*B[0]*A[7]+0.3162277660168379*A[4]*B[6]+0.3162277660168379*A[1]*B[1]; 
  tmp[17] = 0.210818510677892*A[18]*B[52]+0.3105295017040592*A[2]*B[52]+0.3162277660168379*A[16]*B[36]+0.2258769757263128*A[14]*B[34]+0.3535533905932737*A[3]*B[34]+0.2258769757263128*A[12]*B[32]+0.3535533905932737*A[1]*B[32]+0.3162277660168379*A[11]*B[31]+0.3162277660168379*A[10]*B[21]+0.3105295017040592*B[2]*A[18]+0.2258769757263128*A[8]*B[17]+0.3535533905932737*A[0]*B[17]+0.3535533905932737*B[3]*A[14]+0.3535533905932737*B[1]*A[12]+0.3162277660168379*A[6]*B[8]+0.3535533905932737*B[0]*A[8]+0.3162277660168379*A[4]*B[6]+0.3162277660168379*A[2]*B[2]; 
  tmp[18] = 0.210818510677892*A[19]*B[53]+0.3105295017040592*A[3]*B[53]+0.2258769757263128*A[16]*B[36]+0.3535533905932737*A[2]*B[36]+0.2258769757263128*A[15]*B[35]+0.3535533905932737*A[1]*B[35]+0.3162277660168379*A[14]*B[34]+0.3162277660168379*A[13]*B[33]+0.3162277660168379*A[10]*B[21]+0.3105295017040592*B[3]*A[19]+0.2258769757263128*A[9]*B[18]+0.3535533905932737*A[0]*B[18]+0.3535533905932737*B[2]*A[16]+0.3535533905932737*B[1]*A[15]+0.3535533905932737*B[0]*A[9]+0.3162277660168379*A[6]*B[8]+0.3162277660168379*A[5]*B[7]+0.3162277660168379*A[3]*B[3]; 
  tmp[19] = 0.3535533905932737*A[3]*B[42]+0.3535533905932737*A[2]*B[41]+0.3535533905932737*A[1]*B[40]+0.3535533905932737*A[0]*B[19]; 
  tmp[20] = 0.3535533905932737*A[3]*B[49]+0.3535533905932737*A[2]*B[48]+0.3535533905932737*A[1]*B[47]+0.3535533905932737*A[0]*B[20]; 
  tmp[21] = 0.3162277660168379*A[5]*B[36]+0.3162277660168379*A[6]*B[35]+0.3162277660168379*A[4]*B[34]+0.3162277660168379*A[4]*B[33]+0.3162277660168379*A[6]*B[32]+0.3162277660168379*A[5]*B[31]+0.3162277660168379*A[9]*B[21]+0.3162277660168379*A[8]*B[21]+0.3162277660168379*A[7]*B[21]+0.3535533905932737*A[0]*B[21]+0.3162277660168379*A[10]*B[18]+0.3162277660168379*A[10]*B[17]+0.3162277660168379*A[10]*B[16]+0.3162277660168379*B[7]*A[16]+0.3162277660168379*B[8]*A[15]+0.3162277660168379*B[6]*A[14]+0.3162277660168379*B[6]*A[13]+0.3162277660168379*B[8]*A[12]+0.3162277660168379*B[7]*A[11]+0.3535533905932737*B[0]*A[10]+0.3535533905932737*A[1]*B[8]+0.3535533905932737*A[2]*B[7]+0.3535533905932737*A[3]*B[6]+0.3535533905932737*B[1]*A[6]+0.3535533905932737*B[2]*A[5]+0.3535533905932737*B[3]*A[4]; 
  tmp[22] = 0.3162277660168379*A[4]*B[38]+0.3162277660168379*A[4]*B[37]+0.3535533905932737*A[5]*B[24]+0.3535533905932737*A[6]*B[23]+0.3162277660168379*A[8]*B[22]+0.3162277660168379*A[7]*B[22]+0.3535533905932737*A[0]*B[22]+0.3162277660168379*B[10]*A[12]+0.3535533905932737*A[10]*B[11]+0.3162277660168379*B[9]*A[11]+0.3535533905932737*A[1]*B[10]+0.3535533905932737*A[2]*B[9]+0.3535533905932737*A[4]*B[4]; 
  tmp[23] = 0.3162277660168379*A[5]*B[39]+0.3162277660168379*A[5]*B[37]+0.3535533905932737*A[4]*B[24]+0.3162277660168379*A[9]*B[23]+0.3162277660168379*A[7]*B[23]+0.3535533905932737*A[0]*B[23]+0.3535533905932737*A[6]*B[22]+0.3162277660168379*B[11]*A[15]+0.3162277660168379*B[9]*A[13]+0.3535533905932737*A[1]*B[11]+0.3535533905932737*A[10]*B[10]+0.3535533905932737*A[3]*B[9]+0.3535533905932737*B[4]*A[5]; 
  tmp[24] = 0.3162277660168379*A[6]*B[39]+0.3162277660168379*A[6]*B[38]+0.3162277660168379*A[9]*B[24]+0.3162277660168379*A[8]*B[24]+0.3535533905932737*A[0]*B[24]+0.3535533905932737*A[4]*B[23]+0.3535533905932737*A[5]*B[22]+0.3162277660168379*B[11]*A[16]+0.3162277660168379*B[10]*A[14]+0.3535533905932737*A[2]*B[11]+0.3535533905932737*A[3]*B[10]+0.3535533905932737*B[9]*A[10]+0.3535533905932737*B[4]*A[6]; 
  tmp[25] = 0.3162277660168379*A[4]*B[44]+0.3162277660168379*A[4]*B[43]+0.3535533905932737*A[5]*B[27]+0.3535533905932737*A[6]*B[26]+0.3162277660168379*A[8]*B[25]+0.3162277660168379*A[7]*B[25]+0.3535533905932737*A[0]*B[25]+0.3535533905932737*A[10]*B[14]+0.3162277660168379*A[12]*B[13]+0.3535533905932737*A[1]*B[13]+0.3162277660168379*A[11]*B[12]+0.3535533905932737*A[2]*B[12]+0.3535533905932737*A[4]*B[5]; 
  tmp[26] = 0.3162277660168379*A[5]*B[45]+0.3162277660168379*A[5]*B[43]+0.3535533905932737*A[4]*B[27]+0.3162277660168379*A[9]*B[26]+0.3162277660168379*A[7]*B[26]+0.3535533905932737*A[0]*B[26]+0.3535533905932737*A[6]*B[25]+0.3162277660168379*B[14]*A[15]+0.3535533905932737*A[1]*B[14]+0.3535533905932737*A[10]*B[13]+0.3162277660168379*B[12]*A[13]+0.3535533905932737*A[3]*B[12]+0.3535533905932737*A[5]*B[5]; 
  tmp[27] = 0.3162277660168379*A[6]*B[45]+0.3162277660168379*A[6]*B[44]+0.3162277660168379*A[9]*B[27]+0.3162277660168379*A[8]*B[27]+0.3535533905932737*A[0]*B[27]+0.3535533905932737*A[4]*B[26]+0.3535533905932737*A[5]*B[25]+0.3162277660168379*B[14]*A[16]+0.3535533905932737*A[2]*B[14]+0.3162277660168379*B[13]*A[14]+0.3535533905932737*A[3]*B[13]+0.3535533905932737*A[10]*B[12]+0.3535533905932737*B[5]*A[6]; 
  tmp[28] = 0.3535533905932737*A[5]*B[30]+0.3535533905932737*A[4]*B[29]+0.3162277660168379*A[7]*B[28]+0.3535533905932737*A[0]*B[28]+0.3535533905932737*A[1]*B[15]; 
  tmp[29] = 0.3535533905932737*A[6]*B[30]+0.3162277660168379*A[8]*B[29]+0.3535533905932737*A[0]*B[29]+0.3535533905932737*A[4]*B[28]+0.3535533905932737*A[2]*B[15]; 
  tmp[30] = 0.3162277660168379*A[9]*B[30]+0.3535533905932737*A[0]*B[30]+0.3535533905932737*A[6]*B[29]+0.3535533905932737*A[5]*B[28]+0.3535533905932737*A[3]*B[15]; 
  tmp[31] = 0.3105295017040593*A[4]*B[51]+0.3535533905932737*A[6]*B[33]+0.2828427124746191*A[4]*B[32]+0.3162277660168379*A[8]*B[31]+0.2258769757263128*A[7]*B[31]+0.3535533905932737*A[0]*B[31]+0.3162277660168379*A[5]*B[21]+0.3162277660168379*A[11]*B[17]+0.3105295017040593*B[6]*A[17]+0.2258769757263128*A[11]*B[16]+0.3535533905932737*A[2]*B[16]+0.3535533905932737*B[8]*A[13]+0.2828427124746191*B[6]*A[12]+0.3535533905932737*B[0]*A[11]+0.3162277660168379*B[7]*A[10]+0.3535533905932737*B[2]*A[7]+0.3162277660168379*A[1]*B[6]+0.3162277660168379*B[1]*A[4]; 
  tmp[32] = 0.3105295017040593*A[4]*B[52]+0.3535533905932737*A[5]*B[34]+0.2258769757263128*A[8]*B[32]+0.3162277660168379*A[7]*B[32]+0.3535533905932737*A[0]*B[32]+0.2828427124746191*A[4]*B[31]+0.3162277660168379*A[6]*B[21]+0.3105295017040593*B[6]*A[18]+0.2258769757263128*A[12]*B[17]+0.3535533905932737*A[1]*B[17]+0.3162277660168379*A[12]*B[16]+0.3535533905932737*B[7]*A[14]+0.3535533905932737*B[0]*A[12]+0.2828427124746191*B[6]*A[11]+0.3162277660168379*B[8]*A[10]+0.3535533905932737*B[1]*A[8]+0.3162277660168379*A[2]*B[6]+0.3162277660168379*B[2]*A[4]; 
  tmp[33] = 0.3105295017040593*A[5]*B[51]+0.2828427124746191*A[5]*B[35]+0.3162277660168379*A[9]*B[33]+0.2258769757263128*A[7]*B[33]+0.3535533905932737*A[0]*B[33]+0.3535533905932737*A[6]*B[31]+0.3162277660168379*A[4]*B[21]+0.3162277660168379*A[13]*B[18]+0.3105295017040593*B[7]*A[17]+0.2258769757263128*A[13]*B[16]+0.3535533905932737*A[3]*B[16]+0.2828427124746191*B[7]*A[15]+0.3535533905932737*B[0]*A[13]+0.3535533905932737*B[8]*A[11]+0.3162277660168379*B[6]*A[10]+0.3162277660168379*A[1]*B[7]+0.3535533905932737*B[3]*A[7]+0.3162277660168379*B[1]*A[5]; 
  tmp[34] = 0.3105295017040593*A[6]*B[52]+0.2828427124746191*A[6]*B[36]+0.3162277660168379*A[9]*B[34]+0.2258769757263128*A[8]*B[34]+0.3535533905932737*A[0]*B[34]+0.3535533905932737*A[5]*B[32]+0.3162277660168379*A[4]*B[21]+0.3162277660168379*A[14]*B[18]+0.3105295017040593*B[8]*A[18]+0.2258769757263128*A[14]*B[17]+0.3535533905932737*A[3]*B[17]+0.2828427124746191*B[8]*A[16]+0.3535533905932737*B[0]*A[14]+0.3535533905932737*B[7]*A[12]+0.3162277660168379*B[6]*A[10]+0.3162277660168379*A[2]*B[8]+0.3535533905932737*B[3]*A[8]+0.3162277660168379*B[2]*A[6]; 
  tmp[35] = 0.3105295017040593*A[5]*B[53]+0.3535533905932737*A[4]*B[36]+0.2258769757263128*A[9]*B[35]+0.3162277660168379*A[7]*B[35]+0.3535533905932737*A[0]*B[35]+0.2828427124746191*A[5]*B[33]+0.3162277660168379*A[6]*B[21]+0.3105295017040593*B[7]*A[19]+0.2258769757263128*A[15]*B[18]+0.3535533905932737*A[1]*B[18]+0.3162277660168379*A[15]*B[16]+0.3535533905932737*B[6]*A[16]+0.3535533905932737*B[0]*A[15]+0.2828427124746191*B[7]*A[13]+0.3162277660168379*B[8]*A[10]+0.3535533905932737*B[1]*A[9]+0.3162277660168379*A[3]*B[7]+0.3162277660168379*B[3]*A[5]; 
  tmp[36] = 0.3105295017040593*A[6]*B[53]+0.2258769757263128*A[9]*B[36]+0.3162277660168379*A[8]*B[36]+0.3535533905932737*A[0]*B[36]+0.3535533905932737*A[4]*B[35]+0.2828427124746191*A[6]*B[34]+0.3162277660168379*A[5]*B[21]+0.3105295017040593*B[8]*A[19]+0.2258769757263128*A[16]*B[18]+0.3535533905932737*A[2]*B[18]+0.3162277660168379*A[16]*B[17]+0.3535533905932737*B[0]*A[16]+0.3535533905932737*B[6]*A[15]+0.2828427124746191*B[8]*A[14]+0.3162277660168379*B[7]*A[10]+0.3535533905932737*B[2]*A[9]+0.3162277660168379*A[3]*B[8]+0.3162277660168379*B[3]*A[6]; 
  tmp[37] = 0.2258769757263128*A[7]*B[37]+0.3535533905932737*A[0]*B[37]+0.3162277660168379*A[5]*B[23]+0.3162277660168379*A[4]*B[22]+0.3105295017040593*B[9]*A[17]+0.3535533905932737*B[11]*A[13]+0.3535533905932737*B[10]*A[11]+0.3162277660168379*A[1]*B[9]+0.3535533905932737*B[4]*A[7]; 
  tmp[38] = 0.2258769757263128*A[8]*B[38]+0.3535533905932737*A[0]*B[38]+0.3162277660168379*A[6]*B[24]+0.3162277660168379*A[4]*B[22]+0.3105295017040593*B[10]*A[18]+0.3535533905932737*B[11]*A[14]+0.3535533905932737*B[9]*A[12]+0.3162277660168379*A[2]*B[10]+0.3535533905932737*B[4]*A[8]; 
  tmp[39] = 0.2258769757263128*A[9]*B[39]+0.3535533905932737*A[0]*B[39]+0.3162277660168379*A[6]*B[24]+0.3162277660168379*A[5]*B[23]+0.3105295017040593*B[11]*A[19]+0.3535533905932737*B[10]*A[16]+0.3535533905932737*B[9]*A[15]+0.3162277660168379*A[3]*B[11]+0.3535533905932737*B[4]*A[9]; 
  tmp[40] = 0.3535533905932737*A[5]*B[42]+0.3535533905932737*A[4]*B[41]+0.3162277660168379*A[7]*B[40]+0.3535533905932737*A[0]*B[40]+0.3535533905932737*A[1]*B[19]; 
  tmp[41] = 0.3535533905932737*A[6]*B[42]+0.3162277660168379*A[8]*B[41]+0.3535533905932737*A[0]*B[41]+0.3535533905932737*A[4]*B[40]+0.3535533905932737*A[2]*B[19]; 
  tmp[42] = 0.3162277660168379*A[9]*B[42]+0.3535533905932737*A[0]*B[42]+0.3535533905932737*A[6]*B[41]+0.3535533905932737*A[5]*B[40]+0.3535533905932737*A[3]*B[19]; 
  tmp[43] = 0.2258769757263128*A[7]*B[43]+0.3535533905932737*A[0]*B[43]+0.3162277660168379*A[5]*B[26]+0.3162277660168379*A[4]*B[25]+0.3105295017040593*B[12]*A[17]+0.3535533905932737*A[13]*B[14]+0.3535533905932737*A[11]*B[13]+0.3162277660168379*A[1]*B[12]+0.3535533905932737*B[5]*A[7]; 
  tmp[44] = 0.2258769757263128*A[8]*B[44]+0.3535533905932737*A[0]*B[44]+0.3162277660168379*A[6]*B[27]+0.3162277660168379*A[4]*B[25]+0.3105295017040593*B[13]*A[18]+0.3535533905932737*A[14]*B[14]+0.3162277660168379*A[2]*B[13]+0.3535533905932737*A[12]*B[12]+0.3535533905932737*B[5]*A[8]; 
  tmp[45] = 0.2258769757263128*A[9]*B[45]+0.3535533905932737*A[0]*B[45]+0.3162277660168379*A[6]*B[27]+0.3162277660168379*A[5]*B[26]+0.3105295017040593*B[14]*A[19]+0.3535533905932737*B[13]*A[16]+0.3535533905932737*B[12]*A[15]+0.3162277660168379*A[3]*B[14]+0.3535533905932737*B[5]*A[9]; 
  tmp[46] = 0.3535533905932737*A[0]*B[46]; 
  tmp[47] = 0.3535533905932737*A[5]*B[49]+0.3535533905932737*A[4]*B[48]+0.3162277660168379*A[7]*B[47]+0.3535533905932737*A[0]*B[47]+0.3535533905932737*A[1]*B[20]; 
  tmp[48] = 0.3535533905932737*A[6]*B[49]+0.3162277660168379*A[8]*B[48]+0.3535533905932737*A[0]*B[48]+0.3535533905932737*A[4]*B[47]+0.3535533905932737*A[2]*B[20]; 
  tmp[49] = 0.3162277660168379*A[9]*B[49]+0.3535533905932737*A[0]*B[49]+0.3535533905932737*A[6]*B[48]+0.3535533905932737*A[5]*B[47]+0.3535533905932737*A[3]*B[20]; 
  tmp[50] = 0.3535533905932737*A[0]*B[50]; 
  tmp[51] = 0.210818510677892*A[7]*B[51]+0.3535533905932737*A[0]*B[51]+0.3105295017040593*A[5]*B[33]+0.3105295017040593*A[4]*B[31]+0.210818510677892*B[16]*A[17]+0.3535533905932737*B[0]*A[17]+0.3105295017040592*A[1]*B[16]+0.3105295017040593*B[7]*A[13]+0.3105295017040593*B[6]*A[11]+0.3105295017040592*B[1]*A[7]; 
  tmp[52] = 0.210818510677892*A[8]*B[52]+0.3535533905932737*A[0]*B[52]+0.3105295017040593*A[6]*B[34]+0.3105295017040593*A[4]*B[32]+0.210818510677892*B[17]*A[18]+0.3535533905932737*B[0]*A[18]+0.3105295017040592*A[2]*B[17]+0.3105295017040593*B[8]*A[14]+0.3105295017040593*B[6]*A[12]+0.3105295017040592*B[2]*A[8]; 
  tmp[53] = 0.210818510677892*A[9]*B[53]+0.3535533905932737*A[0]*B[53]+0.3105295017040593*A[6]*B[36]+0.3105295017040593*A[5]*B[35]+0.210818510677892*B[18]*A[19]+0.3535533905932737*B[0]*A[19]+0.3105295017040592*A[3]*B[18]+0.3105295017040593*B[8]*A[16]+0.3105295017040593*B[7]*A[15]+0.3105295017040592*B[3]*A[9]; 
  tmp[54] = 0.3535533905932737*A[0]*B[54]; 
  tmp[55] = 0.3535533905932737*A[0]*B[55]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<56; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide3x2vMax_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.6123724356957944*A[3])-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
 
  double As[4]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(6,6); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(6);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(6);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.3535533905932737*As[0]; 
  AEM(0,1) = 0.3535533905932737*As[1]; 
  AEM(0,2) = 0.3535533905932737*As[2]; 
  AEM(0,3) = 0.3535533905932737*As[3]; 
  AEM(0,4) = 0.3535533905932737*As[1]; 
  AEM(0,5) = 0.3535533905932737*As[0]; 
  AEM(1,2) = 0.3535533905932737*As[2]; 
  AEM(1,4) = 0.3535533905932737*As[0]; 
  AEM(2,0) = 0.3535533905932737*As[3]; 
  AEM(2,3) = 0.3535533905932737*As[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,6,1) = u; 
 
} 
 
void CartFieldBinOpDivide3x2vMax_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if (0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
 
  double As[10]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    As[8] = 0.0; 
    As[9] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    As[8] = A[8]; 
    As[9] = A[9]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(21,21); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(21);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(21);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.3535533905932737*As[0]; 
  AEM(0,1) = 0.3535533905932737*As[1]; 
  AEM(0,2) = 0.3535533905932737*As[2]; 
  AEM(0,3) = 0.3535533905932737*As[3]; 
  AEM(0,6) = 0.3535533905932737*As[4]; 
  AEM(0,7) = 0.3535533905932737*As[5]; 
  AEM(0,8) = 0.3535533905932737*As[6]; 
  AEM(0,10) = 0.3535533905932737*As[1]; 
  AEM(0,11) = 0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(0,12) = 0.3535533905932737*As[4]; 
  AEM(0,13) = 0.3535533905932737*As[5]; 
  AEM(0,16) = 0.3535533905932737*As[2]; 
  AEM(0,17) = 0.3535533905932737*As[3]; 
  AEM(0,20) = 0.3535533905932737*As[2]; 
  AEM(1,0) = 0.3535533905932737*As[4]; 
  AEM(1,1) = 0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(1,2) = 0.3535533905932737*As[6]; 
  AEM(1,5) = 0.3535533905932737*As[1]; 
  AEM(1,7) = 0.3535533905932737*As[3]; 
  AEM(1,9) = 0.3535533905932737*As[3]; 
  AEM(1,10) = 0.3535533905932737*As[5]; 
  AEM(1,11) = 0.3535533905932737*As[6]; 
  AEM(1,12) = 0.3162277660168379*As[9]+0.3535533905932737*As[0]; 
  AEM(1,16) = 0.3535533905932737*As[1]; 
  AEM(1,17) = 0.3535533905932737*As[2]; 
  AEM(2,2) = 0.3535533905932737*As[0]; 
  AEM(2,7) = 0.3535533905932737*As[1]; 
  AEM(2,13) = 0.3535533905932737*As[0]; 
  AEM(2,18) = 0.3535533905932737*As[4]; 
  AEM(2,19) = 0.3535533905932737*As[2]; 
  AEM(2,20) = 0.3535533905932737*As[1]; 
  AEM(3,3) = 0.3162277660168379*As[8]+0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(3,4) = 0.3535533905932737*As[6]; 
  AEM(3,5) = 0.3535533905932737*As[5]; 
  AEM(3,7) = 0.3535533905932737*As[5]; 
  AEM(3,8) = 0.3535533905932737*As[3]; 
  AEM(3,10) = 0.3535533905932737*As[1]; 
  AEM(3,13) = 0.3535533905932737*As[6]; 
  AEM(3,14) = 0.3162277660168379*As[9]+0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(3,15) = 0.3535533905932737*As[4]; 
  AEM(3,17) = 0.3535533905932737*As[6]; 
  AEM(3,19) = 0.3535533905932737*As[3]; 
  AEM(3,20) = 0.3535533905932737*As[2]; 
  AEM(4,2) = 0.3535533905932737*As[5]; 
  AEM(4,3) = 0.3535533905932737*As[4]; 
  AEM(4,4) = 0.3162277660168379*As[9]+0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(4,10) = 0.3535533905932737*As[1]; 
  AEM(4,15) = 0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(4,20) = 0.3535533905932737*As[2]; 
  AEM(5,4) = 0.3535533905932737*As[4]; 
  AEM(5,9) = 0.3535533905932737*As[3]; 
  AEM(5,14) = 0.3535533905932737*As[5]; 
  AEM(5,20) = 0.3535533905932737*As[1]; 
  AEM(6,9) = 0.3535533905932737*As[2]; 
  AEM(6,19) = 0.3535533905932737*As[3]; 
  AEM(7,13) = 0.3535533905932737*As[7]; 
  AEM(7,14) = 0.3162277660168379*As[1]; 
  AEM(7,19) = 0.3162277660168379*As[4]; 
  AEM(7,20) = 0.3162277660168379*As[5]; 
  AEM(8,2) = 0.3535533905932737*As[8]; 
  AEM(8,4) = 0.3162277660168379*As[2]; 
  AEM(8,8) = 0.3162277660168379*As[4]; 
  AEM(8,10) = 0.3162277660168379*As[6]; 
  AEM(8,12) = 0.3535533905932737*As[9]; 
  AEM(8,15) = 0.3162277660168379*As[3]; 
  AEM(8,19) = 0.3162277660168379*As[5]; 
  AEM(8,20) = 0.3162277660168379*As[6]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,21,1) = u; 
 
} 
 
void CartFieldBinOpDivide3x2vMax_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]-0.9354143466934851*A[17]-1.369306393762915*A[16]-1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]-1.369306393762915*A[12]-1.369306393762915*A[11]-1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]-0.9354143466934851*A[17]-1.369306393762915*A[16]-1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]-1.369306393762915*A[12]-1.369306393762915*A[11]-1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]-0.9354143466934851*A[17]-1.369306393762915*A[16]-1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]-1.369306393762915*A[12]-1.369306393762915*A[11]-1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]-0.9354143466934851*A[17]-1.369306393762915*A[16]-1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]-1.369306393762915*A[12]-1.369306393762915*A[11]-1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]+1.060660171779821*A[5]+1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]+0.9354143466934851*A[17]-1.369306393762915*A[16]+1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]+1.369306393762915*A[12]-1.369306393762915*A[11]+1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]+0.9354143466934851*A[17]-1.369306393762915*A[16]+1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]+1.369306393762915*A[12]-1.369306393762915*A[11]+1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]+0.9354143466934851*A[17]-1.369306393762915*A[16]+1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]+1.369306393762915*A[12]-1.369306393762915*A[11]+1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
  if ((-0.9354143466934851*A[19])-0.9354143466934851*A[18]+0.9354143466934851*A[17]-1.369306393762915*A[16]+1.369306393762915*A[15]-1.369306393762915*A[14]-1.369306393762915*A[13]+1.369306393762915*A[12]-1.369306393762915*A[11]+1.837117307087383*A[10]+0.7905694150420947*A[9]+0.7905694150420947*A[8]+0.7905694150420947*A[7]+1.060660171779821*A[6]-1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0) { 
    avgA = true;
  }
 
  double As[20]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    As[8] = 0.0; 
    As[9] = 0.0; 
    As[10] = 0.0; 
    As[11] = 0.0; 
    As[12] = 0.0; 
    As[13] = 0.0; 
    As[14] = 0.0; 
    As[15] = 0.0; 
    As[16] = 0.0; 
    As[17] = 0.0; 
    As[18] = 0.0; 
    As[19] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    As[8] = A[8]; 
    As[9] = A[9]; 
    As[10] = A[10]; 
    As[11] = A[11]; 
    As[12] = A[12]; 
    As[13] = A[13]; 
    As[14] = A[14]; 
    As[15] = A[15]; 
    As[16] = A[16]; 
    As[17] = A[17]; 
    As[18] = A[18]; 
    As[19] = A[19]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(56,56); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(56);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(56);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.3535533905932737*As[0]; 
  AEM(0,1) = 0.3535533905932737*As[1]; 
  AEM(0,2) = 0.3535533905932737*As[2]; 
  AEM(0,3) = 0.3535533905932737*As[3]; 
  AEM(0,6) = 0.3535533905932737*As[4]; 
  AEM(0,7) = 0.3535533905932737*As[5]; 
  AEM(0,8) = 0.3535533905932737*As[6]; 
  AEM(0,16) = 0.3535533905932737*As[7]; 
  AEM(0,17) = 0.3535533905932737*As[8]; 
  AEM(0,18) = 0.3535533905932737*As[9]; 
  AEM(0,20) = 0.3535533905932737*As[1]; 
  AEM(0,21) = 0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(0,22) = 0.3535533905932737*As[4]; 
  AEM(0,23) = 0.3535533905932737*As[5]; 
  AEM(0,26) = 0.3162277660168379*As[11]+0.3535533905932737*As[2]; 
  AEM(0,27) = 0.3162277660168379*As[13]+0.3535533905932737*As[3]; 
  AEM(0,28) = 0.3535533905932737*As[10]; 
  AEM(0,36) = 0.3105295017040592*As[17]+0.3162277660168379*As[1]; 
  AEM(0,37) = 0.3535533905932737*As[12]; 
  AEM(0,38) = 0.3535533905932737*As[15]; 
  AEM(0,40) = 0.3535533905932737*As[2]; 
  AEM(0,41) = 0.3535533905932737*As[4]; 
  AEM(0,42) = 0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(0,43) = 0.3535533905932737*As[6]; 
  AEM(0,46) = 0.3162277660168379*As[12]+0.3535533905932737*As[1]; 
  AEM(0,47) = 0.3535533905932737*As[10]; 
  AEM(0,48) = 0.3162277660168379*As[14]+0.3535533905932737*As[3]; 
  AEM(1,0) = 0.3535533905932737*As[11]; 
  AEM(1,1) = 0.3105295017040592*As[18]+0.3162277660168379*As[2]; 
  AEM(1,2) = 0.3535533905932737*As[16]; 
  AEM(1,4) = 0.3535533905932737*As[3]; 
  AEM(1,5) = 0.3535533905932737*As[5]; 
  AEM(1,6) = 0.3535533905932737*As[6]; 
  AEM(1,7) = 0.3162277660168379*As[9]+0.3535533905932737*As[0]; 
  AEM(1,10) = 0.3535533905932737*As[10]; 
  AEM(1,11) = 0.3162277660168379*As[15]+0.3535533905932737*As[1]; 
  AEM(1,12) = 0.3162277660168379*As[16]+0.3535533905932737*As[2]; 
  AEM(1,20) = 0.3535533905932737*As[13]; 
  AEM(1,21) = 0.3535533905932737*As[14]; 
  AEM(1,22) = 0.3105295017040592*As[19]+0.3162277660168379*As[3]; 
  AEM(1,28) = 0.3535533905932737*As[0]; 
  AEM(1,33) = 0.3535533905932737*As[1]; 
  AEM(1,34) = 0.3535533905932737*As[2]; 
  AEM(1,35) = 0.3535533905932737*As[3]; 
  AEM(1,49) = 0.3535533905932737*As[0]; 
  AEM(2,0) = 0.3535533905932737*As[1]; 
  AEM(2,1) = 0.3535533905932737*As[2]; 
  AEM(2,2) = 0.3535533905932737*As[3]; 
  AEM(2,8) = 0.3535533905932737*As[4]; 
  AEM(2,9) = 0.3162277660168379*As[11]+0.3535533905932737*As[2]; 
  AEM(2,10) = 0.3162277660168379*As[12]+0.3535533905932737*As[1]; 
  AEM(2,11) = 0.3535533905932737*As[10]; 
  AEM(2,14) = 0.3162277660168379*As[8]+0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(2,15) = 0.3535533905932737*As[6]; 
  AEM(2,16) = 0.3535533905932737*As[5]; 
  AEM(2,24) = 0.3162277660168379*As[4]; 
  AEM(2,25) = 0.3162277660168379*As[4]; 
  AEM(2,28) = 0.3535533905932737*As[5]; 
  AEM(2,29) = 0.3162277660168379*As[13]+0.3535533905932737*As[3]; 
  AEM(2,30) = 0.3535533905932737*As[10]; 
  AEM(2,31) = 0.3162277660168379*As[15]+0.3535533905932737*As[1]; 
  AEM(2,34) = 0.3535533905932737*As[6]; 
  AEM(2,35) = 0.3162277660168379*As[9]+0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(2,36) = 0.3535533905932737*As[4]; 
  AEM(2,44) = 0.3162277660168379*As[5]; 
  AEM(2,46) = 0.3162277660168379*As[5]; 
  AEM(2,48) = 0.3535533905932737*As[6]; 
  AEM(2,49) = 0.3535533905932737*As[10]; 
  AEM(2,50) = 0.3162277660168379*As[14]+0.3535533905932737*As[3]; 
  AEM(2,51) = 0.3162277660168379*As[16]+0.3535533905932737*As[2]; 
  AEM(2,54) = 0.3535533905932737*As[5]; 
  AEM(2,55) = 0.3535533905932737*As[4]; 
  AEM(3,0) = 0.3162277660168379*As[9]+0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(3,9) = 0.3162277660168379*As[6]; 
  AEM(3,10) = 0.3162277660168379*As[6]; 
  AEM(3,16) = 0.3535533905932737*As[1]; 
  AEM(3,21) = 0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(3,22) = 0.3535533905932737*As[4]; 
  AEM(3,23) = 0.3535533905932737*As[5]; 
  AEM(3,36) = 0.3535533905932737*As[2]; 
  AEM(3,41) = 0.3535533905932737*As[4]; 
  AEM(3,42) = 0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(3,43) = 0.3535533905932737*As[6]; 
  AEM(4,0) = 0.3535533905932737*As[3]; 
  AEM(4,5) = 0.3535533905932737*As[5]; 
  AEM(4,6) = 0.3535533905932737*As[6]; 
  AEM(4,7) = 0.3162277660168379*As[9]+0.3535533905932737*As[0]; 
  AEM(4,21) = 0.3535533905932737*As[1]; 
  AEM(4,28) = 0.3162277660168379*As[7]+0.3535533905932737*As[0]; 
  AEM(4,29) = 0.3535533905932737*As[4]; 
  AEM(4,30) = 0.3535533905932737*As[5]; 
  AEM(4,41) = 0.3535533905932737*As[2]; 
  AEM(4,48) = 0.3535533905932737*As[4]; 
  AEM(4,49) = 0.3162277660168379*As[8]+0.3535533905932737*As[0]; 
  AEM(4,50) = 0.3535533905932737*As[6]; 
  AEM(5,5) = 0.3535533905932737*As[3]; 
  AEM(5,12) = 0.3535533905932737*As[5]; 
  AEM(5,13) = 0.3535533905932737*As[6]; 
  AEM(5,14) = 0.3162277660168379*As[9]+0.3535533905932737*As[0]; 
  AEM(5,35) = 0.3535533905932737*As[0]; 
  AEM(5,40) = 0.3535533905932737*As[7]; 
  AEM(5,41) = 0.3105295017040592*As[17]+0.3162277660168379*As[1]; 
  AEM(5,42) = 0.3535533905932737*As[11]; 
  AEM(5,43) = 0.3535533905932737*As[13]; 
  AEM(5,46) = 0.3162277660168379*As[4]; 
  AEM(5,47) = 0.3162277660168379*As[5]; 
  AEM(6,0) = 0.2258769757263128*As[7]+0.3535533905932737*As[0]; 
  AEM(6,4) = 0.3535533905932737*As[8]; 
  AEM(6,5) = 0.3535533905932737*As[12]; 
  AEM(6,6) = 0.3105295017040592*As[18]+0.3162277660168379*As[2]; 
  AEM(6,7) = 0.3535533905932737*As[14]; 
  AEM(6,10) = 0.3162277660168379*As[4]; 
  AEM(6,12) = 0.3162277660168379*As[6]; 
  AEM(6,21) = 0.2258769757263128*As[8]+0.3535533905932737*As[0]; 
  AEM(6,24) = 0.3535533905932737*As[9]; 
  AEM(6,25) = 0.3535533905932737*As[15]; 
  AEM(6,26) = 0.3535533905932737*As[16]; 
  AEM(6,27) = 0.3105295017040592*As[19]+0.3162277660168379*As[3]; 
  AEM(6,31) = 0.3162277660168379*As[5]; 
  AEM(6,32) = 0.3162277660168379*As[6]; 
  AEM(6,42) = 0.2258769757263128*As[9]+0.3535533905932737*As[0]; 
  AEM(7,7) = 0.3535533905932737*As[0]; 
  AEM(7,28) = 0.3535533905932737*As[10]; 
  AEM(7,29) = 0.3535533905932737*As[6]; 
  AEM(7,30) = 0.3535533905932737*As[5]; 
  AEM(7,31) = 0.3535533905932737*As[4]; 
  AEM(7,34) = 0.3162277660168379*As[14]+0.3162277660168379*As[13]+0.3535533905932737*As[3]; 
  AEM(7,35) = 0.3162277660168379*As[16]+0.3162277660168379*As[11]+0.3535533905932737*As[2]; 
  AEM(7,36) = 0.3162277660168379*As[15]+0.3162277660168379*As[12]+0.3535533905932737*As[1]; 
  AEM(7,44) = 0.3162277660168379*As[10]; 
  AEM(7,45) = 0.3162277660168379*As[10]; 
  AEM(7,46) = 0.3162277660168379*As[10]; 
  AEM(7,52) = 0.3535533905932737*As[4]; 
  AEM(8,1) = 0.3162277660168379*As[11]+0.3535533905932737*As[2]; 
  AEM(8,2) = 0.3162277660168379*As[12]+0.3535533905932737*As[1]; 
  AEM(8,3) = 0.3535533905932737*As[10]; 
  AEM(8,16) = 0.3535533905932737*As[5]; 
  AEM(8,21) = 0.3162277660168379*As[13]+0.3535533905932737*As[3]; 
  AEM(8,22) = 0.3535533905932737*As[10]; 
  AEM(8,23) = 0.3162277660168379*As[15]+0.3535533905932737*As[1]; 
  AEM(8,36) = 0.3535533905932737*As[6]; 
  AEM(8,41) = 0.3535533905932737*As[10]; 
  AEM(8,42) = 0.3162277660168379*As[14]+0.3535533905932737*As[3]; 
  AEM(8,43) = 0.3162277660168379*As[16]+0.3535533905932737*As[2]; 
  AEM(9,1) = 0.3535533905932737*As[4]; 
  AEM(9,8) = 0.3162277660168379*As[11]+0.3535533905932737*As[2]; 
  AEM(9,9) = 0.3162277660168379*As[12]+0.3535533905932737*As[1]; 
  AEM(9,10) = 0.3535533905932737*As[10]; 
  AEM(9,21) = 0.3535533905932737*As[5]; 
  AEM(9,28) = 0.3162277660168379*As[13]+0.3535533905932737*As[3]; 
  AEM(9,29) = 0.3535533905932737*As[10]; 
  AEM(9,30) = 0.3162277660168379*As[15]+0.3535533905932737*As[1]; 
  AEM(9,41) = 0.3535533905932737*As[6]; 
  AEM(9,48) = 0.3535533905932737*As[10]; 
  AEM(9,49) = 0.3162277660168379*As[14]+0.3535533905932737*As[3]; 
  AEM(9,50) = 0.3162277660168379*As[16]+0.3535533905932737*As[2]; 
  AEM(10,15) = 0.3535533905932737*As[1]; 
  AEM(10,35) = 0.3535533905932737*As[2]; 
  AEM(10,55) = 0.3535533905932737*As[3]; 
  AEM(11,4) = 0.3535533905932737*As[11]; 
  AEM(11,5) = 0.3162277660168379*As[4]; 
  AEM(11,6) = 0.3535533905932737*As[7]; 
  AEM(11,10) = 0.3105295017040593*As[17]+0.2828427124746191*As[12]+0.3162277660168379*As[1]; 
  AEM(11,11) = 0.3162277660168379*As[10]; 
  AEM(11,12) = 0.3535533905932737*As[13]; 
  AEM(11,20) = 0.2258769757263128*As[11]+0.3535533905932737*As[2]; 
  AEM(11,21) = 0.3162277660168379*As[11]; 
  AEM(11,24) = 0.3535533905932737*As[12]; 
  AEM(11,25) = 0.3535533905932737*As[8]; 
  AEM(11,26) = 0.3162277660168379*As[4]; 
  AEM(11,30) = 0.3105295017040593*As[18]+0.2828427124746191*As[11]+0.3162277660168379*As[2]; 
  AEM(11,31) = 0.3535533905932737*As[14]; 
  AEM(11,32) = 0.3162277660168379*As[10]; 
  AEM(11,40) = 0.3162277660168379*As[12]; 
  AEM(11,41) = 0.2258769757263128*As[12]+0.3535533905932737*As[1]; 
  AEM(11,44) = 0.3535533905932737*As[13]; 
  AEM(11,45) = 0.3162277660168379*As[5]; 
  AEM(11,47) = 0.3535533905932737*As[7]; 
  AEM(11,50) = 0.3162277660168379*As[10]; 
  AEM(11,51) = 0.3105295017040593*As[17]+0.2828427124746191*As[15]+0.3162277660168379*As[1]; 
  AEM(11,52) = 0.3535533905932737*As[11]; 
  AEM(12,4) = 0.2258769757263128*As[13]+0.3535533905932737*As[3]; 
  AEM(12,6) = 0.3162277660168379*As[13]; 
  AEM(12,8) = 0.3535533905932737*As[14]; 
  AEM(12,10) = 0.3162277660168379*As[6]; 
  AEM(12,11) = 0.3535533905932737*As[8]; 
  AEM(12,14) = 0.3162277660168379*As[10]; 
  AEM(12,15) = 0.3535533905932737*As[12]; 
  AEM(12,16) = 0.3105295017040593*As[18]+0.2828427124746191*As[16]+0.3162277660168379*As[2]; 
  AEM(12,25) = 0.2258769757263128*As[14]+0.3535533905932737*As[3]; 
  AEM(12,26) = 0.3162277660168379*As[14]; 
  AEM(12,28) = 0.3535533905932737*As[15]; 
  AEM(12,29) = 0.3535533905932737*As[9]; 
  AEM(12,31) = 0.3162277660168379*As[5]; 
  AEM(12,34) = 0.3535533905932737*As[16]; 
  AEM(12,35) = 0.3105295017040593*As[19]+0.2828427124746191*As[13]+0.3162277660168379*As[3]; 
  AEM(12,36) = 0.3162277660168379*As[10]; 
  AEM(12,44) = 0.3162277660168379*As[15]; 
  AEM(12,46) = 0.2258769757263128*As[15]+0.3535533905932737*As[1]; 
  AEM(12,48) = 0.3535533905932737*As[16]; 
  AEM(12,50) = 0.3535533905932737*As[9]; 
  AEM(12,51) = 0.3162277660168379*As[6]; 
  AEM(12,54) = 0.3535533905932737*As[15]; 
  AEM(12,55) = 0.3162277660168379*As[10]; 
  AEM(13,0) = 0.3105295017040593*As[19]+0.2828427124746191*As[14]+0.3162277660168379*As[3]; 
  AEM(13,9) = 0.3162277660168379*As[16]; 
  AEM(13,10) = 0.2258769757263128*As[16]+0.3535533905932737*As[2]; 
  AEM(13,16) = 0.3535533905932737*As[7]; 
  AEM(13,21) = 0.3105295017040593*As[17]+0.3162277660168379*As[1]; 
  AEM(13,22) = 0.3535533905932737*As[11]; 
  AEM(13,23) = 0.3535533905932737*As[13]; 
  AEM(13,36) = 0.3535533905932737*As[8]; 
  AEM(13,41) = 0.3535533905932737*As[12]; 
  AEM(13,42) = 0.3105295017040593*As[18]+0.3162277660168379*As[2]; 
  AEM(13,43) = 0.3535533905932737*As[14]; 
  AEM(14,0) = 0.3535533905932737*As[9]; 
  AEM(14,5) = 0.3535533905932737*As[15]; 
  AEM(14,6) = 0.3535533905932737*As[16]; 
  AEM(14,7) = 0.3105295017040593*As[19]+0.3162277660168379*As[3]; 
  AEM(14,35) = 0.3535533905932737*As[1]; 
  AEM(14,55) = 0.3535533905932737*As[2]; 
  AEM(15,19) = 0.3535533905932737*As[3]; 
  AEM(15,25) = 0.3535533905932737*As[7]; 
  AEM(15,32) = 0.3105295017040593*As[17]+0.3162277660168379*As[1]; 
  AEM(15,33) = 0.3535533905932737*As[11]; 
  AEM(15,34) = 0.3535533905932737*As[13]; 
  AEM(15,45) = 0.3535533905932737*As[8]; 
  AEM(15,52) = 0.3535533905932737*As[12]; 
  AEM(15,53) = 0.3105295017040593*As[18]+0.3162277660168379*As[2]; 
  AEM(15,54) = 0.3535533905932737*As[14]; 
  AEM(16,9) = 0.3535533905932737*As[9]; 
  AEM(16,16) = 0.3535533905932737*As[15]; 
  AEM(16,17) = 0.3535533905932737*As[16]; 
  AEM(16,18) = 0.3105295017040593*As[19]+0.3162277660168379*As[3]; 
  AEM(18,12) = 0.3535533905932737*As[17]; 
  AEM(18,13) = 0.3105295017040592*As[7]; 
  AEM(18,18) = 0.3105295017040593*As[11]; 
  AEM(18,19) = 0.3105295017040593*As[13]; 
  AEM(18,28) = 0.210818510677892*As[17]+0.3105295017040592*As[1]; 
  AEM(18,32) = 0.3535533905932737*As[18]; 
  AEM(18,34) = 0.3105295017040592*As[8]; 
  AEM(18,38) = 0.3105295017040593*As[12]; 
  AEM(18,40) = 0.3105295017040593*As[14]; 
  AEM(18,49) = 0.210818510677892*As[18]+0.3105295017040592*As[2]; 
  AEM(18,52) = 0.3535533905932737*As[19]; 
  AEM(18,55) = 0.3105295017040592*As[9]; 
  AEM(19,3) = 0.3105295017040593*As[15]; 
  AEM(19,4) = 0.3105295017040593*As[16]; 
  AEM(19,14) = 0.210818510677892*As[19]+0.3105295017040592*As[3]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47],B[48],B[49],B[50],B[51],B[52],B[53],B[54],B[55]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,56,1) = u; 
 
} 
 
