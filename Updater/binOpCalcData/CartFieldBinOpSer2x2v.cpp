#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply2x2vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[16]; 
  tmp[0] = 0.5*A[3]*B[5]+0.5*A[2]*B[2]+0.5*A[1]*B[1]+0.5*A[0]*B[0]; 
  tmp[1] = 0.5*A[2]*B[5]+0.5*B[2]*A[3]+0.5*A[0]*B[1]+0.5*B[0]*A[1]; 
  tmp[2] = 0.5*A[1]*B[5]+0.5*B[1]*A[3]+0.5*A[0]*B[2]+0.5*B[0]*A[2]; 
  tmp[3] = 0.5*A[3]*B[11]+0.5*A[2]*B[7]+0.5*A[1]*B[6]+0.5*A[0]*B[3]; 
  tmp[4] = 0.5*A[3]*B[12]+0.5*A[2]*B[9]+0.5*A[1]*B[8]+0.5*A[0]*B[4]; 
  tmp[5] = 0.5*A[0]*B[5]+0.5*B[0]*A[3]+0.5*A[1]*B[2]+0.5*B[1]*A[2]; 
  tmp[6] = 0.5*A[2]*B[11]+0.5*A[3]*B[7]+0.5*A[0]*B[6]+0.5*A[1]*B[3]; 
  tmp[7] = 0.5*A[1]*B[11]+0.5*A[0]*B[7]+0.5*A[3]*B[6]+0.5*A[2]*B[3]; 
  tmp[8] = 0.5*A[2]*B[12]+0.5*A[3]*B[9]+0.5*A[0]*B[8]+0.5*A[1]*B[4]; 
  tmp[9] = 0.5*A[1]*B[12]+0.5*A[0]*B[9]+0.5*A[3]*B[8]+0.5*A[2]*B[4]; 
  tmp[10] = 0.5*A[3]*B[15]+0.5*A[2]*B[14]+0.5*A[1]*B[13]+0.5*A[0]*B[10]; 
  tmp[11] = 0.5*A[0]*B[11]+0.5*A[1]*B[7]+0.5*A[2]*B[6]+0.5*A[3]*B[3]; 
  tmp[12] = 0.5*A[0]*B[12]+0.5*A[1]*B[9]+0.5*A[2]*B[8]+0.5*A[3]*B[4]; 
  tmp[13] = 0.5*A[2]*B[15]+0.5*A[3]*B[14]+0.5*A[0]*B[13]+0.5*A[1]*B[10]; 
  tmp[14] = 0.5*A[1]*B[15]+0.5*A[0]*B[14]+0.5*A[3]*B[13]+0.5*A[2]*B[10]; 
  tmp[15] = 0.5*A[0]*B[15]+0.5*A[1]*B[14]+0.5*A[2]*B[13]+0.5*A[3]*B[10]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<16; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply2x2vSer_P2(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[48]; 
  tmp[0] = 0.5*A[7]*B[20]+0.5*A[6]*B[19]+0.5*A[5]*B[12]+0.5*A[4]*B[11]+0.5*A[3]*B[5]+0.5*A[2]*B[2]+0.5*A[1]*B[1]+0.5*A[0]*B[0]; 
  tmp[1] = 0.5000000000000001*A[5]*B[20]+0.447213595499958*A[3]*B[19]+0.5000000000000001*A[7]*B[12]+0.4472135954999579*A[1]*B[11]+0.447213595499958*B[5]*A[6]+0.5*A[2]*B[5]+0.4472135954999579*B[1]*A[4]+0.5*B[2]*A[3]+0.5*A[0]*B[1]+0.5*B[0]*A[1]; 
  tmp[2] = 0.447213595499958*A[3]*B[20]+0.5000000000000001*A[4]*B[19]+0.4472135954999579*A[2]*B[12]+0.5000000000000001*A[6]*B[11]+0.447213595499958*B[5]*A[7]+0.5*A[1]*B[5]+0.4472135954999579*B[2]*A[5]+0.5*B[1]*A[3]+0.5*A[0]*B[2]+0.5*B[0]*A[2]; 
  tmp[3] = 0.5000000000000001*A[7]*B[33]+0.5000000000000001*A[6]*B[32]+0.5000000000000001*A[5]*B[22]+0.5000000000000001*A[4]*B[21]+0.5*A[3]*B[15]+0.5*A[2]*B[7]+0.5*A[1]*B[6]+0.5*A[0]*B[3]; 
  tmp[4] = 0.5000000000000001*A[7]*B[36]+0.5000000000000001*A[6]*B[35]+0.5000000000000001*A[5]*B[26]+0.5000000000000001*A[4]*B[25]+0.5*A[3]*B[16]+0.5*A[2]*B[9]+0.5*A[1]*B[8]+0.5*A[0]*B[4]; 
  tmp[5] = 0.4*A[6]*B[20]+0.447213595499958*A[2]*B[20]+0.4*A[7]*B[19]+0.447213595499958*A[1]*B[19]+0.4472135954999579*A[3]*B[12]+0.4472135954999579*A[3]*B[11]+0.447213595499958*B[2]*A[7]+0.447213595499958*B[1]*A[6]+0.4472135954999579*A[5]*B[5]+0.4472135954999579*A[4]*B[5]+0.5*A[0]*B[5]+0.5*B[0]*A[3]+0.5*A[1]*B[2]+0.5*B[1]*A[2]; 
  tmp[6] = 0.5*A[5]*B[33]+0.4472135954999579*A[3]*B[32]+0.5*A[7]*B[22]+0.447213595499958*A[1]*B[21]+0.447213595499958*A[6]*B[15]+0.5*A[2]*B[15]+0.5*A[3]*B[7]+0.4472135954999579*A[4]*B[6]+0.5*A[0]*B[6]+0.5*A[1]*B[3]; 
  tmp[7] = 0.4472135954999579*A[3]*B[33]+0.5*A[4]*B[32]+0.447213595499958*A[2]*B[22]+0.5*A[6]*B[21]+0.447213595499958*A[7]*B[15]+0.5*A[1]*B[15]+0.4472135954999579*A[5]*B[7]+0.5*A[0]*B[7]+0.5*A[3]*B[6]+0.5*A[2]*B[3]; 
  tmp[8] = 0.5*A[5]*B[36]+0.4472135954999579*A[3]*B[35]+0.5*A[7]*B[26]+0.447213595499958*A[1]*B[25]+0.447213595499958*A[6]*B[16]+0.5*A[2]*B[16]+0.5*A[3]*B[9]+0.4472135954999579*A[4]*B[8]+0.5*A[0]*B[8]+0.5*A[1]*B[4]; 
  tmp[9] = 0.4472135954999579*A[3]*B[36]+0.5*A[4]*B[35]+0.447213595499958*A[2]*B[26]+0.5*A[6]*B[25]+0.447213595499958*A[7]*B[16]+0.5*A[1]*B[16]+0.4472135954999579*A[5]*B[9]+0.5*A[0]*B[9]+0.5*A[3]*B[8]+0.5*A[2]*B[4]; 
  tmp[10] = 0.5*A[7]*B[45]+0.5*A[6]*B[44]+0.5*A[5]*B[38]+0.5*A[4]*B[37]+0.5*A[3]*B[31]+0.5*A[2]*B[18]+0.5*A[1]*B[17]+0.5*A[0]*B[10]; 
  tmp[11] = 0.4472135954999579*A[7]*B[20]+0.31943828249997*A[6]*B[19]+0.5000000000000001*A[2]*B[19]+0.31943828249997*A[4]*B[11]+0.5*A[0]*B[11]+0.5000000000000001*B[2]*A[6]+0.4472135954999579*A[3]*B[5]+0.5*B[0]*A[4]+0.4472135954999579*A[1]*B[1]; 
  tmp[12] = 0.31943828249997*A[7]*B[20]+0.5000000000000001*A[1]*B[20]+0.4472135954999579*A[6]*B[19]+0.31943828249997*A[5]*B[12]+0.5*A[0]*B[12]+0.5000000000000001*B[1]*A[7]+0.4472135954999579*A[3]*B[5]+0.5*B[0]*A[5]+0.4472135954999579*A[2]*B[2]; 
  tmp[13] = 0.5*A[3]*B[34]+0.5000000000000001*A[2]*B[24]+0.5000000000000001*A[1]*B[23]+0.5*A[0]*B[13]; 
  tmp[14] = 0.5*A[3]*B[41]+0.5000000000000001*A[2]*B[29]+0.5000000000000001*A[1]*B[28]+0.5*A[0]*B[14]; 
  tmp[15] = 0.4*A[6]*B[33]+0.4472135954999579*A[2]*B[33]+0.4*A[7]*B[32]+0.4472135954999579*A[1]*B[32]+0.447213595499958*A[3]*B[22]+0.447213595499958*A[3]*B[21]+0.4472135954999579*A[5]*B[15]+0.4472135954999579*A[4]*B[15]+0.5*A[0]*B[15]+0.447213595499958*A[7]*B[7]+0.5*A[1]*B[7]+0.447213595499958*A[6]*B[6]+0.5*A[2]*B[6]+0.5*A[3]*B[3]; 
  tmp[16] = 0.4*A[6]*B[36]+0.4472135954999579*A[2]*B[36]+0.4*A[7]*B[35]+0.4472135954999579*A[1]*B[35]+0.447213595499958*A[3]*B[26]+0.447213595499958*A[3]*B[25]+0.4472135954999579*A[5]*B[16]+0.4472135954999579*A[4]*B[16]+0.5*A[0]*B[16]+0.447213595499958*A[7]*B[9]+0.5*A[1]*B[9]+0.447213595499958*A[6]*B[8]+0.5*A[2]*B[8]+0.5*A[3]*B[4]; 
  tmp[17] = 0.5000000000000001*A[5]*B[45]+0.447213595499958*A[3]*B[44]+0.5000000000000001*A[7]*B[38]+0.4472135954999579*A[1]*B[37]+0.447213595499958*A[6]*B[31]+0.5*A[2]*B[31]+0.5*A[3]*B[18]+0.4472135954999579*A[4]*B[17]+0.5*A[0]*B[17]+0.5*A[1]*B[10]; 
  tmp[18] = 0.447213595499958*A[3]*B[45]+0.5000000000000001*A[4]*B[44]+0.4472135954999579*A[2]*B[38]+0.5000000000000001*A[6]*B[37]+0.447213595499958*A[7]*B[31]+0.5*A[1]*B[31]+0.4472135954999579*A[5]*B[18]+0.5*A[0]*B[18]+0.5*A[3]*B[17]+0.5*A[2]*B[10]; 
  tmp[19] = 0.4*A[3]*B[20]+0.4472135954999579*A[5]*B[19]+0.31943828249997*A[4]*B[19]+0.5*A[0]*B[19]+0.4472135954999579*A[6]*B[12]+0.31943828249997*A[6]*B[11]+0.5000000000000001*A[2]*B[11]+0.4*B[5]*A[7]+0.5*B[0]*A[6]+0.447213595499958*A[1]*B[5]+0.5000000000000001*B[2]*A[4]+0.447213595499958*B[1]*A[3]; 
  tmp[20] = 0.31943828249997*A[5]*B[20]+0.4472135954999579*A[4]*B[20]+0.5*A[0]*B[20]+0.4*A[3]*B[19]+0.31943828249997*A[7]*B[12]+0.5000000000000001*A[1]*B[12]+0.4472135954999579*A[7]*B[11]+0.5*B[0]*A[7]+0.4*B[5]*A[6]+0.447213595499958*A[2]*B[5]+0.5000000000000001*B[1]*A[5]+0.447213595499958*B[2]*A[3]; 
  tmp[21] = 0.4472135954999579*A[7]*B[33]+0.31943828249997*A[6]*B[32]+0.5000000000000001*A[2]*B[32]+0.31943828249997*A[4]*B[21]+0.5*A[0]*B[21]+0.447213595499958*A[3]*B[15]+0.5*A[6]*B[7]+0.447213595499958*A[1]*B[6]+0.5000000000000001*B[3]*A[4]; 
  tmp[22] = 0.31943828249997*A[7]*B[33]+0.5000000000000001*A[1]*B[33]+0.4472135954999579*A[6]*B[32]+0.31943828249997*A[5]*B[22]+0.5*A[0]*B[22]+0.447213595499958*A[3]*B[15]+0.447213595499958*A[2]*B[7]+0.5*B[6]*A[7]+0.5000000000000001*B[3]*A[5]; 
  tmp[23] = 0.4472135954999579*A[6]*B[34]+0.5000000000000001*A[2]*B[34]+0.5*A[3]*B[24]+0.4472135954999579*A[4]*B[23]+0.5*A[0]*B[23]+0.5000000000000001*A[1]*B[13]; 
  tmp[24] = 0.4472135954999579*A[7]*B[34]+0.5000000000000001*A[1]*B[34]+0.4472135954999579*A[5]*B[24]+0.5*A[0]*B[24]+0.5*A[3]*B[23]+0.5000000000000001*A[2]*B[13]; 
  tmp[25] = 0.4472135954999579*A[7]*B[36]+0.31943828249997*A[6]*B[35]+0.5000000000000001*A[2]*B[35]+0.31943828249997*A[4]*B[25]+0.5*A[0]*B[25]+0.447213595499958*A[3]*B[16]+0.5*A[6]*B[9]+0.447213595499958*A[1]*B[8]+0.5000000000000001*A[4]*B[4]; 
  tmp[26] = 0.31943828249997*A[7]*B[36]+0.5000000000000001*A[1]*B[36]+0.4472135954999579*A[6]*B[35]+0.31943828249997*A[5]*B[26]+0.5*A[0]*B[26]+0.447213595499958*A[3]*B[16]+0.447213595499958*A[2]*B[9]+0.5*A[7]*B[8]+0.5000000000000001*B[4]*A[5]; 
  tmp[27] = 0.5*A[3]*B[46]+0.5000000000000001*A[2]*B[40]+0.5000000000000001*A[1]*B[39]+0.5*A[0]*B[27]; 
  tmp[28] = 0.4472135954999579*A[6]*B[41]+0.5000000000000001*A[2]*B[41]+0.5*A[3]*B[29]+0.4472135954999579*A[4]*B[28]+0.5*A[0]*B[28]+0.5000000000000001*A[1]*B[14]; 
  tmp[29] = 0.4472135954999579*A[7]*B[41]+0.5000000000000001*A[1]*B[41]+0.4472135954999579*A[5]*B[29]+0.5*A[0]*B[29]+0.5*A[3]*B[28]+0.5000000000000001*A[2]*B[14]; 
  tmp[30] = 0.5*A[3]*B[47]+0.5000000000000001*A[2]*B[43]+0.5000000000000001*A[1]*B[42]+0.5*A[0]*B[30]; 
  tmp[31] = 0.4*A[6]*B[45]+0.447213595499958*A[2]*B[45]+0.4*A[7]*B[44]+0.447213595499958*A[1]*B[44]+0.4472135954999579*A[3]*B[38]+0.4472135954999579*A[3]*B[37]+0.4472135954999579*A[5]*B[31]+0.4472135954999579*A[4]*B[31]+0.5*A[0]*B[31]+0.447213595499958*A[7]*B[18]+0.5*A[1]*B[18]+0.447213595499958*A[6]*B[17]+0.5*A[2]*B[17]+0.5*A[3]*B[10]; 
  tmp[32] = 0.4*A[3]*B[33]+0.4472135954999579*A[5]*B[32]+0.31943828249997*A[4]*B[32]+0.5*A[0]*B[32]+0.4472135954999579*A[6]*B[22]+0.31943828249997*A[6]*B[21]+0.5000000000000001*A[2]*B[21]+0.4*A[7]*B[15]+0.4472135954999579*A[1]*B[15]+0.5*A[4]*B[7]+0.4472135954999579*A[3]*B[6]+0.5000000000000001*B[3]*A[6]; 
  tmp[33] = 0.31943828249997*A[5]*B[33]+0.4472135954999579*A[4]*B[33]+0.5*A[0]*B[33]+0.4*A[3]*B[32]+0.31943828249997*A[7]*B[22]+0.5000000000000001*A[1]*B[22]+0.4472135954999579*A[7]*B[21]+0.4*A[6]*B[15]+0.4472135954999579*A[2]*B[15]+0.4472135954999579*A[3]*B[7]+0.5000000000000001*B[3]*A[7]+0.5*A[5]*B[6]; 
  tmp[34] = 0.4472135954999579*A[5]*B[34]+0.4472135954999579*A[4]*B[34]+0.5*A[0]*B[34]+0.4472135954999579*A[7]*B[24]+0.5000000000000001*A[1]*B[24]+0.4472135954999579*A[6]*B[23]+0.5000000000000001*A[2]*B[23]+0.5*A[3]*B[13]; 
  tmp[35] = 0.4*A[3]*B[36]+0.4472135954999579*A[5]*B[35]+0.31943828249997*A[4]*B[35]+0.5*A[0]*B[35]+0.4472135954999579*A[6]*B[26]+0.31943828249997*A[6]*B[25]+0.5000000000000001*A[2]*B[25]+0.4*A[7]*B[16]+0.4472135954999579*A[1]*B[16]+0.5*A[4]*B[9]+0.4472135954999579*A[3]*B[8]+0.5000000000000001*B[4]*A[6]; 
  tmp[36] = 0.31943828249997*A[5]*B[36]+0.4472135954999579*A[4]*B[36]+0.5*A[0]*B[36]+0.4*A[3]*B[35]+0.31943828249997*A[7]*B[26]+0.5000000000000001*A[1]*B[26]+0.4472135954999579*A[7]*B[25]+0.4*A[6]*B[16]+0.4472135954999579*A[2]*B[16]+0.4472135954999579*A[3]*B[9]+0.5*A[5]*B[8]+0.5000000000000001*B[4]*A[7]; 
  tmp[37] = 0.4472135954999579*A[7]*B[45]+0.31943828249997*A[6]*B[44]+0.5000000000000001*A[2]*B[44]+0.31943828249997*A[4]*B[37]+0.5*A[0]*B[37]+0.4472135954999579*A[3]*B[31]+0.5000000000000001*A[6]*B[18]+0.4472135954999579*A[1]*B[17]+0.5*A[4]*B[10]; 
  tmp[38] = 0.31943828249997*A[7]*B[45]+0.5000000000000001*A[1]*B[45]+0.4472135954999579*A[6]*B[44]+0.31943828249997*A[5]*B[38]+0.5*A[0]*B[38]+0.4472135954999579*A[3]*B[31]+0.4472135954999579*A[2]*B[18]+0.5000000000000001*A[7]*B[17]+0.5*A[5]*B[10]; 
  tmp[39] = 0.4472135954999579*A[6]*B[46]+0.5000000000000001*A[2]*B[46]+0.5*A[3]*B[40]+0.4472135954999579*A[4]*B[39]+0.5*A[0]*B[39]+0.5000000000000001*A[1]*B[27]; 
  tmp[40] = 0.4472135954999579*A[7]*B[46]+0.5000000000000001*A[1]*B[46]+0.4472135954999579*A[5]*B[40]+0.5*A[0]*B[40]+0.5*A[3]*B[39]+0.5000000000000001*A[2]*B[27]; 
  tmp[41] = 0.4472135954999579*A[5]*B[41]+0.4472135954999579*A[4]*B[41]+0.5*A[0]*B[41]+0.4472135954999579*A[7]*B[29]+0.5000000000000001*A[1]*B[29]+0.4472135954999579*A[6]*B[28]+0.5000000000000001*A[2]*B[28]+0.5*A[3]*B[14]; 
  tmp[42] = 0.4472135954999579*A[6]*B[47]+0.5000000000000001*A[2]*B[47]+0.5*A[3]*B[43]+0.4472135954999579*A[4]*B[42]+0.5*A[0]*B[42]+0.5000000000000001*A[1]*B[30]; 
  tmp[43] = 0.4472135954999579*A[7]*B[47]+0.5000000000000001*A[1]*B[47]+0.4472135954999579*A[5]*B[43]+0.5*A[0]*B[43]+0.5*A[3]*B[42]+0.5000000000000001*A[2]*B[30]; 
  tmp[44] = 0.4*A[3]*B[45]+0.4472135954999579*A[5]*B[44]+0.31943828249997*A[4]*B[44]+0.5*A[0]*B[44]+0.4472135954999579*A[6]*B[38]+0.31943828249997*A[6]*B[37]+0.5000000000000001*A[2]*B[37]+0.4*A[7]*B[31]+0.447213595499958*A[1]*B[31]+0.5000000000000001*A[4]*B[18]+0.447213595499958*A[3]*B[17]+0.5*A[6]*B[10]; 
  tmp[45] = 0.31943828249997*A[5]*B[45]+0.4472135954999579*A[4]*B[45]+0.5*A[0]*B[45]+0.4*A[3]*B[44]+0.31943828249997*A[7]*B[38]+0.5000000000000001*A[1]*B[38]+0.4472135954999579*A[7]*B[37]+0.4*A[6]*B[31]+0.447213595499958*A[2]*B[31]+0.447213595499958*A[3]*B[18]+0.5000000000000001*A[5]*B[17]+0.5*A[7]*B[10]; 
  tmp[46] = 0.4472135954999579*A[5]*B[46]+0.4472135954999579*A[4]*B[46]+0.5*A[0]*B[46]+0.4472135954999579*A[7]*B[40]+0.5000000000000001*A[1]*B[40]+0.4472135954999579*A[6]*B[39]+0.5000000000000001*A[2]*B[39]+0.5*A[3]*B[27]; 
  tmp[47] = 0.4472135954999579*A[5]*B[47]+0.4472135954999579*A[4]*B[47]+0.5*A[0]*B[47]+0.4472135954999579*A[7]*B[43]+0.5000000000000001*A[1]*B[43]+0.4472135954999579*A[6]*B[42]+0.5000000000000001*A[2]*B[42]+0.5*A[3]*B[30]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<48; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide2x2vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.5*A[3])-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.5*A[3])-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
 
  double As[4]; 
  double Bs[16]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = 0.0; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = B[10]; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = 0.0; 
    Bs[15] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
  } 
 
  // Fill AEM_D matrix. 
  data->AEM_D(0,0) = 0.5*As[0]; 
  data->AEM_D(0,1) = 0.5*As[1]; 
  data->AEM_D(0,2) = 0.5*As[2]; 
  data->AEM_D(0,4) = 0.5*As[1]; 
  data->AEM_D(0,5) = 0.5*As[0]; 
  data->AEM_D(0,6) = 0.5*As[3]; 
  data->AEM_D(0,8) = 0.5*As[2]; 
  data->AEM_D(0,9) = 0.5*As[3]; 
  data->AEM_D(0,10) = 0.5*As[0]; 
  data->AEM_D(0,15) = 0.5*As[0]; 
  data->AEM_D(1,4) = 0.5*As[3]; 
  data->AEM_D(1,5) = 0.5*As[2]; 
  data->AEM_D(1,6) = 0.5*As[1]; 
  data->AEM_D(1,11) = 0.5*As[1]; 
  data->AEM_D(1,15) = 0.5*As[2]; 
  data->AEM_D(2,15) = 0.5*As[3]; 
 
  // Fill BEV_D. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,16,1) = data->u_D; 
 
} 
 
void CartFieldBinOpDivide2x2vSer_P2(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.936491673103709*A[7])-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]+1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.936491673103709*A[7])-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]+1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.936491673103709*A[7]-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]-1.5*A[3]-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.936491673103709*A[7]-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]-1.5*A[3]-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
 
  double As[8]; 
  double Bs[48]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = 0.0; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = B[10]; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = 0.0; 
    Bs[16] = 0.0; 
    Bs[17] = 0.0; 
    Bs[18] = 0.0; 
    Bs[19] = 0.0; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = 0.0; 
    Bs[26] = 0.0; 
    Bs[27] = B[27]; 
    Bs[28] = 0.0; 
    Bs[29] = 0.0; 
    Bs[30] = B[30]; 
    Bs[31] = 0.0; 
    Bs[32] = 0.0; 
    Bs[33] = 0.0; 
    Bs[34] = 0.0; 
    Bs[35] = 0.0; 
    Bs[36] = 0.0; 
    Bs[37] = 0.0; 
    Bs[38] = 0.0; 
    Bs[39] = 0.0; 
    Bs[40] = 0.0; 
    Bs[41] = 0.0; 
    Bs[42] = 0.0; 
    Bs[43] = 0.0; 
    Bs[44] = 0.0; 
    Bs[45] = 0.0; 
    Bs[46] = 0.0; 
    Bs[47] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
    Bs[32] = B[32]; 
    Bs[33] = B[33]; 
    Bs[34] = B[34]; 
    Bs[35] = B[35]; 
    Bs[36] = B[36]; 
    Bs[37] = B[37]; 
    Bs[38] = B[38]; 
    Bs[39] = B[39]; 
    Bs[40] = B[40]; 
    Bs[41] = B[41]; 
    Bs[42] = B[42]; 
    Bs[43] = B[43]; 
    Bs[44] = B[44]; 
    Bs[45] = B[45]; 
    Bs[46] = B[46]; 
    Bs[47] = B[47]; 
  } 
 
  // Fill AEM_D matrix. 
  data->AEM_D(0,0) = 0.5*As[0]; 
  data->AEM_D(0,1) = 0.5*As[1]; 
  data->AEM_D(0,2) = 0.5*As[2]; 
  data->AEM_D(0,5) = 0.5*As[3]; 
  data->AEM_D(0,8) = 0.5*As[1]; 
  data->AEM_D(0,9) = 0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(0,10) = 0.5*As[3]; 
  data->AEM_D(0,13) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(0,16) = 0.5*As[2]; 
  data->AEM_D(0,17) = 0.5*As[3]; 
  data->AEM_D(0,18) = 0.4472135954999579*As[5]+0.5*As[0]; 
  data->AEM_D(0,21) = 0.447213595499958*As[7]+0.5*As[1]; 
  data->AEM_D(0,27) = 0.5*As[0]; 
  data->AEM_D(0,30) = 0.5*As[1]; 
  data->AEM_D(0,31) = 0.5*As[2]; 
  data->AEM_D(0,36) = 0.5*As[0]; 
  data->AEM_D(0,40) = 0.5*As[3]; 
  data->AEM_D(0,41) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(0,42) = 0.447213595499958*As[7]+0.5*As[1]; 
  data->AEM_D(0,45) = 0.4472135954999579*As[5]+0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(1,3) = 0.5*As[1]; 
  data->AEM_D(1,6) = 0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(1,7) = 0.5*As[3]; 
  data->AEM_D(1,11) = 0.5*As[2]; 
  data->AEM_D(1,14) = 0.5*As[3]; 
  data->AEM_D(1,15) = 0.4472135954999579*As[5]+0.5*As[0]; 
  data->AEM_D(1,20) = 0.5*As[1]; 
  data->AEM_D(1,28) = 0.5*As[2]; 
  data->AEM_D(1,40) = 0.5*As[4]; 
  data->AEM_D(1,41) = 0.4472135954999579*As[1]; 
  data->AEM_D(1,42) = 0.5000000000000001*As[6]; 
  data->AEM_D(1,45) = 0.4472135954999579*As[3]; 
  data->AEM_D(2,0) = 0.5*As[5]; 
  data->AEM_D(2,1) = 0.5000000000000001*As[7]; 
  data->AEM_D(2,2) = 0.4472135954999579*As[2]; 
  data->AEM_D(2,5) = 0.4472135954999579*As[3]; 
  data->AEM_D(2,27) = 0.5*As[3]; 
  data->AEM_D(2,30) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(2,31) = 0.447213595499958*As[7]+0.5*As[1]; 
  data->AEM_D(2,36) = 0.5*As[3]; 
  data->AEM_D(3,8) = 0.5*As[6]; 
  data->AEM_D(3,9) = 0.447213595499958*As[3]; 
  data->AEM_D(3,10) = 0.5000000000000001*As[4]; 
  data->AEM_D(3,13) = 0.4*As[7]+0.447213595499958*As[1]; 
  data->AEM_D(3,16) = 0.5*As[7]; 
  data->AEM_D(3,17) = 0.5000000000000001*As[5]; 
  data->AEM_D(3,18) = 0.447213595499958*As[3]; 
  data->AEM_D(3,21) = 0.4*As[6]+0.447213595499958*As[2]; 
  data->AEM_D(3,27) = 0.5000000000000001*As[4]; 
  data->AEM_D(3,30) = 0.447213595499958*As[1]; 
  data->AEM_D(3,31) = 0.5*As[6]; 
  data->AEM_D(3,35) = 0.5000000000000001*As[5]; 
  data->AEM_D(3,38) = 0.5*As[7]; 
  data->AEM_D(3,39) = 0.447213595499958*As[2]; 
  data->AEM_D(4,12) = 0.5000000000000001*As[4]; 
  data->AEM_D(4,20) = 0.5000000000000001*As[5]; 
  data->AEM_D(5,19) = 0.5000000000000001*As[6]; 
  data->AEM_D(5,22) = 0.4472135954999579*As[3]; 
  data->AEM_D(5,23) = 0.5*As[4]; 
  data->AEM_D(5,27) = 0.5000000000000001*As[7]; 
  data->AEM_D(5,30) = 0.5*As[5]; 
  data->AEM_D(5,31) = 0.4472135954999579*As[3]; 
  data->AEM_D(5,44) = 0.5000000000000001*As[6]; 
  data->AEM_D(6,4) = 0.5000000000000001*As[7]; 
 
  // Fill BEV_D. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31],Bs[32],Bs[33],Bs[34],Bs[35],Bs[36],Bs[37],Bs[38],Bs[39],Bs[40],Bs[41],Bs[42],Bs[43],Bs[44],Bs[45],Bs[46],Bs[47]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,48,1) = data->u_D; 
 
} 
 
