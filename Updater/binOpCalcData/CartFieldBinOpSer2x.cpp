#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply2xSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[4]; 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 4*vd; 
    unsigned short int a0 = b0*eqNcomp; 
    // Component-wise (of the vectors) multiplication. 
    tmp[0] = 0.5*A[a0+3]*B[b0+3]+0.5*A[a0+2]*B[b0+2]+0.5*A[a0+1]*B[b0+1]+0.5*A[a0]*B[b0]; 
    tmp[1] = 0.5*A[a0+2]*B[b0+3]+0.5*A[a0+3]*B[b0+2]+0.5*A[a0]*B[b0+1]+0.5*A[a0+1]*B[b0]; 
    tmp[2] = 0.5*A[a0+1]*B[b0+3]+0.5*A[a0]*B[b0+2]+0.5*A[a0+3]*B[b0+1]+0.5*A[a0+2]*B[b0]; 
    tmp[3] = 0.5*A[a0]*B[b0+3]+0.5*A[a0+1]*B[b0+2]+0.5*A[a0+2]*B[b0+1]+0.5*A[a0+3]*B[b0]; 
 
    // This tmp allows for in-place multiplication. 
    for (unsigned short int i=0; i<4; i++) 
    { 
      out[b0+i] = tmp[i]; 
    } 
  } 
 
} 
 
void CartFieldBinOpMultiply2xSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[8]; 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 8*vd; 
    unsigned short int a0 = b0*eqNcomp; 
    // Component-wise (of the vectors) multiplication. 
    tmp[0] = 0.5*A[a0+7]*B[b0+7]+0.5*A[a0+6]*B[b0+6]+0.5*A[a0+5]*B[b0+5]+0.5*A[a0+4]*B[b0+4]+0.5*A[a0+3]*B[b0+3]+0.5*A[a0+2]*B[b0+2]+0.5*A[a0+1]*B[b0+1]+0.5*A[a0]*B[b0]; 
    tmp[1] = 0.5000000000000001*A[a0+5]*B[b0+7]+0.447213595499958*A[a0+3]*B[b0+6]+0.5000000000000001*A[a0+7]*B[b0+5]+0.4472135954999579*A[a0+1]*B[b0+4]+0.447213595499958*A[a0+6]*B[b0+3]+0.5*A[a0+2]*B[b0+3]+0.5*A[a0+3]*B[b0+2]+0.4472135954999579*A[a0+4]*B[b0+1]+0.5*A[a0]*B[b0+1]+0.5*A[a0+1]*B[b0]; 
    tmp[2] = 0.447213595499958*A[a0+3]*B[b0+7]+0.5000000000000001*A[a0+4]*B[b0+6]+0.4472135954999579*A[a0+2]*B[b0+5]+0.5000000000000001*A[a0+6]*B[b0+4]+0.447213595499958*A[a0+7]*B[b0+3]+0.5*A[a0+1]*B[b0+3]+0.4472135954999579*A[a0+5]*B[b0+2]+0.5*A[a0]*B[b0+2]+0.5*A[a0+3]*B[b0+1]+0.5*A[a0+2]*B[b0]; 
    tmp[3] = 0.4*A[a0+6]*B[b0+7]+0.447213595499958*A[a0+2]*B[b0+7]+0.4*A[a0+7]*B[b0+6]+0.447213595499958*A[a0+1]*B[b0+6]+0.4472135954999579*A[a0+3]*B[b0+5]+0.4472135954999579*A[a0+3]*B[b0+4]+0.4472135954999579*A[a0+5]*B[b0+3]+0.4472135954999579*A[a0+4]*B[b0+3]+0.5*A[a0]*B[b0+3]+0.447213595499958*A[a0+7]*B[b0+2]+0.5*A[a0+1]*B[b0+2]+0.447213595499958*A[a0+6]*B[b0+1]+0.5*A[a0+2]*B[b0+1]+0.5*A[a0+3]*B[b0]; 
    tmp[4] = 0.4472135954999579*A[a0+7]*B[b0+7]+0.31943828249997*A[a0+6]*B[b0+6]+0.5000000000000001*A[a0+2]*B[b0+6]+0.31943828249997*A[a0+4]*B[b0+4]+0.5*A[a0]*B[b0+4]+0.4472135954999579*A[a0+3]*B[b0+3]+0.5000000000000001*A[a0+6]*B[b0+2]+0.4472135954999579*A[a0+1]*B[b0+1]+0.5*A[a0+4]*B[b0]; 
    tmp[5] = 0.31943828249997*A[a0+7]*B[b0+7]+0.5000000000000001*A[a0+1]*B[b0+7]+0.4472135954999579*A[a0+6]*B[b0+6]+0.31943828249997*A[a0+5]*B[b0+5]+0.5*A[a0]*B[b0+5]+0.4472135954999579*A[a0+3]*B[b0+3]+0.4472135954999579*A[a0+2]*B[b0+2]+0.5000000000000001*A[a0+7]*B[b0+1]+0.5*A[a0+5]*B[b0]; 
    tmp[6] = 0.4*A[a0+3]*B[b0+7]+0.4472135954999579*A[a0+5]*B[b0+6]+0.31943828249997*A[a0+4]*B[b0+6]+0.5*A[a0]*B[b0+6]+0.4472135954999579*A[a0+6]*B[b0+5]+0.31943828249997*A[a0+6]*B[b0+4]+0.5000000000000001*A[a0+2]*B[b0+4]+0.4*A[a0+7]*B[b0+3]+0.447213595499958*A[a0+1]*B[b0+3]+0.5000000000000001*A[a0+4]*B[b0+2]+0.447213595499958*A[a0+3]*B[b0+1]+0.5*A[a0+6]*B[b0]; 
    tmp[7] = 0.31943828249997*A[a0+5]*B[b0+7]+0.4472135954999579*A[a0+4]*B[b0+7]+0.5*A[a0]*B[b0+7]+0.4*A[a0+3]*B[b0+6]+0.31943828249997*A[a0+7]*B[b0+5]+0.5000000000000001*A[a0+1]*B[b0+5]+0.4472135954999579*A[a0+7]*B[b0+4]+0.4*A[a0+6]*B[b0+3]+0.447213595499958*A[a0+2]*B[b0+3]+0.447213595499958*A[a0+3]*B[b0+2]+0.5000000000000001*A[a0+5]*B[b0+1]+0.5*A[a0+7]*B[b0]; 
 
    // This tmp allows for in-place multiplication. 
    for (unsigned short int i=0; i<8; i++) 
    { 
      out[b0+i] = tmp[i]; 
    } 
  } 
 
} 
 
void CartFieldBinOpMultiply2xSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[12]; 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 12*vd; 
    unsigned short int a0 = b0*eqNcomp; 
    // Component-wise (of the vectors) multiplication. 
    tmp[0] = 0.5*A[a0+11]*B[b0+11]+0.5*A[a0+10]*B[b0+10]+0.5*A[a0+9]*B[b0+9]+0.5*A[a0+8]*B[b0+8]+0.5*A[a0+7]*B[b0+7]+0.5*A[a0+6]*B[b0+6]+0.5*A[a0+5]*B[b0+5]+0.5*A[a0+4]*B[b0+4]+0.5*A[a0+3]*B[b0+3]+0.5*A[a0+2]*B[b0+2]+0.5*A[a0+1]*B[b0+1]+0.5*A[a0]*B[b0]; 
    tmp[1] = 0.5*A[a0+9]*B[b0+11]+0.4391550328268399*A[a0+6]*B[b0+10]+0.5*A[a0+11]*B[b0+9]+0.4391550328268398*A[a0+4]*B[b0+8]+0.5000000000000001*A[a0+5]*B[b0+7]+0.4391550328268399*A[a0+10]*B[b0+6]+0.447213595499958*A[a0+3]*B[b0+6]+0.5000000000000001*A[a0+7]*B[b0+5]+0.4391550328268398*A[a0+8]*B[b0+4]+0.4472135954999579*A[a0+1]*B[b0+4]+0.447213595499958*A[a0+6]*B[b0+3]+0.5*A[a0+2]*B[b0+3]+0.5*A[a0+3]*B[b0+2]+0.4472135954999579*A[a0+4]*B[b0+1]+0.5*A[a0]*B[b0+1]+0.5*A[a0+1]*B[b0]; 
    tmp[2] = 0.4391550328268399*A[a0+7]*B[b0+11]+0.5*A[a0+8]*B[b0+10]+0.4391550328268398*A[a0+5]*B[b0+9]+0.5*A[a0+10]*B[b0+8]+0.4391550328268399*A[a0+11]*B[b0+7]+0.447213595499958*A[a0+3]*B[b0+7]+0.5000000000000001*A[a0+4]*B[b0+6]+0.4391550328268398*A[a0+9]*B[b0+5]+0.4472135954999579*A[a0+2]*B[b0+5]+0.5000000000000001*A[a0+6]*B[b0+4]+0.447213595499958*A[a0+7]*B[b0+3]+0.5*A[a0+1]*B[b0+3]+0.4472135954999579*A[a0+5]*B[b0+2]+0.5*A[a0]*B[b0+2]+0.5*A[a0+3]*B[b0+1]+0.5*A[a0+2]*B[b0]; 
    tmp[3] = 0.4391550328268399*A[a0+5]*B[b0+11]+0.4391550328268399*A[a0+4]*B[b0+10]+0.4391550328268399*A[a0+7]*B[b0+9]+0.4391550328268399*A[a0+6]*B[b0+8]+0.4391550328268399*A[a0+9]*B[b0+7]+0.4*A[a0+6]*B[b0+7]+0.447213595499958*A[a0+2]*B[b0+7]+0.4391550328268399*A[a0+8]*B[b0+6]+0.4*A[a0+7]*B[b0+6]+0.447213595499958*A[a0+1]*B[b0+6]+0.4391550328268399*A[a0+11]*B[b0+5]+0.4472135954999579*A[a0+3]*B[b0+5]+0.4391550328268399*A[a0+10]*B[b0+4]+0.4472135954999579*A[a0+3]*B[b0+4]+0.4472135954999579*A[a0+5]*B[b0+3]+0.4472135954999579*A[a0+4]*B[b0+3]+0.5*A[a0]*B[b0+3]+0.447213595499958*A[a0+7]*B[b0+2]+0.5*A[a0+1]*B[b0+2]+0.447213595499958*A[a0+6]*B[b0+1]+0.5*A[a0+2]*B[b0+1]+0.5*A[a0+3]*B[b0]; 
    tmp[4] = 0.4472135954999579*A[a0+11]*B[b0+11]+0.2981423969999719*A[a0+10]*B[b0+10]+0.4391550328268399*A[a0+3]*B[b0+10]+0.2981423969999719*A[a0+8]*B[b0+8]+0.4391550328268398*A[a0+1]*B[b0+8]+0.4472135954999579*A[a0+7]*B[b0+7]+0.31943828249997*A[a0+6]*B[b0+6]+0.5000000000000001*A[a0+2]*B[b0+6]+0.31943828249997*A[a0+4]*B[b0+4]+0.5*A[a0]*B[b0+4]+0.4391550328268399*A[a0+10]*B[b0+3]+0.4472135954999579*A[a0+3]*B[b0+3]+0.5000000000000001*A[a0+6]*B[b0+2]+0.4391550328268398*A[a0+8]*B[b0+1]+0.4472135954999579*A[a0+1]*B[b0+1]+0.5*A[a0+4]*B[b0]; 
    tmp[5] = 0.2981423969999719*A[a0+11]*B[b0+11]+0.4391550328268399*A[a0+3]*B[b0+11]+0.4472135954999579*A[a0+10]*B[b0+10]+0.2981423969999719*A[a0+9]*B[b0+9]+0.4391550328268398*A[a0+2]*B[b0+9]+0.31943828249997*A[a0+7]*B[b0+7]+0.5000000000000001*A[a0+1]*B[b0+7]+0.4472135954999579*A[a0+6]*B[b0+6]+0.31943828249997*A[a0+5]*B[b0+5]+0.5*A[a0]*B[b0+5]+0.4391550328268399*A[a0+11]*B[b0+3]+0.4472135954999579*A[a0+3]*B[b0+3]+0.4391550328268398*A[a0+9]*B[b0+2]+0.4472135954999579*A[a0+2]*B[b0+2]+0.5000000000000001*A[a0+7]*B[b0+1]+0.5*A[a0+5]*B[b0]; 
    tmp[6] = 0.3927922024247863*A[a0+7]*B[b0+11]+0.2981423969999719*A[a0+8]*B[b0+10]+0.3927922024247863*A[a0+7]*B[b0+10]+0.4391550328268399*A[a0+1]*B[b0+10]+0.2981423969999719*A[a0+10]*B[b0+8]+0.4391550328268399*A[a0+3]*B[b0+8]+0.3927922024247863*A[a0+11]*B[b0+7]+0.3927922024247863*A[a0+10]*B[b0+7]+0.4*A[a0+3]*B[b0+7]+0.4472135954999579*A[a0+5]*B[b0+6]+0.31943828249997*A[a0+4]*B[b0+6]+0.5*A[a0]*B[b0+6]+0.4472135954999579*A[a0+6]*B[b0+5]+0.31943828249997*A[a0+6]*B[b0+4]+0.5000000000000001*A[a0+2]*B[b0+4]+0.4391550328268399*A[a0+8]*B[b0+3]+0.4*A[a0+7]*B[b0+3]+0.447213595499958*A[a0+1]*B[b0+3]+0.5000000000000001*A[a0+4]*B[b0+2]+0.4391550328268399*A[a0+10]*B[b0+1]+0.447213595499958*A[a0+3]*B[b0+1]+0.5*A[a0+6]*B[b0]; 
    tmp[7] = 0.2981423969999719*A[a0+9]*B[b0+11]+0.3927922024247863*A[a0+6]*B[b0+11]+0.4391550328268399*A[a0+2]*B[b0+11]+0.3927922024247863*A[a0+6]*B[b0+10]+0.2981423969999719*A[a0+11]*B[b0+9]+0.4391550328268399*A[a0+3]*B[b0+9]+0.31943828249997*A[a0+5]*B[b0+7]+0.4472135954999579*A[a0+4]*B[b0+7]+0.5*A[a0]*B[b0+7]+0.3927922024247863*A[a0+11]*B[b0+6]+0.3927922024247863*A[a0+10]*B[b0+6]+0.4*A[a0+3]*B[b0+6]+0.31943828249997*A[a0+7]*B[b0+5]+0.5000000000000001*A[a0+1]*B[b0+5]+0.4472135954999579*A[a0+7]*B[b0+4]+0.4391550328268399*A[a0+9]*B[b0+3]+0.4*A[a0+6]*B[b0+3]+0.447213595499958*A[a0+2]*B[b0+3]+0.4391550328268399*A[a0+11]*B[b0+2]+0.447213595499958*A[a0+3]*B[b0+2]+0.5000000000000001*A[a0+5]*B[b0+1]+0.5*A[a0+7]*B[b0]; 
    tmp[8] = 0.2981423969999719*A[a0+6]*B[b0+10]+0.5*A[a0+2]*B[b0+10]+0.2981423969999719*A[a0+4]*B[b0+8]+0.5*A[a0]*B[b0+8]+0.2981423969999719*A[a0+10]*B[b0+6]+0.4391550328268399*A[a0+3]*B[b0+6]+0.2981423969999719*A[a0+8]*B[b0+4]+0.4391550328268398*A[a0+1]*B[b0+4]+0.4391550328268399*A[a0+6]*B[b0+3]+0.5*A[a0+10]*B[b0+2]+0.4391550328268398*A[a0+4]*B[b0+1]+0.5*A[a0+8]*B[b0]; 
    tmp[9] = 0.2981423969999719*A[a0+7]*B[b0+11]+0.5*A[a0+1]*B[b0+11]+0.2981423969999719*A[a0+5]*B[b0+9]+0.5*A[a0]*B[b0+9]+0.2981423969999719*A[a0+11]*B[b0+7]+0.4391550328268399*A[a0+3]*B[b0+7]+0.2981423969999719*A[a0+9]*B[b0+5]+0.4391550328268398*A[a0+2]*B[b0+5]+0.4391550328268399*A[a0+7]*B[b0+3]+0.4391550328268398*A[a0+5]*B[b0+2]+0.5*A[a0+11]*B[b0+1]+0.5*A[a0+9]*B[b0]; 
    tmp[10] = 0.4472135954999579*A[a0+5]*B[b0+10]+0.2981423969999719*A[a0+4]*B[b0+10]+0.5*A[a0]*B[b0+10]+0.2981423969999719*A[a0+6]*B[b0+8]+0.5*A[a0+2]*B[b0+8]+0.3927922024247863*A[a0+6]*B[b0+7]+0.2981423969999719*A[a0+8]*B[b0+6]+0.3927922024247863*A[a0+7]*B[b0+6]+0.4391550328268399*A[a0+1]*B[b0+6]+0.4472135954999579*A[a0+10]*B[b0+5]+0.2981423969999719*A[a0+10]*B[b0+4]+0.4391550328268399*A[a0+3]*B[b0+4]+0.4391550328268399*A[a0+4]*B[b0+3]+0.5*A[a0+8]*B[b0+2]+0.4391550328268399*A[a0+6]*B[b0+1]+0.5*A[a0+10]*B[b0]; 
    tmp[11] = 0.2981423969999719*A[a0+5]*B[b0+11]+0.4472135954999579*A[a0+4]*B[b0+11]+0.5*A[a0]*B[b0+11]+0.2981423969999719*A[a0+7]*B[b0+9]+0.5*A[a0+1]*B[b0+9]+0.2981423969999719*A[a0+9]*B[b0+7]+0.3927922024247863*A[a0+6]*B[b0+7]+0.4391550328268399*A[a0+2]*B[b0+7]+0.3927922024247863*A[a0+7]*B[b0+6]+0.2981423969999719*A[a0+11]*B[b0+5]+0.4391550328268399*A[a0+3]*B[b0+5]+0.4472135954999579*A[a0+11]*B[b0+4]+0.4391550328268399*A[a0+5]*B[b0+3]+0.4391550328268399*A[a0+7]*B[b0+2]+0.5*A[a0+9]*B[b0+1]+0.5*A[a0+11]*B[b0]; 
 
    // This tmp allows for in-place multiplication. 
    for (unsigned short int i=0; i<12; i++) 
    { 
      out[b0+i] = tmp[i]; 
    } 
  } 
 
} 
 
void CartFieldBinOpMultiply2xSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[17]; 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 17*vd; 
    unsigned short int a0 = b0*eqNcomp; 
    // Component-wise (of the vectors) multiplication. 
    tmp[0] = 0.5*A[a0+16]*B[b0+16]+0.5*A[a0+15]*B[b0+15]+0.5*A[a0+14]*B[b0+14]+0.5*A[a0+13]*B[b0+13]+0.5*A[a0+12]*B[b0+12]+0.5*A[a0+11]*B[b0+11]+0.5*A[a0+10]*B[b0+10]+0.5*A[a0+9]*B[b0+9]+0.5*A[a0+8]*B[b0+8]+0.5*A[a0+7]*B[b0+7]+0.5*A[a0+6]*B[b0+6]+0.5*A[a0+5]*B[b0+5]+0.5*A[a0+4]*B[b0+4]+0.5*A[a0+3]*B[b0+3]+0.5*A[a0+2]*B[b0+2]+0.5*A[a0+1]*B[b0+1]+0.5*A[a0]*B[b0]; 
    tmp[1] = 0.5*A[a0+14]*B[b0+16]+0.4364357804719848*A[a0+11]*B[b0+15]+0.5*A[a0+16]*B[b0+14]+0.4364357804719848*A[a0+8]*B[b0+13]+0.5*A[a0+9]*B[b0+12]+0.4364357804719848*A[a0+15]*B[b0+11]+0.4391550328268399*A[a0+6]*B[b0+11]+0.447213595499958*A[a0+7]*B[b0+10]+0.5*A[a0+12]*B[b0+9]+0.4364357804719848*A[a0+13]*B[b0+8]+0.4391550328268398*A[a0+4]*B[b0+8]+0.447213595499958*A[a0+10]*B[b0+7]+0.5000000000000001*A[a0+5]*B[b0+7]+0.4391550328268399*A[a0+11]*B[b0+6]+0.447213595499958*A[a0+3]*B[b0+6]+0.5000000000000001*A[a0+7]*B[b0+5]+0.4391550328268398*A[a0+8]*B[b0+4]+0.4472135954999579*A[a0+1]*B[b0+4]+0.447213595499958*A[a0+6]*B[b0+3]+0.5*A[a0+2]*B[b0+3]+0.5*A[a0+3]*B[b0+2]+0.4472135954999579*A[a0+4]*B[b0+1]+0.5*A[a0]*B[b0+1]+0.5*A[a0+1]*B[b0]; 
    tmp[2] = 0.4364357804719848*A[a0+12]*B[b0+16]+0.5*A[a0+13]*B[b0+15]+0.4364357804719848*A[a0+9]*B[b0+14]+0.5*A[a0+15]*B[b0+13]+0.4364357804719848*A[a0+16]*B[b0+12]+0.4391550328268399*A[a0+7]*B[b0+12]+0.5*A[a0+8]*B[b0+11]+0.447213595499958*A[a0+6]*B[b0+10]+0.4364357804719848*A[a0+14]*B[b0+9]+0.4391550328268398*A[a0+5]*B[b0+9]+0.5*A[a0+11]*B[b0+8]+0.4391550328268399*A[a0+12]*B[b0+7]+0.447213595499958*A[a0+3]*B[b0+7]+0.447213595499958*A[a0+10]*B[b0+6]+0.5000000000000001*A[a0+4]*B[b0+6]+0.4391550328268398*A[a0+9]*B[b0+5]+0.4472135954999579*A[a0+2]*B[b0+5]+0.5000000000000001*A[a0+6]*B[b0+4]+0.447213595499958*A[a0+7]*B[b0+3]+0.5*A[a0+1]*B[b0+3]+0.4472135954999579*A[a0+5]*B[b0+2]+0.5*A[a0]*B[b0+2]+0.5*A[a0+3]*B[b0+1]+0.5*A[a0+2]*B[b0]; 
    tmp[3] = 0.4364357804719848*A[a0+9]*B[b0+16]+0.4364357804719848*A[a0+8]*B[b0+15]+0.4364357804719848*A[a0+12]*B[b0+14]+0.4364357804719848*A[a0+11]*B[b0+13]+0.4364357804719848*A[a0+14]*B[b0+12]+0.3927922024247863*A[a0+10]*B[b0+12]+0.4391550328268399*A[a0+5]*B[b0+12]+0.4364357804719848*A[a0+13]*B[b0+11]+0.3927922024247863*A[a0+10]*B[b0+11]+0.4391550328268399*A[a0+4]*B[b0+11]+0.3927922024247863*A[a0+12]*B[b0+10]+0.3927922024247863*A[a0+11]*B[b0+10]+0.4*A[a0+3]*B[b0+10]+0.4364357804719848*A[a0+16]*B[b0+9]+0.4391550328268399*A[a0+7]*B[b0+9]+0.4364357804719848*A[a0+15]*B[b0+8]+0.4391550328268399*A[a0+6]*B[b0+8]+0.4391550328268399*A[a0+9]*B[b0+7]+0.4*A[a0+6]*B[b0+7]+0.447213595499958*A[a0+2]*B[b0+7]+0.4391550328268399*A[a0+8]*B[b0+6]+0.4*A[a0+7]*B[b0+6]+0.447213595499958*A[a0+1]*B[b0+6]+0.4391550328268399*A[a0+12]*B[b0+5]+0.4472135954999579*A[a0+3]*B[b0+5]+0.4391550328268399*A[a0+11]*B[b0+4]+0.4472135954999579*A[a0+3]*B[b0+4]+0.4*A[a0+10]*B[b0+3]+0.4472135954999579*A[a0+5]*B[b0+3]+0.4472135954999579*A[a0+4]*B[b0+3]+0.5*A[a0]*B[b0+3]+0.447213595499958*A[a0+7]*B[b0+2]+0.5*A[a0+1]*B[b0+2]+0.447213595499958*A[a0+6]*B[b0+1]+0.5*A[a0+2]*B[b0+1]+0.5*A[a0+3]*B[b0]; 
    tmp[4] = 0.4472135954999579*A[a0+16]*B[b0+16]+0.2903984386363364*A[a0+15]*B[b0+15]+0.4285714285714285*A[a0+6]*B[b0+15]+0.2903984386363364*A[a0+13]*B[b0+13]+0.4285714285714285*A[a0+4]*B[b0+13]+0.4472135954999579*A[a0+12]*B[b0+12]+0.2981423969999719*A[a0+11]*B[b0+11]+0.4391550328268399*A[a0+3]*B[b0+11]+0.31943828249997*A[a0+10]*B[b0+10]+0.5*A[a0+5]*B[b0+10]+0.2981423969999719*A[a0+8]*B[b0+8]+0.4391550328268398*A[a0+1]*B[b0+8]+0.4472135954999579*A[a0+7]*B[b0+7]+0.4285714285714285*A[a0+15]*B[b0+6]+0.31943828249997*A[a0+6]*B[b0+6]+0.5000000000000001*A[a0+2]*B[b0+6]+0.5*A[a0+10]*B[b0+5]+0.4285714285714285*A[a0+13]*B[b0+4]+0.31943828249997*A[a0+4]*B[b0+4]+0.5*A[a0]*B[b0+4]+0.4391550328268399*A[a0+11]*B[b0+3]+0.4472135954999579*A[a0+3]*B[b0+3]+0.5000000000000001*A[a0+6]*B[b0+2]+0.4391550328268398*A[a0+8]*B[b0+1]+0.4472135954999579*A[a0+1]*B[b0+1]+0.5*A[a0+4]*B[b0]; 
    tmp[5] = 0.2903984386363364*A[a0+16]*B[b0+16]+0.4285714285714285*A[a0+7]*B[b0+16]+0.4472135954999579*A[a0+15]*B[b0+15]+0.2903984386363364*A[a0+14]*B[b0+14]+0.4285714285714285*A[a0+5]*B[b0+14]+0.2981423969999719*A[a0+12]*B[b0+12]+0.4391550328268399*A[a0+3]*B[b0+12]+0.4472135954999579*A[a0+11]*B[b0+11]+0.31943828249997*A[a0+10]*B[b0+10]+0.5*A[a0+4]*B[b0+10]+0.2981423969999719*A[a0+9]*B[b0+9]+0.4391550328268398*A[a0+2]*B[b0+9]+0.4285714285714285*A[a0+16]*B[b0+7]+0.31943828249997*A[a0+7]*B[b0+7]+0.5000000000000001*A[a0+1]*B[b0+7]+0.4472135954999579*A[a0+6]*B[b0+6]+0.4285714285714285*A[a0+14]*B[b0+5]+0.31943828249997*A[a0+5]*B[b0+5]+0.5*A[a0]*B[b0+5]+0.5*A[a0+10]*B[b0+4]+0.4391550328268399*A[a0+12]*B[b0+3]+0.4472135954999579*A[a0+3]*B[b0+3]+0.4391550328268398*A[a0+9]*B[b0+2]+0.4472135954999579*A[a0+2]*B[b0+2]+0.5000000000000001*A[a0+7]*B[b0+1]+0.5*A[a0+5]*B[b0]; 
    tmp[6] = 0.3903600291794134*A[a0+12]*B[b0+16]+0.2903984386363364*A[a0+13]*B[b0+15]+0.3833259389999639*A[a0+10]*B[b0+15]+0.4285714285714285*A[a0+4]*B[b0+15]+0.2903984386363364*A[a0+15]*B[b0+13]+0.4285714285714285*A[a0+6]*B[b0+13]+0.3903600291794134*A[a0+16]*B[b0+12]+0.3927922024247863*A[a0+7]*B[b0+12]+0.2981423969999719*A[a0+8]*B[b0+11]+0.3927922024247863*A[a0+7]*B[b0+11]+0.4391550328268399*A[a0+1]*B[b0+11]+0.3833259389999639*A[a0+15]*B[b0+10]+0.4391550328268399*A[a0+9]*B[b0+10]+0.2857142857142857*A[a0+6]*B[b0+10]+0.447213595499958*A[a0+2]*B[b0+10]+0.4391550328268399*A[a0+10]*B[b0+9]+0.2981423969999719*A[a0+11]*B[b0+8]+0.4391550328268399*A[a0+3]*B[b0+8]+0.3927922024247863*A[a0+12]*B[b0+7]+0.3927922024247863*A[a0+11]*B[b0+7]+0.4*A[a0+3]*B[b0+7]+0.4285714285714285*A[a0+13]*B[b0+6]+0.2857142857142857*A[a0+10]*B[b0+6]+0.4472135954999579*A[a0+5]*B[b0+6]+0.31943828249997*A[a0+4]*B[b0+6]+0.5*A[a0]*B[b0+6]+0.4472135954999579*A[a0+6]*B[b0+5]+0.4285714285714285*A[a0+15]*B[b0+4]+0.31943828249997*A[a0+6]*B[b0+4]+0.5000000000000001*A[a0+2]*B[b0+4]+0.4391550328268399*A[a0+8]*B[b0+3]+0.4*A[a0+7]*B[b0+3]+0.447213595499958*A[a0+1]*B[b0+3]+0.447213595499958*A[a0+10]*B[b0+2]+0.5000000000000001*A[a0+4]*B[b0+2]+0.4391550328268399*A[a0+11]*B[b0+1]+0.447213595499958*A[a0+3]*B[b0+1]+0.5*A[a0+6]*B[b0]; 
    tmp[7] = 0.2903984386363364*A[a0+14]*B[b0+16]+0.3833259389999639*A[a0+10]*B[b0+16]+0.4285714285714285*A[a0+5]*B[b0+16]+0.3903600291794134*A[a0+11]*B[b0+15]+0.2903984386363364*A[a0+16]*B[b0+14]+0.4285714285714285*A[a0+7]*B[b0+14]+0.2981423969999719*A[a0+9]*B[b0+12]+0.3927922024247863*A[a0+6]*B[b0+12]+0.4391550328268399*A[a0+2]*B[b0+12]+0.3903600291794134*A[a0+15]*B[b0+11]+0.3927922024247863*A[a0+6]*B[b0+11]+0.3833259389999639*A[a0+16]*B[b0+10]+0.4391550328268399*A[a0+8]*B[b0+10]+0.2857142857142857*A[a0+7]*B[b0+10]+0.447213595499958*A[a0+1]*B[b0+10]+0.2981423969999719*A[a0+12]*B[b0+9]+0.4391550328268399*A[a0+3]*B[b0+9]+0.4391550328268399*A[a0+10]*B[b0+8]+0.4285714285714285*A[a0+14]*B[b0+7]+0.2857142857142857*A[a0+10]*B[b0+7]+0.31943828249997*A[a0+5]*B[b0+7]+0.4472135954999579*A[a0+4]*B[b0+7]+0.5*A[a0]*B[b0+7]+0.3927922024247863*A[a0+12]*B[b0+6]+0.3927922024247863*A[a0+11]*B[b0+6]+0.4*A[a0+3]*B[b0+6]+0.4285714285714285*A[a0+16]*B[b0+5]+0.31943828249997*A[a0+7]*B[b0+5]+0.5000000000000001*A[a0+1]*B[b0+5]+0.4472135954999579*A[a0+7]*B[b0+4]+0.4391550328268399*A[a0+9]*B[b0+3]+0.4*A[a0+6]*B[b0+3]+0.447213595499958*A[a0+2]*B[b0+3]+0.4391550328268399*A[a0+12]*B[b0+2]+0.447213595499958*A[a0+3]*B[b0+2]+0.447213595499958*A[a0+10]*B[b0+1]+0.5000000000000001*A[a0+5]*B[b0+1]+0.5*A[a0+7]*B[b0]; 
    tmp[8] = 0.2727272727272727*A[a0+11]*B[b0+15]+0.4364357804719848*A[a0+3]*B[b0+15]+0.2727272727272727*A[a0+8]*B[b0+13]+0.4364357804719848*A[a0+1]*B[b0+13]+0.2727272727272727*A[a0+15]*B[b0+11]+0.2981423969999719*A[a0+6]*B[b0+11]+0.5*A[a0+2]*B[b0+11]+0.4391550328268399*A[a0+7]*B[b0+10]+0.2727272727272727*A[a0+13]*B[b0+8]+0.2981423969999719*A[a0+4]*B[b0+8]+0.5*A[a0]*B[b0+8]+0.4391550328268399*A[a0+10]*B[b0+7]+0.2981423969999719*A[a0+11]*B[b0+6]+0.4391550328268399*A[a0+3]*B[b0+6]+0.2981423969999719*A[a0+8]*B[b0+4]+0.4391550328268398*A[a0+1]*B[b0+4]+0.4364357804719848*A[a0+15]*B[b0+3]+0.4391550328268399*A[a0+6]*B[b0+3]+0.5*A[a0+11]*B[b0+2]+0.4364357804719848*A[a0+13]*B[b0+1]+0.4391550328268398*A[a0+4]*B[b0+1]+0.5*A[a0+8]*B[b0]; 
    tmp[9] = 0.2727272727272727*A[a0+12]*B[b0+16]+0.4364357804719848*A[a0+3]*B[b0+16]+0.2727272727272727*A[a0+9]*B[b0+14]+0.4364357804719848*A[a0+2]*B[b0+14]+0.2727272727272727*A[a0+16]*B[b0+12]+0.2981423969999719*A[a0+7]*B[b0+12]+0.5*A[a0+1]*B[b0+12]+0.4391550328268399*A[a0+6]*B[b0+10]+0.2727272727272727*A[a0+14]*B[b0+9]+0.2981423969999719*A[a0+5]*B[b0+9]+0.5*A[a0]*B[b0+9]+0.2981423969999719*A[a0+12]*B[b0+7]+0.4391550328268399*A[a0+3]*B[b0+7]+0.4391550328268399*A[a0+10]*B[b0+6]+0.2981423969999719*A[a0+9]*B[b0+5]+0.4391550328268398*A[a0+2]*B[b0+5]+0.4364357804719848*A[a0+16]*B[b0+3]+0.4391550328268399*A[a0+7]*B[b0+3]+0.4364357804719848*A[a0+14]*B[b0+2]+0.4391550328268398*A[a0+5]*B[b0+2]+0.5*A[a0+12]*B[b0+1]+0.5*A[a0+9]*B[b0]; 
    tmp[10] = 0.2597402597402597*A[a0+16]*B[b0+16]+0.3833259389999639*A[a0+7]*B[b0+16]+0.2597402597402597*A[a0+15]*B[b0+15]+0.3833259389999639*A[a0+6]*B[b0+15]+0.4285714285714285*A[a0+10]*B[b0+14]+0.4285714285714285*A[a0+10]*B[b0+13]+0.2666666666666667*A[a0+12]*B[b0+12]+0.3857142857142857*A[a0+11]*B[b0+12]+0.3927922024247863*A[a0+3]*B[b0+12]+0.3857142857142857*A[a0+12]*B[b0+11]+0.2666666666666667*A[a0+11]*B[b0+11]+0.3927922024247863*A[a0+3]*B[b0+11]+0.4285714285714285*A[a0+14]*B[b0+10]+0.4285714285714285*A[a0+13]*B[b0+10]+0.2040816326530612*A[a0+10]*B[b0+10]+0.31943828249997*A[a0+5]*B[b0+10]+0.31943828249997*A[a0+4]*B[b0+10]+0.5*A[a0]*B[b0+10]+0.4391550328268399*A[a0+6]*B[b0+9]+0.4391550328268399*A[a0+7]*B[b0+8]+0.3833259389999639*A[a0+16]*B[b0+7]+0.4391550328268399*A[a0+8]*B[b0+7]+0.2857142857142857*A[a0+7]*B[b0+7]+0.447213595499958*A[a0+1]*B[b0+7]+0.3833259389999639*A[a0+15]*B[b0+6]+0.4391550328268399*A[a0+9]*B[b0+6]+0.2857142857142857*A[a0+6]*B[b0+6]+0.447213595499958*A[a0+2]*B[b0+6]+0.31943828249997*A[a0+10]*B[b0+5]+0.5*A[a0+4]*B[b0+5]+0.31943828249997*A[a0+10]*B[b0+4]+0.5*A[a0+5]*B[b0+4]+0.3927922024247863*A[a0+12]*B[b0+3]+0.3927922024247863*A[a0+11]*B[b0+3]+0.4*A[a0+3]*B[b0+3]+0.447213595499958*A[a0+6]*B[b0+2]+0.447213595499958*A[a0+7]*B[b0+1]+0.5*A[a0+10]*B[b0]; 
    tmp[11] = 0.2727272727272727*A[a0+8]*B[b0+15]+0.3903600291794134*A[a0+7]*B[b0+15]+0.4364357804719848*A[a0+1]*B[b0+15]+0.2727272727272727*A[a0+11]*B[b0+13]+0.4364357804719848*A[a0+3]*B[b0+13]+0.3857142857142857*A[a0+10]*B[b0+12]+0.2727272727272727*A[a0+13]*B[b0+11]+0.2666666666666667*A[a0+10]*B[b0+11]+0.4472135954999579*A[a0+5]*B[b0+11]+0.2981423969999719*A[a0+4]*B[b0+11]+0.5*A[a0]*B[b0+11]+0.3857142857142857*A[a0+12]*B[b0+10]+0.2666666666666667*A[a0+11]*B[b0+10]+0.3927922024247863*A[a0+3]*B[b0+10]+0.2727272727272727*A[a0+15]*B[b0+8]+0.2981423969999719*A[a0+6]*B[b0+8]+0.5*A[a0+2]*B[b0+8]+0.3903600291794134*A[a0+15]*B[b0+7]+0.3927922024247863*A[a0+6]*B[b0+7]+0.2981423969999719*A[a0+8]*B[b0+6]+0.3927922024247863*A[a0+7]*B[b0+6]+0.4391550328268399*A[a0+1]*B[b0+6]+0.4472135954999579*A[a0+11]*B[b0+5]+0.2981423969999719*A[a0+11]*B[b0+4]+0.4391550328268399*A[a0+3]*B[b0+4]+0.4364357804719848*A[a0+13]*B[b0+3]+0.3927922024247863*A[a0+10]*B[b0+3]+0.4391550328268399*A[a0+4]*B[b0+3]+0.5*A[a0+8]*B[b0+2]+0.4364357804719848*A[a0+15]*B[b0+1]+0.4391550328268399*A[a0+6]*B[b0+1]+0.5*A[a0+11]*B[b0]; 
    tmp[12] = 0.2727272727272727*A[a0+9]*B[b0+16]+0.3903600291794134*A[a0+6]*B[b0+16]+0.4364357804719848*A[a0+2]*B[b0+16]+0.2727272727272727*A[a0+12]*B[b0+14]+0.4364357804719848*A[a0+3]*B[b0+14]+0.2727272727272727*A[a0+14]*B[b0+12]+0.2666666666666667*A[a0+10]*B[b0+12]+0.2981423969999719*A[a0+5]*B[b0+12]+0.4472135954999579*A[a0+4]*B[b0+12]+0.5*A[a0]*B[b0+12]+0.3857142857142857*A[a0+10]*B[b0+11]+0.2666666666666667*A[a0+12]*B[b0+10]+0.3857142857142857*A[a0+11]*B[b0+10]+0.3927922024247863*A[a0+3]*B[b0+10]+0.2727272727272727*A[a0+16]*B[b0+9]+0.2981423969999719*A[a0+7]*B[b0+9]+0.5*A[a0+1]*B[b0+9]+0.2981423969999719*A[a0+9]*B[b0+7]+0.3927922024247863*A[a0+6]*B[b0+7]+0.4391550328268399*A[a0+2]*B[b0+7]+0.3903600291794134*A[a0+16]*B[b0+6]+0.3927922024247863*A[a0+7]*B[b0+6]+0.2981423969999719*A[a0+12]*B[b0+5]+0.4391550328268399*A[a0+3]*B[b0+5]+0.4472135954999579*A[a0+12]*B[b0+4]+0.4364357804719848*A[a0+14]*B[b0+3]+0.3927922024247863*A[a0+10]*B[b0+3]+0.4391550328268399*A[a0+5]*B[b0+3]+0.4364357804719848*A[a0+16]*B[b0+2]+0.4391550328268399*A[a0+7]*B[b0+2]+0.5*A[a0+9]*B[b0+1]+0.5*A[a0+12]*B[b0]; 
    tmp[13] = 0.2427572427572428*A[a0+15]*B[b0+15]+0.2903984386363364*A[a0+6]*B[b0+15]+0.5*A[a0+2]*B[b0+15]+0.2427572427572428*A[a0+13]*B[b0+13]+0.2903984386363364*A[a0+4]*B[b0+13]+0.5*A[a0]*B[b0+13]+0.2727272727272727*A[a0+11]*B[b0+11]+0.4364357804719848*A[a0+3]*B[b0+11]+0.4285714285714285*A[a0+10]*B[b0+10]+0.2727272727272727*A[a0+8]*B[b0+8]+0.4364357804719848*A[a0+1]*B[b0+8]+0.2903984386363364*A[a0+15]*B[b0+6]+0.4285714285714285*A[a0+6]*B[b0+6]+0.2903984386363364*A[a0+13]*B[b0+4]+0.4285714285714285*A[a0+4]*B[b0+4]+0.4364357804719848*A[a0+11]*B[b0+3]+0.5*A[a0+15]*B[b0+2]+0.4364357804719848*A[a0+8]*B[b0+1]+0.5*A[a0+13]*B[b0]; 
    tmp[14] = 0.2427572427572428*A[a0+16]*B[b0+16]+0.2903984386363364*A[a0+7]*B[b0+16]+0.5*A[a0+1]*B[b0+16]+0.2427572427572428*A[a0+14]*B[b0+14]+0.2903984386363364*A[a0+5]*B[b0+14]+0.5*A[a0]*B[b0+14]+0.2727272727272727*A[a0+12]*B[b0+12]+0.4364357804719848*A[a0+3]*B[b0+12]+0.4285714285714285*A[a0+10]*B[b0+10]+0.2727272727272727*A[a0+9]*B[b0+9]+0.4364357804719848*A[a0+2]*B[b0+9]+0.2903984386363364*A[a0+16]*B[b0+7]+0.4285714285714285*A[a0+7]*B[b0+7]+0.2903984386363364*A[a0+14]*B[b0+5]+0.4285714285714285*A[a0+5]*B[b0+5]+0.4364357804719848*A[a0+12]*B[b0+3]+0.4364357804719848*A[a0+9]*B[b0+2]+0.5*A[a0+16]*B[b0+1]+0.5*A[a0+14]*B[b0]; 
    tmp[15] = 0.2427572427572428*A[a0+13]*B[b0+15]+0.2597402597402597*A[a0+10]*B[b0+15]+0.4472135954999579*A[a0+5]*B[b0+15]+0.2903984386363364*A[a0+4]*B[b0+15]+0.5*A[a0]*B[b0+15]+0.2427572427572428*A[a0+15]*B[b0+13]+0.2903984386363364*A[a0+6]*B[b0+13]+0.5*A[a0+2]*B[b0+13]+0.2727272727272727*A[a0+8]*B[b0+11]+0.3903600291794134*A[a0+7]*B[b0+11]+0.4364357804719848*A[a0+1]*B[b0+11]+0.2597402597402597*A[a0+15]*B[b0+10]+0.3833259389999639*A[a0+6]*B[b0+10]+0.2727272727272727*A[a0+11]*B[b0+8]+0.4364357804719848*A[a0+3]*B[b0+8]+0.3903600291794134*A[a0+11]*B[b0+7]+0.2903984386363364*A[a0+13]*B[b0+6]+0.3833259389999639*A[a0+10]*B[b0+6]+0.4285714285714285*A[a0+4]*B[b0+6]+0.4472135954999579*A[a0+15]*B[b0+5]+0.2903984386363364*A[a0+15]*B[b0+4]+0.4285714285714285*A[a0+6]*B[b0+4]+0.4364357804719848*A[a0+8]*B[b0+3]+0.5*A[a0+13]*B[b0+2]+0.4364357804719848*A[a0+11]*B[b0+1]+0.5*A[a0+15]*B[b0]; 
    tmp[16] = 0.2427572427572428*A[a0+14]*B[b0+16]+0.2597402597402597*A[a0+10]*B[b0+16]+0.2903984386363364*A[a0+5]*B[b0+16]+0.4472135954999579*A[a0+4]*B[b0+16]+0.5*A[a0]*B[b0+16]+0.2427572427572428*A[a0+16]*B[b0+14]+0.2903984386363364*A[a0+7]*B[b0+14]+0.5*A[a0+1]*B[b0+14]+0.2727272727272727*A[a0+9]*B[b0+12]+0.3903600291794134*A[a0+6]*B[b0+12]+0.4364357804719848*A[a0+2]*B[b0+12]+0.2597402597402597*A[a0+16]*B[b0+10]+0.3833259389999639*A[a0+7]*B[b0+10]+0.2727272727272727*A[a0+12]*B[b0+9]+0.4364357804719848*A[a0+3]*B[b0+9]+0.2903984386363364*A[a0+14]*B[b0+7]+0.3833259389999639*A[a0+10]*B[b0+7]+0.4285714285714285*A[a0+5]*B[b0+7]+0.3903600291794134*A[a0+12]*B[b0+6]+0.2903984386363364*A[a0+16]*B[b0+5]+0.4285714285714285*A[a0+7]*B[b0+5]+0.4472135954999579*A[a0+16]*B[b0+4]+0.4364357804719848*A[a0+9]*B[b0+3]+0.4364357804719848*A[a0+12]*B[b0+2]+0.5*A[a0+14]*B[b0+1]+0.5*A[a0+16]*B[b0]; 
 
    // This tmp allows for in-place multiplication. 
    for (unsigned short int i=0; i<17; i++) 
    { 
      out[b0+i] = tmp[i]; 
    } 
  } 
 
} 
 
void CartFieldBinOpDivide2xSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       denominator field (must be a scalar field). 
  // B:       numerator field (can be scalar or vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(4,4); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(4); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(4); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.5*A[0]; 
  AEM(0,1) = 0.5*A[1]; 
  AEM(0,2) = 0.5*A[2]; 
  AEM(0,3) = 0.5*A[3]; 
  AEM(1,0) = 0.5*A[1]; 
  AEM(1,1) = 0.5*A[0]; 
  AEM(1,2) = 0.5*A[3]; 
  AEM(1,3) = 0.5*A[2]; 
  AEM(2,0) = 0.5*A[2]; 
  AEM(2,1) = 0.5*A[3]; 
  AEM(2,2) = 0.5*A[0]; 
  AEM(2,3) = 0.5*A[1]; 
  AEM(3,0) = 0.5*A[3]; 
  AEM(3,1) = 0.5*A[2]; 
  AEM(3,2) = 0.5*A[1]; 
  AEM(3,3) = 0.5*A[0]; 
 
  for(unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 4*vd; 
    // Fill BEV. 
    BEV << B[b0],B[b0+1],B[b0+2],B[b0+3]; 
 
    // Solve the system of equations. 
    u = AEM.colPivHouseholderQr().solve(BEV); 
 
    // Copy data from Eigen vector. 
    Eigen::Map<VectorXd>(out+vd*4,4,1) = u; 
  } 
} 
 
void CartFieldBinOpDivide2xSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       denominator field (must be a scalar field). 
  // B:       numerator field (can be scalar or vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(8,8); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(8); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(8); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.5*A[0]; 
  AEM(0,1) = 0.5*A[1]; 
  AEM(0,2) = 0.5*A[2]; 
  AEM(0,3) = 0.5*A[3]; 
  AEM(0,4) = 0.5*A[4]; 
  AEM(0,5) = 0.5*A[5]; 
  AEM(0,6) = 0.5*A[6]; 
  AEM(0,7) = 0.5*A[7]; 
  AEM(1,0) = 0.5*A[1]; 
  AEM(1,1) = 0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(1,2) = 0.5*A[3]; 
  AEM(1,3) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(1,4) = 0.4472135954999579*A[1]; 
  AEM(1,5) = 0.5000000000000001*A[7]; 
  AEM(1,6) = 0.447213595499958*A[3]; 
  AEM(1,7) = 0.5000000000000001*A[5]; 
  AEM(2,0) = 0.5*A[2]; 
  AEM(2,1) = 0.5*A[3]; 
  AEM(2,2) = 0.4472135954999579*A[5]+0.5*A[0]; 
  AEM(2,3) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(2,4) = 0.5000000000000001*A[6]; 
  AEM(2,5) = 0.4472135954999579*A[2]; 
  AEM(2,6) = 0.5000000000000001*A[4]; 
  AEM(2,7) = 0.447213595499958*A[3]; 
  AEM(3,0) = 0.5*A[3]; 
  AEM(3,1) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(3,2) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(3,3) = 0.4472135954999579*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(3,4) = 0.4472135954999579*A[3]; 
  AEM(3,5) = 0.4472135954999579*A[3]; 
  AEM(3,6) = 0.4*A[7]+0.447213595499958*A[1]; 
  AEM(3,7) = 0.4*A[6]+0.447213595499958*A[2]; 
  AEM(4,0) = 0.5*A[4]; 
  AEM(4,1) = 0.4472135954999579*A[1]; 
  AEM(4,2) = 0.5000000000000001*A[6]; 
  AEM(4,3) = 0.4472135954999579*A[3]; 
  AEM(4,4) = 0.31943828249997*A[4]+0.5*A[0]; 
  AEM(4,6) = 0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(4,7) = 0.4472135954999579*A[7]; 
  AEM(5,0) = 0.5*A[5]; 
  AEM(5,1) = 0.5000000000000001*A[7]; 
  AEM(5,2) = 0.4472135954999579*A[2]; 
  AEM(5,3) = 0.4472135954999579*A[3]; 
  AEM(5,5) = 0.31943828249997*A[5]+0.5*A[0]; 
  AEM(5,6) = 0.4472135954999579*A[6]; 
  AEM(5,7) = 0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(6,0) = 0.5*A[6]; 
  AEM(6,1) = 0.447213595499958*A[3]; 
  AEM(6,2) = 0.5000000000000001*A[4]; 
  AEM(6,3) = 0.4*A[7]+0.447213595499958*A[1]; 
  AEM(6,4) = 0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(6,5) = 0.4472135954999579*A[6]; 
  AEM(6,6) = 0.4472135954999579*A[5]+0.31943828249997*A[4]+0.5*A[0]; 
  AEM(6,7) = 0.4*A[3]; 
  AEM(7,0) = 0.5*A[7]; 
  AEM(7,1) = 0.5000000000000001*A[5]; 
  AEM(7,2) = 0.447213595499958*A[3]; 
  AEM(7,3) = 0.4*A[6]+0.447213595499958*A[2]; 
  AEM(7,4) = 0.4472135954999579*A[7]; 
  AEM(7,5) = 0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(7,6) = 0.4*A[3]; 
  AEM(7,7) = 0.31943828249997*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
 
  for(unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 8*vd; 
    // Fill BEV. 
    BEV << B[b0],B[b0+1],B[b0+2],B[b0+3],B[b0+4],B[b0+5],B[b0+6],B[b0+7]; 
 
    // Solve the system of equations. 
    u = AEM.colPivHouseholderQr().solve(BEV); 
 
    // Copy data from Eigen vector. 
    Eigen::Map<VectorXd>(out+vd*8,8,1) = u; 
  } 
} 
 
void CartFieldBinOpDivide2xSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       denominator field (must be a scalar field). 
  // B:       numerator field (can be scalar or vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(12,12); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(12); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(12); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.5*A[0]; 
  AEM(0,1) = 0.5*A[1]; 
  AEM(0,2) = 0.5*A[2]; 
  AEM(0,3) = 0.5*A[3]; 
  AEM(0,4) = 0.5*A[4]; 
  AEM(0,5) = 0.5*A[5]; 
  AEM(0,6) = 0.5*A[6]; 
  AEM(0,7) = 0.5*A[7]; 
  AEM(0,8) = 0.5*A[8]; 
  AEM(0,9) = 0.5*A[9]; 
  AEM(0,10) = 0.5*A[10]; 
  AEM(0,11) = 0.5*A[11]; 
  AEM(1,0) = 0.5*A[1]; 
  AEM(1,1) = 0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(1,2) = 0.5*A[3]; 
  AEM(1,3) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(1,4) = 0.4391550328268398*A[8]+0.4472135954999579*A[1]; 
  AEM(1,5) = 0.5000000000000001*A[7]; 
  AEM(1,6) = 0.4391550328268399*A[10]+0.447213595499958*A[3]; 
  AEM(1,7) = 0.5000000000000001*A[5]; 
  AEM(1,8) = 0.4391550328268398*A[4]; 
  AEM(1,9) = 0.5*A[11]; 
  AEM(1,10) = 0.4391550328268399*A[6]; 
  AEM(1,11) = 0.5*A[9]; 
  AEM(2,0) = 0.5*A[2]; 
  AEM(2,1) = 0.5*A[3]; 
  AEM(2,2) = 0.4472135954999579*A[5]+0.5*A[0]; 
  AEM(2,3) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(2,4) = 0.5000000000000001*A[6]; 
  AEM(2,5) = 0.4391550328268398*A[9]+0.4472135954999579*A[2]; 
  AEM(2,6) = 0.5000000000000001*A[4]; 
  AEM(2,7) = 0.4391550328268399*A[11]+0.447213595499958*A[3]; 
  AEM(2,8) = 0.5*A[10]; 
  AEM(2,9) = 0.4391550328268398*A[5]; 
  AEM(2,10) = 0.5*A[8]; 
  AEM(2,11) = 0.4391550328268399*A[7]; 
  AEM(3,0) = 0.5*A[3]; 
  AEM(3,1) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(3,2) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(3,3) = 0.4472135954999579*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(3,4) = 0.4391550328268399*A[10]+0.4472135954999579*A[3]; 
  AEM(3,5) = 0.4391550328268399*A[11]+0.4472135954999579*A[3]; 
  AEM(3,6) = 0.4391550328268399*A[8]+0.4*A[7]+0.447213595499958*A[1]; 
  AEM(3,7) = 0.4391550328268399*A[9]+0.4*A[6]+0.447213595499958*A[2]; 
  AEM(3,8) = 0.4391550328268399*A[6]; 
  AEM(3,9) = 0.4391550328268399*A[7]; 
  AEM(3,10) = 0.4391550328268399*A[4]; 
  AEM(3,11) = 0.4391550328268399*A[5]; 
  AEM(4,0) = 0.5*A[4]; 
  AEM(4,1) = 0.4391550328268398*A[8]+0.4472135954999579*A[1]; 
  AEM(4,2) = 0.5000000000000001*A[6]; 
  AEM(4,3) = 0.4391550328268399*A[10]+0.4472135954999579*A[3]; 
  AEM(4,4) = 0.31943828249997*A[4]+0.5*A[0]; 
  AEM(4,6) = 0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(4,7) = 0.4472135954999579*A[7]; 
  AEM(4,8) = 0.2981423969999719*A[8]+0.4391550328268398*A[1]; 
  AEM(4,10) = 0.2981423969999719*A[10]+0.4391550328268399*A[3]; 
  AEM(4,11) = 0.4472135954999579*A[11]; 
  AEM(5,0) = 0.5*A[5]; 
  AEM(5,1) = 0.5000000000000001*A[7]; 
  AEM(5,2) = 0.4391550328268398*A[9]+0.4472135954999579*A[2]; 
  AEM(5,3) = 0.4391550328268399*A[11]+0.4472135954999579*A[3]; 
  AEM(5,5) = 0.31943828249997*A[5]+0.5*A[0]; 
  AEM(5,6) = 0.4472135954999579*A[6]; 
  AEM(5,7) = 0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(5,9) = 0.2981423969999719*A[9]+0.4391550328268398*A[2]; 
  AEM(5,10) = 0.4472135954999579*A[10]; 
  AEM(5,11) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(6,0) = 0.5*A[6]; 
  AEM(6,1) = 0.4391550328268399*A[10]+0.447213595499958*A[3]; 
  AEM(6,2) = 0.5000000000000001*A[4]; 
  AEM(6,3) = 0.4391550328268399*A[8]+0.4*A[7]+0.447213595499958*A[1]; 
  AEM(6,4) = 0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(6,5) = 0.4472135954999579*A[6]; 
  AEM(6,6) = 0.4472135954999579*A[5]+0.31943828249997*A[4]+0.5*A[0]; 
  AEM(6,7) = 0.3927922024247863*A[11]+0.3927922024247863*A[10]+0.4*A[3]; 
  AEM(6,8) = 0.2981423969999719*A[10]+0.4391550328268399*A[3]; 
  AEM(6,10) = 0.2981423969999719*A[8]+0.3927922024247863*A[7]+0.4391550328268399*A[1]; 
  AEM(6,11) = 0.3927922024247863*A[7]; 
  AEM(7,0) = 0.5*A[7]; 
  AEM(7,1) = 0.5000000000000001*A[5]; 
  AEM(7,2) = 0.4391550328268399*A[11]+0.447213595499958*A[3]; 
  AEM(7,3) = 0.4391550328268399*A[9]+0.4*A[6]+0.447213595499958*A[2]; 
  AEM(7,4) = 0.4472135954999579*A[7]; 
  AEM(7,5) = 0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(7,6) = 0.3927922024247863*A[11]+0.3927922024247863*A[10]+0.4*A[3]; 
  AEM(7,7) = 0.31943828249997*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(7,9) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(7,10) = 0.3927922024247863*A[6]; 
  AEM(7,11) = 0.2981423969999719*A[9]+0.3927922024247863*A[6]+0.4391550328268399*A[2]; 
  AEM(8,0) = 0.5*A[8]; 
  AEM(8,1) = 0.4391550328268398*A[4]; 
  AEM(8,2) = 0.5*A[10]; 
  AEM(8,3) = 0.4391550328268399*A[6]; 
  AEM(8,4) = 0.2981423969999719*A[8]+0.4391550328268398*A[1]; 
  AEM(8,6) = 0.2981423969999719*A[10]+0.4391550328268399*A[3]; 
  AEM(8,8) = 0.2981423969999719*A[4]+0.5*A[0]; 
  AEM(8,10) = 0.2981423969999719*A[6]+0.5*A[2]; 
  AEM(9,0) = 0.5*A[9]; 
  AEM(9,1) = 0.5*A[11]; 
  AEM(9,2) = 0.4391550328268398*A[5]; 
  AEM(9,3) = 0.4391550328268399*A[7]; 
  AEM(9,5) = 0.2981423969999719*A[9]+0.4391550328268398*A[2]; 
  AEM(9,7) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(9,9) = 0.2981423969999719*A[5]+0.5*A[0]; 
  AEM(9,11) = 0.2981423969999719*A[7]+0.5*A[1]; 
  AEM(10,0) = 0.5*A[10]; 
  AEM(10,1) = 0.4391550328268399*A[6]; 
  AEM(10,2) = 0.5*A[8]; 
  AEM(10,3) = 0.4391550328268399*A[4]; 
  AEM(10,4) = 0.2981423969999719*A[10]+0.4391550328268399*A[3]; 
  AEM(10,5) = 0.4472135954999579*A[10]; 
  AEM(10,6) = 0.2981423969999719*A[8]+0.3927922024247863*A[7]+0.4391550328268399*A[1]; 
  AEM(10,7) = 0.3927922024247863*A[6]; 
  AEM(10,8) = 0.2981423969999719*A[6]+0.5*A[2]; 
  AEM(10,10) = 0.4472135954999579*A[5]+0.2981423969999719*A[4]+0.5*A[0]; 
  AEM(11,0) = 0.5*A[11]; 
  AEM(11,1) = 0.5*A[9]; 
  AEM(11,2) = 0.4391550328268399*A[7]; 
  AEM(11,3) = 0.4391550328268399*A[5]; 
  AEM(11,4) = 0.4472135954999579*A[11]; 
  AEM(11,5) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(11,6) = 0.3927922024247863*A[7]; 
  AEM(11,7) = 0.2981423969999719*A[9]+0.3927922024247863*A[6]+0.4391550328268399*A[2]; 
  AEM(11,9) = 0.2981423969999719*A[7]+0.5*A[1]; 
  AEM(11,11) = 0.2981423969999719*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
 
  for(unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 12*vd; 
    // Fill BEV. 
    BEV << B[b0],B[b0+1],B[b0+2],B[b0+3],B[b0+4],B[b0+5],B[b0+6],B[b0+7],B[b0+8],B[b0+9],B[b0+10],B[b0+11]; 
 
    // Solve the system of equations. 
    u = AEM.colPivHouseholderQr().solve(BEV); 
 
    // Copy data from Eigen vector. 
    Eigen::Map<VectorXd>(out+vd*12,12,1) = u; 
  } 
} 
 
void CartFieldBinOpDivide2xSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       denominator field (must be a scalar field). 
  // B:       numerator field (can be scalar or vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(17,17); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(17); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(17); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.5*A[0]; 
  AEM(0,1) = 0.5*A[1]; 
  AEM(0,2) = 0.5*A[2]; 
  AEM(0,3) = 0.5*A[3]; 
  AEM(0,4) = 0.5*A[4]; 
  AEM(0,5) = 0.5*A[5]; 
  AEM(0,6) = 0.5*A[6]; 
  AEM(0,7) = 0.5*A[7]; 
  AEM(0,8) = 0.5*A[8]; 
  AEM(0,9) = 0.5*A[9]; 
  AEM(0,10) = 0.5*A[10]; 
  AEM(0,11) = 0.5*A[11]; 
  AEM(0,12) = 0.5*A[12]; 
  AEM(0,13) = 0.5*A[13]; 
  AEM(0,14) = 0.5*A[14]; 
  AEM(0,15) = 0.5*A[15]; 
  AEM(0,16) = 0.5*A[16]; 
  AEM(1,0) = 0.5*A[1]; 
  AEM(1,1) = 0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(1,2) = 0.5*A[3]; 
  AEM(1,3) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(1,4) = 0.4391550328268398*A[8]+0.4472135954999579*A[1]; 
  AEM(1,5) = 0.5000000000000001*A[7]; 
  AEM(1,6) = 0.4391550328268399*A[11]+0.447213595499958*A[3]; 
  AEM(1,7) = 0.447213595499958*A[10]+0.5000000000000001*A[5]; 
  AEM(1,8) = 0.4364357804719848*A[13]+0.4391550328268398*A[4]; 
  AEM(1,9) = 0.5*A[12]; 
  AEM(1,10) = 0.447213595499958*A[7]; 
  AEM(1,11) = 0.4364357804719848*A[15]+0.4391550328268399*A[6]; 
  AEM(1,12) = 0.5*A[9]; 
  AEM(1,13) = 0.4364357804719848*A[8]; 
  AEM(1,14) = 0.5*A[16]; 
  AEM(1,15) = 0.4364357804719848*A[11]; 
  AEM(1,16) = 0.5*A[14]; 
  AEM(2,0) = 0.5*A[2]; 
  AEM(2,1) = 0.5*A[3]; 
  AEM(2,2) = 0.4472135954999579*A[5]+0.5*A[0]; 
  AEM(2,3) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(2,4) = 0.5000000000000001*A[6]; 
  AEM(2,5) = 0.4391550328268398*A[9]+0.4472135954999579*A[2]; 
  AEM(2,6) = 0.447213595499958*A[10]+0.5000000000000001*A[4]; 
  AEM(2,7) = 0.4391550328268399*A[12]+0.447213595499958*A[3]; 
  AEM(2,8) = 0.5*A[11]; 
  AEM(2,9) = 0.4364357804719848*A[14]+0.4391550328268398*A[5]; 
  AEM(2,10) = 0.447213595499958*A[6]; 
  AEM(2,11) = 0.5*A[8]; 
  AEM(2,12) = 0.4364357804719848*A[16]+0.4391550328268399*A[7]; 
  AEM(2,13) = 0.5*A[15]; 
  AEM(2,14) = 0.4364357804719848*A[9]; 
  AEM(2,15) = 0.5*A[13]; 
  AEM(2,16) = 0.4364357804719848*A[12]; 
  AEM(3,0) = 0.5*A[3]; 
  AEM(3,1) = 0.447213595499958*A[6]+0.5*A[2]; 
  AEM(3,2) = 0.447213595499958*A[7]+0.5*A[1]; 
  AEM(3,3) = 0.4*A[10]+0.4472135954999579*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(3,4) = 0.4391550328268399*A[11]+0.4472135954999579*A[3]; 
  AEM(3,5) = 0.4391550328268399*A[12]+0.4472135954999579*A[3]; 
  AEM(3,6) = 0.4391550328268399*A[8]+0.4*A[7]+0.447213595499958*A[1]; 
  AEM(3,7) = 0.4391550328268399*A[9]+0.4*A[6]+0.447213595499958*A[2]; 
  AEM(3,8) = 0.4364357804719848*A[15]+0.4391550328268399*A[6]; 
  AEM(3,9) = 0.4364357804719848*A[16]+0.4391550328268399*A[7]; 
  AEM(3,10) = 0.3927922024247863*A[12]+0.3927922024247863*A[11]+0.4*A[3]; 
  AEM(3,11) = 0.4364357804719848*A[13]+0.3927922024247863*A[10]+0.4391550328268399*A[4]; 
  AEM(3,12) = 0.4364357804719848*A[14]+0.3927922024247863*A[10]+0.4391550328268399*A[5]; 
  AEM(3,13) = 0.4364357804719848*A[11]; 
  AEM(3,14) = 0.4364357804719848*A[12]; 
  AEM(3,15) = 0.4364357804719848*A[8]; 
  AEM(3,16) = 0.4364357804719848*A[9]; 
  AEM(4,0) = 0.5*A[4]; 
  AEM(4,1) = 0.4391550328268398*A[8]+0.4472135954999579*A[1]; 
  AEM(4,2) = 0.5000000000000001*A[6]; 
  AEM(4,3) = 0.4391550328268399*A[11]+0.4472135954999579*A[3]; 
  AEM(4,4) = 0.4285714285714285*A[13]+0.31943828249997*A[4]+0.5*A[0]; 
  AEM(4,5) = 0.5*A[10]; 
  AEM(4,6) = 0.4285714285714285*A[15]+0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(4,7) = 0.4472135954999579*A[7]; 
  AEM(4,8) = 0.2981423969999719*A[8]+0.4391550328268398*A[1]; 
  AEM(4,10) = 0.31943828249997*A[10]+0.5*A[5]; 
  AEM(4,11) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(4,12) = 0.4472135954999579*A[12]; 
  AEM(4,13) = 0.2903984386363364*A[13]+0.4285714285714285*A[4]; 
  AEM(4,15) = 0.2903984386363364*A[15]+0.4285714285714285*A[6]; 
  AEM(4,16) = 0.4472135954999579*A[16]; 
  AEM(5,0) = 0.5*A[5]; 
  AEM(5,1) = 0.5000000000000001*A[7]; 
  AEM(5,2) = 0.4391550328268398*A[9]+0.4472135954999579*A[2]; 
  AEM(5,3) = 0.4391550328268399*A[12]+0.4472135954999579*A[3]; 
  AEM(5,4) = 0.5*A[10]; 
  AEM(5,5) = 0.4285714285714285*A[14]+0.31943828249997*A[5]+0.5*A[0]; 
  AEM(5,6) = 0.4472135954999579*A[6]; 
  AEM(5,7) = 0.4285714285714285*A[16]+0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(5,9) = 0.2981423969999719*A[9]+0.4391550328268398*A[2]; 
  AEM(5,10) = 0.31943828249997*A[10]+0.5*A[4]; 
  AEM(5,11) = 0.4472135954999579*A[11]; 
  AEM(5,12) = 0.2981423969999719*A[12]+0.4391550328268399*A[3]; 
  AEM(5,14) = 0.2903984386363364*A[14]+0.4285714285714285*A[5]; 
  AEM(5,15) = 0.4472135954999579*A[15]; 
  AEM(5,16) = 0.2903984386363364*A[16]+0.4285714285714285*A[7]; 
  AEM(6,0) = 0.5*A[6]; 
  AEM(6,1) = 0.4391550328268399*A[11]+0.447213595499958*A[3]; 
  AEM(6,2) = 0.447213595499958*A[10]+0.5000000000000001*A[4]; 
  AEM(6,3) = 0.4391550328268399*A[8]+0.4*A[7]+0.447213595499958*A[1]; 
  AEM(6,4) = 0.4285714285714285*A[15]+0.31943828249997*A[6]+0.5000000000000001*A[2]; 
  AEM(6,5) = 0.4472135954999579*A[6]; 
  AEM(6,6) = 0.4285714285714285*A[13]+0.2857142857142857*A[10]+0.4472135954999579*A[5]+0.31943828249997*A[4]+0.5*A[0]; 
  AEM(6,7) = 0.3927922024247863*A[12]+0.3927922024247863*A[11]+0.4*A[3]; 
  AEM(6,8) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(6,9) = 0.4391550328268399*A[10]; 
  AEM(6,10) = 0.3833259389999639*A[15]+0.4391550328268399*A[9]+0.2857142857142857*A[6]+0.447213595499958*A[2]; 
  AEM(6,11) = 0.2981423969999719*A[8]+0.3927922024247863*A[7]+0.4391550328268399*A[1]; 
  AEM(6,12) = 0.3903600291794134*A[16]+0.3927922024247863*A[7]; 
  AEM(6,13) = 0.2903984386363364*A[15]+0.4285714285714285*A[6]; 
  AEM(6,15) = 0.2903984386363364*A[13]+0.3833259389999639*A[10]+0.4285714285714285*A[4]; 
  AEM(6,16) = 0.3903600291794134*A[12]; 
  AEM(7,0) = 0.5*A[7]; 
  AEM(7,1) = 0.447213595499958*A[10]+0.5000000000000001*A[5]; 
  AEM(7,2) = 0.4391550328268399*A[12]+0.447213595499958*A[3]; 
  AEM(7,3) = 0.4391550328268399*A[9]+0.4*A[6]+0.447213595499958*A[2]; 
  AEM(7,4) = 0.4472135954999579*A[7]; 
  AEM(7,5) = 0.4285714285714285*A[16]+0.31943828249997*A[7]+0.5000000000000001*A[1]; 
  AEM(7,6) = 0.3927922024247863*A[12]+0.3927922024247863*A[11]+0.4*A[3]; 
  AEM(7,7) = 0.4285714285714285*A[14]+0.2857142857142857*A[10]+0.31943828249997*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(7,8) = 0.4391550328268399*A[10]; 
  AEM(7,9) = 0.2981423969999719*A[12]+0.4391550328268399*A[3]; 
  AEM(7,10) = 0.3833259389999639*A[16]+0.4391550328268399*A[8]+0.2857142857142857*A[7]+0.447213595499958*A[1]; 
  AEM(7,11) = 0.3903600291794134*A[15]+0.3927922024247863*A[6]; 
  AEM(7,12) = 0.2981423969999719*A[9]+0.3927922024247863*A[6]+0.4391550328268399*A[2]; 
  AEM(7,14) = 0.2903984386363364*A[16]+0.4285714285714285*A[7]; 
  AEM(7,15) = 0.3903600291794134*A[11]; 
  AEM(7,16) = 0.2903984386363364*A[14]+0.3833259389999639*A[10]+0.4285714285714285*A[5]; 
  AEM(8,0) = 0.5*A[8]; 
  AEM(8,1) = 0.4364357804719848*A[13]+0.4391550328268398*A[4]; 
  AEM(8,2) = 0.5*A[11]; 
  AEM(8,3) = 0.4364357804719848*A[15]+0.4391550328268399*A[6]; 
  AEM(8,4) = 0.2981423969999719*A[8]+0.4391550328268398*A[1]; 
  AEM(8,6) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(8,7) = 0.4391550328268399*A[10]; 
  AEM(8,8) = 0.2727272727272727*A[13]+0.2981423969999719*A[4]+0.5*A[0]; 
  AEM(8,10) = 0.4391550328268399*A[7]; 
  AEM(8,11) = 0.2727272727272727*A[15]+0.2981423969999719*A[6]+0.5*A[2]; 
  AEM(8,13) = 0.2727272727272727*A[8]+0.4364357804719848*A[1]; 
  AEM(8,15) = 0.2727272727272727*A[11]+0.4364357804719848*A[3]; 
  AEM(9,0) = 0.5*A[9]; 
  AEM(9,1) = 0.5*A[12]; 
  AEM(9,2) = 0.4364357804719848*A[14]+0.4391550328268398*A[5]; 
  AEM(9,3) = 0.4364357804719848*A[16]+0.4391550328268399*A[7]; 
  AEM(9,5) = 0.2981423969999719*A[9]+0.4391550328268398*A[2]; 
  AEM(9,6) = 0.4391550328268399*A[10]; 
  AEM(9,7) = 0.2981423969999719*A[12]+0.4391550328268399*A[3]; 
  AEM(9,9) = 0.2727272727272727*A[14]+0.2981423969999719*A[5]+0.5*A[0]; 
  AEM(9,10) = 0.4391550328268399*A[6]; 
  AEM(9,12) = 0.2727272727272727*A[16]+0.2981423969999719*A[7]+0.5*A[1]; 
  AEM(9,14) = 0.2727272727272727*A[9]+0.4364357804719848*A[2]; 
  AEM(9,16) = 0.2727272727272727*A[12]+0.4364357804719848*A[3]; 
  AEM(10,0) = 0.5*A[10]; 
  AEM(10,1) = 0.447213595499958*A[7]; 
  AEM(10,2) = 0.447213595499958*A[6]; 
  AEM(10,3) = 0.3927922024247863*A[12]+0.3927922024247863*A[11]+0.4*A[3]; 
  AEM(10,4) = 0.31943828249997*A[10]+0.5*A[5]; 
  AEM(10,5) = 0.31943828249997*A[10]+0.5*A[4]; 
  AEM(10,6) = 0.3833259389999639*A[15]+0.4391550328268399*A[9]+0.2857142857142857*A[6]+0.447213595499958*A[2]; 
  AEM(10,7) = 0.3833259389999639*A[16]+0.4391550328268399*A[8]+0.2857142857142857*A[7]+0.447213595499958*A[1]; 
  AEM(10,8) = 0.4391550328268399*A[7]; 
  AEM(10,9) = 0.4391550328268399*A[6]; 
  AEM(10,10) = 0.4285714285714285*A[14]+0.4285714285714285*A[13]+0.2040816326530612*A[10]+0.31943828249997*A[5]+0.31943828249997*A[4]+0.5*A[0]; 
  AEM(10,11) = 0.3857142857142857*A[12]+0.2666666666666667*A[11]+0.3927922024247863*A[3]; 
  AEM(10,12) = 0.2666666666666667*A[12]+0.3857142857142857*A[11]+0.3927922024247863*A[3]; 
  AEM(10,13) = 0.4285714285714285*A[10]; 
  AEM(10,14) = 0.4285714285714285*A[10]; 
  AEM(10,15) = 0.2597402597402597*A[15]+0.3833259389999639*A[6]; 
  AEM(10,16) = 0.2597402597402597*A[16]+0.3833259389999639*A[7]; 
  AEM(11,0) = 0.5*A[11]; 
  AEM(11,1) = 0.4364357804719848*A[15]+0.4391550328268399*A[6]; 
  AEM(11,2) = 0.5*A[8]; 
  AEM(11,3) = 0.4364357804719848*A[13]+0.3927922024247863*A[10]+0.4391550328268399*A[4]; 
  AEM(11,4) = 0.2981423969999719*A[11]+0.4391550328268399*A[3]; 
  AEM(11,5) = 0.4472135954999579*A[11]; 
  AEM(11,6) = 0.2981423969999719*A[8]+0.3927922024247863*A[7]+0.4391550328268399*A[1]; 
  AEM(11,7) = 0.3903600291794134*A[15]+0.3927922024247863*A[6]; 
  AEM(11,8) = 0.2727272727272727*A[15]+0.2981423969999719*A[6]+0.5*A[2]; 
  AEM(11,10) = 0.3857142857142857*A[12]+0.2666666666666667*A[11]+0.3927922024247863*A[3]; 
  AEM(11,11) = 0.2727272727272727*A[13]+0.2666666666666667*A[10]+0.4472135954999579*A[5]+0.2981423969999719*A[4]+0.5*A[0]; 
  AEM(11,12) = 0.3857142857142857*A[10]; 
  AEM(11,13) = 0.2727272727272727*A[11]+0.4364357804719848*A[3]; 
  AEM(11,15) = 0.2727272727272727*A[8]+0.3903600291794134*A[7]+0.4364357804719848*A[1]; 
  AEM(12,0) = 0.5*A[12]; 
  AEM(12,1) = 0.5*A[9]; 
  AEM(12,2) = 0.4364357804719848*A[16]+0.4391550328268399*A[7]; 
  AEM(12,3) = 0.4364357804719848*A[14]+0.3927922024247863*A[10]+0.4391550328268399*A[5]; 
  AEM(12,4) = 0.4472135954999579*A[12]; 
  AEM(12,5) = 0.2981423969999719*A[12]+0.4391550328268399*A[3]; 
  AEM(12,6) = 0.3903600291794134*A[16]+0.3927922024247863*A[7]; 
  AEM(12,7) = 0.2981423969999719*A[9]+0.3927922024247863*A[6]+0.4391550328268399*A[2]; 
  AEM(12,9) = 0.2727272727272727*A[16]+0.2981423969999719*A[7]+0.5*A[1]; 
  AEM(12,10) = 0.2666666666666667*A[12]+0.3857142857142857*A[11]+0.3927922024247863*A[3]; 
  AEM(12,11) = 0.3857142857142857*A[10]; 
  AEM(12,12) = 0.2727272727272727*A[14]+0.2666666666666667*A[10]+0.2981423969999719*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
  AEM(12,14) = 0.2727272727272727*A[12]+0.4364357804719848*A[3]; 
  AEM(12,16) = 0.2727272727272727*A[9]+0.3903600291794134*A[6]+0.4364357804719848*A[2]; 
  AEM(13,0) = 0.5*A[13]; 
  AEM(13,1) = 0.4364357804719848*A[8]; 
  AEM(13,2) = 0.5*A[15]; 
  AEM(13,3) = 0.4364357804719848*A[11]; 
  AEM(13,4) = 0.2903984386363364*A[13]+0.4285714285714285*A[4]; 
  AEM(13,6) = 0.2903984386363364*A[15]+0.4285714285714285*A[6]; 
  AEM(13,8) = 0.2727272727272727*A[8]+0.4364357804719848*A[1]; 
  AEM(13,10) = 0.4285714285714285*A[10]; 
  AEM(13,11) = 0.2727272727272727*A[11]+0.4364357804719848*A[3]; 
  AEM(13,13) = 0.2427572427572428*A[13]+0.2903984386363364*A[4]+0.5*A[0]; 
  AEM(13,15) = 0.2427572427572428*A[15]+0.2903984386363364*A[6]+0.5*A[2]; 
  AEM(14,0) = 0.5*A[14]; 
  AEM(14,1) = 0.5*A[16]; 
  AEM(14,2) = 0.4364357804719848*A[9]; 
  AEM(14,3) = 0.4364357804719848*A[12]; 
  AEM(14,5) = 0.2903984386363364*A[14]+0.4285714285714285*A[5]; 
  AEM(14,7) = 0.2903984386363364*A[16]+0.4285714285714285*A[7]; 
  AEM(14,9) = 0.2727272727272727*A[9]+0.4364357804719848*A[2]; 
  AEM(14,10) = 0.4285714285714285*A[10]; 
  AEM(14,12) = 0.2727272727272727*A[12]+0.4364357804719848*A[3]; 
  AEM(14,14) = 0.2427572427572428*A[14]+0.2903984386363364*A[5]+0.5*A[0]; 
  AEM(14,16) = 0.2427572427572428*A[16]+0.2903984386363364*A[7]+0.5*A[1]; 
  AEM(15,0) = 0.5*A[15]; 
  AEM(15,1) = 0.4364357804719848*A[11]; 
  AEM(15,2) = 0.5*A[13]; 
  AEM(15,3) = 0.4364357804719848*A[8]; 
  AEM(15,4) = 0.2903984386363364*A[15]+0.4285714285714285*A[6]; 
  AEM(15,5) = 0.4472135954999579*A[15]; 
  AEM(15,6) = 0.2903984386363364*A[13]+0.3833259389999639*A[10]+0.4285714285714285*A[4]; 
  AEM(15,7) = 0.3903600291794134*A[11]; 
  AEM(15,8) = 0.2727272727272727*A[11]+0.4364357804719848*A[3]; 
  AEM(15,10) = 0.2597402597402597*A[15]+0.3833259389999639*A[6]; 
  AEM(15,11) = 0.2727272727272727*A[8]+0.3903600291794134*A[7]+0.4364357804719848*A[1]; 
  AEM(15,13) = 0.2427572427572428*A[15]+0.2903984386363364*A[6]+0.5*A[2]; 
  AEM(15,15) = 0.2427572427572428*A[13]+0.2597402597402597*A[10]+0.4472135954999579*A[5]+0.2903984386363364*A[4]+0.5*A[0]; 
  AEM(16,0) = 0.5*A[16]; 
  AEM(16,1) = 0.5*A[14]; 
  AEM(16,2) = 0.4364357804719848*A[12]; 
  AEM(16,3) = 0.4364357804719848*A[9]; 
  AEM(16,4) = 0.4472135954999579*A[16]; 
  AEM(16,5) = 0.2903984386363364*A[16]+0.4285714285714285*A[7]; 
  AEM(16,6) = 0.3903600291794134*A[12]; 
  AEM(16,7) = 0.2903984386363364*A[14]+0.3833259389999639*A[10]+0.4285714285714285*A[5]; 
  AEM(16,9) = 0.2727272727272727*A[12]+0.4364357804719848*A[3]; 
  AEM(16,10) = 0.2597402597402597*A[16]+0.3833259389999639*A[7]; 
  AEM(16,12) = 0.2727272727272727*A[9]+0.3903600291794134*A[6]+0.4364357804719848*A[2]; 
  AEM(16,14) = 0.2427572427572428*A[16]+0.2903984386363364*A[7]+0.5*A[1]; 
  AEM(16,16) = 0.2427572427572428*A[14]+0.2597402597402597*A[10]+0.2903984386363364*A[5]+0.4472135954999579*A[4]+0.5*A[0]; 
 
  for(unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int b0 = 17*vd; 
    // Fill BEV. 
    BEV << B[b0],B[b0+1],B[b0+2],B[b0+3],B[b0+4],B[b0+5],B[b0+6],B[b0+7],B[b0+8],B[b0+9],B[b0+10],B[b0+11],B[b0+12],B[b0+13],B[b0+14],B[b0+15],B[b0+16]; 
 
    // Solve the system of equations. 
    u = AEM.colPivHouseholderQr().solve(BEV); 
 
    // Copy data from Eigen vector. 
    Eigen::Map<VectorXd>(out+vd*17,17,1) = u; 
  } 
} 
 
void CartFieldBinOpDotProduct2xSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should be 1 here). 
  // out:     output field A.B (out only has one component). 
 
  // zero out. This is ok in this operator because there is no in-place dot-product. 
  for (unsigned short int vd=0; vd<4; vd++) 
  { 
    out[vd] = 0.0; 
  } 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int a0 = 4*vd; 
    // Contribution to dot-product from weak multiplication of vd component. 
    out[0] += 0.5*A[a0+3]*B[a0+3]+0.5*A[a0+2]*B[a0+2]+0.5*A[a0+1]*B[a0+1]+0.5*A[a0]*B[a0]; 
    out[1] += 0.5*A[a0+2]*B[a0+3]+0.5*B[a0+2]*A[a0+3]+0.5*A[a0]*B[a0+1]+0.5*B[a0]*A[a0+1]; 
    out[2] += 0.5*A[a0+1]*B[a0+3]+0.5*B[a0+1]*A[a0+3]+0.5*A[a0]*B[a0+2]+0.5*B[a0]*A[a0+2]; 
    out[3] += 0.5*A[a0]*B[a0+3]+0.5*B[a0]*A[a0+3]+0.5*A[a0+1]*B[a0+2]+0.5*B[a0+1]*A[a0+2]; 
  } 
 
} 
 
void CartFieldBinOpDotProduct2xSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should be 1 here). 
  // out:     output field A.B (out only has one component). 
 
  // zero out. This is ok in this operator because there is no in-place dot-product. 
  for (unsigned short int vd=0; vd<8; vd++) 
  { 
    out[vd] = 0.0; 
  } 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int a0 = 8*vd; 
    // Contribution to dot-product from weak multiplication of vd component. 
    out[0] += 0.5*A[a0+7]*B[a0+7]+0.5*A[a0+6]*B[a0+6]+0.5*A[a0+5]*B[a0+5]+0.5*A[a0+4]*B[a0+4]+0.5*A[a0+3]*B[a0+3]+0.5*A[a0+2]*B[a0+2]+0.5*A[a0+1]*B[a0+1]+0.5*A[a0]*B[a0]; 
    out[1] += 0.5000000000000001*A[a0+5]*B[a0+7]+0.5000000000000001*B[a0+5]*A[a0+7]+0.447213595499958*A[a0+3]*B[a0+6]+0.447213595499958*B[a0+3]*A[a0+6]+0.4472135954999579*A[a0+1]*B[a0+4]+0.4472135954999579*B[a0+1]*A[a0+4]+0.5*A[a0+2]*B[a0+3]+0.5*B[a0+2]*A[a0+3]+0.5*A[a0]*B[a0+1]+0.5*B[a0]*A[a0+1]; 
    out[2] += 0.447213595499958*A[a0+3]*B[a0+7]+0.447213595499958*B[a0+3]*A[a0+7]+0.5000000000000001*A[a0+4]*B[a0+6]+0.5000000000000001*B[a0+4]*A[a0+6]+0.4472135954999579*A[a0+2]*B[a0+5]+0.4472135954999579*B[a0+2]*A[a0+5]+0.5*A[a0+1]*B[a0+3]+0.5*B[a0+1]*A[a0+3]+0.5*A[a0]*B[a0+2]+0.5*B[a0]*A[a0+2]; 
    out[3] += 0.4*A[a0+6]*B[a0+7]+0.447213595499958*A[a0+2]*B[a0+7]+0.4*B[a0+6]*A[a0+7]+0.447213595499958*B[a0+2]*A[a0+7]+0.447213595499958*A[a0+1]*B[a0+6]+0.447213595499958*B[a0+1]*A[a0+6]+0.4472135954999579*A[a0+3]*B[a0+5]+0.4472135954999579*B[a0+3]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+4]+0.4472135954999579*B[a0+3]*A[a0+4]+0.5*A[a0]*B[a0+3]+0.5*B[a0]*A[a0+3]+0.5*A[a0+1]*B[a0+2]+0.5*B[a0+1]*A[a0+2]; 
    out[4] += 0.4472135954999579*A[a0+7]*B[a0+7]+0.31943828249997*A[a0+6]*B[a0+6]+0.5000000000000001*A[a0+2]*B[a0+6]+0.5000000000000001*B[a0+2]*A[a0+6]+0.31943828249997*A[a0+4]*B[a0+4]+0.5*A[a0]*B[a0+4]+0.5*B[a0]*A[a0+4]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+1]*B[a0+1]; 
    out[5] += 0.31943828249997*A[a0+7]*B[a0+7]+0.5000000000000001*A[a0+1]*B[a0+7]+0.5000000000000001*B[a0+1]*A[a0+7]+0.4472135954999579*A[a0+6]*B[a0+6]+0.31943828249997*A[a0+5]*B[a0+5]+0.5*A[a0]*B[a0+5]+0.5*B[a0]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+2]*B[a0+2]; 
    out[6] += 0.4*A[a0+3]*B[a0+7]+0.4*B[a0+3]*A[a0+7]+0.4472135954999579*A[a0+5]*B[a0+6]+0.31943828249997*A[a0+4]*B[a0+6]+0.5*A[a0]*B[a0+6]+0.4472135954999579*B[a0+5]*A[a0+6]+0.31943828249997*B[a0+4]*A[a0+6]+0.5*B[a0]*A[a0+6]+0.5000000000000001*A[a0+2]*B[a0+4]+0.5000000000000001*B[a0+2]*A[a0+4]+0.447213595499958*A[a0+1]*B[a0+3]+0.447213595499958*B[a0+1]*A[a0+3]; 
    out[7] += 0.31943828249997*A[a0+5]*B[a0+7]+0.4472135954999579*A[a0+4]*B[a0+7]+0.5*A[a0]*B[a0+7]+0.31943828249997*B[a0+5]*A[a0+7]+0.4472135954999579*B[a0+4]*A[a0+7]+0.5*B[a0]*A[a0+7]+0.4*A[a0+3]*B[a0+6]+0.4*B[a0+3]*A[a0+6]+0.5000000000000001*A[a0+1]*B[a0+5]+0.5000000000000001*B[a0+1]*A[a0+5]+0.447213595499958*A[a0+2]*B[a0+3]+0.447213595499958*B[a0+2]*A[a0+3]; 
  } 
 
} 
 
void CartFieldBinOpDotProduct2xSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should be 1 here). 
  // out:     output field A.B (out only has one component). 
 
  // zero out. This is ok in this operator because there is no in-place dot-product. 
  for (unsigned short int vd=0; vd<12; vd++) 
  { 
    out[vd] = 0.0; 
  } 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int a0 = 12*vd; 
    // Contribution to dot-product from weak multiplication of vd component. 
    out[0] += 0.5*A[a0+11]*B[a0+11]+0.5*A[a0+10]*B[a0+10]+0.5*A[a0+9]*B[a0+9]+0.5*A[a0+8]*B[a0+8]+0.5*A[a0+7]*B[a0+7]+0.5*A[a0+6]*B[a0+6]+0.5*A[a0+5]*B[a0+5]+0.5*A[a0+4]*B[a0+4]+0.5*A[a0+3]*B[a0+3]+0.5*A[a0+2]*B[a0+2]+0.5*A[a0+1]*B[a0+1]+0.5*A[a0]*B[a0]; 
    out[1] += 0.5*A[a0+9]*B[a0+11]+0.5*B[a0+9]*A[a0+11]+0.4391550328268399*A[a0+6]*B[a0+10]+0.4391550328268399*B[a0+6]*A[a0+10]+0.4391550328268398*A[a0+4]*B[a0+8]+0.4391550328268398*B[a0+4]*A[a0+8]+0.5000000000000001*A[a0+5]*B[a0+7]+0.5000000000000001*B[a0+5]*A[a0+7]+0.447213595499958*A[a0+3]*B[a0+6]+0.447213595499958*B[a0+3]*A[a0+6]+0.4472135954999579*A[a0+1]*B[a0+4]+0.4472135954999579*B[a0+1]*A[a0+4]+0.5*A[a0+2]*B[a0+3]+0.5*B[a0+2]*A[a0+3]+0.5*A[a0]*B[a0+1]+0.5*B[a0]*A[a0+1]; 
    out[2] += 0.4391550328268399*A[a0+7]*B[a0+11]+0.4391550328268399*B[a0+7]*A[a0+11]+0.5*A[a0+8]*B[a0+10]+0.5*B[a0+8]*A[a0+10]+0.4391550328268398*A[a0+5]*B[a0+9]+0.4391550328268398*B[a0+5]*A[a0+9]+0.447213595499958*A[a0+3]*B[a0+7]+0.447213595499958*B[a0+3]*A[a0+7]+0.5000000000000001*A[a0+4]*B[a0+6]+0.5000000000000001*B[a0+4]*A[a0+6]+0.4472135954999579*A[a0+2]*B[a0+5]+0.4472135954999579*B[a0+2]*A[a0+5]+0.5*A[a0+1]*B[a0+3]+0.5*B[a0+1]*A[a0+3]+0.5*A[a0]*B[a0+2]+0.5*B[a0]*A[a0+2]; 
    out[3] += 0.4391550328268399*A[a0+5]*B[a0+11]+0.4391550328268399*B[a0+5]*A[a0+11]+0.4391550328268399*A[a0+4]*B[a0+10]+0.4391550328268399*B[a0+4]*A[a0+10]+0.4391550328268399*A[a0+7]*B[a0+9]+0.4391550328268399*B[a0+7]*A[a0+9]+0.4391550328268399*A[a0+6]*B[a0+8]+0.4391550328268399*B[a0+6]*A[a0+8]+0.4*A[a0+6]*B[a0+7]+0.447213595499958*A[a0+2]*B[a0+7]+0.4*B[a0+6]*A[a0+7]+0.447213595499958*B[a0+2]*A[a0+7]+0.447213595499958*A[a0+1]*B[a0+6]+0.447213595499958*B[a0+1]*A[a0+6]+0.4472135954999579*A[a0+3]*B[a0+5]+0.4472135954999579*B[a0+3]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+4]+0.4472135954999579*B[a0+3]*A[a0+4]+0.5*A[a0]*B[a0+3]+0.5*B[a0]*A[a0+3]+0.5*A[a0+1]*B[a0+2]+0.5*B[a0+1]*A[a0+2]; 
    out[4] += 0.4472135954999579*A[a0+11]*B[a0+11]+0.2981423969999719*A[a0+10]*B[a0+10]+0.4391550328268399*A[a0+3]*B[a0+10]+0.4391550328268399*B[a0+3]*A[a0+10]+0.2981423969999719*A[a0+8]*B[a0+8]+0.4391550328268398*A[a0+1]*B[a0+8]+0.4391550328268398*B[a0+1]*A[a0+8]+0.4472135954999579*A[a0+7]*B[a0+7]+0.31943828249997*A[a0+6]*B[a0+6]+0.5000000000000001*A[a0+2]*B[a0+6]+0.5000000000000001*B[a0+2]*A[a0+6]+0.31943828249997*A[a0+4]*B[a0+4]+0.5*A[a0]*B[a0+4]+0.5*B[a0]*A[a0+4]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+1]*B[a0+1]; 
    out[5] += 0.2981423969999719*A[a0+11]*B[a0+11]+0.4391550328268399*A[a0+3]*B[a0+11]+0.4391550328268399*B[a0+3]*A[a0+11]+0.4472135954999579*A[a0+10]*B[a0+10]+0.2981423969999719*A[a0+9]*B[a0+9]+0.4391550328268398*A[a0+2]*B[a0+9]+0.4391550328268398*B[a0+2]*A[a0+9]+0.31943828249997*A[a0+7]*B[a0+7]+0.5000000000000001*A[a0+1]*B[a0+7]+0.5000000000000001*B[a0+1]*A[a0+7]+0.4472135954999579*A[a0+6]*B[a0+6]+0.31943828249997*A[a0+5]*B[a0+5]+0.5*A[a0]*B[a0+5]+0.5*B[a0]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+2]*B[a0+2]; 
    out[6] += 0.3927922024247863*A[a0+7]*B[a0+11]+0.3927922024247863*B[a0+7]*A[a0+11]+0.2981423969999719*A[a0+8]*B[a0+10]+0.3927922024247863*A[a0+7]*B[a0+10]+0.4391550328268399*A[a0+1]*B[a0+10]+0.2981423969999719*B[a0+8]*A[a0+10]+0.3927922024247863*B[a0+7]*A[a0+10]+0.4391550328268399*B[a0+1]*A[a0+10]+0.4391550328268399*A[a0+3]*B[a0+8]+0.4391550328268399*B[a0+3]*A[a0+8]+0.4*A[a0+3]*B[a0+7]+0.4*B[a0+3]*A[a0+7]+0.4472135954999579*A[a0+5]*B[a0+6]+0.31943828249997*A[a0+4]*B[a0+6]+0.5*A[a0]*B[a0+6]+0.4472135954999579*B[a0+5]*A[a0+6]+0.31943828249997*B[a0+4]*A[a0+6]+0.5*B[a0]*A[a0+6]+0.5000000000000001*A[a0+2]*B[a0+4]+0.5000000000000001*B[a0+2]*A[a0+4]+0.447213595499958*A[a0+1]*B[a0+3]+0.447213595499958*B[a0+1]*A[a0+3]; 
    out[7] += 0.2981423969999719*A[a0+9]*B[a0+11]+0.3927922024247863*A[a0+6]*B[a0+11]+0.4391550328268399*A[a0+2]*B[a0+11]+0.2981423969999719*B[a0+9]*A[a0+11]+0.3927922024247863*B[a0+6]*A[a0+11]+0.4391550328268399*B[a0+2]*A[a0+11]+0.3927922024247863*A[a0+6]*B[a0+10]+0.3927922024247863*B[a0+6]*A[a0+10]+0.4391550328268399*A[a0+3]*B[a0+9]+0.4391550328268399*B[a0+3]*A[a0+9]+0.31943828249997*A[a0+5]*B[a0+7]+0.4472135954999579*A[a0+4]*B[a0+7]+0.5*A[a0]*B[a0+7]+0.31943828249997*B[a0+5]*A[a0+7]+0.4472135954999579*B[a0+4]*A[a0+7]+0.5*B[a0]*A[a0+7]+0.4*A[a0+3]*B[a0+6]+0.4*B[a0+3]*A[a0+6]+0.5000000000000001*A[a0+1]*B[a0+5]+0.5000000000000001*B[a0+1]*A[a0+5]+0.447213595499958*A[a0+2]*B[a0+3]+0.447213595499958*B[a0+2]*A[a0+3]; 
    out[8] += 0.2981423969999719*A[a0+6]*B[a0+10]+0.5*A[a0+2]*B[a0+10]+0.2981423969999719*B[a0+6]*A[a0+10]+0.5*B[a0+2]*A[a0+10]+0.2981423969999719*A[a0+4]*B[a0+8]+0.5*A[a0]*B[a0+8]+0.2981423969999719*B[a0+4]*A[a0+8]+0.5*B[a0]*A[a0+8]+0.4391550328268399*A[a0+3]*B[a0+6]+0.4391550328268399*B[a0+3]*A[a0+6]+0.4391550328268398*A[a0+1]*B[a0+4]+0.4391550328268398*B[a0+1]*A[a0+4]; 
    out[9] += 0.2981423969999719*A[a0+7]*B[a0+11]+0.5*A[a0+1]*B[a0+11]+0.2981423969999719*B[a0+7]*A[a0+11]+0.5*B[a0+1]*A[a0+11]+0.2981423969999719*A[a0+5]*B[a0+9]+0.5*A[a0]*B[a0+9]+0.2981423969999719*B[a0+5]*A[a0+9]+0.5*B[a0]*A[a0+9]+0.4391550328268399*A[a0+3]*B[a0+7]+0.4391550328268399*B[a0+3]*A[a0+7]+0.4391550328268398*A[a0+2]*B[a0+5]+0.4391550328268398*B[a0+2]*A[a0+5]; 
    out[10] += 0.4472135954999579*A[a0+5]*B[a0+10]+0.2981423969999719*A[a0+4]*B[a0+10]+0.5*A[a0]*B[a0+10]+0.4472135954999579*B[a0+5]*A[a0+10]+0.2981423969999719*B[a0+4]*A[a0+10]+0.5*B[a0]*A[a0+10]+0.2981423969999719*A[a0+6]*B[a0+8]+0.5*A[a0+2]*B[a0+8]+0.2981423969999719*B[a0+6]*A[a0+8]+0.5*B[a0+2]*A[a0+8]+0.3927922024247863*A[a0+6]*B[a0+7]+0.3927922024247863*B[a0+6]*A[a0+7]+0.4391550328268399*A[a0+1]*B[a0+6]+0.4391550328268399*B[a0+1]*A[a0+6]+0.4391550328268399*A[a0+3]*B[a0+4]+0.4391550328268399*B[a0+3]*A[a0+4]; 
    out[11] += 0.2981423969999719*A[a0+5]*B[a0+11]+0.4472135954999579*A[a0+4]*B[a0+11]+0.5*A[a0]*B[a0+11]+0.2981423969999719*B[a0+5]*A[a0+11]+0.4472135954999579*B[a0+4]*A[a0+11]+0.5*B[a0]*A[a0+11]+0.2981423969999719*A[a0+7]*B[a0+9]+0.5*A[a0+1]*B[a0+9]+0.2981423969999719*B[a0+7]*A[a0+9]+0.5*B[a0+1]*A[a0+9]+0.3927922024247863*A[a0+6]*B[a0+7]+0.4391550328268399*A[a0+2]*B[a0+7]+0.3927922024247863*B[a0+6]*A[a0+7]+0.4391550328268399*B[a0+2]*A[a0+7]+0.4391550328268399*A[a0+3]*B[a0+5]+0.4391550328268399*B[a0+3]*A[a0+5]; 
  } 
 
} 
 
void CartFieldBinOpDotProduct2xSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should be 1 here). 
  // out:     output field A.B (out only has one component). 
 
  // zero out. This is ok in this operator because there is no in-place dot-product. 
  for (unsigned short int vd=0; vd<17; vd++) 
  { 
    out[vd] = 0.0; 
  } 
 
  for (unsigned short int vd=0; vd<Ncomp; vd++) 
  { 
    unsigned short int a0 = 17*vd; 
    // Contribution to dot-product from weak multiplication of vd component. 
    out[0] += 0.5*A[a0+16]*B[a0+16]+0.5*A[a0+15]*B[a0+15]+0.5*A[a0+14]*B[a0+14]+0.5*A[a0+13]*B[a0+13]+0.5*A[a0+12]*B[a0+12]+0.5*A[a0+11]*B[a0+11]+0.5*A[a0+10]*B[a0+10]+0.5*A[a0+9]*B[a0+9]+0.5*A[a0+8]*B[a0+8]+0.5*A[a0+7]*B[a0+7]+0.5*A[a0+6]*B[a0+6]+0.5*A[a0+5]*B[a0+5]+0.5*A[a0+4]*B[a0+4]+0.5*A[a0+3]*B[a0+3]+0.5*A[a0+2]*B[a0+2]+0.5*A[a0+1]*B[a0+1]+0.5*A[a0]*B[a0]; 
    out[1] += 0.5*A[a0+14]*B[a0+16]+0.5*B[a0+14]*A[a0+16]+0.4364357804719848*A[a0+11]*B[a0+15]+0.4364357804719848*B[a0+11]*A[a0+15]+0.4364357804719848*A[a0+8]*B[a0+13]+0.4364357804719848*B[a0+8]*A[a0+13]+0.5*A[a0+9]*B[a0+12]+0.5*B[a0+9]*A[a0+12]+0.4391550328268399*A[a0+6]*B[a0+11]+0.4391550328268399*B[a0+6]*A[a0+11]+0.447213595499958*A[a0+7]*B[a0+10]+0.447213595499958*B[a0+7]*A[a0+10]+0.4391550328268398*A[a0+4]*B[a0+8]+0.4391550328268398*B[a0+4]*A[a0+8]+0.5000000000000001*A[a0+5]*B[a0+7]+0.5000000000000001*B[a0+5]*A[a0+7]+0.447213595499958*A[a0+3]*B[a0+6]+0.447213595499958*B[a0+3]*A[a0+6]+0.4472135954999579*A[a0+1]*B[a0+4]+0.4472135954999579*B[a0+1]*A[a0+4]+0.5*A[a0+2]*B[a0+3]+0.5*B[a0+2]*A[a0+3]+0.5*A[a0]*B[a0+1]+0.5*B[a0]*A[a0+1]; 
    out[2] += 0.4364357804719848*A[a0+12]*B[a0+16]+0.4364357804719848*B[a0+12]*A[a0+16]+0.5*A[a0+13]*B[a0+15]+0.5*B[a0+13]*A[a0+15]+0.4364357804719848*A[a0+9]*B[a0+14]+0.4364357804719848*B[a0+9]*A[a0+14]+0.4391550328268399*A[a0+7]*B[a0+12]+0.4391550328268399*B[a0+7]*A[a0+12]+0.5*A[a0+8]*B[a0+11]+0.5*B[a0+8]*A[a0+11]+0.447213595499958*A[a0+6]*B[a0+10]+0.447213595499958*B[a0+6]*A[a0+10]+0.4391550328268398*A[a0+5]*B[a0+9]+0.4391550328268398*B[a0+5]*A[a0+9]+0.447213595499958*A[a0+3]*B[a0+7]+0.447213595499958*B[a0+3]*A[a0+7]+0.5000000000000001*A[a0+4]*B[a0+6]+0.5000000000000001*B[a0+4]*A[a0+6]+0.4472135954999579*A[a0+2]*B[a0+5]+0.4472135954999579*B[a0+2]*A[a0+5]+0.5*A[a0+1]*B[a0+3]+0.5*B[a0+1]*A[a0+3]+0.5*A[a0]*B[a0+2]+0.5*B[a0]*A[a0+2]; 
    out[3] += 0.4364357804719848*A[a0+9]*B[a0+16]+0.4364357804719848*B[a0+9]*A[a0+16]+0.4364357804719848*A[a0+8]*B[a0+15]+0.4364357804719848*B[a0+8]*A[a0+15]+0.4364357804719848*A[a0+12]*B[a0+14]+0.4364357804719848*B[a0+12]*A[a0+14]+0.4364357804719848*A[a0+11]*B[a0+13]+0.4364357804719848*B[a0+11]*A[a0+13]+0.3927922024247863*A[a0+10]*B[a0+12]+0.4391550328268399*A[a0+5]*B[a0+12]+0.3927922024247863*B[a0+10]*A[a0+12]+0.4391550328268399*B[a0+5]*A[a0+12]+0.3927922024247863*A[a0+10]*B[a0+11]+0.4391550328268399*A[a0+4]*B[a0+11]+0.3927922024247863*B[a0+10]*A[a0+11]+0.4391550328268399*B[a0+4]*A[a0+11]+0.4*A[a0+3]*B[a0+10]+0.4*B[a0+3]*A[a0+10]+0.4391550328268399*A[a0+7]*B[a0+9]+0.4391550328268399*B[a0+7]*A[a0+9]+0.4391550328268399*A[a0+6]*B[a0+8]+0.4391550328268399*B[a0+6]*A[a0+8]+0.4*A[a0+6]*B[a0+7]+0.447213595499958*A[a0+2]*B[a0+7]+0.4*B[a0+6]*A[a0+7]+0.447213595499958*B[a0+2]*A[a0+7]+0.447213595499958*A[a0+1]*B[a0+6]+0.447213595499958*B[a0+1]*A[a0+6]+0.4472135954999579*A[a0+3]*B[a0+5]+0.4472135954999579*B[a0+3]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+4]+0.4472135954999579*B[a0+3]*A[a0+4]+0.5*A[a0]*B[a0+3]+0.5*B[a0]*A[a0+3]+0.5*A[a0+1]*B[a0+2]+0.5*B[a0+1]*A[a0+2]; 
    out[4] += 0.4472135954999579*A[a0+16]*B[a0+16]+0.2903984386363364*A[a0+15]*B[a0+15]+0.4285714285714285*A[a0+6]*B[a0+15]+0.4285714285714285*B[a0+6]*A[a0+15]+0.2903984386363364*A[a0+13]*B[a0+13]+0.4285714285714285*A[a0+4]*B[a0+13]+0.4285714285714285*B[a0+4]*A[a0+13]+0.4472135954999579*A[a0+12]*B[a0+12]+0.2981423969999719*A[a0+11]*B[a0+11]+0.4391550328268399*A[a0+3]*B[a0+11]+0.4391550328268399*B[a0+3]*A[a0+11]+0.31943828249997*A[a0+10]*B[a0+10]+0.5*A[a0+5]*B[a0+10]+0.5*B[a0+5]*A[a0+10]+0.2981423969999719*A[a0+8]*B[a0+8]+0.4391550328268398*A[a0+1]*B[a0+8]+0.4391550328268398*B[a0+1]*A[a0+8]+0.4472135954999579*A[a0+7]*B[a0+7]+0.31943828249997*A[a0+6]*B[a0+6]+0.5000000000000001*A[a0+2]*B[a0+6]+0.5000000000000001*B[a0+2]*A[a0+6]+0.31943828249997*A[a0+4]*B[a0+4]+0.5*A[a0]*B[a0+4]+0.5*B[a0]*A[a0+4]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+1]*B[a0+1]; 
    out[5] += 0.2903984386363364*A[a0+16]*B[a0+16]+0.4285714285714285*A[a0+7]*B[a0+16]+0.4285714285714285*B[a0+7]*A[a0+16]+0.4472135954999579*A[a0+15]*B[a0+15]+0.2903984386363364*A[a0+14]*B[a0+14]+0.4285714285714285*A[a0+5]*B[a0+14]+0.4285714285714285*B[a0+5]*A[a0+14]+0.2981423969999719*A[a0+12]*B[a0+12]+0.4391550328268399*A[a0+3]*B[a0+12]+0.4391550328268399*B[a0+3]*A[a0+12]+0.4472135954999579*A[a0+11]*B[a0+11]+0.31943828249997*A[a0+10]*B[a0+10]+0.5*A[a0+4]*B[a0+10]+0.5*B[a0+4]*A[a0+10]+0.2981423969999719*A[a0+9]*B[a0+9]+0.4391550328268398*A[a0+2]*B[a0+9]+0.4391550328268398*B[a0+2]*A[a0+9]+0.31943828249997*A[a0+7]*B[a0+7]+0.5000000000000001*A[a0+1]*B[a0+7]+0.5000000000000001*B[a0+1]*A[a0+7]+0.4472135954999579*A[a0+6]*B[a0+6]+0.31943828249997*A[a0+5]*B[a0+5]+0.5*A[a0]*B[a0+5]+0.5*B[a0]*A[a0+5]+0.4472135954999579*A[a0+3]*B[a0+3]+0.4472135954999579*A[a0+2]*B[a0+2]; 
    out[6] += 0.3903600291794134*A[a0+12]*B[a0+16]+0.3903600291794134*B[a0+12]*A[a0+16]+0.2903984386363364*A[a0+13]*B[a0+15]+0.3833259389999639*A[a0+10]*B[a0+15]+0.4285714285714285*A[a0+4]*B[a0+15]+0.2903984386363364*B[a0+13]*A[a0+15]+0.3833259389999639*B[a0+10]*A[a0+15]+0.4285714285714285*B[a0+4]*A[a0+15]+0.4285714285714285*A[a0+6]*B[a0+13]+0.4285714285714285*B[a0+6]*A[a0+13]+0.3927922024247863*A[a0+7]*B[a0+12]+0.3927922024247863*B[a0+7]*A[a0+12]+0.2981423969999719*A[a0+8]*B[a0+11]+0.3927922024247863*A[a0+7]*B[a0+11]+0.4391550328268399*A[a0+1]*B[a0+11]+0.2981423969999719*B[a0+8]*A[a0+11]+0.3927922024247863*B[a0+7]*A[a0+11]+0.4391550328268399*B[a0+1]*A[a0+11]+0.4391550328268399*A[a0+9]*B[a0+10]+0.2857142857142857*A[a0+6]*B[a0+10]+0.447213595499958*A[a0+2]*B[a0+10]+0.4391550328268399*B[a0+9]*A[a0+10]+0.2857142857142857*B[a0+6]*A[a0+10]+0.447213595499958*B[a0+2]*A[a0+10]+0.4391550328268399*A[a0+3]*B[a0+8]+0.4391550328268399*B[a0+3]*A[a0+8]+0.4*A[a0+3]*B[a0+7]+0.4*B[a0+3]*A[a0+7]+0.4472135954999579*A[a0+5]*B[a0+6]+0.31943828249997*A[a0+4]*B[a0+6]+0.5*A[a0]*B[a0+6]+0.4472135954999579*B[a0+5]*A[a0+6]+0.31943828249997*B[a0+4]*A[a0+6]+0.5*B[a0]*A[a0+6]+0.5000000000000001*A[a0+2]*B[a0+4]+0.5000000000000001*B[a0+2]*A[a0+4]+0.447213595499958*A[a0+1]*B[a0+3]+0.447213595499958*B[a0+1]*A[a0+3]; 
    out[7] += 0.2903984386363364*A[a0+14]*B[a0+16]+0.3833259389999639*A[a0+10]*B[a0+16]+0.4285714285714285*A[a0+5]*B[a0+16]+0.2903984386363364*B[a0+14]*A[a0+16]+0.3833259389999639*B[a0+10]*A[a0+16]+0.4285714285714285*B[a0+5]*A[a0+16]+0.3903600291794134*A[a0+11]*B[a0+15]+0.3903600291794134*B[a0+11]*A[a0+15]+0.4285714285714285*A[a0+7]*B[a0+14]+0.4285714285714285*B[a0+7]*A[a0+14]+0.2981423969999719*A[a0+9]*B[a0+12]+0.3927922024247863*A[a0+6]*B[a0+12]+0.4391550328268399*A[a0+2]*B[a0+12]+0.2981423969999719*B[a0+9]*A[a0+12]+0.3927922024247863*B[a0+6]*A[a0+12]+0.4391550328268399*B[a0+2]*A[a0+12]+0.3927922024247863*A[a0+6]*B[a0+11]+0.3927922024247863*B[a0+6]*A[a0+11]+0.4391550328268399*A[a0+8]*B[a0+10]+0.2857142857142857*A[a0+7]*B[a0+10]+0.447213595499958*A[a0+1]*B[a0+10]+0.4391550328268399*B[a0+8]*A[a0+10]+0.2857142857142857*B[a0+7]*A[a0+10]+0.447213595499958*B[a0+1]*A[a0+10]+0.4391550328268399*A[a0+3]*B[a0+9]+0.4391550328268399*B[a0+3]*A[a0+9]+0.31943828249997*A[a0+5]*B[a0+7]+0.4472135954999579*A[a0+4]*B[a0+7]+0.5*A[a0]*B[a0+7]+0.31943828249997*B[a0+5]*A[a0+7]+0.4472135954999579*B[a0+4]*A[a0+7]+0.5*B[a0]*A[a0+7]+0.4*A[a0+3]*B[a0+6]+0.4*B[a0+3]*A[a0+6]+0.5000000000000001*A[a0+1]*B[a0+5]+0.5000000000000001*B[a0+1]*A[a0+5]+0.447213595499958*A[a0+2]*B[a0+3]+0.447213595499958*B[a0+2]*A[a0+3]; 
    out[8] += 0.2727272727272727*A[a0+11]*B[a0+15]+0.4364357804719848*A[a0+3]*B[a0+15]+0.2727272727272727*B[a0+11]*A[a0+15]+0.4364357804719848*B[a0+3]*A[a0+15]+0.2727272727272727*A[a0+8]*B[a0+13]+0.4364357804719848*A[a0+1]*B[a0+13]+0.2727272727272727*B[a0+8]*A[a0+13]+0.4364357804719848*B[a0+1]*A[a0+13]+0.2981423969999719*A[a0+6]*B[a0+11]+0.5*A[a0+2]*B[a0+11]+0.2981423969999719*B[a0+6]*A[a0+11]+0.5*B[a0+2]*A[a0+11]+0.4391550328268399*A[a0+7]*B[a0+10]+0.4391550328268399*B[a0+7]*A[a0+10]+0.2981423969999719*A[a0+4]*B[a0+8]+0.5*A[a0]*B[a0+8]+0.2981423969999719*B[a0+4]*A[a0+8]+0.5*B[a0]*A[a0+8]+0.4391550328268399*A[a0+3]*B[a0+6]+0.4391550328268399*B[a0+3]*A[a0+6]+0.4391550328268398*A[a0+1]*B[a0+4]+0.4391550328268398*B[a0+1]*A[a0+4]; 
    out[9] += 0.2727272727272727*A[a0+12]*B[a0+16]+0.4364357804719848*A[a0+3]*B[a0+16]+0.2727272727272727*B[a0+12]*A[a0+16]+0.4364357804719848*B[a0+3]*A[a0+16]+0.2727272727272727*A[a0+9]*B[a0+14]+0.4364357804719848*A[a0+2]*B[a0+14]+0.2727272727272727*B[a0+9]*A[a0+14]+0.4364357804719848*B[a0+2]*A[a0+14]+0.2981423969999719*A[a0+7]*B[a0+12]+0.5*A[a0+1]*B[a0+12]+0.2981423969999719*B[a0+7]*A[a0+12]+0.5*B[a0+1]*A[a0+12]+0.4391550328268399*A[a0+6]*B[a0+10]+0.4391550328268399*B[a0+6]*A[a0+10]+0.2981423969999719*A[a0+5]*B[a0+9]+0.5*A[a0]*B[a0+9]+0.2981423969999719*B[a0+5]*A[a0+9]+0.5*B[a0]*A[a0+9]+0.4391550328268399*A[a0+3]*B[a0+7]+0.4391550328268399*B[a0+3]*A[a0+7]+0.4391550328268398*A[a0+2]*B[a0+5]+0.4391550328268398*B[a0+2]*A[a0+5]; 
    out[10] += 0.2597402597402597*A[a0+16]*B[a0+16]+0.3833259389999639*A[a0+7]*B[a0+16]+0.3833259389999639*B[a0+7]*A[a0+16]+0.2597402597402597*A[a0+15]*B[a0+15]+0.3833259389999639*A[a0+6]*B[a0+15]+0.3833259389999639*B[a0+6]*A[a0+15]+0.4285714285714285*A[a0+10]*B[a0+14]+0.4285714285714285*B[a0+10]*A[a0+14]+0.4285714285714285*A[a0+10]*B[a0+13]+0.4285714285714285*B[a0+10]*A[a0+13]+0.2666666666666667*A[a0+12]*B[a0+12]+0.3857142857142857*A[a0+11]*B[a0+12]+0.3927922024247863*A[a0+3]*B[a0+12]+0.3857142857142857*B[a0+11]*A[a0+12]+0.3927922024247863*B[a0+3]*A[a0+12]+0.2666666666666667*A[a0+11]*B[a0+11]+0.3927922024247863*A[a0+3]*B[a0+11]+0.3927922024247863*B[a0+3]*A[a0+11]+0.2040816326530612*A[a0+10]*B[a0+10]+0.31943828249997*A[a0+5]*B[a0+10]+0.31943828249997*A[a0+4]*B[a0+10]+0.5*A[a0]*B[a0+10]+0.31943828249997*B[a0+5]*A[a0+10]+0.31943828249997*B[a0+4]*A[a0+10]+0.5*B[a0]*A[a0+10]+0.4391550328268399*A[a0+6]*B[a0+9]+0.4391550328268399*B[a0+6]*A[a0+9]+0.4391550328268399*A[a0+7]*B[a0+8]+0.4391550328268399*B[a0+7]*A[a0+8]+0.2857142857142857*A[a0+7]*B[a0+7]+0.447213595499958*A[a0+1]*B[a0+7]+0.447213595499958*B[a0+1]*A[a0+7]+0.2857142857142857*A[a0+6]*B[a0+6]+0.447213595499958*A[a0+2]*B[a0+6]+0.447213595499958*B[a0+2]*A[a0+6]+0.5*A[a0+4]*B[a0+5]+0.5*B[a0+4]*A[a0+5]+0.4*A[a0+3]*B[a0+3]; 
    out[11] += 0.2727272727272727*A[a0+8]*B[a0+15]+0.3903600291794134*A[a0+7]*B[a0+15]+0.4364357804719848*A[a0+1]*B[a0+15]+0.2727272727272727*B[a0+8]*A[a0+15]+0.3903600291794134*B[a0+7]*A[a0+15]+0.4364357804719848*B[a0+1]*A[a0+15]+0.2727272727272727*A[a0+11]*B[a0+13]+0.4364357804719848*A[a0+3]*B[a0+13]+0.2727272727272727*B[a0+11]*A[a0+13]+0.4364357804719848*B[a0+3]*A[a0+13]+0.3857142857142857*A[a0+10]*B[a0+12]+0.3857142857142857*B[a0+10]*A[a0+12]+0.2666666666666667*A[a0+10]*B[a0+11]+0.4472135954999579*A[a0+5]*B[a0+11]+0.2981423969999719*A[a0+4]*B[a0+11]+0.5*A[a0]*B[a0+11]+0.2666666666666667*B[a0+10]*A[a0+11]+0.4472135954999579*B[a0+5]*A[a0+11]+0.2981423969999719*B[a0+4]*A[a0+11]+0.5*B[a0]*A[a0+11]+0.3927922024247863*A[a0+3]*B[a0+10]+0.3927922024247863*B[a0+3]*A[a0+10]+0.2981423969999719*A[a0+6]*B[a0+8]+0.5*A[a0+2]*B[a0+8]+0.2981423969999719*B[a0+6]*A[a0+8]+0.5*B[a0+2]*A[a0+8]+0.3927922024247863*A[a0+6]*B[a0+7]+0.3927922024247863*B[a0+6]*A[a0+7]+0.4391550328268399*A[a0+1]*B[a0+6]+0.4391550328268399*B[a0+1]*A[a0+6]+0.4391550328268399*A[a0+3]*B[a0+4]+0.4391550328268399*B[a0+3]*A[a0+4]; 
    out[12] += 0.2727272727272727*A[a0+9]*B[a0+16]+0.3903600291794134*A[a0+6]*B[a0+16]+0.4364357804719848*A[a0+2]*B[a0+16]+0.2727272727272727*B[a0+9]*A[a0+16]+0.3903600291794134*B[a0+6]*A[a0+16]+0.4364357804719848*B[a0+2]*A[a0+16]+0.2727272727272727*A[a0+12]*B[a0+14]+0.4364357804719848*A[a0+3]*B[a0+14]+0.2727272727272727*B[a0+12]*A[a0+14]+0.4364357804719848*B[a0+3]*A[a0+14]+0.2666666666666667*A[a0+10]*B[a0+12]+0.2981423969999719*A[a0+5]*B[a0+12]+0.4472135954999579*A[a0+4]*B[a0+12]+0.5*A[a0]*B[a0+12]+0.2666666666666667*B[a0+10]*A[a0+12]+0.2981423969999719*B[a0+5]*A[a0+12]+0.4472135954999579*B[a0+4]*A[a0+12]+0.5*B[a0]*A[a0+12]+0.3857142857142857*A[a0+10]*B[a0+11]+0.3857142857142857*B[a0+10]*A[a0+11]+0.3927922024247863*A[a0+3]*B[a0+10]+0.3927922024247863*B[a0+3]*A[a0+10]+0.2981423969999719*A[a0+7]*B[a0+9]+0.5*A[a0+1]*B[a0+9]+0.2981423969999719*B[a0+7]*A[a0+9]+0.5*B[a0+1]*A[a0+9]+0.3927922024247863*A[a0+6]*B[a0+7]+0.4391550328268399*A[a0+2]*B[a0+7]+0.3927922024247863*B[a0+6]*A[a0+7]+0.4391550328268399*B[a0+2]*A[a0+7]+0.4391550328268399*A[a0+3]*B[a0+5]+0.4391550328268399*B[a0+3]*A[a0+5]; 
    out[13] += 0.2427572427572428*A[a0+15]*B[a0+15]+0.2903984386363364*A[a0+6]*B[a0+15]+0.5*A[a0+2]*B[a0+15]+0.2903984386363364*B[a0+6]*A[a0+15]+0.5*B[a0+2]*A[a0+15]+0.2427572427572428*A[a0+13]*B[a0+13]+0.2903984386363364*A[a0+4]*B[a0+13]+0.5*A[a0]*B[a0+13]+0.2903984386363364*B[a0+4]*A[a0+13]+0.5*B[a0]*A[a0+13]+0.2727272727272727*A[a0+11]*B[a0+11]+0.4364357804719848*A[a0+3]*B[a0+11]+0.4364357804719848*B[a0+3]*A[a0+11]+0.4285714285714285*A[a0+10]*B[a0+10]+0.2727272727272727*A[a0+8]*B[a0+8]+0.4364357804719848*A[a0+1]*B[a0+8]+0.4364357804719848*B[a0+1]*A[a0+8]+0.4285714285714285*A[a0+6]*B[a0+6]+0.4285714285714285*A[a0+4]*B[a0+4]; 
    out[14] += 0.2427572427572428*A[a0+16]*B[a0+16]+0.2903984386363364*A[a0+7]*B[a0+16]+0.5*A[a0+1]*B[a0+16]+0.2903984386363364*B[a0+7]*A[a0+16]+0.5*B[a0+1]*A[a0+16]+0.2427572427572428*A[a0+14]*B[a0+14]+0.2903984386363364*A[a0+5]*B[a0+14]+0.5*A[a0]*B[a0+14]+0.2903984386363364*B[a0+5]*A[a0+14]+0.5*B[a0]*A[a0+14]+0.2727272727272727*A[a0+12]*B[a0+12]+0.4364357804719848*A[a0+3]*B[a0+12]+0.4364357804719848*B[a0+3]*A[a0+12]+0.4285714285714285*A[a0+10]*B[a0+10]+0.2727272727272727*A[a0+9]*B[a0+9]+0.4364357804719848*A[a0+2]*B[a0+9]+0.4364357804719848*B[a0+2]*A[a0+9]+0.4285714285714285*A[a0+7]*B[a0+7]+0.4285714285714285*A[a0+5]*B[a0+5]; 
    out[15] += 0.2427572427572428*A[a0+13]*B[a0+15]+0.2597402597402597*A[a0+10]*B[a0+15]+0.4472135954999579*A[a0+5]*B[a0+15]+0.2903984386363364*A[a0+4]*B[a0+15]+0.5*A[a0]*B[a0+15]+0.2427572427572428*B[a0+13]*A[a0+15]+0.2597402597402597*B[a0+10]*A[a0+15]+0.4472135954999579*B[a0+5]*A[a0+15]+0.2903984386363364*B[a0+4]*A[a0+15]+0.5*B[a0]*A[a0+15]+0.2903984386363364*A[a0+6]*B[a0+13]+0.5*A[a0+2]*B[a0+13]+0.2903984386363364*B[a0+6]*A[a0+13]+0.5*B[a0+2]*A[a0+13]+0.2727272727272727*A[a0+8]*B[a0+11]+0.3903600291794134*A[a0+7]*B[a0+11]+0.4364357804719848*A[a0+1]*B[a0+11]+0.2727272727272727*B[a0+8]*A[a0+11]+0.3903600291794134*B[a0+7]*A[a0+11]+0.4364357804719848*B[a0+1]*A[a0+11]+0.3833259389999639*A[a0+6]*B[a0+10]+0.3833259389999639*B[a0+6]*A[a0+10]+0.4364357804719848*A[a0+3]*B[a0+8]+0.4364357804719848*B[a0+3]*A[a0+8]+0.4285714285714285*A[a0+4]*B[a0+6]+0.4285714285714285*B[a0+4]*A[a0+6]; 
    out[16] += 0.2427572427572428*A[a0+14]*B[a0+16]+0.2597402597402597*A[a0+10]*B[a0+16]+0.2903984386363364*A[a0+5]*B[a0+16]+0.4472135954999579*A[a0+4]*B[a0+16]+0.5*A[a0]*B[a0+16]+0.2427572427572428*B[a0+14]*A[a0+16]+0.2597402597402597*B[a0+10]*A[a0+16]+0.2903984386363364*B[a0+5]*A[a0+16]+0.4472135954999579*B[a0+4]*A[a0+16]+0.5*B[a0]*A[a0+16]+0.2903984386363364*A[a0+7]*B[a0+14]+0.5*A[a0+1]*B[a0+14]+0.2903984386363364*B[a0+7]*A[a0+14]+0.5*B[a0+1]*A[a0+14]+0.2727272727272727*A[a0+9]*B[a0+12]+0.3903600291794134*A[a0+6]*B[a0+12]+0.4364357804719848*A[a0+2]*B[a0+12]+0.2727272727272727*B[a0+9]*A[a0+12]+0.3903600291794134*B[a0+6]*A[a0+12]+0.4364357804719848*B[a0+2]*A[a0+12]+0.3833259389999639*A[a0+7]*B[a0+10]+0.3833259389999639*B[a0+7]*A[a0+10]+0.4364357804719848*A[a0+3]*B[a0+9]+0.4364357804719848*B[a0+3]*A[a0+9]+0.4285714285714285*A[a0+5]*B[a0+7]+0.4285714285714285*B[a0+5]*A[a0+7]; 
  } 
 
} 
 
