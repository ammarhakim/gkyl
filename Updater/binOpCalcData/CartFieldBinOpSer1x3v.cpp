#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x3vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[16]; 
  tmp[0] = 0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[1]*B[11]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[1]*B[13]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.7071067811865475*A[0]*B[11]+0.7071067811865475*A[1]*B[7]; 
  tmp[12] = 0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[9]; 
  tmp[13] = 0.7071067811865475*A[0]*B[13]+0.7071067811865475*A[1]*B[10]; 
  tmp[14] = 0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[14]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<16; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x3vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[48]; 
  tmp[0] = 0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6324555320336759*A[1]*B[11]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[2]*B[19]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[2]*B[25]+0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.632455532033676*A[1]*B[19]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[6]+0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[2]*B[32]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.632455532033676*A[1]*B[25]+0.6324555320336759*A[2]*B[8]+0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[2]*B[35]+0.7071067811865475*A[1]*B[16]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[2]*B[37]+0.7071067811865475*A[1]*B[17]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[12] = 0.7071067811865475*A[1]*B[20]+0.7071067811865475*A[0]*B[12]; 
  tmp[13] = 0.7071067811865475*A[1]*B[23]+0.7071067811865475*A[0]*B[13]; 
  tmp[14] = 0.7071067811865475*A[1]*B[28]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6324555320336759*A[1]*B[32]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[7]; 
  tmp[16] = 0.6324555320336759*A[1]*B[35]+0.6324555320336759*A[2]*B[16]+0.7071067811865475*A[0]*B[16]+0.7071067811865475*A[1]*B[9]; 
  tmp[17] = 0.6324555320336759*A[1]*B[37]+0.6324555320336759*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.7071067811865475*A[1]*B[10]; 
  tmp[18] = 0.7071067811865475*A[2]*B[44]+0.7071067811865475*A[1]*B[31]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.4517539514526256*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[2]; 
  tmp[20] = 0.6324555320336759*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.7071067811865475*A[1]*B[12]; 
  tmp[21] = 0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.632455532033676*A[1]*B[6]+0.7071067811865475*A[2]*B[3]; 
  tmp[22] = 0.7071067811865475*A[1]*B[33]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.6324555320336759*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.7071067811865475*A[1]*B[13]; 
  tmp[24] = 0.7071067811865475*A[1]*B[34]+0.7071067811865475*A[0]*B[24]; 
  tmp[25] = 0.4517539514526256*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.632455532033676*A[1]*B[8]+0.7071067811865475*A[2]*B[4]; 
  tmp[26] = 0.7071067811865475*A[1]*B[36]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.7071067811865475*A[1]*B[39]+0.7071067811865475*A[0]*B[27]; 
  tmp[28] = 0.6324555320336759*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.7071067811865475*A[1]*B[14]; 
  tmp[29] = 0.7071067811865475*A[1]*B[41]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.7071067811865475*A[1]*B[42]+0.7071067811865475*A[0]*B[30]; 
  tmp[31] = 0.632455532033676*A[1]*B[44]+0.6324555320336759*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.7071067811865475*A[1]*B[18]; 
  tmp[32] = 0.4517539514526256*A[2]*B[32]+0.7071067811865475*A[0]*B[32]+0.6324555320336759*A[1]*B[15]+0.7071067811865475*A[2]*B[7]; 
  tmp[33] = 0.6324555320336759*A[2]*B[33]+0.7071067811865475*A[0]*B[33]+0.7071067811865475*A[1]*B[22]; 
  tmp[34] = 0.6324555320336759*A[2]*B[34]+0.7071067811865475*A[0]*B[34]+0.7071067811865475*A[1]*B[24]; 
  tmp[35] = 0.4517539514526256*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.6324555320336759*A[1]*B[16]+0.7071067811865475*A[2]*B[9]; 
  tmp[36] = 0.6324555320336759*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.7071067811865475*A[1]*B[26]; 
  tmp[37] = 0.4517539514526256*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.6324555320336759*A[1]*B[17]+0.7071067811865475*A[2]*B[10]; 
  tmp[38] = 0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[38]; 
  tmp[39] = 0.6324555320336759*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.7071067811865475*A[1]*B[27]; 
  tmp[40] = 0.7071067811865475*A[1]*B[46]+0.7071067811865475*A[0]*B[40]; 
  tmp[41] = 0.6324555320336759*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.7071067811865475*A[1]*B[29]; 
  tmp[42] = 0.6324555320336759*A[2]*B[42]+0.7071067811865475*A[0]*B[42]+0.7071067811865475*A[1]*B[30]; 
  tmp[43] = 0.7071067811865475*A[1]*B[47]+0.7071067811865475*A[0]*B[43]; 
  tmp[44] = 0.4517539514526256*A[2]*B[44]+0.7071067811865475*A[0]*B[44]+0.632455532033676*A[1]*B[31]+0.7071067811865475*A[2]*B[18]; 
  tmp[45] = 0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[38]; 
  tmp[46] = 0.6324555320336759*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.7071067811865475*A[1]*B[40]; 
  tmp[47] = 0.6324555320336759*A[2]*B[47]+0.7071067811865475*A[0]*B[47]+0.7071067811865475*A[1]*B[43]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<48; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x3vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[80]; 
  tmp[0] = 0.7071067811865475*A[3]*B[31]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6210590034081186*A[2]*B[31]+0.6210590034081186*A[3]*B[11]+0.6324555320336759*A[1]*B[11]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865474*A[3]*B[48]+0.7071067811865475*A[2]*B[19]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865474*A[3]*B[50]+0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865474*A[3]*B[54]+0.7071067811865475*A[2]*B[25]+0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.6210590034081187*A[2]*B[48]+0.6210590034081187*A[3]*B[19]+0.632455532033676*A[1]*B[19]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.6210590034081187*A[2]*B[50]+0.6210590034081187*A[3]*B[21]+0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[6]+0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[3]*B[64]+0.7071067811865475*A[2]*B[36]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.6210590034081187*A[2]*B[54]+0.6210590034081187*A[3]*B[25]+0.632455532033676*A[1]*B[25]+0.6324555320336759*A[2]*B[8]+0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[3]*B[67]+0.7071067811865475*A[2]*B[39]+0.7071067811865475*A[1]*B[16]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[3]*B[69]+0.7071067811865475*A[2]*B[41]+0.7071067811865475*A[1]*B[17]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.421637021355784*A[3]*B[31]+0.6210590034081186*A[1]*B[31]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[12] = 0.7071067811865475*A[1]*B[20]+0.7071067811865475*A[0]*B[12]; 
  tmp[13] = 0.7071067811865475*A[1]*B[23]+0.7071067811865475*A[0]*B[13]; 
  tmp[14] = 0.7071067811865475*A[1]*B[28]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6210590034081186*A[2]*B[64]+0.6210590034081186*A[3]*B[36]+0.6324555320336759*A[1]*B[36]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[7]; 
  tmp[16] = 0.6210590034081186*A[2]*B[67]+0.6210590034081186*A[3]*B[39]+0.6324555320336759*A[1]*B[39]+0.6324555320336759*A[2]*B[16]+0.7071067811865475*A[0]*B[16]+0.7071067811865475*A[1]*B[9]; 
  tmp[17] = 0.6210590034081186*A[2]*B[69]+0.6210590034081186*A[3]*B[41]+0.6324555320336759*A[1]*B[41]+0.6324555320336759*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.7071067811865475*A[1]*B[10]; 
  tmp[18] = 0.7071067811865474*A[3]*B[76]+0.7071067811865475*A[2]*B[60]+0.7071067811865475*A[1]*B[35]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.4216370213557839*A[3]*B[48]+0.6210590034081187*A[1]*B[48]+0.4517539514526256*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[2]; 
  tmp[20] = 0.6324555320336759*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.7071067811865475*A[1]*B[12]; 
  tmp[21] = 0.4216370213557839*A[3]*B[50]+0.6210590034081187*A[1]*B[50]+0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.6210590034081187*A[3]*B[6]+0.632455532033676*A[1]*B[6]+0.7071067811865475*A[2]*B[3]; 
  tmp[22] = 0.7071067811865475*A[1]*B[37]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.6324555320336759*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.7071067811865475*A[1]*B[13]; 
  tmp[24] = 0.7071067811865475*A[1]*B[38]+0.7071067811865475*A[0]*B[24]; 
  tmp[25] = 0.4216370213557839*A[3]*B[54]+0.6210590034081187*A[1]*B[54]+0.4517539514526256*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.6210590034081187*A[3]*B[8]+0.632455532033676*A[1]*B[8]+0.7071067811865475*A[2]*B[4]; 
  tmp[26] = 0.7071067811865475*A[1]*B[40]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.7071067811865475*A[1]*B[43]+0.7071067811865475*A[0]*B[27]; 
  tmp[28] = 0.6324555320336759*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.7071067811865475*A[1]*B[14]; 
  tmp[29] = 0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.7071067811865475*A[1]*B[46]+0.7071067811865475*A[0]*B[30]; 
  tmp[31] = 0.421637021355784*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.421637021355784*A[3]*B[11]+0.6210590034081186*A[1]*B[11]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[32] = 0.7071067811865474*A[1]*B[49]+0.7071067811865475*A[0]*B[32]; 
  tmp[33] = 0.7071067811865474*A[1]*B[52]+0.7071067811865475*A[0]*B[33]; 
  tmp[34] = 0.7071067811865474*A[1]*B[57]+0.7071067811865475*A[0]*B[34]; 
  tmp[35] = 0.6210590034081187*A[2]*B[76]+0.6210590034081187*A[3]*B[60]+0.632455532033676*A[1]*B[60]+0.6324555320336759*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.7071067811865475*A[1]*B[18]; 
  tmp[36] = 0.421637021355784*A[3]*B[64]+0.6210590034081186*A[1]*B[64]+0.4517539514526256*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.6210590034081186*A[3]*B[15]+0.6324555320336759*A[1]*B[15]+0.7071067811865475*A[2]*B[7]; 
  tmp[37] = 0.6324555320336759*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.7071067811865475*A[1]*B[22]; 
  tmp[38] = 0.6324555320336759*A[2]*B[38]+0.7071067811865475*A[0]*B[38]+0.7071067811865475*A[1]*B[24]; 
  tmp[39] = 0.421637021355784*A[3]*B[67]+0.6210590034081186*A[1]*B[67]+0.4517539514526256*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.6210590034081186*A[3]*B[16]+0.6324555320336759*A[1]*B[16]+0.7071067811865475*A[2]*B[9]; 
  tmp[40] = 0.6324555320336759*A[2]*B[40]+0.7071067811865475*A[0]*B[40]+0.7071067811865475*A[1]*B[26]; 
  tmp[41] = 0.421637021355784*A[3]*B[69]+0.6210590034081186*A[1]*B[69]+0.4517539514526256*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.6210590034081186*A[3]*B[17]+0.6324555320336759*A[1]*B[17]+0.7071067811865475*A[2]*B[10]; 
  tmp[42] = 0.7071067811865475*A[1]*B[61]+0.7071067811865475*A[0]*B[42]; 
  tmp[43] = 0.6324555320336759*A[2]*B[43]+0.7071067811865475*A[0]*B[43]+0.7071067811865475*A[1]*B[27]; 
  tmp[44] = 0.7071067811865475*A[1]*B[62]+0.7071067811865475*A[0]*B[44]; 
  tmp[45] = 0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[29]; 
  tmp[46] = 0.6324555320336759*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.7071067811865475*A[1]*B[30]; 
  tmp[47] = 0.7071067811865475*A[1]*B[63]+0.7071067811865475*A[0]*B[47]; 
  tmp[48] = 0.421637021355784*A[2]*B[48]+0.7071067811865475*A[0]*B[48]+0.4216370213557839*A[3]*B[19]+0.6210590034081187*A[1]*B[19]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*B[2]*A[3]; 
  tmp[49] = 0.6324555320336759*A[2]*B[49]+0.7071067811865475*A[0]*B[49]+0.7071067811865474*A[1]*B[32]; 
  tmp[50] = 0.421637021355784*A[2]*B[50]+0.7071067811865475*A[0]*B[50]+0.4216370213557839*A[3]*B[21]+0.6210590034081187*A[1]*B[21]+0.6210590034081187*A[2]*B[6]+0.7071067811865474*A[3]*B[3]; 
  tmp[51] = 0.7071067811865474*A[1]*B[65]+0.7071067811865475*A[0]*B[51]; 
  tmp[52] = 0.6324555320336759*A[2]*B[52]+0.7071067811865475*A[0]*B[52]+0.7071067811865474*A[1]*B[33]; 
  tmp[53] = 0.7071067811865474*A[1]*B[66]+0.7071067811865475*A[0]*B[53]; 
  tmp[54] = 0.421637021355784*A[2]*B[54]+0.7071067811865475*A[0]*B[54]+0.4216370213557839*A[3]*B[25]+0.6210590034081187*A[1]*B[25]+0.6210590034081187*A[2]*B[8]+0.7071067811865474*A[3]*B[4]; 
  tmp[55] = 0.7071067811865474*A[1]*B[68]+0.7071067811865475*A[0]*B[55]; 
  tmp[56] = 0.7071067811865474*A[1]*B[71]+0.7071067811865475*A[0]*B[56]; 
  tmp[57] = 0.6324555320336759*A[2]*B[57]+0.7071067811865475*A[0]*B[57]+0.7071067811865474*A[1]*B[34]; 
  tmp[58] = 0.7071067811865474*A[1]*B[73]+0.7071067811865475*A[0]*B[58]; 
  tmp[59] = 0.7071067811865474*A[1]*B[74]+0.7071067811865475*A[0]*B[59]; 
  tmp[60] = 0.4216370213557839*A[3]*B[76]+0.6210590034081187*A[1]*B[76]+0.4517539514526256*A[2]*B[60]+0.7071067811865475*A[0]*B[60]+0.6210590034081187*A[3]*B[35]+0.632455532033676*A[1]*B[35]+0.7071067811865475*A[2]*B[18]; 
  tmp[61] = 0.6324555320336759*A[2]*B[61]+0.7071067811865475*A[0]*B[61]+0.7071067811865475*A[1]*B[42]; 
  tmp[62] = 0.6324555320336759*A[2]*B[62]+0.7071067811865475*A[0]*B[62]+0.7071067811865475*A[1]*B[44]; 
  tmp[63] = 0.6324555320336759*A[2]*B[63]+0.7071067811865475*A[0]*B[63]+0.7071067811865475*A[1]*B[47]; 
  tmp[64] = 0.421637021355784*A[2]*B[64]+0.7071067811865475*A[0]*B[64]+0.421637021355784*A[3]*B[36]+0.6210590034081186*A[1]*B[36]+0.6210590034081186*A[2]*B[15]+0.7071067811865475*A[3]*B[7]; 
  tmp[65] = 0.6324555320336759*A[2]*B[65]+0.7071067811865475*A[0]*B[65]+0.7071067811865474*A[1]*B[51]; 
  tmp[66] = 0.6324555320336759*A[2]*B[66]+0.7071067811865475*A[0]*B[66]+0.7071067811865474*A[1]*B[53]; 
  tmp[67] = 0.421637021355784*A[2]*B[67]+0.7071067811865475*A[0]*B[67]+0.421637021355784*A[3]*B[39]+0.6210590034081186*A[1]*B[39]+0.6210590034081186*A[2]*B[16]+0.7071067811865475*A[3]*B[9]; 
  tmp[68] = 0.6324555320336759*A[2]*B[68]+0.7071067811865475*A[0]*B[68]+0.7071067811865474*A[1]*B[55]; 
  tmp[69] = 0.421637021355784*A[2]*B[69]+0.7071067811865475*A[0]*B[69]+0.421637021355784*A[3]*B[41]+0.6210590034081186*A[1]*B[41]+0.6210590034081186*A[2]*B[17]+0.7071067811865475*A[3]*B[10]; 
  tmp[70] = 0.7071067811865474*A[1]*B[77]+0.7071067811865475*A[0]*B[70]; 
  tmp[71] = 0.6324555320336759*A[2]*B[71]+0.7071067811865475*A[0]*B[71]+0.7071067811865474*A[1]*B[56]; 
  tmp[72] = 0.7071067811865474*A[1]*B[78]+0.7071067811865475*A[0]*B[72]; 
  tmp[73] = 0.6324555320336759*A[2]*B[73]+0.7071067811865475*A[0]*B[73]+0.7071067811865474*A[1]*B[58]; 
  tmp[74] = 0.6324555320336759*A[2]*B[74]+0.7071067811865475*A[0]*B[74]+0.7071067811865474*A[1]*B[59]; 
  tmp[75] = 0.7071067811865474*A[1]*B[79]+0.7071067811865475*A[0]*B[75]; 
  tmp[76] = 0.421637021355784*A[2]*B[76]+0.7071067811865475*A[0]*B[76]+0.4216370213557839*A[3]*B[60]+0.6210590034081187*A[1]*B[60]+0.6210590034081187*A[2]*B[35]+0.7071067811865474*A[3]*B[18]; 
  tmp[77] = 0.6324555320336759*A[2]*B[77]+0.7071067811865475*A[0]*B[77]+0.7071067811865474*A[1]*B[70]; 
  tmp[78] = 0.6324555320336759*A[2]*B[78]+0.7071067811865475*A[0]*B[78]+0.7071067811865474*A[1]*B[72]; 
  tmp[79] = 0.6324555320336759*A[2]*B[79]+0.7071067811865475*A[0]*B[79]+0.7071067811865474*A[1]*B[75]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<80; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (0.7071067811865475*A[0]-1.224744871391589*A[1] < 0) { 
    avgA = true;
  }
  if (1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[2]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(16,16); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(16);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(16);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,2) = 0.7071067811865475*As[1]; 
  AEM(0,3) = 0.7071067811865475*As[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,16,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
  if (1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[3]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(48,48); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(48);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(48);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,3) = 0.7071067811865475*As[1]; 
  AEM(0,4) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  AEM(0,8) = 0.7071067811865475*As[0]; 
  AEM(0,17) = 0.7071067811865475*As[1]; 
  AEM(0,33) = 0.7071067811865475*As[2]; 
  AEM(0,34) = 0.6324555320336759*As[1]; 
  AEM(1,11) = 0.7071067811865475*As[2]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,48,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.870828693386971*A[3])+1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
  if (1.870828693386971*A[3]+1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[4]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(80,80); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(80);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(80);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,4) = 0.7071067811865475*As[1]; 
  AEM(0,5) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  AEM(0,10) = 0.7071067811865475*As[0]; 
  AEM(0,15) = 0.7071067811865475*As[0]; 
  AEM(0,22) = 0.7071067811865475*As[1]; 
  AEM(0,27) = 0.7071067811865475*As[1]; 
  AEM(0,44) = 0.7071067811865475*As[2]; 
  AEM(0,45) = 0.6210590034081186*As[3]+0.6324555320336759*As[1]; 
  AEM(0,78) = 0.7071067811865475*As[2]; 
  AEM(1,7) = 0.7071067811865475*As[2]; 
  AEM(1,44) = 0.7071067811865475*As[3]; 
  AEM(1,45) = 0.6210590034081186*As[2]; 
  AEM(2,34) = 0.7071067811865474*As[3]; 
  AEM(2,43) = 0.7071067811865474*As[3]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47],B[48],B[49],B[50],B[51],B[52],B[53],B[54],B[55],B[56],B[57],B[58],B[59],B[60],B[61],B[62],B[63],B[64],B[65],B[66],B[67],B[68],B[69],B[70],B[71],B[72],B[73],B[74],B[75],B[76],B[77],B[78],B[79]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,80,1) = u; 
 
} 
 
