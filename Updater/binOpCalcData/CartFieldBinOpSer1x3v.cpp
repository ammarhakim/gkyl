#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x3vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[16]; 
  tmp[0] = 0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[1]*B[11]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[1]*B[13]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.7071067811865475*A[0]*B[11]+0.7071067811865475*A[1]*B[7]; 
  tmp[12] = 0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[9]; 
  tmp[13] = 0.7071067811865475*A[0]*B[13]+0.7071067811865475*A[1]*B[10]; 
  tmp[14] = 0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[14]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<16; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x3vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[48]; 
  tmp[0] = 0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6324555320336759*A[1]*B[11]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[2]*B[19]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[2]*B[25]+0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.632455532033676*A[1]*B[19]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[6]+0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[2]*B[32]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.632455532033676*A[1]*B[25]+0.6324555320336759*A[2]*B[8]+0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[2]*B[35]+0.7071067811865475*A[1]*B[16]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[2]*B[37]+0.7071067811865475*A[1]*B[17]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[12] = 0.7071067811865475*A[1]*B[20]+0.7071067811865475*A[0]*B[12]; 
  tmp[13] = 0.7071067811865475*A[1]*B[23]+0.7071067811865475*A[0]*B[13]; 
  tmp[14] = 0.7071067811865475*A[1]*B[28]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6324555320336759*A[1]*B[32]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[7]; 
  tmp[16] = 0.6324555320336759*A[1]*B[35]+0.6324555320336759*A[2]*B[16]+0.7071067811865475*A[0]*B[16]+0.7071067811865475*A[1]*B[9]; 
  tmp[17] = 0.6324555320336759*A[1]*B[37]+0.6324555320336759*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.7071067811865475*A[1]*B[10]; 
  tmp[18] = 0.7071067811865475*A[2]*B[44]+0.7071067811865475*A[1]*B[31]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.4517539514526256*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[2]; 
  tmp[20] = 0.6324555320336759*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.7071067811865475*A[1]*B[12]; 
  tmp[21] = 0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.632455532033676*A[1]*B[6]+0.7071067811865475*A[2]*B[3]; 
  tmp[22] = 0.7071067811865475*A[1]*B[33]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.6324555320336759*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.7071067811865475*A[1]*B[13]; 
  tmp[24] = 0.7071067811865475*A[1]*B[34]+0.7071067811865475*A[0]*B[24]; 
  tmp[25] = 0.4517539514526256*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.632455532033676*A[1]*B[8]+0.7071067811865475*A[2]*B[4]; 
  tmp[26] = 0.7071067811865475*A[1]*B[36]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.7071067811865475*A[1]*B[39]+0.7071067811865475*A[0]*B[27]; 
  tmp[28] = 0.6324555320336759*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.7071067811865475*A[1]*B[14]; 
  tmp[29] = 0.7071067811865475*A[1]*B[41]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.7071067811865475*A[1]*B[42]+0.7071067811865475*A[0]*B[30]; 
  tmp[31] = 0.632455532033676*A[1]*B[44]+0.6324555320336759*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.7071067811865475*A[1]*B[18]; 
  tmp[32] = 0.4517539514526256*A[2]*B[32]+0.7071067811865475*A[0]*B[32]+0.6324555320336759*A[1]*B[15]+0.7071067811865475*A[2]*B[7]; 
  tmp[33] = 0.6324555320336759*A[2]*B[33]+0.7071067811865475*A[0]*B[33]+0.7071067811865475*A[1]*B[22]; 
  tmp[34] = 0.6324555320336759*A[2]*B[34]+0.7071067811865475*A[0]*B[34]+0.7071067811865475*A[1]*B[24]; 
  tmp[35] = 0.4517539514526256*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.6324555320336759*A[1]*B[16]+0.7071067811865475*A[2]*B[9]; 
  tmp[36] = 0.6324555320336759*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.7071067811865475*A[1]*B[26]; 
  tmp[37] = 0.4517539514526256*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.6324555320336759*A[1]*B[17]+0.7071067811865475*A[2]*B[10]; 
  tmp[38] = 0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[38]; 
  tmp[39] = 0.6324555320336759*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.7071067811865475*A[1]*B[27]; 
  tmp[40] = 0.7071067811865475*A[1]*B[46]+0.7071067811865475*A[0]*B[40]; 
  tmp[41] = 0.6324555320336759*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.7071067811865475*A[1]*B[29]; 
  tmp[42] = 0.6324555320336759*A[2]*B[42]+0.7071067811865475*A[0]*B[42]+0.7071067811865475*A[1]*B[30]; 
  tmp[43] = 0.7071067811865475*A[1]*B[47]+0.7071067811865475*A[0]*B[43]; 
  tmp[44] = 0.4517539514526256*A[2]*B[44]+0.7071067811865475*A[0]*B[44]+0.632455532033676*A[1]*B[31]+0.7071067811865475*A[2]*B[18]; 
  tmp[45] = 0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[38]; 
  tmp[46] = 0.6324555320336759*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.7071067811865475*A[1]*B[40]; 
  tmp[47] = 0.6324555320336759*A[2]*B[47]+0.7071067811865475*A[0]*B[47]+0.7071067811865475*A[1]*B[43]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<48; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x3vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[80]; 
  tmp[0] = 0.7071067811865475*A[3]*B[31]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6210590034081186*A[2]*B[31]+0.6210590034081186*A[3]*B[11]+0.6324555320336759*A[1]*B[11]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865474*A[3]*B[48]+0.7071067811865475*A[2]*B[19]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865474*A[3]*B[50]+0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865474*A[3]*B[54]+0.7071067811865475*A[2]*B[25]+0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.6210590034081187*A[2]*B[48]+0.6210590034081187*A[3]*B[19]+0.632455532033676*A[1]*B[19]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.6210590034081187*A[2]*B[50]+0.6210590034081187*A[3]*B[21]+0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[6]+0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[3]*B[64]+0.7071067811865475*A[2]*B[36]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.6210590034081187*A[2]*B[54]+0.6210590034081187*A[3]*B[25]+0.632455532033676*A[1]*B[25]+0.6324555320336759*A[2]*B[8]+0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[3]*B[67]+0.7071067811865475*A[2]*B[39]+0.7071067811865475*A[1]*B[16]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[3]*B[69]+0.7071067811865475*A[2]*B[41]+0.7071067811865475*A[1]*B[17]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.421637021355784*A[3]*B[31]+0.6210590034081186*A[1]*B[31]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[12] = 0.7071067811865475*A[1]*B[20]+0.7071067811865475*A[0]*B[12]; 
  tmp[13] = 0.7071067811865475*A[1]*B[23]+0.7071067811865475*A[0]*B[13]; 
  tmp[14] = 0.7071067811865475*A[1]*B[28]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6210590034081186*A[2]*B[64]+0.6210590034081186*A[3]*B[36]+0.6324555320336759*A[1]*B[36]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[7]; 
  tmp[16] = 0.6210590034081186*A[2]*B[67]+0.6210590034081186*A[3]*B[39]+0.6324555320336759*A[1]*B[39]+0.6324555320336759*A[2]*B[16]+0.7071067811865475*A[0]*B[16]+0.7071067811865475*A[1]*B[9]; 
  tmp[17] = 0.6210590034081186*A[2]*B[69]+0.6210590034081186*A[3]*B[41]+0.6324555320336759*A[1]*B[41]+0.6324555320336759*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.7071067811865475*A[1]*B[10]; 
  tmp[18] = 0.7071067811865474*A[3]*B[76]+0.7071067811865475*A[2]*B[60]+0.7071067811865475*A[1]*B[35]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.4216370213557839*A[3]*B[48]+0.6210590034081187*A[1]*B[48]+0.4517539514526256*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[2]; 
  tmp[20] = 0.6324555320336759*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.7071067811865475*A[1]*B[12]; 
  tmp[21] = 0.4216370213557839*A[3]*B[50]+0.6210590034081187*A[1]*B[50]+0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.6210590034081187*A[3]*B[6]+0.632455532033676*A[1]*B[6]+0.7071067811865475*A[2]*B[3]; 
  tmp[22] = 0.7071067811865475*A[1]*B[37]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.6324555320336759*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.7071067811865475*A[1]*B[13]; 
  tmp[24] = 0.7071067811865475*A[1]*B[38]+0.7071067811865475*A[0]*B[24]; 
  tmp[25] = 0.4216370213557839*A[3]*B[54]+0.6210590034081187*A[1]*B[54]+0.4517539514526256*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.6210590034081187*A[3]*B[8]+0.632455532033676*A[1]*B[8]+0.7071067811865475*A[2]*B[4]; 
  tmp[26] = 0.7071067811865475*A[1]*B[40]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.7071067811865475*A[1]*B[43]+0.7071067811865475*A[0]*B[27]; 
  tmp[28] = 0.6324555320336759*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.7071067811865475*A[1]*B[14]; 
  tmp[29] = 0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.7071067811865475*A[1]*B[46]+0.7071067811865475*A[0]*B[30]; 
  tmp[31] = 0.421637021355784*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.421637021355784*A[3]*B[11]+0.6210590034081186*A[1]*B[11]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[32] = 0.7071067811865474*A[1]*B[49]+0.7071067811865475*A[0]*B[32]; 
  tmp[33] = 0.7071067811865474*A[1]*B[52]+0.7071067811865475*A[0]*B[33]; 
  tmp[34] = 0.7071067811865474*A[1]*B[57]+0.7071067811865475*A[0]*B[34]; 
  tmp[35] = 0.6210590034081187*A[2]*B[76]+0.6210590034081187*A[3]*B[60]+0.632455532033676*A[1]*B[60]+0.6324555320336759*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.7071067811865475*A[1]*B[18]; 
  tmp[36] = 0.421637021355784*A[3]*B[64]+0.6210590034081186*A[1]*B[64]+0.4517539514526256*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.6210590034081186*A[3]*B[15]+0.6324555320336759*A[1]*B[15]+0.7071067811865475*A[2]*B[7]; 
  tmp[37] = 0.6324555320336759*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.7071067811865475*A[1]*B[22]; 
  tmp[38] = 0.6324555320336759*A[2]*B[38]+0.7071067811865475*A[0]*B[38]+0.7071067811865475*A[1]*B[24]; 
  tmp[39] = 0.421637021355784*A[3]*B[67]+0.6210590034081186*A[1]*B[67]+0.4517539514526256*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.6210590034081186*A[3]*B[16]+0.6324555320336759*A[1]*B[16]+0.7071067811865475*A[2]*B[9]; 
  tmp[40] = 0.6324555320336759*A[2]*B[40]+0.7071067811865475*A[0]*B[40]+0.7071067811865475*A[1]*B[26]; 
  tmp[41] = 0.421637021355784*A[3]*B[69]+0.6210590034081186*A[1]*B[69]+0.4517539514526256*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.6210590034081186*A[3]*B[17]+0.6324555320336759*A[1]*B[17]+0.7071067811865475*A[2]*B[10]; 
  tmp[42] = 0.7071067811865475*A[1]*B[61]+0.7071067811865475*A[0]*B[42]; 
  tmp[43] = 0.6324555320336759*A[2]*B[43]+0.7071067811865475*A[0]*B[43]+0.7071067811865475*A[1]*B[27]; 
  tmp[44] = 0.7071067811865475*A[1]*B[62]+0.7071067811865475*A[0]*B[44]; 
  tmp[45] = 0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[29]; 
  tmp[46] = 0.6324555320336759*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.7071067811865475*A[1]*B[30]; 
  tmp[47] = 0.7071067811865475*A[1]*B[63]+0.7071067811865475*A[0]*B[47]; 
  tmp[48] = 0.421637021355784*A[2]*B[48]+0.7071067811865475*A[0]*B[48]+0.4216370213557839*A[3]*B[19]+0.6210590034081187*A[1]*B[19]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*B[2]*A[3]; 
  tmp[49] = 0.6324555320336759*A[2]*B[49]+0.7071067811865475*A[0]*B[49]+0.7071067811865474*A[1]*B[32]; 
  tmp[50] = 0.421637021355784*A[2]*B[50]+0.7071067811865475*A[0]*B[50]+0.4216370213557839*A[3]*B[21]+0.6210590034081187*A[1]*B[21]+0.6210590034081187*A[2]*B[6]+0.7071067811865474*A[3]*B[3]; 
  tmp[51] = 0.7071067811865474*A[1]*B[65]+0.7071067811865475*A[0]*B[51]; 
  tmp[52] = 0.6324555320336759*A[2]*B[52]+0.7071067811865475*A[0]*B[52]+0.7071067811865474*A[1]*B[33]; 
  tmp[53] = 0.7071067811865474*A[1]*B[66]+0.7071067811865475*A[0]*B[53]; 
  tmp[54] = 0.421637021355784*A[2]*B[54]+0.7071067811865475*A[0]*B[54]+0.4216370213557839*A[3]*B[25]+0.6210590034081187*A[1]*B[25]+0.6210590034081187*A[2]*B[8]+0.7071067811865474*A[3]*B[4]; 
  tmp[55] = 0.7071067811865474*A[1]*B[68]+0.7071067811865475*A[0]*B[55]; 
  tmp[56] = 0.7071067811865474*A[1]*B[71]+0.7071067811865475*A[0]*B[56]; 
  tmp[57] = 0.6324555320336759*A[2]*B[57]+0.7071067811865475*A[0]*B[57]+0.7071067811865474*A[1]*B[34]; 
  tmp[58] = 0.7071067811865474*A[1]*B[73]+0.7071067811865475*A[0]*B[58]; 
  tmp[59] = 0.7071067811865474*A[1]*B[74]+0.7071067811865475*A[0]*B[59]; 
  tmp[60] = 0.4216370213557839*A[3]*B[76]+0.6210590034081187*A[1]*B[76]+0.4517539514526256*A[2]*B[60]+0.7071067811865475*A[0]*B[60]+0.6210590034081187*A[3]*B[35]+0.632455532033676*A[1]*B[35]+0.7071067811865475*A[2]*B[18]; 
  tmp[61] = 0.6324555320336759*A[2]*B[61]+0.7071067811865475*A[0]*B[61]+0.7071067811865475*A[1]*B[42]; 
  tmp[62] = 0.6324555320336759*A[2]*B[62]+0.7071067811865475*A[0]*B[62]+0.7071067811865475*A[1]*B[44]; 
  tmp[63] = 0.6324555320336759*A[2]*B[63]+0.7071067811865475*A[0]*B[63]+0.7071067811865475*A[1]*B[47]; 
  tmp[64] = 0.421637021355784*A[2]*B[64]+0.7071067811865475*A[0]*B[64]+0.421637021355784*A[3]*B[36]+0.6210590034081186*A[1]*B[36]+0.6210590034081186*A[2]*B[15]+0.7071067811865475*A[3]*B[7]; 
  tmp[65] = 0.6324555320336759*A[2]*B[65]+0.7071067811865475*A[0]*B[65]+0.7071067811865474*A[1]*B[51]; 
  tmp[66] = 0.6324555320336759*A[2]*B[66]+0.7071067811865475*A[0]*B[66]+0.7071067811865474*A[1]*B[53]; 
  tmp[67] = 0.421637021355784*A[2]*B[67]+0.7071067811865475*A[0]*B[67]+0.421637021355784*A[3]*B[39]+0.6210590034081186*A[1]*B[39]+0.6210590034081186*A[2]*B[16]+0.7071067811865475*A[3]*B[9]; 
  tmp[68] = 0.6324555320336759*A[2]*B[68]+0.7071067811865475*A[0]*B[68]+0.7071067811865474*A[1]*B[55]; 
  tmp[69] = 0.421637021355784*A[2]*B[69]+0.7071067811865475*A[0]*B[69]+0.421637021355784*A[3]*B[41]+0.6210590034081186*A[1]*B[41]+0.6210590034081186*A[2]*B[17]+0.7071067811865475*A[3]*B[10]; 
  tmp[70] = 0.7071067811865474*A[1]*B[77]+0.7071067811865475*A[0]*B[70]; 
  tmp[71] = 0.6324555320336759*A[2]*B[71]+0.7071067811865475*A[0]*B[71]+0.7071067811865474*A[1]*B[56]; 
  tmp[72] = 0.7071067811865474*A[1]*B[78]+0.7071067811865475*A[0]*B[72]; 
  tmp[73] = 0.6324555320336759*A[2]*B[73]+0.7071067811865475*A[0]*B[73]+0.7071067811865474*A[1]*B[58]; 
  tmp[74] = 0.6324555320336759*A[2]*B[74]+0.7071067811865475*A[0]*B[74]+0.7071067811865474*A[1]*B[59]; 
  tmp[75] = 0.7071067811865474*A[1]*B[79]+0.7071067811865475*A[0]*B[75]; 
  tmp[76] = 0.421637021355784*A[2]*B[76]+0.7071067811865475*A[0]*B[76]+0.4216370213557839*A[3]*B[60]+0.6210590034081187*A[1]*B[60]+0.6210590034081187*A[2]*B[35]+0.7071067811865474*A[3]*B[18]; 
  tmp[77] = 0.6324555320336759*A[2]*B[77]+0.7071067811865475*A[0]*B[77]+0.7071067811865474*A[1]*B[70]; 
  tmp[78] = 0.6324555320336759*A[2]*B[78]+0.7071067811865475*A[0]*B[78]+0.7071067811865474*A[1]*B[72]; 
  tmp[79] = 0.6324555320336759*A[2]*B[79]+0.7071067811865475*A[0]*B[79]+0.7071067811865474*A[1]*B[75]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<80; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x3vSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[136]; 
  tmp[0] = 0.7071067811865475*A[4]*B[66]+0.7071067811865475*A[3]*B[31]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6172133998483679*A[3]*B[66]+0.6172133998483679*A[4]*B[31]+0.6210590034081186*A[2]*B[31]+0.6210590034081186*A[3]*B[11]+0.6324555320336759*A[1]*B[11]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[4]*B[98]+0.7071067811865474*A[3]*B[54]+0.7071067811865475*A[2]*B[19]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[4]*B[100]+0.7071067811865474*A[3]*B[56]+0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[6]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[4]*B[104]+0.7071067811865474*A[3]*B[60]+0.7071067811865475*A[2]*B[25]+0.7071067811865475*A[1]*B[8]+0.7071067811865475*A[0]*B[4]; 
  tmp[5] = 0.6172133998483679*A[3]*B[98]+0.6172133998483678*A[4]*B[54]+0.6210590034081187*A[2]*B[54]+0.6210590034081187*A[3]*B[19]+0.632455532033676*A[1]*B[19]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[2]; 
  tmp[6] = 0.6172133998483679*A[3]*B[100]+0.6172133998483678*A[4]*B[56]+0.6210590034081187*A[2]*B[56]+0.6210590034081187*A[3]*B[21]+0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[6]+0.7071067811865475*A[0]*B[6]+0.7071067811865475*A[1]*B[3]; 
  tmp[7] = 0.7071067811865475*A[4]*B[120]+0.7071067811865475*A[3]*B[86]+0.7071067811865475*A[2]*B[36]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[7]; 
  tmp[8] = 0.6172133998483679*A[3]*B[104]+0.6172133998483678*A[4]*B[60]+0.6210590034081187*A[2]*B[60]+0.6210590034081187*A[3]*B[25]+0.632455532033676*A[1]*B[25]+0.6324555320336759*A[2]*B[8]+0.7071067811865475*A[0]*B[8]+0.7071067811865475*A[1]*B[4]; 
  tmp[9] = 0.7071067811865475*A[4]*B[123]+0.7071067811865475*A[3]*B[89]+0.7071067811865475*A[2]*B[39]+0.7071067811865475*A[1]*B[16]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.7071067811865475*A[4]*B[125]+0.7071067811865475*A[3]*B[91]+0.7071067811865475*A[2]*B[41]+0.7071067811865475*A[1]*B[17]+0.7071067811865475*A[0]*B[10]; 
  tmp[11] = 0.410685410411478*A[4]*B[66]+0.6060915267313265*A[2]*B[66]+0.421637021355784*A[3]*B[31]+0.6210590034081186*A[1]*B[31]+0.6060915267313265*A[4]*B[11]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[12] = 0.7071067811865475*A[2]*B[48]+0.7071067811865475*A[1]*B[20]+0.7071067811865475*A[0]*B[12]; 
  tmp[13] = 0.7071067811865475*A[2]*B[49]+0.7071067811865475*A[1]*B[23]+0.7071067811865475*A[0]*B[13]; 
  tmp[14] = 0.7071067811865475*A[2]*B[51]+0.7071067811865475*A[1]*B[28]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6172133998483679*A[3]*B[120]+0.6172133998483679*A[4]*B[86]+0.6210590034081186*A[2]*B[86]+0.6210590034081186*A[3]*B[36]+0.6324555320336759*A[1]*B[36]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[7]; 
  tmp[16] = 0.6172133998483679*A[3]*B[123]+0.6172133998483679*A[4]*B[89]+0.6210590034081186*A[2]*B[89]+0.6210590034081186*A[3]*B[39]+0.6324555320336759*A[1]*B[39]+0.6324555320336759*A[2]*B[16]+0.7071067811865475*A[0]*B[16]+0.7071067811865475*A[1]*B[9]; 
  tmp[17] = 0.6172133998483679*A[3]*B[125]+0.6172133998483679*A[4]*B[91]+0.6210590034081186*A[2]*B[91]+0.6210590034081186*A[3]*B[41]+0.6324555320336759*A[1]*B[41]+0.6324555320336759*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.7071067811865475*A[1]*B[10]; 
  tmp[18] = 0.7071067811865475*A[4]*B[132]+0.7071067811865474*A[3]*B[116]+0.7071067811865475*A[2]*B[70]+0.7071067811865475*A[1]*B[35]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.4106854104114779*A[4]*B[98]+0.6060915267313265*A[2]*B[98]+0.4216370213557839*A[3]*B[54]+0.6210590034081187*A[1]*B[54]+0.6060915267313265*A[4]*B[19]+0.4517539514526256*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[2]; 
  tmp[20] = 0.6210590034081187*A[3]*B[48]+0.632455532033676*A[1]*B[48]+0.6324555320336759*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.7071067811865475*A[1]*B[12]; 
  tmp[21] = 0.4106854104114779*A[4]*B[100]+0.6060915267313265*A[2]*B[100]+0.4216370213557839*A[3]*B[56]+0.6210590034081187*A[1]*B[56]+0.6060915267313265*A[4]*B[21]+0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.6210590034081187*A[3]*B[6]+0.632455532033676*A[1]*B[6]+0.7071067811865475*A[2]*B[3]; 
  tmp[22] = 0.7071067811865475*A[2]*B[74]+0.7071067811865475*A[1]*B[37]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.6210590034081187*A[3]*B[49]+0.632455532033676*A[1]*B[49]+0.6324555320336759*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.7071067811865475*A[1]*B[13]; 
  tmp[24] = 0.7071067811865475*A[2]*B[75]+0.7071067811865475*A[1]*B[38]+0.7071067811865475*A[0]*B[24]; 
  tmp[25] = 0.4106854104114779*A[4]*B[104]+0.6060915267313265*A[2]*B[104]+0.4216370213557839*A[3]*B[60]+0.6210590034081187*A[1]*B[60]+0.6060915267313265*A[4]*B[25]+0.4517539514526256*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.6210590034081187*A[3]*B[8]+0.632455532033676*A[1]*B[8]+0.7071067811865475*A[2]*B[4]; 
  tmp[26] = 0.7071067811865475*A[2]*B[77]+0.7071067811865475*A[1]*B[40]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.7071067811865475*A[2]*B[78]+0.7071067811865475*A[1]*B[43]+0.7071067811865475*A[0]*B[27]; 
  tmp[28] = 0.6210590034081187*A[3]*B[51]+0.632455532033676*A[1]*B[51]+0.6324555320336759*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.7071067811865475*A[1]*B[14]; 
  tmp[29] = 0.7071067811865475*A[2]*B[80]+0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.7071067811865475*A[2]*B[82]+0.7071067811865475*A[1]*B[46]+0.7071067811865475*A[0]*B[30]; 
  tmp[31] = 0.385694607919935*A[3]*B[66]+0.6172133998483679*A[1]*B[66]+0.385694607919935*A[4]*B[31]+0.421637021355784*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.421637021355784*A[3]*B[11]+0.6210590034081186*A[1]*B[11]+0.6172133998483679*B[1]*A[4]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[32] = 0.7071067811865474*A[1]*B[55]+0.7071067811865475*A[0]*B[32]; 
  tmp[33] = 0.7071067811865474*A[1]*B[58]+0.7071067811865475*A[0]*B[33]; 
  tmp[34] = 0.7071067811865474*A[1]*B[63]+0.7071067811865475*A[0]*B[34]; 
  tmp[35] = 0.6172133998483679*A[3]*B[132]+0.6172133998483678*A[4]*B[116]+0.6210590034081187*A[2]*B[116]+0.6210590034081187*A[3]*B[70]+0.632455532033676*A[1]*B[70]+0.6324555320336759*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.7071067811865475*A[1]*B[18]; 
  tmp[36] = 0.410685410411478*A[4]*B[120]+0.6060915267313265*A[2]*B[120]+0.421637021355784*A[3]*B[86]+0.6210590034081186*A[1]*B[86]+0.6060915267313265*A[4]*B[36]+0.4517539514526256*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.6210590034081186*A[3]*B[15]+0.6324555320336759*A[1]*B[15]+0.7071067811865475*A[2]*B[7]; 
  tmp[37] = 0.6210590034081186*A[3]*B[74]+0.6324555320336759*A[1]*B[74]+0.6324555320336759*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.7071067811865475*A[1]*B[22]; 
  tmp[38] = 0.6210590034081186*A[3]*B[75]+0.6324555320336759*A[1]*B[75]+0.6324555320336759*A[2]*B[38]+0.7071067811865475*A[0]*B[38]+0.7071067811865475*A[1]*B[24]; 
  tmp[39] = 0.410685410411478*A[4]*B[123]+0.6060915267313265*A[2]*B[123]+0.421637021355784*A[3]*B[89]+0.6210590034081186*A[1]*B[89]+0.6060915267313265*A[4]*B[39]+0.4517539514526256*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.6210590034081186*A[3]*B[16]+0.6324555320336759*A[1]*B[16]+0.7071067811865475*A[2]*B[9]; 
  tmp[40] = 0.6210590034081186*A[3]*B[77]+0.6324555320336759*A[1]*B[77]+0.6324555320336759*A[2]*B[40]+0.7071067811865475*A[0]*B[40]+0.7071067811865475*A[1]*B[26]; 
  tmp[41] = 0.410685410411478*A[4]*B[125]+0.6060915267313265*A[2]*B[125]+0.421637021355784*A[3]*B[91]+0.6210590034081186*A[1]*B[91]+0.6060915267313265*A[4]*B[41]+0.4517539514526256*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.6210590034081186*A[3]*B[17]+0.6324555320336759*A[1]*B[17]+0.7071067811865475*A[2]*B[10]; 
  tmp[42] = 0.7071067811865475*A[2]*B[110]+0.7071067811865475*A[1]*B[71]+0.7071067811865475*A[0]*B[42]; 
  tmp[43] = 0.6210590034081186*A[3]*B[78]+0.6324555320336759*A[1]*B[78]+0.6324555320336759*A[2]*B[43]+0.7071067811865475*A[0]*B[43]+0.7071067811865475*A[1]*B[27]; 
  tmp[44] = 0.7071067811865475*A[2]*B[111]+0.7071067811865475*A[1]*B[72]+0.7071067811865475*A[0]*B[44]; 
  tmp[45] = 0.6210590034081186*A[3]*B[80]+0.6324555320336759*A[1]*B[80]+0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[29]; 
  tmp[46] = 0.6210590034081186*A[3]*B[82]+0.6324555320336759*A[1]*B[82]+0.6324555320336759*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.7071067811865475*A[1]*B[30]; 
  tmp[47] = 0.7071067811865475*A[2]*B[113]+0.7071067811865475*A[1]*B[73]+0.7071067811865475*A[0]*B[47]; 
  tmp[48] = 0.6060915267313265*A[4]*B[48]+0.4517539514526256*A[2]*B[48]+0.7071067811865475*A[0]*B[48]+0.6210590034081187*A[3]*B[20]+0.632455532033676*A[1]*B[20]+0.7071067811865475*A[2]*B[12]; 
  tmp[49] = 0.6060915267313265*A[4]*B[49]+0.4517539514526256*A[2]*B[49]+0.7071067811865475*A[0]*B[49]+0.6210590034081187*A[3]*B[23]+0.632455532033676*A[1]*B[23]+0.7071067811865475*A[2]*B[13]; 
  tmp[50] = 0.7071067811865475*A[1]*B[76]+0.7071067811865475*A[0]*B[50]; 
  tmp[51] = 0.6060915267313265*A[4]*B[51]+0.4517539514526256*A[2]*B[51]+0.7071067811865475*A[0]*B[51]+0.6210590034081187*A[3]*B[28]+0.632455532033676*A[1]*B[28]+0.7071067811865475*A[2]*B[14]; 
  tmp[52] = 0.7071067811865475*A[1]*B[81]+0.7071067811865475*A[0]*B[52]; 
  tmp[53] = 0.7071067811865475*A[1]*B[84]+0.7071067811865475*A[0]*B[53]; 
  tmp[54] = 0.3856946079199349*A[3]*B[98]+0.6172133998483678*A[1]*B[98]+0.385694607919935*A[4]*B[54]+0.421637021355784*A[2]*B[54]+0.7071067811865475*A[0]*B[54]+0.4216370213557839*A[3]*B[19]+0.6210590034081187*A[1]*B[19]+0.6172133998483678*A[4]*B[5]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*B[2]*A[3]; 
  tmp[55] = 0.6324555320336759*A[2]*B[55]+0.7071067811865475*A[0]*B[55]+0.7071067811865474*A[1]*B[32]; 
  tmp[56] = 0.3856946079199349*A[3]*B[100]+0.6172133998483678*A[1]*B[100]+0.385694607919935*A[4]*B[56]+0.421637021355784*A[2]*B[56]+0.7071067811865475*A[0]*B[56]+0.4216370213557839*A[3]*B[21]+0.6210590034081187*A[1]*B[21]+0.6172133998483678*A[4]*B[6]+0.6210590034081187*A[2]*B[6]+0.7071067811865474*A[3]*B[3]; 
  tmp[57] = 0.7071067811865474*A[1]*B[87]+0.7071067811865475*A[0]*B[57]; 
  tmp[58] = 0.6324555320336759*A[2]*B[58]+0.7071067811865475*A[0]*B[58]+0.7071067811865474*A[1]*B[33]; 
  tmp[59] = 0.7071067811865474*A[1]*B[88]+0.7071067811865475*A[0]*B[59]; 
  tmp[60] = 0.3856946079199349*A[3]*B[104]+0.6172133998483678*A[1]*B[104]+0.385694607919935*A[4]*B[60]+0.421637021355784*A[2]*B[60]+0.7071067811865475*A[0]*B[60]+0.4216370213557839*A[3]*B[25]+0.6210590034081187*A[1]*B[25]+0.6172133998483678*A[4]*B[8]+0.6210590034081187*A[2]*B[8]+0.7071067811865474*A[3]*B[4]; 
  tmp[61] = 0.7071067811865474*A[1]*B[90]+0.7071067811865475*A[0]*B[61]; 
  tmp[62] = 0.7071067811865474*A[1]*B[93]+0.7071067811865475*A[0]*B[62]; 
  tmp[63] = 0.6324555320336759*A[2]*B[63]+0.7071067811865475*A[0]*B[63]+0.7071067811865474*A[1]*B[34]; 
  tmp[64] = 0.7071067811865474*A[1]*B[95]+0.7071067811865475*A[0]*B[64]; 
  tmp[65] = 0.7071067811865474*A[1]*B[96]+0.7071067811865475*A[0]*B[65]; 
  tmp[66] = 0.3433105850715905*A[4]*B[66]+0.410685410411478*A[2]*B[66]+0.7071067811865475*A[0]*B[66]+0.385694607919935*A[3]*B[31]+0.6172133998483679*A[1]*B[31]+0.410685410411478*A[4]*B[11]+0.6060915267313265*A[2]*B[11]+0.7071067811865475*B[0]*A[4]+0.6172133998483679*B[1]*A[3]; 
  tmp[67] = 0.7071067811865475*A[1]*B[99]+0.7071067811865475*A[0]*B[67]; 
  tmp[68] = 0.7071067811865475*A[1]*B[102]+0.7071067811865475*A[0]*B[68]; 
  tmp[69] = 0.7071067811865475*A[1]*B[107]+0.7071067811865475*A[0]*B[69]; 
  tmp[70] = 0.4106854104114779*A[4]*B[132]+0.6060915267313265*A[2]*B[132]+0.4216370213557839*A[3]*B[116]+0.6210590034081187*A[1]*B[116]+0.6060915267313265*A[4]*B[70]+0.4517539514526256*A[2]*B[70]+0.7071067811865475*A[0]*B[70]+0.6210590034081187*A[3]*B[35]+0.632455532033676*A[1]*B[35]+0.7071067811865475*A[2]*B[18]; 
  tmp[71] = 0.6210590034081187*A[3]*B[110]+0.632455532033676*A[1]*B[110]+0.6324555320336759*A[2]*B[71]+0.7071067811865475*A[0]*B[71]+0.7071067811865475*A[1]*B[42]; 
  tmp[72] = 0.6210590034081187*A[3]*B[111]+0.632455532033676*A[1]*B[111]+0.6324555320336759*A[2]*B[72]+0.7071067811865475*A[0]*B[72]+0.7071067811865475*A[1]*B[44]; 
  tmp[73] = 0.6210590034081187*A[3]*B[113]+0.632455532033676*A[1]*B[113]+0.6324555320336759*A[2]*B[73]+0.7071067811865475*A[0]*B[73]+0.7071067811865475*A[1]*B[47]; 
  tmp[74] = 0.6060915267313265*A[4]*B[74]+0.4517539514526256*A[2]*B[74]+0.7071067811865475*A[0]*B[74]+0.6210590034081186*A[3]*B[37]+0.6324555320336759*A[1]*B[37]+0.7071067811865475*A[2]*B[22]; 
  tmp[75] = 0.6060915267313265*A[4]*B[75]+0.4517539514526256*A[2]*B[75]+0.7071067811865475*A[0]*B[75]+0.6210590034081186*A[3]*B[38]+0.6324555320336759*A[1]*B[38]+0.7071067811865475*A[2]*B[24]; 
  tmp[76] = 0.6324555320336759*A[2]*B[76]+0.7071067811865475*A[0]*B[76]+0.7071067811865475*A[1]*B[50]; 
  tmp[77] = 0.6060915267313265*A[4]*B[77]+0.4517539514526256*A[2]*B[77]+0.7071067811865475*A[0]*B[77]+0.6210590034081186*A[3]*B[40]+0.6324555320336759*A[1]*B[40]+0.7071067811865475*A[2]*B[26]; 
  tmp[78] = 0.6060915267313265*A[4]*B[78]+0.4517539514526256*A[2]*B[78]+0.7071067811865475*A[0]*B[78]+0.6210590034081186*A[3]*B[43]+0.6324555320336759*A[1]*B[43]+0.7071067811865475*A[2]*B[27]; 
  tmp[79] = 0.7071067811865475*A[1]*B[112]+0.7071067811865475*A[0]*B[79]; 
  tmp[80] = 0.6060915267313265*A[4]*B[80]+0.4517539514526256*A[2]*B[80]+0.7071067811865475*A[0]*B[80]+0.6210590034081186*A[3]*B[45]+0.6324555320336759*A[1]*B[45]+0.7071067811865475*A[2]*B[29]; 
  tmp[81] = 0.6324555320336759*A[2]*B[81]+0.7071067811865475*A[0]*B[81]+0.7071067811865475*A[1]*B[52]; 
  tmp[82] = 0.6060915267313265*A[4]*B[82]+0.4517539514526256*A[2]*B[82]+0.7071067811865475*A[0]*B[82]+0.6210590034081186*A[3]*B[46]+0.6324555320336759*A[1]*B[46]+0.7071067811865475*A[2]*B[30]; 
  tmp[83] = 0.7071067811865475*A[1]*B[114]+0.7071067811865475*A[0]*B[83]; 
  tmp[84] = 0.6324555320336759*A[2]*B[84]+0.7071067811865475*A[0]*B[84]+0.7071067811865475*A[1]*B[53]; 
  tmp[85] = 0.7071067811865475*A[1]*B[115]+0.7071067811865475*A[0]*B[85]; 
  tmp[86] = 0.385694607919935*A[3]*B[120]+0.6172133998483679*A[1]*B[120]+0.385694607919935*A[4]*B[86]+0.421637021355784*A[2]*B[86]+0.7071067811865475*A[0]*B[86]+0.421637021355784*A[3]*B[36]+0.6210590034081186*A[1]*B[36]+0.6172133998483679*A[4]*B[15]+0.6210590034081186*A[2]*B[15]+0.7071067811865475*A[3]*B[7]; 
  tmp[87] = 0.6324555320336759*A[2]*B[87]+0.7071067811865475*A[0]*B[87]+0.7071067811865474*A[1]*B[57]; 
  tmp[88] = 0.6324555320336759*A[2]*B[88]+0.7071067811865475*A[0]*B[88]+0.7071067811865474*A[1]*B[59]; 
  tmp[89] = 0.385694607919935*A[3]*B[123]+0.6172133998483679*A[1]*B[123]+0.385694607919935*A[4]*B[89]+0.421637021355784*A[2]*B[89]+0.7071067811865475*A[0]*B[89]+0.421637021355784*A[3]*B[39]+0.6210590034081186*A[1]*B[39]+0.6172133998483679*A[4]*B[16]+0.6210590034081186*A[2]*B[16]+0.7071067811865475*A[3]*B[9]; 
  tmp[90] = 0.6324555320336759*A[2]*B[90]+0.7071067811865475*A[0]*B[90]+0.7071067811865474*A[1]*B[61]; 
  tmp[91] = 0.385694607919935*A[3]*B[125]+0.6172133998483679*A[1]*B[125]+0.385694607919935*A[4]*B[91]+0.421637021355784*A[2]*B[91]+0.7071067811865475*A[0]*B[91]+0.421637021355784*A[3]*B[41]+0.6210590034081186*A[1]*B[41]+0.6172133998483679*A[4]*B[17]+0.6210590034081186*A[2]*B[17]+0.7071067811865475*A[3]*B[10]; 
  tmp[92] = 0.7071067811865474*A[1]*B[117]+0.7071067811865475*A[0]*B[92]; 
  tmp[93] = 0.6324555320336759*A[2]*B[93]+0.7071067811865475*A[0]*B[93]+0.7071067811865474*A[1]*B[62]; 
  tmp[94] = 0.7071067811865474*A[1]*B[118]+0.7071067811865475*A[0]*B[94]; 
  tmp[95] = 0.6324555320336759*A[2]*B[95]+0.7071067811865475*A[0]*B[95]+0.7071067811865474*A[1]*B[64]; 
  tmp[96] = 0.6324555320336759*A[2]*B[96]+0.7071067811865475*A[0]*B[96]+0.7071067811865474*A[1]*B[65]; 
  tmp[97] = 0.7071067811865474*A[1]*B[119]+0.7071067811865475*A[0]*B[97]; 
  tmp[98] = 0.3433105850715905*A[4]*B[98]+0.410685410411478*A[2]*B[98]+0.7071067811865475*A[0]*B[98]+0.3856946079199349*A[3]*B[54]+0.6172133998483678*A[1]*B[54]+0.4106854104114779*A[4]*B[19]+0.6060915267313265*A[2]*B[19]+0.6172133998483679*A[3]*B[5]+0.7071067811865475*B[2]*A[4]; 
  tmp[99] = 0.6324555320336759*A[2]*B[99]+0.7071067811865475*A[0]*B[99]+0.7071067811865475*A[1]*B[67]; 
  tmp[100] = 0.3433105850715905*A[4]*B[100]+0.410685410411478*A[2]*B[100]+0.7071067811865475*A[0]*B[100]+0.3856946079199349*A[3]*B[56]+0.6172133998483678*A[1]*B[56]+0.4106854104114779*A[4]*B[21]+0.6060915267313265*A[2]*B[21]+0.6172133998483679*A[3]*B[6]+0.7071067811865475*B[3]*A[4]; 
  tmp[101] = 0.7071067811865475*A[1]*B[121]+0.7071067811865475*A[0]*B[101]; 
  tmp[102] = 0.6324555320336759*A[2]*B[102]+0.7071067811865475*A[0]*B[102]+0.7071067811865475*A[1]*B[68]; 
  tmp[103] = 0.7071067811865475*A[1]*B[122]+0.7071067811865475*A[0]*B[103]; 
  tmp[104] = 0.3433105850715905*A[4]*B[104]+0.410685410411478*A[2]*B[104]+0.7071067811865475*A[0]*B[104]+0.3856946079199349*A[3]*B[60]+0.6172133998483678*A[1]*B[60]+0.4106854104114779*A[4]*B[25]+0.6060915267313265*A[2]*B[25]+0.6172133998483679*A[3]*B[8]+0.7071067811865475*A[4]*B[4]; 
  tmp[105] = 0.7071067811865475*A[1]*B[124]+0.7071067811865475*A[0]*B[105]; 
  tmp[106] = 0.7071067811865475*A[1]*B[127]+0.7071067811865475*A[0]*B[106]; 
  tmp[107] = 0.6324555320336759*A[2]*B[107]+0.7071067811865475*A[0]*B[107]+0.7071067811865475*A[1]*B[69]; 
  tmp[108] = 0.7071067811865475*A[1]*B[129]+0.7071067811865475*A[0]*B[108]; 
  tmp[109] = 0.7071067811865475*A[1]*B[130]+0.7071067811865475*A[0]*B[109]; 
  tmp[110] = 0.6060915267313265*A[4]*B[110]+0.4517539514526256*A[2]*B[110]+0.7071067811865475*A[0]*B[110]+0.6210590034081187*A[3]*B[71]+0.632455532033676*A[1]*B[71]+0.7071067811865475*A[2]*B[42]; 
  tmp[111] = 0.6060915267313265*A[4]*B[111]+0.4517539514526256*A[2]*B[111]+0.7071067811865475*A[0]*B[111]+0.6210590034081187*A[3]*B[72]+0.632455532033676*A[1]*B[72]+0.7071067811865475*A[2]*B[44]; 
  tmp[112] = 0.6324555320336759*A[2]*B[112]+0.7071067811865475*A[0]*B[112]+0.7071067811865475*A[1]*B[79]; 
  tmp[113] = 0.6060915267313265*A[4]*B[113]+0.4517539514526256*A[2]*B[113]+0.7071067811865475*A[0]*B[113]+0.6210590034081187*A[3]*B[73]+0.632455532033676*A[1]*B[73]+0.7071067811865475*A[2]*B[47]; 
  tmp[114] = 0.6324555320336759*A[2]*B[114]+0.7071067811865475*A[0]*B[114]+0.7071067811865475*A[1]*B[83]; 
  tmp[115] = 0.6324555320336759*A[2]*B[115]+0.7071067811865475*A[0]*B[115]+0.7071067811865475*A[1]*B[85]; 
  tmp[116] = 0.3856946079199349*A[3]*B[132]+0.6172133998483678*A[1]*B[132]+0.385694607919935*A[4]*B[116]+0.421637021355784*A[2]*B[116]+0.7071067811865475*A[0]*B[116]+0.4216370213557839*A[3]*B[70]+0.6210590034081187*A[1]*B[70]+0.6172133998483678*A[4]*B[35]+0.6210590034081187*A[2]*B[35]+0.7071067811865474*A[3]*B[18]; 
  tmp[117] = 0.6324555320336759*A[2]*B[117]+0.7071067811865475*A[0]*B[117]+0.7071067811865474*A[1]*B[92]; 
  tmp[118] = 0.6324555320336759*A[2]*B[118]+0.7071067811865475*A[0]*B[118]+0.7071067811865474*A[1]*B[94]; 
  tmp[119] = 0.6324555320336759*A[2]*B[119]+0.7071067811865475*A[0]*B[119]+0.7071067811865474*A[1]*B[97]; 
  tmp[120] = 0.3433105850715905*A[4]*B[120]+0.410685410411478*A[2]*B[120]+0.7071067811865475*A[0]*B[120]+0.385694607919935*A[3]*B[86]+0.6172133998483679*A[1]*B[86]+0.410685410411478*A[4]*B[36]+0.6060915267313265*A[2]*B[36]+0.6172133998483679*A[3]*B[15]+0.7071067811865475*A[4]*B[7]; 
  tmp[121] = 0.6324555320336759*A[2]*B[121]+0.7071067811865475*A[0]*B[121]+0.7071067811865475*A[1]*B[101]; 
  tmp[122] = 0.6324555320336759*A[2]*B[122]+0.7071067811865475*A[0]*B[122]+0.7071067811865475*A[1]*B[103]; 
  tmp[123] = 0.3433105850715905*A[4]*B[123]+0.410685410411478*A[2]*B[123]+0.7071067811865475*A[0]*B[123]+0.385694607919935*A[3]*B[89]+0.6172133998483679*A[1]*B[89]+0.410685410411478*A[4]*B[39]+0.6060915267313265*A[2]*B[39]+0.6172133998483679*A[3]*B[16]+0.7071067811865475*A[4]*B[9]; 
  tmp[124] = 0.6324555320336759*A[2]*B[124]+0.7071067811865475*A[0]*B[124]+0.7071067811865475*A[1]*B[105]; 
  tmp[125] = 0.3433105850715905*A[4]*B[125]+0.410685410411478*A[2]*B[125]+0.7071067811865475*A[0]*B[125]+0.385694607919935*A[3]*B[91]+0.6172133998483679*A[1]*B[91]+0.410685410411478*A[4]*B[41]+0.6060915267313265*A[2]*B[41]+0.6172133998483679*A[3]*B[17]+0.7071067811865475*A[4]*B[10]; 
  tmp[126] = 0.7071067811865475*A[1]*B[133]+0.7071067811865475*A[0]*B[126]; 
  tmp[127] = 0.6324555320336759*A[2]*B[127]+0.7071067811865475*A[0]*B[127]+0.7071067811865475*A[1]*B[106]; 
  tmp[128] = 0.7071067811865475*A[1]*B[134]+0.7071067811865475*A[0]*B[128]; 
  tmp[129] = 0.6324555320336759*A[2]*B[129]+0.7071067811865475*A[0]*B[129]+0.7071067811865475*A[1]*B[108]; 
  tmp[130] = 0.6324555320336759*A[2]*B[130]+0.7071067811865475*A[0]*B[130]+0.7071067811865475*A[1]*B[109]; 
  tmp[131] = 0.7071067811865475*A[1]*B[135]+0.7071067811865475*A[0]*B[131]; 
  tmp[132] = 0.3433105850715905*A[4]*B[132]+0.410685410411478*A[2]*B[132]+0.7071067811865475*A[0]*B[132]+0.3856946079199349*A[3]*B[116]+0.6172133998483678*A[1]*B[116]+0.4106854104114779*A[4]*B[70]+0.6060915267313265*A[2]*B[70]+0.6172133998483679*A[3]*B[35]+0.7071067811865475*A[4]*B[18]; 
  tmp[133] = 0.6324555320336759*A[2]*B[133]+0.7071067811865475*A[0]*B[133]+0.7071067811865475*A[1]*B[126]; 
  tmp[134] = 0.6324555320336759*A[2]*B[134]+0.7071067811865475*A[0]*B[134]+0.7071067811865475*A[1]*B[128]; 
  tmp[135] = 0.6324555320336759*A[2]*B[135]+0.7071067811865475*A[0]*B[135]+0.7071067811865475*A[1]*B[131]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<136; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(16,16); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(16); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(16); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.7071067811865475*A[0]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,5) = 0.7071067811865475*A[1]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,6) = 0.7071067811865475*A[1]; 
  AEM(4,4) = 0.7071067811865475*A[0]; 
  AEM(4,8) = 0.7071067811865475*A[1]; 
  AEM(5,2) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.7071067811865475*A[0]; 
  AEM(6,3) = 0.7071067811865475*A[1]; 
  AEM(6,6) = 0.7071067811865475*A[0]; 
  AEM(7,7) = 0.7071067811865475*A[0]; 
  AEM(7,11) = 0.7071067811865475*A[1]; 
  AEM(8,4) = 0.7071067811865475*A[1]; 
  AEM(8,8) = 0.7071067811865475*A[0]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,12) = 0.7071067811865475*A[1]; 
  AEM(10,10) = 0.7071067811865475*A[0]; 
  AEM(10,13) = 0.7071067811865475*A[1]; 
  AEM(11,7) = 0.7071067811865475*A[1]; 
  AEM(11,11) = 0.7071067811865475*A[0]; 
  AEM(12,9) = 0.7071067811865475*A[1]; 
  AEM(12,12) = 0.7071067811865475*A[0]; 
  AEM(13,10) = 0.7071067811865475*A[1]; 
  AEM(13,13) = 0.7071067811865475*A[0]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,15) = 0.7071067811865475*A[1]; 
  AEM(15,14) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,16,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(48,48); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(48); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(48); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,11) = 0.7071067811865475*A[2]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,11) = 0.6324555320336759*A[1]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,5) = 0.7071067811865475*A[1]; 
  AEM(2,19) = 0.7071067811865475*A[2]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,6) = 0.7071067811865475*A[1]; 
  AEM(3,21) = 0.7071067811865475*A[2]; 
  AEM(4,4) = 0.7071067811865475*A[0]; 
  AEM(4,8) = 0.7071067811865475*A[1]; 
  AEM(4,25) = 0.7071067811865475*A[2]; 
  AEM(5,2) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,19) = 0.632455532033676*A[1]; 
  AEM(6,3) = 0.7071067811865475*A[1]; 
  AEM(6,6) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(6,21) = 0.632455532033676*A[1]; 
  AEM(7,7) = 0.7071067811865475*A[0]; 
  AEM(7,15) = 0.7071067811865475*A[1]; 
  AEM(7,32) = 0.7071067811865475*A[2]; 
  AEM(8,4) = 0.7071067811865475*A[1]; 
  AEM(8,8) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(8,25) = 0.632455532033676*A[1]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,16) = 0.7071067811865475*A[1]; 
  AEM(9,35) = 0.7071067811865475*A[2]; 
  AEM(10,10) = 0.7071067811865475*A[0]; 
  AEM(10,17) = 0.7071067811865475*A[1]; 
  AEM(10,37) = 0.7071067811865475*A[2]; 
  AEM(11,0) = 0.7071067811865475*A[2]; 
  AEM(11,1) = 0.6324555320336759*A[1]; 
  AEM(11,11) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(12,12) = 0.7071067811865475*A[0]; 
  AEM(12,20) = 0.7071067811865475*A[1]; 
  AEM(13,13) = 0.7071067811865475*A[0]; 
  AEM(13,23) = 0.7071067811865475*A[1]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,28) = 0.7071067811865475*A[1]; 
  AEM(15,7) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(15,32) = 0.6324555320336759*A[1]; 
  AEM(16,9) = 0.7071067811865475*A[1]; 
  AEM(16,16) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(16,35) = 0.6324555320336759*A[1]; 
  AEM(17,10) = 0.7071067811865475*A[1]; 
  AEM(17,17) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(17,37) = 0.6324555320336759*A[1]; 
  AEM(18,18) = 0.7071067811865475*A[0]; 
  AEM(18,31) = 0.7071067811865475*A[1]; 
  AEM(18,44) = 0.7071067811865475*A[2]; 
  AEM(19,2) = 0.7071067811865475*A[2]; 
  AEM(19,5) = 0.632455532033676*A[1]; 
  AEM(19,19) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(20,12) = 0.7071067811865475*A[1]; 
  AEM(20,20) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(21,3) = 0.7071067811865475*A[2]; 
  AEM(21,6) = 0.632455532033676*A[1]; 
  AEM(21,21) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(22,22) = 0.7071067811865475*A[0]; 
  AEM(22,33) = 0.7071067811865475*A[1]; 
  AEM(23,13) = 0.7071067811865475*A[1]; 
  AEM(23,23) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(24,24) = 0.7071067811865475*A[0]; 
  AEM(24,34) = 0.7071067811865475*A[1]; 
  AEM(25,4) = 0.7071067811865475*A[2]; 
  AEM(25,8) = 0.632455532033676*A[1]; 
  AEM(25,25) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(26,26) = 0.7071067811865475*A[0]; 
  AEM(26,36) = 0.7071067811865475*A[1]; 
  AEM(27,27) = 0.7071067811865475*A[0]; 
  AEM(27,39) = 0.7071067811865475*A[1]; 
  AEM(28,14) = 0.7071067811865475*A[1]; 
  AEM(28,28) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(29,29) = 0.7071067811865475*A[0]; 
  AEM(29,41) = 0.7071067811865475*A[1]; 
  AEM(30,30) = 0.7071067811865475*A[0]; 
  AEM(30,42) = 0.7071067811865475*A[1]; 
  AEM(31,18) = 0.7071067811865475*A[1]; 
  AEM(31,31) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(31,44) = 0.632455532033676*A[1]; 
  AEM(32,7) = 0.7071067811865475*A[2]; 
  AEM(32,15) = 0.6324555320336759*A[1]; 
  AEM(32,32) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(33,22) = 0.7071067811865475*A[1]; 
  AEM(33,33) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(34,24) = 0.7071067811865475*A[1]; 
  AEM(34,34) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(35,9) = 0.7071067811865475*A[2]; 
  AEM(35,16) = 0.6324555320336759*A[1]; 
  AEM(35,35) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(36,26) = 0.7071067811865475*A[1]; 
  AEM(36,36) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(37,10) = 0.7071067811865475*A[2]; 
  AEM(37,17) = 0.6324555320336759*A[1]; 
  AEM(37,37) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(38,38) = 0.7071067811865475*A[0]; 
  AEM(38,45) = 0.7071067811865475*A[1]; 
  AEM(39,27) = 0.7071067811865475*A[1]; 
  AEM(39,39) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(40,40) = 0.7071067811865475*A[0]; 
  AEM(40,46) = 0.7071067811865475*A[1]; 
  AEM(41,29) = 0.7071067811865475*A[1]; 
  AEM(41,41) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(42,30) = 0.7071067811865475*A[1]; 
  AEM(42,42) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(43,43) = 0.7071067811865475*A[0]; 
  AEM(43,47) = 0.7071067811865475*A[1]; 
  AEM(44,18) = 0.7071067811865475*A[2]; 
  AEM(44,31) = 0.632455532033676*A[1]; 
  AEM(44,44) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(45,38) = 0.7071067811865475*A[1]; 
  AEM(45,45) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(46,40) = 0.7071067811865475*A[1]; 
  AEM(46,46) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(47,43) = 0.7071067811865475*A[1]; 
  AEM(47,47) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,48,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(80,80); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(80); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(80); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,11) = 0.7071067811865475*A[2]; 
  AEM(0,31) = 0.7071067811865475*A[3]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,11) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(1,31) = 0.6210590034081186*A[2]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,5) = 0.7071067811865475*A[1]; 
  AEM(2,19) = 0.7071067811865475*A[2]; 
  AEM(2,48) = 0.7071067811865474*A[3]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,6) = 0.7071067811865475*A[1]; 
  AEM(3,21) = 0.7071067811865475*A[2]; 
  AEM(3,50) = 0.7071067811865474*A[3]; 
  AEM(4,4) = 0.7071067811865475*A[0]; 
  AEM(4,8) = 0.7071067811865475*A[1]; 
  AEM(4,25) = 0.7071067811865475*A[2]; 
  AEM(4,54) = 0.7071067811865474*A[3]; 
  AEM(5,2) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,19) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(5,48) = 0.6210590034081187*A[2]; 
  AEM(6,3) = 0.7071067811865475*A[1]; 
  AEM(6,6) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(6,21) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(6,50) = 0.6210590034081187*A[2]; 
  AEM(7,7) = 0.7071067811865475*A[0]; 
  AEM(7,15) = 0.7071067811865475*A[1]; 
  AEM(7,36) = 0.7071067811865475*A[2]; 
  AEM(7,64) = 0.7071067811865475*A[3]; 
  AEM(8,4) = 0.7071067811865475*A[1]; 
  AEM(8,8) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(8,25) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(8,54) = 0.6210590034081187*A[2]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,16) = 0.7071067811865475*A[1]; 
  AEM(9,39) = 0.7071067811865475*A[2]; 
  AEM(9,67) = 0.7071067811865475*A[3]; 
  AEM(10,10) = 0.7071067811865475*A[0]; 
  AEM(10,17) = 0.7071067811865475*A[1]; 
  AEM(10,41) = 0.7071067811865475*A[2]; 
  AEM(10,69) = 0.7071067811865475*A[3]; 
  AEM(11,0) = 0.7071067811865475*A[2]; 
  AEM(11,1) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(11,11) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(11,31) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(12,12) = 0.7071067811865475*A[0]; 
  AEM(12,20) = 0.7071067811865475*A[1]; 
  AEM(13,13) = 0.7071067811865475*A[0]; 
  AEM(13,23) = 0.7071067811865475*A[1]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,28) = 0.7071067811865475*A[1]; 
  AEM(15,7) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(15,36) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(15,64) = 0.6210590034081186*A[2]; 
  AEM(16,9) = 0.7071067811865475*A[1]; 
  AEM(16,16) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(16,39) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(16,67) = 0.6210590034081186*A[2]; 
  AEM(17,10) = 0.7071067811865475*A[1]; 
  AEM(17,17) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(17,41) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(17,69) = 0.6210590034081186*A[2]; 
  AEM(18,18) = 0.7071067811865475*A[0]; 
  AEM(18,35) = 0.7071067811865475*A[1]; 
  AEM(18,60) = 0.7071067811865475*A[2]; 
  AEM(18,76) = 0.7071067811865474*A[3]; 
  AEM(19,2) = 0.7071067811865475*A[2]; 
  AEM(19,5) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(19,19) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(19,48) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(20,12) = 0.7071067811865475*A[1]; 
  AEM(20,20) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(21,3) = 0.7071067811865475*A[2]; 
  AEM(21,6) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(21,21) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(21,50) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(22,22) = 0.7071067811865475*A[0]; 
  AEM(22,37) = 0.7071067811865475*A[1]; 
  AEM(23,13) = 0.7071067811865475*A[1]; 
  AEM(23,23) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(24,24) = 0.7071067811865475*A[0]; 
  AEM(24,38) = 0.7071067811865475*A[1]; 
  AEM(25,4) = 0.7071067811865475*A[2]; 
  AEM(25,8) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(25,25) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(25,54) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(26,26) = 0.7071067811865475*A[0]; 
  AEM(26,40) = 0.7071067811865475*A[1]; 
  AEM(27,27) = 0.7071067811865475*A[0]; 
  AEM(27,43) = 0.7071067811865475*A[1]; 
  AEM(28,14) = 0.7071067811865475*A[1]; 
  AEM(28,28) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(29,29) = 0.7071067811865475*A[0]; 
  AEM(29,45) = 0.7071067811865475*A[1]; 
  AEM(30,30) = 0.7071067811865475*A[0]; 
  AEM(30,46) = 0.7071067811865475*A[1]; 
  AEM(31,0) = 0.7071067811865475*A[3]; 
  AEM(31,1) = 0.6210590034081186*A[2]; 
  AEM(31,11) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(31,31) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(32,32) = 0.7071067811865475*A[0]; 
  AEM(32,49) = 0.7071067811865474*A[1]; 
  AEM(33,33) = 0.7071067811865475*A[0]; 
  AEM(33,52) = 0.7071067811865474*A[1]; 
  AEM(34,34) = 0.7071067811865475*A[0]; 
  AEM(34,57) = 0.7071067811865474*A[1]; 
  AEM(35,18) = 0.7071067811865475*A[1]; 
  AEM(35,35) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(35,60) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(35,76) = 0.6210590034081187*A[2]; 
  AEM(36,7) = 0.7071067811865475*A[2]; 
  AEM(36,15) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(36,36) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(36,64) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(37,22) = 0.7071067811865475*A[1]; 
  AEM(37,37) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(38,24) = 0.7071067811865475*A[1]; 
  AEM(38,38) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(39,9) = 0.7071067811865475*A[2]; 
  AEM(39,16) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(39,39) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(39,67) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(40,26) = 0.7071067811865475*A[1]; 
  AEM(40,40) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(41,10) = 0.7071067811865475*A[2]; 
  AEM(41,17) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(41,41) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(41,69) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(42,42) = 0.7071067811865475*A[0]; 
  AEM(42,61) = 0.7071067811865475*A[1]; 
  AEM(43,27) = 0.7071067811865475*A[1]; 
  AEM(43,43) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(44,44) = 0.7071067811865475*A[0]; 
  AEM(44,62) = 0.7071067811865475*A[1]; 
  AEM(45,29) = 0.7071067811865475*A[1]; 
  AEM(45,45) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(46,30) = 0.7071067811865475*A[1]; 
  AEM(46,46) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(47,47) = 0.7071067811865475*A[0]; 
  AEM(47,63) = 0.7071067811865475*A[1]; 
  AEM(48,2) = 0.7071067811865474*A[3]; 
  AEM(48,5) = 0.6210590034081187*A[2]; 
  AEM(48,19) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(48,48) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(49,32) = 0.7071067811865474*A[1]; 
  AEM(49,49) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(50,3) = 0.7071067811865474*A[3]; 
  AEM(50,6) = 0.6210590034081187*A[2]; 
  AEM(50,21) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(50,50) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(51,51) = 0.7071067811865475*A[0]; 
  AEM(51,65) = 0.7071067811865474*A[1]; 
  AEM(52,33) = 0.7071067811865474*A[1]; 
  AEM(52,52) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(53,53) = 0.7071067811865475*A[0]; 
  AEM(53,66) = 0.7071067811865474*A[1]; 
  AEM(54,4) = 0.7071067811865474*A[3]; 
  AEM(54,8) = 0.6210590034081187*A[2]; 
  AEM(54,25) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(54,54) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(55,55) = 0.7071067811865475*A[0]; 
  AEM(55,68) = 0.7071067811865474*A[1]; 
  AEM(56,56) = 0.7071067811865475*A[0]; 
  AEM(56,71) = 0.7071067811865474*A[1]; 
  AEM(57,34) = 0.7071067811865474*A[1]; 
  AEM(57,57) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(58,58) = 0.7071067811865475*A[0]; 
  AEM(58,73) = 0.7071067811865474*A[1]; 
  AEM(59,59) = 0.7071067811865475*A[0]; 
  AEM(59,74) = 0.7071067811865474*A[1]; 
  AEM(60,18) = 0.7071067811865475*A[2]; 
  AEM(60,35) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(60,60) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(60,76) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(61,42) = 0.7071067811865475*A[1]; 
  AEM(61,61) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(62,44) = 0.7071067811865475*A[1]; 
  AEM(62,62) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(63,47) = 0.7071067811865475*A[1]; 
  AEM(63,63) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(64,7) = 0.7071067811865475*A[3]; 
  AEM(64,15) = 0.6210590034081186*A[2]; 
  AEM(64,36) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(64,64) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(65,51) = 0.7071067811865474*A[1]; 
  AEM(65,65) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(66,53) = 0.7071067811865474*A[1]; 
  AEM(66,66) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(67,9) = 0.7071067811865475*A[3]; 
  AEM(67,16) = 0.6210590034081186*A[2]; 
  AEM(67,39) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(67,67) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(68,55) = 0.7071067811865474*A[1]; 
  AEM(68,68) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(69,10) = 0.7071067811865475*A[3]; 
  AEM(69,17) = 0.6210590034081186*A[2]; 
  AEM(69,41) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(69,69) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(70,70) = 0.7071067811865475*A[0]; 
  AEM(70,77) = 0.7071067811865474*A[1]; 
  AEM(71,56) = 0.7071067811865474*A[1]; 
  AEM(71,71) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(72,72) = 0.7071067811865475*A[0]; 
  AEM(72,78) = 0.7071067811865474*A[1]; 
  AEM(73,58) = 0.7071067811865474*A[1]; 
  AEM(73,73) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(74,59) = 0.7071067811865474*A[1]; 
  AEM(74,74) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(75,75) = 0.7071067811865475*A[0]; 
  AEM(75,79) = 0.7071067811865474*A[1]; 
  AEM(76,18) = 0.7071067811865474*A[3]; 
  AEM(76,35) = 0.6210590034081187*A[2]; 
  AEM(76,60) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(76,76) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(77,70) = 0.7071067811865474*A[1]; 
  AEM(77,77) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(78,72) = 0.7071067811865474*A[1]; 
  AEM(78,78) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(79,75) = 0.7071067811865474*A[1]; 
  AEM(79,79) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47],B[48],B[49],B[50],B[51],B[52],B[53],B[54],B[55],B[56],B[57],B[58],B[59],B[60],B[61],B[62],B[63],B[64],B[65],B[66],B[67],B[68],B[69],B[70],B[71],B[72],B[73],B[74],B[75],B[76],B[77],B[78],B[79]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,80,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x3vSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(136,136); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(136); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(136); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,11) = 0.7071067811865475*A[2]; 
  AEM(0,31) = 0.7071067811865475*A[3]; 
  AEM(0,66) = 0.7071067811865475*A[4]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,11) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(1,31) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(1,66) = 0.6172133998483679*A[3]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,5) = 0.7071067811865475*A[1]; 
  AEM(2,19) = 0.7071067811865475*A[2]; 
  AEM(2,54) = 0.7071067811865474*A[3]; 
  AEM(2,98) = 0.7071067811865475*A[4]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,6) = 0.7071067811865475*A[1]; 
  AEM(3,21) = 0.7071067811865475*A[2]; 
  AEM(3,56) = 0.7071067811865474*A[3]; 
  AEM(3,100) = 0.7071067811865475*A[4]; 
  AEM(4,4) = 0.7071067811865475*A[0]; 
  AEM(4,8) = 0.7071067811865475*A[1]; 
  AEM(4,25) = 0.7071067811865475*A[2]; 
  AEM(4,60) = 0.7071067811865474*A[3]; 
  AEM(4,104) = 0.7071067811865475*A[4]; 
  AEM(5,2) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,19) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(5,54) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(5,98) = 0.6172133998483679*A[3]; 
  AEM(6,3) = 0.7071067811865475*A[1]; 
  AEM(6,6) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(6,21) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(6,56) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(6,100) = 0.6172133998483679*A[3]; 
  AEM(7,7) = 0.7071067811865475*A[0]; 
  AEM(7,15) = 0.7071067811865475*A[1]; 
  AEM(7,36) = 0.7071067811865475*A[2]; 
  AEM(7,86) = 0.7071067811865475*A[3]; 
  AEM(7,120) = 0.7071067811865475*A[4]; 
  AEM(8,4) = 0.7071067811865475*A[1]; 
  AEM(8,8) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(8,25) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(8,60) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(8,104) = 0.6172133998483679*A[3]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,16) = 0.7071067811865475*A[1]; 
  AEM(9,39) = 0.7071067811865475*A[2]; 
  AEM(9,89) = 0.7071067811865475*A[3]; 
  AEM(9,123) = 0.7071067811865475*A[4]; 
  AEM(10,10) = 0.7071067811865475*A[0]; 
  AEM(10,17) = 0.7071067811865475*A[1]; 
  AEM(10,41) = 0.7071067811865475*A[2]; 
  AEM(10,91) = 0.7071067811865475*A[3]; 
  AEM(10,125) = 0.7071067811865475*A[4]; 
  AEM(11,0) = 0.7071067811865475*A[2]; 
  AEM(11,1) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(11,11) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(11,31) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(11,66) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(12,12) = 0.7071067811865475*A[0]; 
  AEM(12,20) = 0.7071067811865475*A[1]; 
  AEM(12,48) = 0.7071067811865475*A[2]; 
  AEM(13,13) = 0.7071067811865475*A[0]; 
  AEM(13,23) = 0.7071067811865475*A[1]; 
  AEM(13,49) = 0.7071067811865475*A[2]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,28) = 0.7071067811865475*A[1]; 
  AEM(14,51) = 0.7071067811865475*A[2]; 
  AEM(15,7) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(15,36) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(15,86) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(15,120) = 0.6172133998483679*A[3]; 
  AEM(16,9) = 0.7071067811865475*A[1]; 
  AEM(16,16) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(16,39) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(16,89) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(16,123) = 0.6172133998483679*A[3]; 
  AEM(17,10) = 0.7071067811865475*A[1]; 
  AEM(17,17) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(17,41) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(17,91) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(17,125) = 0.6172133998483679*A[3]; 
  AEM(18,18) = 0.7071067811865475*A[0]; 
  AEM(18,35) = 0.7071067811865475*A[1]; 
  AEM(18,70) = 0.7071067811865475*A[2]; 
  AEM(18,116) = 0.7071067811865474*A[3]; 
  AEM(18,132) = 0.7071067811865475*A[4]; 
  AEM(19,2) = 0.7071067811865475*A[2]; 
  AEM(19,5) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(19,19) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(19,54) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(19,98) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(20,12) = 0.7071067811865475*A[1]; 
  AEM(20,20) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(20,48) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(21,3) = 0.7071067811865475*A[2]; 
  AEM(21,6) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(21,21) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(21,56) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(21,100) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(22,22) = 0.7071067811865475*A[0]; 
  AEM(22,37) = 0.7071067811865475*A[1]; 
  AEM(22,74) = 0.7071067811865475*A[2]; 
  AEM(23,13) = 0.7071067811865475*A[1]; 
  AEM(23,23) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(23,49) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(24,24) = 0.7071067811865475*A[0]; 
  AEM(24,38) = 0.7071067811865475*A[1]; 
  AEM(24,75) = 0.7071067811865475*A[2]; 
  AEM(25,4) = 0.7071067811865475*A[2]; 
  AEM(25,8) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(25,25) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(25,60) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(25,104) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(26,26) = 0.7071067811865475*A[0]; 
  AEM(26,40) = 0.7071067811865475*A[1]; 
  AEM(26,77) = 0.7071067811865475*A[2]; 
  AEM(27,27) = 0.7071067811865475*A[0]; 
  AEM(27,43) = 0.7071067811865475*A[1]; 
  AEM(27,78) = 0.7071067811865475*A[2]; 
  AEM(28,14) = 0.7071067811865475*A[1]; 
  AEM(28,28) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(28,51) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(29,29) = 0.7071067811865475*A[0]; 
  AEM(29,45) = 0.7071067811865475*A[1]; 
  AEM(29,80) = 0.7071067811865475*A[2]; 
  AEM(30,30) = 0.7071067811865475*A[0]; 
  AEM(30,46) = 0.7071067811865475*A[1]; 
  AEM(30,82) = 0.7071067811865475*A[2]; 
  AEM(31,0) = 0.7071067811865475*A[3]; 
  AEM(31,1) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(31,11) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(31,31) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(31,66) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(32,32) = 0.7071067811865475*A[0]; 
  AEM(32,55) = 0.7071067811865474*A[1]; 
  AEM(33,33) = 0.7071067811865475*A[0]; 
  AEM(33,58) = 0.7071067811865474*A[1]; 
  AEM(34,34) = 0.7071067811865475*A[0]; 
  AEM(34,63) = 0.7071067811865474*A[1]; 
  AEM(35,18) = 0.7071067811865475*A[1]; 
  AEM(35,35) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(35,70) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(35,116) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(35,132) = 0.6172133998483679*A[3]; 
  AEM(36,7) = 0.7071067811865475*A[2]; 
  AEM(36,15) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(36,36) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(36,86) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(36,120) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(37,22) = 0.7071067811865475*A[1]; 
  AEM(37,37) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(37,74) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(38,24) = 0.7071067811865475*A[1]; 
  AEM(38,38) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(38,75) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(39,9) = 0.7071067811865475*A[2]; 
  AEM(39,16) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(39,39) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(39,89) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(39,123) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(40,26) = 0.7071067811865475*A[1]; 
  AEM(40,40) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(40,77) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(41,10) = 0.7071067811865475*A[2]; 
  AEM(41,17) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(41,41) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(41,91) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(41,125) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(42,42) = 0.7071067811865475*A[0]; 
  AEM(42,71) = 0.7071067811865475*A[1]; 
  AEM(42,110) = 0.7071067811865475*A[2]; 
  AEM(43,27) = 0.7071067811865475*A[1]; 
  AEM(43,43) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(43,78) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(44,44) = 0.7071067811865475*A[0]; 
  AEM(44,72) = 0.7071067811865475*A[1]; 
  AEM(44,111) = 0.7071067811865475*A[2]; 
  AEM(45,29) = 0.7071067811865475*A[1]; 
  AEM(45,45) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(45,80) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(46,30) = 0.7071067811865475*A[1]; 
  AEM(46,46) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(46,82) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(47,47) = 0.7071067811865475*A[0]; 
  AEM(47,73) = 0.7071067811865475*A[1]; 
  AEM(47,113) = 0.7071067811865475*A[2]; 
  AEM(48,12) = 0.7071067811865475*A[2]; 
  AEM(48,20) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(48,48) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(49,13) = 0.7071067811865475*A[2]; 
  AEM(49,23) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(49,49) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(50,50) = 0.7071067811865475*A[0]; 
  AEM(50,76) = 0.7071067811865475*A[1]; 
  AEM(51,14) = 0.7071067811865475*A[2]; 
  AEM(51,28) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(51,51) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(52,52) = 0.7071067811865475*A[0]; 
  AEM(52,81) = 0.7071067811865475*A[1]; 
  AEM(53,53) = 0.7071067811865475*A[0]; 
  AEM(53,84) = 0.7071067811865475*A[1]; 
  AEM(54,2) = 0.7071067811865474*A[3]; 
  AEM(54,5) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(54,19) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(54,54) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(54,98) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(55,32) = 0.7071067811865474*A[1]; 
  AEM(55,55) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(56,3) = 0.7071067811865474*A[3]; 
  AEM(56,6) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(56,21) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(56,56) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(56,100) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(57,57) = 0.7071067811865475*A[0]; 
  AEM(57,87) = 0.7071067811865474*A[1]; 
  AEM(58,33) = 0.7071067811865474*A[1]; 
  AEM(58,58) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(59,59) = 0.7071067811865475*A[0]; 
  AEM(59,88) = 0.7071067811865474*A[1]; 
  AEM(60,4) = 0.7071067811865474*A[3]; 
  AEM(60,8) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(60,25) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(60,60) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(60,104) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(61,61) = 0.7071067811865475*A[0]; 
  AEM(61,90) = 0.7071067811865474*A[1]; 
  AEM(62,62) = 0.7071067811865475*A[0]; 
  AEM(62,93) = 0.7071067811865474*A[1]; 
  AEM(63,34) = 0.7071067811865474*A[1]; 
  AEM(63,63) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(64,64) = 0.7071067811865475*A[0]; 
  AEM(64,95) = 0.7071067811865474*A[1]; 
  AEM(65,65) = 0.7071067811865475*A[0]; 
  AEM(65,96) = 0.7071067811865474*A[1]; 
  AEM(66,0) = 0.7071067811865475*A[4]; 
  AEM(66,1) = 0.6172133998483679*A[3]; 
  AEM(66,11) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(66,31) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(66,66) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(67,67) = 0.7071067811865475*A[0]; 
  AEM(67,99) = 0.7071067811865475*A[1]; 
  AEM(68,68) = 0.7071067811865475*A[0]; 
  AEM(68,102) = 0.7071067811865475*A[1]; 
  AEM(69,69) = 0.7071067811865475*A[0]; 
  AEM(69,107) = 0.7071067811865475*A[1]; 
  AEM(70,18) = 0.7071067811865475*A[2]; 
  AEM(70,35) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(70,70) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(70,116) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(70,132) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(71,42) = 0.7071067811865475*A[1]; 
  AEM(71,71) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(71,110) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(72,44) = 0.7071067811865475*A[1]; 
  AEM(72,72) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(72,111) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(73,47) = 0.7071067811865475*A[1]; 
  AEM(73,73) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(73,113) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(74,22) = 0.7071067811865475*A[2]; 
  AEM(74,37) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(74,74) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(75,24) = 0.7071067811865475*A[2]; 
  AEM(75,38) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(75,75) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(76,50) = 0.7071067811865475*A[1]; 
  AEM(76,76) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(77,26) = 0.7071067811865475*A[2]; 
  AEM(77,40) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(77,77) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(78,27) = 0.7071067811865475*A[2]; 
  AEM(78,43) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(78,78) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(79,79) = 0.7071067811865475*A[0]; 
  AEM(79,112) = 0.7071067811865475*A[1]; 
  AEM(80,29) = 0.7071067811865475*A[2]; 
  AEM(80,45) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(80,80) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(81,52) = 0.7071067811865475*A[1]; 
  AEM(81,81) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(82,30) = 0.7071067811865475*A[2]; 
  AEM(82,46) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(82,82) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(83,83) = 0.7071067811865475*A[0]; 
  AEM(83,114) = 0.7071067811865475*A[1]; 
  AEM(84,53) = 0.7071067811865475*A[1]; 
  AEM(84,84) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(85,85) = 0.7071067811865475*A[0]; 
  AEM(85,115) = 0.7071067811865475*A[1]; 
  AEM(86,7) = 0.7071067811865475*A[3]; 
  AEM(86,15) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(86,36) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(86,86) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(86,120) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(87,57) = 0.7071067811865474*A[1]; 
  AEM(87,87) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(88,59) = 0.7071067811865474*A[1]; 
  AEM(88,88) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(89,9) = 0.7071067811865475*A[3]; 
  AEM(89,16) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(89,39) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(89,89) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(89,123) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(90,61) = 0.7071067811865474*A[1]; 
  AEM(90,90) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(91,10) = 0.7071067811865475*A[3]; 
  AEM(91,17) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(91,41) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(91,91) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(91,125) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(92,92) = 0.7071067811865475*A[0]; 
  AEM(92,117) = 0.7071067811865474*A[1]; 
  AEM(93,62) = 0.7071067811865474*A[1]; 
  AEM(93,93) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(94,94) = 0.7071067811865475*A[0]; 
  AEM(94,118) = 0.7071067811865474*A[1]; 
  AEM(95,64) = 0.7071067811865474*A[1]; 
  AEM(95,95) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(96,65) = 0.7071067811865474*A[1]; 
  AEM(96,96) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(97,97) = 0.7071067811865475*A[0]; 
  AEM(97,119) = 0.7071067811865474*A[1]; 
  AEM(98,2) = 0.7071067811865475*A[4]; 
  AEM(98,5) = 0.6172133998483679*A[3]; 
  AEM(98,19) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(98,54) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(98,98) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(99,67) = 0.7071067811865475*A[1]; 
  AEM(99,99) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(100,3) = 0.7071067811865475*A[4]; 
  AEM(100,6) = 0.6172133998483679*A[3]; 
  AEM(100,21) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(100,56) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(100,100) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(101,101) = 0.7071067811865475*A[0]; 
  AEM(101,121) = 0.7071067811865475*A[1]; 
  AEM(102,68) = 0.7071067811865475*A[1]; 
  AEM(102,102) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(103,103) = 0.7071067811865475*A[0]; 
  AEM(103,122) = 0.7071067811865475*A[1]; 
  AEM(104,4) = 0.7071067811865475*A[4]; 
  AEM(104,8) = 0.6172133998483679*A[3]; 
  AEM(104,25) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(104,60) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(104,104) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(105,105) = 0.7071067811865475*A[0]; 
  AEM(105,124) = 0.7071067811865475*A[1]; 
  AEM(106,106) = 0.7071067811865475*A[0]; 
  AEM(106,127) = 0.7071067811865475*A[1]; 
  AEM(107,69) = 0.7071067811865475*A[1]; 
  AEM(107,107) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(108,108) = 0.7071067811865475*A[0]; 
  AEM(108,129) = 0.7071067811865475*A[1]; 
  AEM(109,109) = 0.7071067811865475*A[0]; 
  AEM(109,130) = 0.7071067811865475*A[1]; 
  AEM(110,42) = 0.7071067811865475*A[2]; 
  AEM(110,71) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(110,110) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(111,44) = 0.7071067811865475*A[2]; 
  AEM(111,72) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(111,111) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(112,79) = 0.7071067811865475*A[1]; 
  AEM(112,112) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(113,47) = 0.7071067811865475*A[2]; 
  AEM(113,73) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(113,113) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(114,83) = 0.7071067811865475*A[1]; 
  AEM(114,114) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(115,85) = 0.7071067811865475*A[1]; 
  AEM(115,115) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(116,18) = 0.7071067811865474*A[3]; 
  AEM(116,35) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(116,70) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(116,116) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(116,132) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(117,92) = 0.7071067811865474*A[1]; 
  AEM(117,117) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(118,94) = 0.7071067811865474*A[1]; 
  AEM(118,118) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(119,97) = 0.7071067811865474*A[1]; 
  AEM(119,119) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(120,7) = 0.7071067811865475*A[4]; 
  AEM(120,15) = 0.6172133998483679*A[3]; 
  AEM(120,36) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(120,86) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(120,120) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(121,101) = 0.7071067811865475*A[1]; 
  AEM(121,121) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(122,103) = 0.7071067811865475*A[1]; 
  AEM(122,122) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(123,9) = 0.7071067811865475*A[4]; 
  AEM(123,16) = 0.6172133998483679*A[3]; 
  AEM(123,39) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(123,89) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(123,123) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(124,105) = 0.7071067811865475*A[1]; 
  AEM(124,124) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(125,10) = 0.7071067811865475*A[4]; 
  AEM(125,17) = 0.6172133998483679*A[3]; 
  AEM(125,41) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(125,91) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(125,125) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(126,126) = 0.7071067811865475*A[0]; 
  AEM(126,133) = 0.7071067811865475*A[1]; 
  AEM(127,106) = 0.7071067811865475*A[1]; 
  AEM(127,127) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(128,128) = 0.7071067811865475*A[0]; 
  AEM(128,134) = 0.7071067811865475*A[1]; 
  AEM(129,108) = 0.7071067811865475*A[1]; 
  AEM(129,129) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(130,109) = 0.7071067811865475*A[1]; 
  AEM(130,130) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(131,131) = 0.7071067811865475*A[0]; 
  AEM(131,135) = 0.7071067811865475*A[1]; 
  AEM(132,18) = 0.7071067811865475*A[4]; 
  AEM(132,35) = 0.6172133998483679*A[3]; 
  AEM(132,70) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(132,116) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(132,132) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(133,126) = 0.7071067811865475*A[1]; 
  AEM(133,133) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(134,128) = 0.7071067811865475*A[1]; 
  AEM(134,134) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(135,131) = 0.7071067811865475*A[1]; 
  AEM(135,135) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47],B[48],B[49],B[50],B[51],B[52],B[53],B[54],B[55],B[56],B[57],B[58],B[59],B[60],B[61],B[62],B[63],B[64],B[65],B[66],B[67],B[68],B[69],B[70],B[71],B[72],B[73],B[74],B[75],B[76],B[77],B[78],B[79],B[80],B[81],B[82],B[83],B[84],B[85],B[86],B[87],B[88],B[89],B[90],B[91],B[92],B[93],B[94],B[95],B[96],B[97],B[98],B[99],B[100],B[101],B[102],B[103],B[104],B[105],B[106],B[107],B[108],B[109],B[110],B[111],B[112],B[113],B[114],B[115],B[116],B[117],B[118],B[119],B[120],B[121],B[122],B[123],B[124],B[125],B[126],B[127],B[128],B[129],B[130],B[131],B[132],B[133],B[134],B[135]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,136,1) = u; 
 
} 
 
