#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x2vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[8]; 
  tmp[0] = 0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[1]*B[7]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.7071067811865475*A[0]*B[7]+0.7071067811865475*A[1]*B[6]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<8; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x2vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[20]; 
  tmp[0] = 0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.632455532033676*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.632455532033676*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[2]*B[17]+0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.4517539514526256*A[2]*B[7]+0.7071067811865475*A[0]*B[7]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6324555320336759*A[1]*B[17]+0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.632455532033676*A[1]*B[4]+0.7071067811865475*A[2]*B[2]; 
  tmp[12] = 0.6324555320336759*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4517539514526256*A[2]*B[13]+0.7071067811865475*A[0]*B[13]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[3]; 
  tmp[14] = 0.7071067811865475*A[1]*B[18]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865475*A[1]*B[19]+0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.4517539514526256*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.6324555320336759*A[1]*B[10]+0.7071067811865475*A[2]*B[6]; 
  tmp[18] = 0.6324555320336759*A[2]*B[18]+0.7071067811865475*A[0]*B[18]+0.7071067811865475*A[1]*B[14]; 
  tmp[19] = 0.6324555320336759*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.7071067811865475*A[1]*B[16]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<20; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x2vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[32]; 
  tmp[0] = 0.7071067811865475*A[3]*B[17]+0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6210590034081186*A[2]*B[17]+0.6210590034081186*A[3]*B[7]+0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865474*A[3]*B[23]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865474*A[3]*B[25]+0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.6210590034081187*A[2]*B[23]+0.6210590034081187*A[3]*B[11]+0.632455532033676*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.6210590034081187*A[2]*B[25]+0.6210590034081187*A[3]*B[13]+0.632455532033676*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[3]*B[29]+0.7071067811865475*A[2]*B[20]+0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.421637021355784*A[3]*B[17]+0.6210590034081186*A[1]*B[17]+0.4517539514526256*A[2]*B[7]+0.7071067811865475*A[0]*B[7]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6210590034081186*A[2]*B[29]+0.6210590034081186*A[3]*B[20]+0.6324555320336759*A[1]*B[20]+0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4216370213557839*A[3]*B[23]+0.6210590034081187*A[1]*B[23]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081187*A[3]*B[4]+0.632455532033676*A[1]*B[4]+0.7071067811865475*A[2]*B[2]; 
  tmp[12] = 0.6324555320336759*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4216370213557839*A[3]*B[25]+0.6210590034081187*A[1]*B[25]+0.4517539514526256*A[2]*B[13]+0.7071067811865475*A[0]*B[13]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[3]; 
  tmp[14] = 0.7071067811865475*A[1]*B[21]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865475*A[1]*B[22]+0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.421637021355784*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.421637021355784*A[3]*B[7]+0.6210590034081186*A[1]*B[7]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[18] = 0.7071067811865474*A[1]*B[24]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.7071067811865474*A[1]*B[27]+0.7071067811865475*A[0]*B[19]; 
  tmp[20] = 0.421637021355784*A[3]*B[29]+0.6210590034081186*A[1]*B[29]+0.4517539514526256*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.6210590034081186*A[3]*B[10]+0.6324555320336759*A[1]*B[10]+0.7071067811865475*A[2]*B[6]; 
  tmp[21] = 0.6324555320336759*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.7071067811865475*A[1]*B[14]; 
  tmp[22] = 0.6324555320336759*A[2]*B[22]+0.7071067811865475*A[0]*B[22]+0.7071067811865475*A[1]*B[16]; 
  tmp[23] = 0.421637021355784*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.4216370213557839*A[3]*B[11]+0.6210590034081187*A[1]*B[11]+0.6210590034081187*A[2]*B[4]+0.7071067811865474*B[2]*A[3]; 
  tmp[24] = 0.6324555320336759*A[2]*B[24]+0.7071067811865475*A[0]*B[24]+0.7071067811865474*A[1]*B[18]; 
  tmp[25] = 0.421637021355784*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.4216370213557839*A[3]*B[13]+0.6210590034081187*A[1]*B[13]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*A[3]*B[3]; 
  tmp[26] = 0.7071067811865474*A[1]*B[30]+0.7071067811865475*A[0]*B[26]; 
  tmp[27] = 0.6324555320336759*A[2]*B[27]+0.7071067811865475*A[0]*B[27]+0.7071067811865474*A[1]*B[19]; 
  tmp[28] = 0.7071067811865474*A[1]*B[31]+0.7071067811865475*A[0]*B[28]; 
  tmp[29] = 0.421637021355784*A[2]*B[29]+0.7071067811865475*A[0]*B[29]+0.421637021355784*A[3]*B[20]+0.6210590034081186*A[1]*B[20]+0.6210590034081186*A[2]*B[10]+0.7071067811865475*A[3]*B[6]; 
  tmp[30] = 0.6324555320336759*A[2]*B[30]+0.7071067811865475*A[0]*B[30]+0.7071067811865474*A[1]*B[26]; 
  tmp[31] = 0.6324555320336759*A[2]*B[31]+0.7071067811865475*A[0]*B[31]+0.7071067811865474*A[1]*B[28]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<32; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x2vSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[50]; 
  tmp[0] = 0.7071067811865475*A[4]*B[32]+0.7071067811865475*A[3]*B[17]+0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6172133998483679*A[3]*B[32]+0.6172133998483679*A[4]*B[17]+0.6210590034081186*A[2]*B[17]+0.6210590034081186*A[3]*B[7]+0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[4]*B[41]+0.7071067811865474*A[3]*B[26]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[4]*B[43]+0.7071067811865474*A[3]*B[28]+0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.6172133998483679*A[3]*B[41]+0.6172133998483678*A[4]*B[26]+0.6210590034081187*A[2]*B[26]+0.6210590034081187*A[3]*B[11]+0.632455532033676*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.6172133998483679*A[3]*B[43]+0.6172133998483678*A[4]*B[28]+0.6210590034081187*A[2]*B[28]+0.6210590034081187*A[3]*B[13]+0.632455532033676*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[4]*B[47]+0.7071067811865475*A[3]*B[38]+0.7071067811865475*A[2]*B[20]+0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.410685410411478*A[4]*B[32]+0.6060915267313265*A[2]*B[32]+0.421637021355784*A[3]*B[17]+0.6210590034081186*A[1]*B[17]+0.6060915267313265*A[4]*B[7]+0.4517539514526256*A[2]*B[7]+0.7071067811865475*A[0]*B[7]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865475*A[2]*B[23]+0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865475*A[2]*B[24]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6172133998483679*A[3]*B[47]+0.6172133998483679*A[4]*B[38]+0.6210590034081186*A[2]*B[38]+0.6210590034081186*A[3]*B[20]+0.6324555320336759*A[1]*B[20]+0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4106854104114779*A[4]*B[41]+0.6060915267313265*A[2]*B[41]+0.4216370213557839*A[3]*B[26]+0.6210590034081187*A[1]*B[26]+0.6060915267313265*A[4]*B[11]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081187*A[3]*B[4]+0.632455532033676*A[1]*B[4]+0.7071067811865475*A[2]*B[2]; 
  tmp[12] = 0.6210590034081187*A[3]*B[23]+0.632455532033676*A[1]*B[23]+0.6324555320336759*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4106854104114779*A[4]*B[43]+0.6060915267313265*A[2]*B[43]+0.4216370213557839*A[3]*B[28]+0.6210590034081187*A[1]*B[28]+0.6060915267313265*A[4]*B[13]+0.4517539514526256*A[2]*B[13]+0.7071067811865475*A[0]*B[13]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[3]; 
  tmp[14] = 0.7071067811865475*A[2]*B[35]+0.7071067811865475*A[1]*B[21]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6210590034081187*A[3]*B[24]+0.632455532033676*A[1]*B[24]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865475*A[2]*B[36]+0.7071067811865475*A[1]*B[22]+0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.385694607919935*A[3]*B[32]+0.6172133998483679*A[1]*B[32]+0.385694607919935*A[4]*B[17]+0.421637021355784*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.421637021355784*A[3]*B[7]+0.6210590034081186*A[1]*B[7]+0.6172133998483679*B[1]*A[4]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[18] = 0.7071067811865474*A[1]*B[27]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.7071067811865474*A[1]*B[30]+0.7071067811865475*A[0]*B[19]; 
  tmp[20] = 0.410685410411478*A[4]*B[47]+0.6060915267313265*A[2]*B[47]+0.421637021355784*A[3]*B[38]+0.6210590034081186*A[1]*B[38]+0.6060915267313265*A[4]*B[20]+0.4517539514526256*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.6210590034081186*A[3]*B[10]+0.6324555320336759*A[1]*B[10]+0.7071067811865475*A[2]*B[6]; 
  tmp[21] = 0.6210590034081186*A[3]*B[35]+0.6324555320336759*A[1]*B[35]+0.6324555320336759*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.7071067811865475*A[1]*B[14]; 
  tmp[22] = 0.6210590034081186*A[3]*B[36]+0.6324555320336759*A[1]*B[36]+0.6324555320336759*A[2]*B[22]+0.7071067811865475*A[0]*B[22]+0.7071067811865475*A[1]*B[16]; 
  tmp[23] = 0.6060915267313265*A[4]*B[23]+0.4517539514526256*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.6210590034081187*A[3]*B[12]+0.632455532033676*A[1]*B[12]+0.7071067811865475*A[2]*B[8]; 
  tmp[24] = 0.6060915267313265*A[4]*B[24]+0.4517539514526256*A[2]*B[24]+0.7071067811865475*A[0]*B[24]+0.6210590034081187*A[3]*B[15]+0.632455532033676*A[1]*B[15]+0.7071067811865475*A[2]*B[9]; 
  tmp[25] = 0.7071067811865475*A[1]*B[37]+0.7071067811865475*A[0]*B[25]; 
  tmp[26] = 0.3856946079199349*A[3]*B[41]+0.6172133998483678*A[1]*B[41]+0.385694607919935*A[4]*B[26]+0.421637021355784*A[2]*B[26]+0.7071067811865475*A[0]*B[26]+0.4216370213557839*A[3]*B[11]+0.6210590034081187*A[1]*B[11]+0.6172133998483678*A[4]*B[4]+0.6210590034081187*A[2]*B[4]+0.7071067811865474*B[2]*A[3]; 
  tmp[27] = 0.6324555320336759*A[2]*B[27]+0.7071067811865475*A[0]*B[27]+0.7071067811865474*A[1]*B[18]; 
  tmp[28] = 0.3856946079199349*A[3]*B[43]+0.6172133998483678*A[1]*B[43]+0.385694607919935*A[4]*B[28]+0.421637021355784*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.4216370213557839*A[3]*B[13]+0.6210590034081187*A[1]*B[13]+0.6172133998483678*A[4]*B[5]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*A[3]*B[3]; 
  tmp[29] = 0.7071067811865474*A[1]*B[39]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.6324555320336759*A[2]*B[30]+0.7071067811865475*A[0]*B[30]+0.7071067811865474*A[1]*B[19]; 
  tmp[31] = 0.7071067811865474*A[1]*B[40]+0.7071067811865475*A[0]*B[31]; 
  tmp[32] = 0.3433105850715905*A[4]*B[32]+0.410685410411478*A[2]*B[32]+0.7071067811865475*A[0]*B[32]+0.385694607919935*A[3]*B[17]+0.6172133998483679*A[1]*B[17]+0.410685410411478*A[4]*B[7]+0.6060915267313265*A[2]*B[7]+0.7071067811865475*B[0]*A[4]+0.6172133998483679*B[1]*A[3]; 
  tmp[33] = 0.7071067811865475*A[1]*B[42]+0.7071067811865475*A[0]*B[33]; 
  tmp[34] = 0.7071067811865475*A[1]*B[45]+0.7071067811865475*A[0]*B[34]; 
  tmp[35] = 0.6060915267313265*A[4]*B[35]+0.4517539514526256*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.6210590034081186*A[3]*B[21]+0.6324555320336759*A[1]*B[21]+0.7071067811865475*A[2]*B[14]; 
  tmp[36] = 0.6060915267313265*A[4]*B[36]+0.4517539514526256*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.6210590034081186*A[3]*B[22]+0.6324555320336759*A[1]*B[22]+0.7071067811865475*A[2]*B[16]; 
  tmp[37] = 0.6324555320336759*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.7071067811865475*A[1]*B[25]; 
  tmp[38] = 0.385694607919935*A[3]*B[47]+0.6172133998483679*A[1]*B[47]+0.385694607919935*A[4]*B[38]+0.421637021355784*A[2]*B[38]+0.7071067811865475*A[0]*B[38]+0.421637021355784*A[3]*B[20]+0.6210590034081186*A[1]*B[20]+0.6172133998483679*A[4]*B[10]+0.6210590034081186*A[2]*B[10]+0.7071067811865475*A[3]*B[6]; 
  tmp[39] = 0.6324555320336759*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.7071067811865474*A[1]*B[29]; 
  tmp[40] = 0.6324555320336759*A[2]*B[40]+0.7071067811865475*A[0]*B[40]+0.7071067811865474*A[1]*B[31]; 
  tmp[41] = 0.3433105850715905*A[4]*B[41]+0.410685410411478*A[2]*B[41]+0.7071067811865475*A[0]*B[41]+0.3856946079199349*A[3]*B[26]+0.6172133998483678*A[1]*B[26]+0.4106854104114779*A[4]*B[11]+0.6060915267313265*A[2]*B[11]+0.6172133998483679*A[3]*B[4]+0.7071067811865475*B[2]*A[4]; 
  tmp[42] = 0.6324555320336759*A[2]*B[42]+0.7071067811865475*A[0]*B[42]+0.7071067811865475*A[1]*B[33]; 
  tmp[43] = 0.3433105850715905*A[4]*B[43]+0.410685410411478*A[2]*B[43]+0.7071067811865475*A[0]*B[43]+0.3856946079199349*A[3]*B[28]+0.6172133998483678*A[1]*B[28]+0.4106854104114779*A[4]*B[13]+0.6060915267313265*A[2]*B[13]+0.6172133998483679*A[3]*B[5]+0.7071067811865475*B[3]*A[4]; 
  tmp[44] = 0.7071067811865475*A[1]*B[48]+0.7071067811865475*A[0]*B[44]; 
  tmp[45] = 0.6324555320336759*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.7071067811865475*A[1]*B[34]; 
  tmp[46] = 0.7071067811865475*A[1]*B[49]+0.7071067811865475*A[0]*B[46]; 
  tmp[47] = 0.3433105850715905*A[4]*B[47]+0.410685410411478*A[2]*B[47]+0.7071067811865475*A[0]*B[47]+0.385694607919935*A[3]*B[38]+0.6172133998483679*A[1]*B[38]+0.410685410411478*A[4]*B[20]+0.6060915267313265*A[2]*B[20]+0.6172133998483679*A[3]*B[10]+0.7071067811865475*A[4]*B[6]; 
  tmp[48] = 0.6324555320336759*A[2]*B[48]+0.7071067811865475*A[0]*B[48]+0.7071067811865475*A[1]*B[44]; 
  tmp[49] = 0.6324555320336759*A[2]*B[49]+0.7071067811865475*A[0]*B[49]+0.7071067811865475*A[1]*B[46]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<50; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide1x2vSer_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(8,8); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(8); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(8); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.7071067811865475*A[0]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,4) = 0.7071067811865475*A[1]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,5) = 0.7071067811865475*A[1]; 
  AEM(4,2) = 0.7071067811865475*A[1]; 
  AEM(4,4) = 0.7071067811865475*A[0]; 
  AEM(5,3) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.7071067811865475*A[0]; 
  AEM(6,6) = 0.7071067811865475*A[0]; 
  AEM(6,7) = 0.7071067811865475*A[1]; 
  AEM(7,6) = 0.7071067811865475*A[1]; 
  AEM(7,7) = 0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,8,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x2vSer_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(20,20); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(20); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(20); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,7) = 0.7071067811865475*A[2]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,7) = 0.6324555320336759*A[1]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,4) = 0.7071067811865475*A[1]; 
  AEM(2,11) = 0.7071067811865475*A[2]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,5) = 0.7071067811865475*A[1]; 
  AEM(3,13) = 0.7071067811865475*A[2]; 
  AEM(4,2) = 0.7071067811865475*A[1]; 
  AEM(4,4) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(4,11) = 0.632455532033676*A[1]; 
  AEM(5,3) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,13) = 0.632455532033676*A[1]; 
  AEM(6,6) = 0.7071067811865475*A[0]; 
  AEM(6,10) = 0.7071067811865475*A[1]; 
  AEM(6,17) = 0.7071067811865475*A[2]; 
  AEM(7,0) = 0.7071067811865475*A[2]; 
  AEM(7,1) = 0.6324555320336759*A[1]; 
  AEM(7,7) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(8,8) = 0.7071067811865475*A[0]; 
  AEM(8,12) = 0.7071067811865475*A[1]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,15) = 0.7071067811865475*A[1]; 
  AEM(10,6) = 0.7071067811865475*A[1]; 
  AEM(10,10) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(10,17) = 0.6324555320336759*A[1]; 
  AEM(11,2) = 0.7071067811865475*A[2]; 
  AEM(11,4) = 0.632455532033676*A[1]; 
  AEM(11,11) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(12,8) = 0.7071067811865475*A[1]; 
  AEM(12,12) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(13,3) = 0.7071067811865475*A[2]; 
  AEM(13,5) = 0.632455532033676*A[1]; 
  AEM(13,13) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,18) = 0.7071067811865475*A[1]; 
  AEM(15,9) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(16,16) = 0.7071067811865475*A[0]; 
  AEM(16,19) = 0.7071067811865475*A[1]; 
  AEM(17,6) = 0.7071067811865475*A[2]; 
  AEM(17,10) = 0.6324555320336759*A[1]; 
  AEM(17,17) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(18,14) = 0.7071067811865475*A[1]; 
  AEM(18,18) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(19,16) = 0.7071067811865475*A[1]; 
  AEM(19,19) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,20,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x2vSer_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(32,32); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(32); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(32); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,7) = 0.7071067811865475*A[2]; 
  AEM(0,17) = 0.7071067811865475*A[3]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,7) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(1,17) = 0.6210590034081186*A[2]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,4) = 0.7071067811865475*A[1]; 
  AEM(2,11) = 0.7071067811865475*A[2]; 
  AEM(2,23) = 0.7071067811865474*A[3]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,5) = 0.7071067811865475*A[1]; 
  AEM(3,13) = 0.7071067811865475*A[2]; 
  AEM(3,25) = 0.7071067811865474*A[3]; 
  AEM(4,2) = 0.7071067811865475*A[1]; 
  AEM(4,4) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(4,11) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(4,23) = 0.6210590034081187*A[2]; 
  AEM(5,3) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,13) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(5,25) = 0.6210590034081187*A[2]; 
  AEM(6,6) = 0.7071067811865475*A[0]; 
  AEM(6,10) = 0.7071067811865475*A[1]; 
  AEM(6,20) = 0.7071067811865475*A[2]; 
  AEM(6,29) = 0.7071067811865475*A[3]; 
  AEM(7,0) = 0.7071067811865475*A[2]; 
  AEM(7,1) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(7,7) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(7,17) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(8,8) = 0.7071067811865475*A[0]; 
  AEM(8,12) = 0.7071067811865475*A[1]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,15) = 0.7071067811865475*A[1]; 
  AEM(10,6) = 0.7071067811865475*A[1]; 
  AEM(10,10) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(10,20) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(10,29) = 0.6210590034081186*A[2]; 
  AEM(11,2) = 0.7071067811865475*A[2]; 
  AEM(11,4) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(11,11) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(11,23) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(12,8) = 0.7071067811865475*A[1]; 
  AEM(12,12) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(13,3) = 0.7071067811865475*A[2]; 
  AEM(13,5) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(13,13) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(13,25) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,21) = 0.7071067811865475*A[1]; 
  AEM(15,9) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(16,16) = 0.7071067811865475*A[0]; 
  AEM(16,22) = 0.7071067811865475*A[1]; 
  AEM(17,0) = 0.7071067811865475*A[3]; 
  AEM(17,1) = 0.6210590034081186*A[2]; 
  AEM(17,7) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(17,17) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(18,18) = 0.7071067811865475*A[0]; 
  AEM(18,24) = 0.7071067811865474*A[1]; 
  AEM(19,19) = 0.7071067811865475*A[0]; 
  AEM(19,27) = 0.7071067811865474*A[1]; 
  AEM(20,6) = 0.7071067811865475*A[2]; 
  AEM(20,10) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(20,20) = 0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(20,29) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(21,14) = 0.7071067811865475*A[1]; 
  AEM(21,21) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(22,16) = 0.7071067811865475*A[1]; 
  AEM(22,22) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(23,2) = 0.7071067811865474*A[3]; 
  AEM(23,4) = 0.6210590034081187*A[2]; 
  AEM(23,11) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(23,23) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(24,18) = 0.7071067811865474*A[1]; 
  AEM(24,24) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(25,3) = 0.7071067811865474*A[3]; 
  AEM(25,5) = 0.6210590034081187*A[2]; 
  AEM(25,13) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(25,25) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(26,26) = 0.7071067811865475*A[0]; 
  AEM(26,30) = 0.7071067811865474*A[1]; 
  AEM(27,19) = 0.7071067811865474*A[1]; 
  AEM(27,27) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(28,28) = 0.7071067811865475*A[0]; 
  AEM(28,31) = 0.7071067811865474*A[1]; 
  AEM(29,6) = 0.7071067811865475*A[3]; 
  AEM(29,10) = 0.6210590034081186*A[2]; 
  AEM(29,20) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(29,29) = 0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(30,26) = 0.7071067811865474*A[1]; 
  AEM(30,30) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(31,28) = 0.7071067811865474*A[1]; 
  AEM(31,31) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,32,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x2vSer_P4(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM(50,50); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV(50); 
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u(50); 
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*A[0]; 
  AEM(0,1) = 0.7071067811865475*A[1]; 
  AEM(0,7) = 0.7071067811865475*A[2]; 
  AEM(0,17) = 0.7071067811865475*A[3]; 
  AEM(0,32) = 0.7071067811865475*A[4]; 
  AEM(1,0) = 0.7071067811865475*A[1]; 
  AEM(1,1) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(1,7) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(1,17) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(1,32) = 0.6172133998483679*A[3]; 
  AEM(2,2) = 0.7071067811865475*A[0]; 
  AEM(2,4) = 0.7071067811865475*A[1]; 
  AEM(2,11) = 0.7071067811865475*A[2]; 
  AEM(2,26) = 0.7071067811865474*A[3]; 
  AEM(2,41) = 0.7071067811865475*A[4]; 
  AEM(3,3) = 0.7071067811865475*A[0]; 
  AEM(3,5) = 0.7071067811865475*A[1]; 
  AEM(3,13) = 0.7071067811865475*A[2]; 
  AEM(3,28) = 0.7071067811865474*A[3]; 
  AEM(3,43) = 0.7071067811865475*A[4]; 
  AEM(4,2) = 0.7071067811865475*A[1]; 
  AEM(4,4) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(4,11) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(4,26) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(4,41) = 0.6172133998483679*A[3]; 
  AEM(5,3) = 0.7071067811865475*A[1]; 
  AEM(5,5) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(5,13) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(5,28) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(5,43) = 0.6172133998483679*A[3]; 
  AEM(6,6) = 0.7071067811865475*A[0]; 
  AEM(6,10) = 0.7071067811865475*A[1]; 
  AEM(6,20) = 0.7071067811865475*A[2]; 
  AEM(6,38) = 0.7071067811865475*A[3]; 
  AEM(6,47) = 0.7071067811865475*A[4]; 
  AEM(7,0) = 0.7071067811865475*A[2]; 
  AEM(7,1) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(7,7) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(7,17) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(7,32) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(8,8) = 0.7071067811865475*A[0]; 
  AEM(8,12) = 0.7071067811865475*A[1]; 
  AEM(8,23) = 0.7071067811865475*A[2]; 
  AEM(9,9) = 0.7071067811865475*A[0]; 
  AEM(9,15) = 0.7071067811865475*A[1]; 
  AEM(9,24) = 0.7071067811865475*A[2]; 
  AEM(10,6) = 0.7071067811865475*A[1]; 
  AEM(10,10) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(10,20) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(10,38) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(10,47) = 0.6172133998483679*A[3]; 
  AEM(11,2) = 0.7071067811865475*A[2]; 
  AEM(11,4) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(11,11) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(11,26) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(11,41) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(12,8) = 0.7071067811865475*A[1]; 
  AEM(12,12) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(12,23) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(13,3) = 0.7071067811865475*A[2]; 
  AEM(13,5) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(13,13) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(13,28) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(13,43) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(14,14) = 0.7071067811865475*A[0]; 
  AEM(14,21) = 0.7071067811865475*A[1]; 
  AEM(14,35) = 0.7071067811865475*A[2]; 
  AEM(15,9) = 0.7071067811865475*A[1]; 
  AEM(15,15) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(15,24) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(16,16) = 0.7071067811865475*A[0]; 
  AEM(16,22) = 0.7071067811865475*A[1]; 
  AEM(16,36) = 0.7071067811865475*A[2]; 
  AEM(17,0) = 0.7071067811865475*A[3]; 
  AEM(17,1) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(17,7) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(17,17) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(17,32) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(18,18) = 0.7071067811865475*A[0]; 
  AEM(18,27) = 0.7071067811865474*A[1]; 
  AEM(19,19) = 0.7071067811865475*A[0]; 
  AEM(19,30) = 0.7071067811865474*A[1]; 
  AEM(20,6) = 0.7071067811865475*A[2]; 
  AEM(20,10) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(20,20) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(20,38) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(20,47) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(21,14) = 0.7071067811865475*A[1]; 
  AEM(21,21) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(21,35) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(22,16) = 0.7071067811865475*A[1]; 
  AEM(22,22) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(22,36) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(23,8) = 0.7071067811865475*A[2]; 
  AEM(23,12) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(23,23) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(24,9) = 0.7071067811865475*A[2]; 
  AEM(24,15) = 0.6210590034081187*A[3]+0.632455532033676*A[1]; 
  AEM(24,24) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(25,25) = 0.7071067811865475*A[0]; 
  AEM(25,37) = 0.7071067811865475*A[1]; 
  AEM(26,2) = 0.7071067811865474*A[3]; 
  AEM(26,4) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(26,11) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(26,26) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(26,41) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(27,18) = 0.7071067811865474*A[1]; 
  AEM(27,27) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(28,3) = 0.7071067811865474*A[3]; 
  AEM(28,5) = 0.6172133998483678*A[4]+0.6210590034081187*A[2]; 
  AEM(28,13) = 0.4216370213557839*A[3]+0.6210590034081187*A[1]; 
  AEM(28,28) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(28,43) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(29,29) = 0.7071067811865475*A[0]; 
  AEM(29,39) = 0.7071067811865474*A[1]; 
  AEM(30,19) = 0.7071067811865474*A[1]; 
  AEM(30,30) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(31,31) = 0.7071067811865475*A[0]; 
  AEM(31,40) = 0.7071067811865474*A[1]; 
  AEM(32,0) = 0.7071067811865475*A[4]; 
  AEM(32,1) = 0.6172133998483679*A[3]; 
  AEM(32,7) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(32,17) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(32,32) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(33,33) = 0.7071067811865475*A[0]; 
  AEM(33,42) = 0.7071067811865475*A[1]; 
  AEM(34,34) = 0.7071067811865475*A[0]; 
  AEM(34,45) = 0.7071067811865475*A[1]; 
  AEM(35,14) = 0.7071067811865475*A[2]; 
  AEM(35,21) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(35,35) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(36,16) = 0.7071067811865475*A[2]; 
  AEM(36,22) = 0.6210590034081186*A[3]+0.6324555320336759*A[1]; 
  AEM(36,36) = 0.6060915267313265*A[4]+0.4517539514526256*A[2]+0.7071067811865475*A[0]; 
  AEM(37,25) = 0.7071067811865475*A[1]; 
  AEM(37,37) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(38,6) = 0.7071067811865475*A[3]; 
  AEM(38,10) = 0.6172133998483679*A[4]+0.6210590034081186*A[2]; 
  AEM(38,20) = 0.421637021355784*A[3]+0.6210590034081186*A[1]; 
  AEM(38,38) = 0.385694607919935*A[4]+0.421637021355784*A[2]+0.7071067811865475*A[0]; 
  AEM(38,47) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(39,29) = 0.7071067811865474*A[1]; 
  AEM(39,39) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(40,31) = 0.7071067811865474*A[1]; 
  AEM(40,40) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(41,2) = 0.7071067811865475*A[4]; 
  AEM(41,4) = 0.6172133998483679*A[3]; 
  AEM(41,11) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(41,26) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(41,41) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(42,33) = 0.7071067811865475*A[1]; 
  AEM(42,42) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(43,3) = 0.7071067811865475*A[4]; 
  AEM(43,5) = 0.6172133998483679*A[3]; 
  AEM(43,13) = 0.4106854104114779*A[4]+0.6060915267313265*A[2]; 
  AEM(43,28) = 0.3856946079199349*A[3]+0.6172133998483678*A[1]; 
  AEM(43,43) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(44,44) = 0.7071067811865475*A[0]; 
  AEM(44,48) = 0.7071067811865475*A[1]; 
  AEM(45,34) = 0.7071067811865475*A[1]; 
  AEM(45,45) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(46,46) = 0.7071067811865475*A[0]; 
  AEM(46,49) = 0.7071067811865475*A[1]; 
  AEM(47,6) = 0.7071067811865475*A[4]; 
  AEM(47,10) = 0.6172133998483679*A[3]; 
  AEM(47,20) = 0.410685410411478*A[4]+0.6060915267313265*A[2]; 
  AEM(47,38) = 0.385694607919935*A[3]+0.6172133998483679*A[1]; 
  AEM(47,47) = 0.3433105850715905*A[4]+0.410685410411478*A[2]+0.7071067811865475*A[0]; 
  AEM(48,44) = 0.7071067811865475*A[1]; 
  AEM(48,48) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
  AEM(49,46) = 0.7071067811865475*A[1]; 
  AEM(49,49) = 0.6324555320336759*A[2]+0.7071067811865475*A[0]; 
 
  // Fill BEV. 
  BEV << B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40],B[41],B[42],B[43],B[44],B[45],B[46],B[47],B[48],B[49]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,50,1) = u; 
 
} 
 
