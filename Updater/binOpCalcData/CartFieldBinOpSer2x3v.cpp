#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply2x3vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[32]; 
  tmp[0] = 0.5*A[3]*B[6]+0.5*A[2]*B[2]+0.5*A[1]*B[1]+0.5*A[0]*B[0]; 
  tmp[1] = 0.5*A[2]*B[6]+0.5*B[2]*A[3]+0.5*A[0]*B[1]+0.5*B[0]*A[1]; 
  tmp[2] = 0.5*A[1]*B[6]+0.5*B[1]*A[3]+0.5*A[0]*B[2]+0.5*B[0]*A[2]; 
  tmp[3] = 0.5*A[3]*B[16]+0.5*A[2]*B[8]+0.5*A[1]*B[7]+0.5*A[0]*B[3]; 
  tmp[4] = 0.5*A[3]*B[17]+0.5*A[2]*B[10]+0.5*A[1]*B[9]+0.5*A[0]*B[4]; 
  tmp[5] = 0.5*A[3]*B[20]+0.5*A[2]*B[13]+0.5*A[1]*B[12]+0.5*A[0]*B[5]; 
  tmp[6] = 0.5*A[0]*B[6]+0.5*B[0]*A[3]+0.5*A[1]*B[2]+0.5*B[1]*A[2]; 
  tmp[7] = 0.5*A[2]*B[16]+0.5*A[3]*B[8]+0.5*A[0]*B[7]+0.5*A[1]*B[3]; 
  tmp[8] = 0.5*A[1]*B[16]+0.5*A[0]*B[8]+0.5*A[3]*B[7]+0.5*A[2]*B[3]; 
  tmp[9] = 0.5*A[2]*B[17]+0.5*A[3]*B[10]+0.5*A[0]*B[9]+0.5*A[1]*B[4]; 
  tmp[10] = 0.5*A[1]*B[17]+0.5*A[0]*B[10]+0.5*A[3]*B[9]+0.5*A[2]*B[4]; 
  tmp[11] = 0.5*A[3]*B[26]+0.5*A[2]*B[19]+0.5*A[1]*B[18]+0.5*A[0]*B[11]; 
  tmp[12] = 0.5*A[2]*B[20]+0.5*A[3]*B[13]+0.5*A[0]*B[12]+0.5*A[1]*B[5]; 
  tmp[13] = 0.5*A[1]*B[20]+0.5*A[0]*B[13]+0.5*A[3]*B[12]+0.5*A[2]*B[5]; 
  tmp[14] = 0.5*A[3]*B[27]+0.5*A[2]*B[22]+0.5*A[1]*B[21]+0.5*A[0]*B[14]; 
  tmp[15] = 0.5*A[3]*B[28]+0.5*A[2]*B[24]+0.5*A[1]*B[23]+0.5*A[0]*B[15]; 
  tmp[16] = 0.5*A[0]*B[16]+0.5*A[1]*B[8]+0.5*A[2]*B[7]+0.5*A[3]*B[3]; 
  tmp[17] = 0.5*A[0]*B[17]+0.5*A[1]*B[10]+0.5*A[2]*B[9]+0.5*A[3]*B[4]; 
  tmp[18] = 0.5*A[2]*B[26]+0.5*A[3]*B[19]+0.5*A[0]*B[18]+0.5*A[1]*B[11]; 
  tmp[19] = 0.5*A[1]*B[26]+0.5*A[0]*B[19]+0.5*A[3]*B[18]+0.5*A[2]*B[11]; 
  tmp[20] = 0.5*A[0]*B[20]+0.5*A[1]*B[13]+0.5*A[2]*B[12]+0.5*A[3]*B[5]; 
  tmp[21] = 0.5*A[2]*B[27]+0.5*A[3]*B[22]+0.5*A[0]*B[21]+0.5*A[1]*B[14]; 
  tmp[22] = 0.5*A[1]*B[27]+0.5*A[0]*B[22]+0.5*A[3]*B[21]+0.5*A[2]*B[14]; 
  tmp[23] = 0.5*A[2]*B[28]+0.5*A[3]*B[24]+0.5*A[0]*B[23]+0.5*A[1]*B[15]; 
  tmp[24] = 0.5*A[1]*B[28]+0.5*A[0]*B[24]+0.5*A[3]*B[23]+0.5*A[2]*B[15]; 
  tmp[25] = 0.5*A[3]*B[31]+0.5*A[2]*B[30]+0.5*A[1]*B[29]+0.5*A[0]*B[25]; 
  tmp[26] = 0.5*A[0]*B[26]+0.5*A[1]*B[19]+0.5*A[2]*B[18]+0.5*A[3]*B[11]; 
  tmp[27] = 0.5*A[0]*B[27]+0.5*A[1]*B[22]+0.5*A[2]*B[21]+0.5*A[3]*B[14]; 
  tmp[28] = 0.5*A[0]*B[28]+0.5*A[1]*B[24]+0.5*A[2]*B[23]+0.5*A[3]*B[15]; 
  tmp[29] = 0.5*A[2]*B[31]+0.5*A[3]*B[30]+0.5*A[0]*B[29]+0.5*A[1]*B[25]; 
  tmp[30] = 0.5*A[1]*B[31]+0.5*A[0]*B[30]+0.5*A[3]*B[29]+0.5*A[2]*B[25]; 
  tmp[31] = 0.5*A[0]*B[31]+0.5*A[1]*B[30]+0.5*A[2]*B[29]+0.5*A[3]*B[25]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<32; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply2x3vSer_P2(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[112]; 
  tmp[0] = 0.5*A[7]*B[32]+0.5*A[6]*B[31]+0.5*A[5]*B[17]+0.5*A[4]*B[16]+0.5*A[3]*B[6]+0.5*A[2]*B[2]+0.5*A[1]*B[1]+0.5*A[0]*B[0]; 
  tmp[1] = 0.5000000000000001*A[5]*B[32]+0.447213595499958*A[3]*B[31]+0.5000000000000001*A[7]*B[17]+0.4472135954999579*A[1]*B[16]+0.447213595499958*A[6]*B[6]+0.5*A[2]*B[6]+0.4472135954999579*B[1]*A[4]+0.5*B[2]*A[3]+0.5*A[0]*B[1]+0.5*B[0]*A[1]; 
  tmp[2] = 0.447213595499958*A[3]*B[32]+0.5000000000000001*A[4]*B[31]+0.4472135954999579*A[2]*B[17]+0.5000000000000001*A[6]*B[16]+0.447213595499958*B[6]*A[7]+0.5*A[1]*B[6]+0.4472135954999579*B[2]*A[5]+0.5*B[1]*A[3]+0.5*A[0]*B[2]+0.5*B[0]*A[2]; 
  tmp[3] = 0.5000000000000001*A[7]*B[57]+0.5000000000000001*A[6]*B[56]+0.5000000000000001*A[5]*B[34]+0.5000000000000001*A[4]*B[33]+0.5*A[3]*B[21]+0.5*A[2]*B[8]+0.5*A[1]*B[7]+0.5*A[0]*B[3]; 
  tmp[4] = 0.5000000000000001*A[7]*B[60]+0.5000000000000001*A[6]*B[59]+0.5000000000000001*A[5]*B[38]+0.5000000000000001*A[4]*B[37]+0.5*A[3]*B[22]+0.5*A[2]*B[10]+0.5*A[1]*B[9]+0.5*A[0]*B[4]; 
  tmp[5] = 0.5000000000000001*A[7]*B[69]+0.5000000000000001*A[6]*B[68]+0.5000000000000001*A[5]*B[44]+0.5000000000000001*A[4]*B[43]+0.5*A[3]*B[25]+0.5*A[2]*B[13]+0.5*A[1]*B[12]+0.5*A[0]*B[5]; 
  tmp[6] = 0.4*A[6]*B[32]+0.447213595499958*A[2]*B[32]+0.4*A[7]*B[31]+0.447213595499958*A[1]*B[31]+0.4472135954999579*A[3]*B[17]+0.4472135954999579*A[3]*B[16]+0.447213595499958*B[2]*A[7]+0.4472135954999579*A[5]*B[6]+0.4472135954999579*A[4]*B[6]+0.5*A[0]*B[6]+0.447213595499958*B[1]*A[6]+0.5*B[0]*A[3]+0.5*A[1]*B[2]+0.5*B[1]*A[2]; 
  tmp[7] = 0.5*A[5]*B[57]+0.4472135954999579*A[3]*B[56]+0.5*A[7]*B[34]+0.447213595499958*A[1]*B[33]+0.447213595499958*A[6]*B[21]+0.5*A[2]*B[21]+0.5*A[3]*B[8]+0.4472135954999579*A[4]*B[7]+0.5*A[0]*B[7]+0.5*A[1]*B[3]; 
  tmp[8] = 0.4472135954999579*A[3]*B[57]+0.5*A[4]*B[56]+0.447213595499958*A[2]*B[34]+0.5*A[6]*B[33]+0.447213595499958*A[7]*B[21]+0.5*A[1]*B[21]+0.4472135954999579*A[5]*B[8]+0.5*A[0]*B[8]+0.5*A[3]*B[7]+0.5*A[2]*B[3]; 
  tmp[9] = 0.5*A[5]*B[60]+0.4472135954999579*A[3]*B[59]+0.5*A[7]*B[38]+0.447213595499958*A[1]*B[37]+0.447213595499958*A[6]*B[22]+0.5*A[2]*B[22]+0.5*A[3]*B[10]+0.4472135954999579*A[4]*B[9]+0.5*A[0]*B[9]+0.5*A[1]*B[4]; 
  tmp[10] = 0.4472135954999579*A[3]*B[60]+0.5*A[4]*B[59]+0.447213595499958*A[2]*B[38]+0.5*A[6]*B[37]+0.447213595499958*A[7]*B[22]+0.5*A[1]*B[22]+0.4472135954999579*A[5]*B[10]+0.5*A[0]*B[10]+0.5*A[3]*B[9]+0.5*A[2]*B[4]; 
  tmp[11] = 0.5*A[7]*B[88]+0.5*A[6]*B[87]+0.5*A[5]*B[62]+0.5*A[4]*B[61]+0.5*A[3]*B[51]+0.5*A[2]*B[24]+0.5*A[1]*B[23]+0.5*A[0]*B[11]; 
  tmp[12] = 0.5*A[5]*B[69]+0.4472135954999579*A[3]*B[68]+0.5*A[7]*B[44]+0.447213595499958*A[1]*B[43]+0.447213595499958*A[6]*B[25]+0.5*A[2]*B[25]+0.5*A[3]*B[13]+0.4472135954999579*A[4]*B[12]+0.5*A[0]*B[12]+0.5*A[1]*B[5]; 
  tmp[13] = 0.4472135954999579*A[3]*B[69]+0.5*A[4]*B[68]+0.447213595499958*A[2]*B[44]+0.5*A[6]*B[43]+0.447213595499958*A[7]*B[25]+0.5*A[1]*B[25]+0.4472135954999579*A[5]*B[13]+0.5*A[0]*B[13]+0.5*A[3]*B[12]+0.5*A[2]*B[5]; 
  tmp[14] = 0.5*A[7]*B[92]+0.5*A[6]*B[91]+0.5*A[5]*B[71]+0.5*A[4]*B[70]+0.5*A[3]*B[52]+0.5*A[2]*B[27]+0.5*A[1]*B[26]+0.5*A[0]*B[14]; 
  tmp[15] = 0.5*A[7]*B[95]+0.5*A[6]*B[94]+0.5*A[5]*B[75]+0.5*A[4]*B[74]+0.5*A[3]*B[53]+0.5*A[2]*B[29]+0.5*A[1]*B[28]+0.5*A[0]*B[15]; 
  tmp[16] = 0.4472135954999579*A[7]*B[32]+0.31943828249997*A[6]*B[31]+0.5000000000000001*A[2]*B[31]+0.31943828249997*A[4]*B[16]+0.5*A[0]*B[16]+0.4472135954999579*A[3]*B[6]+0.5000000000000001*B[2]*A[6]+0.5*B[0]*A[4]+0.4472135954999579*A[1]*B[1]; 
  tmp[17] = 0.31943828249997*A[7]*B[32]+0.5000000000000001*A[1]*B[32]+0.4472135954999579*A[6]*B[31]+0.31943828249997*A[5]*B[17]+0.5*A[0]*B[17]+0.5000000000000001*B[1]*A[7]+0.4472135954999579*A[3]*B[6]+0.5*B[0]*A[5]+0.4472135954999579*A[2]*B[2]; 
  tmp[18] = 0.5*A[3]*B[58]+0.5000000000000001*A[2]*B[36]+0.5000000000000001*A[1]*B[35]+0.5*A[0]*B[18]; 
  tmp[19] = 0.5*A[3]*B[65]+0.5000000000000001*A[2]*B[41]+0.5000000000000001*A[1]*B[40]+0.5*A[0]*B[19]; 
  tmp[20] = 0.5*A[3]*B[80]+0.5000000000000001*A[2]*B[48]+0.5000000000000001*A[1]*B[47]+0.5*A[0]*B[20]; 
  tmp[21] = 0.4*A[6]*B[57]+0.4472135954999579*A[2]*B[57]+0.4*A[7]*B[56]+0.4472135954999579*A[1]*B[56]+0.447213595499958*A[3]*B[34]+0.447213595499958*A[3]*B[33]+0.4472135954999579*A[5]*B[21]+0.4472135954999579*A[4]*B[21]+0.5*A[0]*B[21]+0.447213595499958*A[7]*B[8]+0.5*A[1]*B[8]+0.447213595499958*A[6]*B[7]+0.5*A[2]*B[7]+0.5*A[3]*B[3]; 
  tmp[22] = 0.4*A[6]*B[60]+0.4472135954999579*A[2]*B[60]+0.4*A[7]*B[59]+0.4472135954999579*A[1]*B[59]+0.447213595499958*A[3]*B[38]+0.447213595499958*A[3]*B[37]+0.4472135954999579*A[5]*B[22]+0.4472135954999579*A[4]*B[22]+0.5*A[0]*B[22]+0.447213595499958*A[7]*B[10]+0.5*A[1]*B[10]+0.447213595499958*A[6]*B[9]+0.5*A[2]*B[9]+0.5*A[3]*B[4]; 
  tmp[23] = 0.5000000000000001*A[5]*B[88]+0.447213595499958*A[3]*B[87]+0.5000000000000001*A[7]*B[62]+0.4472135954999579*A[1]*B[61]+0.447213595499958*A[6]*B[51]+0.5*A[2]*B[51]+0.5*A[3]*B[24]+0.4472135954999579*A[4]*B[23]+0.5*A[0]*B[23]+0.5*A[1]*B[11]; 
  tmp[24] = 0.447213595499958*A[3]*B[88]+0.5000000000000001*A[4]*B[87]+0.4472135954999579*A[2]*B[62]+0.5000000000000001*A[6]*B[61]+0.447213595499958*A[7]*B[51]+0.5*A[1]*B[51]+0.4472135954999579*A[5]*B[24]+0.5*A[0]*B[24]+0.5*A[3]*B[23]+0.5*A[2]*B[11]; 
  tmp[25] = 0.4*A[6]*B[69]+0.4472135954999579*A[2]*B[69]+0.4*A[7]*B[68]+0.4472135954999579*A[1]*B[68]+0.447213595499958*A[3]*B[44]+0.447213595499958*A[3]*B[43]+0.4472135954999579*A[5]*B[25]+0.4472135954999579*A[4]*B[25]+0.5*A[0]*B[25]+0.447213595499958*A[7]*B[13]+0.5*A[1]*B[13]+0.447213595499958*A[6]*B[12]+0.5*A[2]*B[12]+0.5*A[3]*B[5]; 
  tmp[26] = 0.5000000000000001*A[5]*B[92]+0.447213595499958*A[3]*B[91]+0.5000000000000001*A[7]*B[71]+0.4472135954999579*A[1]*B[70]+0.447213595499958*A[6]*B[52]+0.5*A[2]*B[52]+0.5*A[3]*B[27]+0.4472135954999579*A[4]*B[26]+0.5*A[0]*B[26]+0.5*A[1]*B[14]; 
  tmp[27] = 0.447213595499958*A[3]*B[92]+0.5000000000000001*A[4]*B[91]+0.4472135954999579*A[2]*B[71]+0.5000000000000001*A[6]*B[70]+0.447213595499958*A[7]*B[52]+0.5*A[1]*B[52]+0.4472135954999579*A[5]*B[27]+0.5*A[0]*B[27]+0.5*A[3]*B[26]+0.5*A[2]*B[14]; 
  tmp[28] = 0.5000000000000001*A[5]*B[95]+0.447213595499958*A[3]*B[94]+0.5000000000000001*A[7]*B[75]+0.4472135954999579*A[1]*B[74]+0.447213595499958*A[6]*B[53]+0.5*A[2]*B[53]+0.5*A[3]*B[29]+0.4472135954999579*A[4]*B[28]+0.5*A[0]*B[28]+0.5*A[1]*B[15]; 
  tmp[29] = 0.447213595499958*A[3]*B[95]+0.5000000000000001*A[4]*B[94]+0.4472135954999579*A[2]*B[75]+0.5000000000000001*A[6]*B[74]+0.447213595499958*A[7]*B[53]+0.5*A[1]*B[53]+0.4472135954999579*A[5]*B[29]+0.5*A[0]*B[29]+0.5*A[3]*B[28]+0.5*A[2]*B[15]; 
  tmp[30] = 0.5000000000000001*A[7]*B[108]+0.5000000000000001*A[6]*B[107]+0.5000000000000001*A[5]*B[97]+0.5000000000000001*A[4]*B[96]+0.5*A[3]*B[86]+0.5*A[2]*B[55]+0.5*A[1]*B[54]+0.5*A[0]*B[30]; 
  tmp[31] = 0.4*A[3]*B[32]+0.4472135954999579*A[5]*B[31]+0.31943828249997*A[4]*B[31]+0.5*A[0]*B[31]+0.4472135954999579*A[6]*B[17]+0.31943828249997*A[6]*B[16]+0.5000000000000001*A[2]*B[16]+0.4*B[6]*A[7]+0.447213595499958*A[1]*B[6]+0.5*B[0]*A[6]+0.5000000000000001*B[2]*A[4]+0.447213595499958*B[1]*A[3]; 
  tmp[32] = 0.31943828249997*A[5]*B[32]+0.4472135954999579*A[4]*B[32]+0.5*A[0]*B[32]+0.4*A[3]*B[31]+0.31943828249997*A[7]*B[17]+0.5000000000000001*A[1]*B[17]+0.4472135954999579*A[7]*B[16]+0.5*B[0]*A[7]+0.4*A[6]*B[6]+0.447213595499958*A[2]*B[6]+0.5000000000000001*B[1]*A[5]+0.447213595499958*B[2]*A[3]; 
  tmp[33] = 0.4472135954999579*A[7]*B[57]+0.31943828249997*A[6]*B[56]+0.5000000000000001*A[2]*B[56]+0.31943828249997*A[4]*B[33]+0.5*A[0]*B[33]+0.447213595499958*A[3]*B[21]+0.5*A[6]*B[8]+0.447213595499958*A[1]*B[7]+0.5000000000000001*B[3]*A[4]; 
  tmp[34] = 0.31943828249997*A[7]*B[57]+0.5000000000000001*A[1]*B[57]+0.4472135954999579*A[6]*B[56]+0.31943828249997*A[5]*B[34]+0.5*A[0]*B[34]+0.447213595499958*A[3]*B[21]+0.447213595499958*A[2]*B[8]+0.5*A[7]*B[7]+0.5000000000000001*B[3]*A[5]; 
  tmp[35] = 0.4472135954999579*A[6]*B[58]+0.5000000000000001*A[2]*B[58]+0.5*A[3]*B[36]+0.4472135954999579*A[4]*B[35]+0.5*A[0]*B[35]+0.5000000000000001*A[1]*B[18]; 
  tmp[36] = 0.4472135954999579*A[7]*B[58]+0.5000000000000001*A[1]*B[58]+0.4472135954999579*A[5]*B[36]+0.5*A[0]*B[36]+0.5*A[3]*B[35]+0.5000000000000001*A[2]*B[18]; 
  tmp[37] = 0.4472135954999579*A[7]*B[60]+0.31943828249997*A[6]*B[59]+0.5000000000000001*A[2]*B[59]+0.31943828249997*A[4]*B[37]+0.5*A[0]*B[37]+0.447213595499958*A[3]*B[22]+0.5*A[6]*B[10]+0.447213595499958*A[1]*B[9]+0.5000000000000001*A[4]*B[4]; 
  tmp[38] = 0.31943828249997*A[7]*B[60]+0.5000000000000001*A[1]*B[60]+0.4472135954999579*A[6]*B[59]+0.31943828249997*A[5]*B[38]+0.5*A[0]*B[38]+0.447213595499958*A[3]*B[22]+0.447213595499958*A[2]*B[10]+0.5*A[7]*B[9]+0.5000000000000001*B[4]*A[5]; 
  tmp[39] = 0.5*A[3]*B[89]+0.5000000000000001*A[2]*B[64]+0.5000000000000001*A[1]*B[63]+0.5*A[0]*B[39]; 
  tmp[40] = 0.4472135954999579*A[6]*B[65]+0.5000000000000001*A[2]*B[65]+0.5*A[3]*B[41]+0.4472135954999579*A[4]*B[40]+0.5*A[0]*B[40]+0.5000000000000001*A[1]*B[19]; 
  tmp[41] = 0.4472135954999579*A[7]*B[65]+0.5000000000000001*A[1]*B[65]+0.4472135954999579*A[5]*B[41]+0.5*A[0]*B[41]+0.5*A[3]*B[40]+0.5000000000000001*A[2]*B[19]; 
  tmp[42] = 0.5*A[3]*B[90]+0.5000000000000001*A[2]*B[67]+0.5000000000000001*A[1]*B[66]+0.5*A[0]*B[42]; 
  tmp[43] = 0.4472135954999579*A[7]*B[69]+0.31943828249997*A[6]*B[68]+0.5000000000000001*A[2]*B[68]+0.31943828249997*A[4]*B[43]+0.5*A[0]*B[43]+0.447213595499958*A[3]*B[25]+0.5*A[6]*B[13]+0.447213595499958*A[1]*B[12]+0.5000000000000001*A[4]*B[5]; 
  tmp[44] = 0.31943828249997*A[7]*B[69]+0.5000000000000001*A[1]*B[69]+0.4472135954999579*A[6]*B[68]+0.31943828249997*A[5]*B[44]+0.5*A[0]*B[44]+0.447213595499958*A[3]*B[25]+0.447213595499958*A[2]*B[13]+0.5*A[7]*B[12]+0.5000000000000001*A[5]*B[5]; 
  tmp[45] = 0.5*A[3]*B[93]+0.5000000000000001*A[2]*B[73]+0.5000000000000001*A[1]*B[72]+0.5*A[0]*B[45]; 
  tmp[46] = 0.5*A[3]*B[100]+0.5000000000000001*A[2]*B[78]+0.5000000000000001*A[1]*B[77]+0.5*A[0]*B[46]; 
  tmp[47] = 0.4472135954999579*A[6]*B[80]+0.5000000000000001*A[2]*B[80]+0.5*A[3]*B[48]+0.4472135954999579*A[4]*B[47]+0.5*A[0]*B[47]+0.5000000000000001*A[1]*B[20]; 
  tmp[48] = 0.4472135954999579*A[7]*B[80]+0.5000000000000001*A[1]*B[80]+0.4472135954999579*A[5]*B[48]+0.5*A[0]*B[48]+0.5*A[3]*B[47]+0.5000000000000001*A[2]*B[20]; 
  tmp[49] = 0.5*A[3]*B[103]+0.5000000000000001*A[2]*B[82]+0.5000000000000001*A[1]*B[81]+0.5*A[0]*B[49]; 
  tmp[50] = 0.5*A[3]*B[104]+0.5000000000000001*A[2]*B[84]+0.5000000000000001*A[1]*B[83]+0.5*A[0]*B[50]; 
  tmp[51] = 0.4*A[6]*B[88]+0.447213595499958*A[2]*B[88]+0.4*A[7]*B[87]+0.447213595499958*A[1]*B[87]+0.4472135954999579*A[3]*B[62]+0.4472135954999579*A[3]*B[61]+0.4472135954999579*A[5]*B[51]+0.4472135954999579*A[4]*B[51]+0.5*A[0]*B[51]+0.447213595499958*A[7]*B[24]+0.5*A[1]*B[24]+0.447213595499958*A[6]*B[23]+0.5*A[2]*B[23]+0.5*A[3]*B[11]; 
  tmp[52] = 0.4*A[6]*B[92]+0.447213595499958*A[2]*B[92]+0.4*A[7]*B[91]+0.447213595499958*A[1]*B[91]+0.4472135954999579*A[3]*B[71]+0.4472135954999579*A[3]*B[70]+0.4472135954999579*A[5]*B[52]+0.4472135954999579*A[4]*B[52]+0.5*A[0]*B[52]+0.447213595499958*A[7]*B[27]+0.5*A[1]*B[27]+0.447213595499958*A[6]*B[26]+0.5*A[2]*B[26]+0.5*A[3]*B[14]; 
  tmp[53] = 0.4*A[6]*B[95]+0.447213595499958*A[2]*B[95]+0.4*A[7]*B[94]+0.447213595499958*A[1]*B[94]+0.4472135954999579*A[3]*B[75]+0.4472135954999579*A[3]*B[74]+0.4472135954999579*A[5]*B[53]+0.4472135954999579*A[4]*B[53]+0.5*A[0]*B[53]+0.447213595499958*A[7]*B[29]+0.5*A[1]*B[29]+0.447213595499958*A[6]*B[28]+0.5*A[2]*B[28]+0.5*A[3]*B[15]; 
  tmp[54] = 0.5*A[5]*B[108]+0.4472135954999579*A[3]*B[107]+0.5*A[7]*B[97]+0.447213595499958*A[1]*B[96]+0.447213595499958*A[6]*B[86]+0.5*A[2]*B[86]+0.5*A[3]*B[55]+0.4472135954999579*A[4]*B[54]+0.5*A[0]*B[54]+0.5*A[1]*B[30]; 
  tmp[55] = 0.4472135954999579*A[3]*B[108]+0.5*A[4]*B[107]+0.447213595499958*A[2]*B[97]+0.5*A[6]*B[96]+0.447213595499958*A[7]*B[86]+0.5*A[1]*B[86]+0.4472135954999579*A[5]*B[55]+0.5*A[0]*B[55]+0.5*A[3]*B[54]+0.5*A[2]*B[30]; 
  tmp[56] = 0.4*A[3]*B[57]+0.4472135954999579*A[5]*B[56]+0.31943828249997*A[4]*B[56]+0.5*A[0]*B[56]+0.4472135954999579*A[6]*B[34]+0.31943828249997*A[6]*B[33]+0.5000000000000001*A[2]*B[33]+0.4*A[7]*B[21]+0.4472135954999579*A[1]*B[21]+0.5*A[4]*B[8]+0.4472135954999579*A[3]*B[7]+0.5000000000000001*B[3]*A[6]; 
  tmp[57] = 0.31943828249997*A[5]*B[57]+0.4472135954999579*A[4]*B[57]+0.5*A[0]*B[57]+0.4*A[3]*B[56]+0.31943828249997*A[7]*B[34]+0.5000000000000001*A[1]*B[34]+0.4472135954999579*A[7]*B[33]+0.4*A[6]*B[21]+0.4472135954999579*A[2]*B[21]+0.4472135954999579*A[3]*B[8]+0.5*A[5]*B[7]+0.5000000000000001*B[3]*A[7]; 
  tmp[58] = 0.4472135954999579*A[5]*B[58]+0.4472135954999579*A[4]*B[58]+0.5*A[0]*B[58]+0.4472135954999579*A[7]*B[36]+0.5000000000000001*A[1]*B[36]+0.4472135954999579*A[6]*B[35]+0.5000000000000001*A[2]*B[35]+0.5*A[3]*B[18]; 
  tmp[59] = 0.4*A[3]*B[60]+0.4472135954999579*A[5]*B[59]+0.31943828249997*A[4]*B[59]+0.5*A[0]*B[59]+0.4472135954999579*A[6]*B[38]+0.31943828249997*A[6]*B[37]+0.5000000000000001*A[2]*B[37]+0.4*A[7]*B[22]+0.4472135954999579*A[1]*B[22]+0.5*A[4]*B[10]+0.4472135954999579*A[3]*B[9]+0.5000000000000001*B[4]*A[6]; 
  tmp[60] = 0.31943828249997*A[5]*B[60]+0.4472135954999579*A[4]*B[60]+0.5*A[0]*B[60]+0.4*A[3]*B[59]+0.31943828249997*A[7]*B[38]+0.5000000000000001*A[1]*B[38]+0.4472135954999579*A[7]*B[37]+0.4*A[6]*B[22]+0.4472135954999579*A[2]*B[22]+0.4472135954999579*A[3]*B[10]+0.5*A[5]*B[9]+0.5000000000000001*B[4]*A[7]; 
  tmp[61] = 0.4472135954999579*A[7]*B[88]+0.31943828249997*A[6]*B[87]+0.5000000000000001*A[2]*B[87]+0.31943828249997*A[4]*B[61]+0.5*A[0]*B[61]+0.4472135954999579*A[3]*B[51]+0.5000000000000001*A[6]*B[24]+0.4472135954999579*A[1]*B[23]+0.5*A[4]*B[11]; 
  tmp[62] = 0.31943828249997*A[7]*B[88]+0.5000000000000001*A[1]*B[88]+0.4472135954999579*A[6]*B[87]+0.31943828249997*A[5]*B[62]+0.5*A[0]*B[62]+0.4472135954999579*A[3]*B[51]+0.4472135954999579*A[2]*B[24]+0.5000000000000001*A[7]*B[23]+0.5*A[5]*B[11]; 
  tmp[63] = 0.4472135954999579*A[6]*B[89]+0.5000000000000001*A[2]*B[89]+0.5*A[3]*B[64]+0.4472135954999579*A[4]*B[63]+0.5*A[0]*B[63]+0.5000000000000001*A[1]*B[39]; 
  tmp[64] = 0.4472135954999579*A[7]*B[89]+0.5000000000000001*A[1]*B[89]+0.4472135954999579*A[5]*B[64]+0.5*A[0]*B[64]+0.5*A[3]*B[63]+0.5000000000000001*A[2]*B[39]; 
  tmp[65] = 0.4472135954999579*A[5]*B[65]+0.4472135954999579*A[4]*B[65]+0.5*A[0]*B[65]+0.4472135954999579*A[7]*B[41]+0.5000000000000001*A[1]*B[41]+0.4472135954999579*A[6]*B[40]+0.5000000000000001*A[2]*B[40]+0.5*A[3]*B[19]; 
  tmp[66] = 0.4472135954999579*A[6]*B[90]+0.5000000000000001*A[2]*B[90]+0.5*A[3]*B[67]+0.4472135954999579*A[4]*B[66]+0.5*A[0]*B[66]+0.5000000000000001*A[1]*B[42]; 
  tmp[67] = 0.4472135954999579*A[7]*B[90]+0.5000000000000001*A[1]*B[90]+0.4472135954999579*A[5]*B[67]+0.5*A[0]*B[67]+0.5*A[3]*B[66]+0.5000000000000001*A[2]*B[42]; 
  tmp[68] = 0.4*A[3]*B[69]+0.4472135954999579*A[5]*B[68]+0.31943828249997*A[4]*B[68]+0.5*A[0]*B[68]+0.4472135954999579*A[6]*B[44]+0.31943828249997*A[6]*B[43]+0.5000000000000001*A[2]*B[43]+0.4*A[7]*B[25]+0.4472135954999579*A[1]*B[25]+0.5*A[4]*B[13]+0.4472135954999579*A[3]*B[12]+0.5000000000000001*B[5]*A[6]; 
  tmp[69] = 0.31943828249997*A[5]*B[69]+0.4472135954999579*A[4]*B[69]+0.5*A[0]*B[69]+0.4*A[3]*B[68]+0.31943828249997*A[7]*B[44]+0.5000000000000001*A[1]*B[44]+0.4472135954999579*A[7]*B[43]+0.4*A[6]*B[25]+0.4472135954999579*A[2]*B[25]+0.4472135954999579*A[3]*B[13]+0.5*A[5]*B[12]+0.5000000000000001*B[5]*A[7]; 
  tmp[70] = 0.4472135954999579*A[7]*B[92]+0.31943828249997*A[6]*B[91]+0.5000000000000001*A[2]*B[91]+0.31943828249997*A[4]*B[70]+0.5*A[0]*B[70]+0.4472135954999579*A[3]*B[52]+0.5000000000000001*A[6]*B[27]+0.4472135954999579*A[1]*B[26]+0.5*A[4]*B[14]; 
  tmp[71] = 0.31943828249997*A[7]*B[92]+0.5000000000000001*A[1]*B[92]+0.4472135954999579*A[6]*B[91]+0.31943828249997*A[5]*B[71]+0.5*A[0]*B[71]+0.4472135954999579*A[3]*B[52]+0.4472135954999579*A[2]*B[27]+0.5000000000000001*A[7]*B[26]+0.5*A[5]*B[14]; 
  tmp[72] = 0.4472135954999579*A[6]*B[93]+0.5000000000000001*A[2]*B[93]+0.5*A[3]*B[73]+0.4472135954999579*A[4]*B[72]+0.5*A[0]*B[72]+0.5000000000000001*A[1]*B[45]; 
  tmp[73] = 0.4472135954999579*A[7]*B[93]+0.5000000000000001*A[1]*B[93]+0.4472135954999579*A[5]*B[73]+0.5*A[0]*B[73]+0.5*A[3]*B[72]+0.5000000000000001*A[2]*B[45]; 
  tmp[74] = 0.4472135954999579*A[7]*B[95]+0.31943828249997*A[6]*B[94]+0.5000000000000001*A[2]*B[94]+0.31943828249997*A[4]*B[74]+0.5*A[0]*B[74]+0.4472135954999579*A[3]*B[53]+0.5000000000000001*A[6]*B[29]+0.4472135954999579*A[1]*B[28]+0.5*A[4]*B[15]; 
  tmp[75] = 0.31943828249997*A[7]*B[95]+0.5000000000000001*A[1]*B[95]+0.4472135954999579*A[6]*B[94]+0.31943828249997*A[5]*B[75]+0.5*A[0]*B[75]+0.4472135954999579*A[3]*B[53]+0.4472135954999579*A[2]*B[29]+0.5000000000000001*A[7]*B[28]+0.5*A[5]*B[15]; 
  tmp[76] = 0.5*A[3]*B[109]+0.5000000000000001*A[2]*B[99]+0.5000000000000001*A[1]*B[98]+0.5*A[0]*B[76]; 
  tmp[77] = 0.4472135954999579*A[6]*B[100]+0.5000000000000001*A[2]*B[100]+0.5*A[3]*B[78]+0.4472135954999579*A[4]*B[77]+0.5*A[0]*B[77]+0.5000000000000001*A[1]*B[46]; 
  tmp[78] = 0.4472135954999579*A[7]*B[100]+0.5000000000000001*A[1]*B[100]+0.4472135954999579*A[5]*B[78]+0.5*A[0]*B[78]+0.5*A[3]*B[77]+0.5000000000000001*A[2]*B[46]; 
  tmp[79] = 0.5*A[3]*B[110]+0.5000000000000001*A[2]*B[102]+0.5000000000000001*A[1]*B[101]+0.5*A[0]*B[79]; 
  tmp[80] = 0.4472135954999579*A[5]*B[80]+0.4472135954999579*A[4]*B[80]+0.5*A[0]*B[80]+0.4472135954999579*A[7]*B[48]+0.5000000000000001*A[1]*B[48]+0.4472135954999579*A[6]*B[47]+0.5000000000000001*A[2]*B[47]+0.5*A[3]*B[20]; 
  tmp[81] = 0.4472135954999579*A[6]*B[103]+0.5000000000000001*A[2]*B[103]+0.5*A[3]*B[82]+0.4472135954999579*A[4]*B[81]+0.5*A[0]*B[81]+0.5000000000000001*A[1]*B[49]; 
  tmp[82] = 0.4472135954999579*A[7]*B[103]+0.5000000000000001*A[1]*B[103]+0.4472135954999579*A[5]*B[82]+0.5*A[0]*B[82]+0.5*A[3]*B[81]+0.5000000000000001*A[2]*B[49]; 
  tmp[83] = 0.4472135954999579*A[6]*B[104]+0.5000000000000001*A[2]*B[104]+0.5*A[3]*B[84]+0.4472135954999579*A[4]*B[83]+0.5*A[0]*B[83]+0.5000000000000001*A[1]*B[50]; 
  tmp[84] = 0.4472135954999579*A[7]*B[104]+0.5000000000000001*A[1]*B[104]+0.4472135954999579*A[5]*B[84]+0.5*A[0]*B[84]+0.5*A[3]*B[83]+0.5000000000000001*A[2]*B[50]; 
  tmp[85] = 0.5*A[3]*B[111]+0.5000000000000001*A[2]*B[106]+0.5000000000000001*A[1]*B[105]+0.5*A[0]*B[85]; 
  tmp[86] = 0.4*A[6]*B[108]+0.4472135954999579*A[2]*B[108]+0.4*A[7]*B[107]+0.4472135954999579*A[1]*B[107]+0.447213595499958*A[3]*B[97]+0.447213595499958*A[3]*B[96]+0.4472135954999579*A[5]*B[86]+0.4472135954999579*A[4]*B[86]+0.5*A[0]*B[86]+0.447213595499958*A[7]*B[55]+0.5*A[1]*B[55]+0.447213595499958*A[6]*B[54]+0.5*A[2]*B[54]+0.5*A[3]*B[30]; 
  tmp[87] = 0.4*A[3]*B[88]+0.4472135954999579*A[5]*B[87]+0.31943828249997*A[4]*B[87]+0.5*A[0]*B[87]+0.4472135954999579*A[6]*B[62]+0.31943828249997*A[6]*B[61]+0.5000000000000001*A[2]*B[61]+0.4*A[7]*B[51]+0.447213595499958*A[1]*B[51]+0.5000000000000001*A[4]*B[24]+0.447213595499958*A[3]*B[23]+0.5*A[6]*B[11]; 
  tmp[88] = 0.31943828249997*A[5]*B[88]+0.4472135954999579*A[4]*B[88]+0.5*A[0]*B[88]+0.4*A[3]*B[87]+0.31943828249997*A[7]*B[62]+0.5000000000000001*A[1]*B[62]+0.4472135954999579*A[7]*B[61]+0.4*A[6]*B[51]+0.447213595499958*A[2]*B[51]+0.447213595499958*A[3]*B[24]+0.5000000000000001*A[5]*B[23]+0.5*A[7]*B[11]; 
  tmp[89] = 0.4472135954999579*A[5]*B[89]+0.4472135954999579*A[4]*B[89]+0.5*A[0]*B[89]+0.4472135954999579*A[7]*B[64]+0.5000000000000001*A[1]*B[64]+0.4472135954999579*A[6]*B[63]+0.5000000000000001*A[2]*B[63]+0.5*A[3]*B[39]; 
  tmp[90] = 0.4472135954999579*A[5]*B[90]+0.4472135954999579*A[4]*B[90]+0.5*A[0]*B[90]+0.4472135954999579*A[7]*B[67]+0.5000000000000001*A[1]*B[67]+0.4472135954999579*A[6]*B[66]+0.5000000000000001*A[2]*B[66]+0.5*A[3]*B[42]; 
  tmp[91] = 0.4*A[3]*B[92]+0.4472135954999579*A[5]*B[91]+0.31943828249997*A[4]*B[91]+0.5*A[0]*B[91]+0.4472135954999579*A[6]*B[71]+0.31943828249997*A[6]*B[70]+0.5000000000000001*A[2]*B[70]+0.4*A[7]*B[52]+0.447213595499958*A[1]*B[52]+0.5000000000000001*A[4]*B[27]+0.447213595499958*A[3]*B[26]+0.5*A[6]*B[14]; 
  tmp[92] = 0.31943828249997*A[5]*B[92]+0.4472135954999579*A[4]*B[92]+0.5*A[0]*B[92]+0.4*A[3]*B[91]+0.31943828249997*A[7]*B[71]+0.5000000000000001*A[1]*B[71]+0.4472135954999579*A[7]*B[70]+0.4*A[6]*B[52]+0.447213595499958*A[2]*B[52]+0.447213595499958*A[3]*B[27]+0.5000000000000001*A[5]*B[26]+0.5*A[7]*B[14]; 
  tmp[93] = 0.4472135954999579*A[5]*B[93]+0.4472135954999579*A[4]*B[93]+0.5*A[0]*B[93]+0.4472135954999579*A[7]*B[73]+0.5000000000000001*A[1]*B[73]+0.4472135954999579*A[6]*B[72]+0.5000000000000001*A[2]*B[72]+0.5*A[3]*B[45]; 
  tmp[94] = 0.4*A[3]*B[95]+0.4472135954999579*A[5]*B[94]+0.31943828249997*A[4]*B[94]+0.5*A[0]*B[94]+0.4472135954999579*A[6]*B[75]+0.31943828249997*A[6]*B[74]+0.5000000000000001*A[2]*B[74]+0.4*A[7]*B[53]+0.447213595499958*A[1]*B[53]+0.5000000000000001*A[4]*B[29]+0.447213595499958*A[3]*B[28]+0.5*A[6]*B[15]; 
  tmp[95] = 0.31943828249997*A[5]*B[95]+0.4472135954999579*A[4]*B[95]+0.5*A[0]*B[95]+0.4*A[3]*B[94]+0.31943828249997*A[7]*B[75]+0.5000000000000001*A[1]*B[75]+0.4472135954999579*A[7]*B[74]+0.4*A[6]*B[53]+0.447213595499958*A[2]*B[53]+0.447213595499958*A[3]*B[29]+0.5000000000000001*A[5]*B[28]+0.5*A[7]*B[15]; 
  tmp[96] = 0.4472135954999579*A[7]*B[108]+0.31943828249997*A[6]*B[107]+0.5000000000000001*A[2]*B[107]+0.31943828249997*A[4]*B[96]+0.5*A[0]*B[96]+0.447213595499958*A[3]*B[86]+0.5*A[6]*B[55]+0.447213595499958*A[1]*B[54]+0.5000000000000001*A[4]*B[30]; 
  tmp[97] = 0.31943828249997*A[7]*B[108]+0.5000000000000001*A[1]*B[108]+0.4472135954999579*A[6]*B[107]+0.31943828249997*A[5]*B[97]+0.5*A[0]*B[97]+0.447213595499958*A[3]*B[86]+0.447213595499958*A[2]*B[55]+0.5*A[7]*B[54]+0.5000000000000001*A[5]*B[30]; 
  tmp[98] = 0.4472135954999579*A[6]*B[109]+0.5000000000000001*A[2]*B[109]+0.5*A[3]*B[99]+0.4472135954999579*A[4]*B[98]+0.5*A[0]*B[98]+0.5000000000000001*A[1]*B[76]; 
  tmp[99] = 0.4472135954999579*A[7]*B[109]+0.5000000000000001*A[1]*B[109]+0.4472135954999579*A[5]*B[99]+0.5*A[0]*B[99]+0.5*A[3]*B[98]+0.5000000000000001*A[2]*B[76]; 
  tmp[100] = 0.4472135954999579*A[5]*B[100]+0.4472135954999579*A[4]*B[100]+0.5*A[0]*B[100]+0.4472135954999579*A[7]*B[78]+0.5000000000000001*A[1]*B[78]+0.4472135954999579*A[6]*B[77]+0.5000000000000001*A[2]*B[77]+0.5*A[3]*B[46]; 
  tmp[101] = 0.4472135954999579*A[6]*B[110]+0.5000000000000001*A[2]*B[110]+0.5*A[3]*B[102]+0.4472135954999579*A[4]*B[101]+0.5*A[0]*B[101]+0.5000000000000001*A[1]*B[79]; 
  tmp[102] = 0.4472135954999579*A[7]*B[110]+0.5000000000000001*A[1]*B[110]+0.4472135954999579*A[5]*B[102]+0.5*A[0]*B[102]+0.5*A[3]*B[101]+0.5000000000000001*A[2]*B[79]; 
  tmp[103] = 0.4472135954999579*A[5]*B[103]+0.4472135954999579*A[4]*B[103]+0.5*A[0]*B[103]+0.4472135954999579*A[7]*B[82]+0.5000000000000001*A[1]*B[82]+0.4472135954999579*A[6]*B[81]+0.5000000000000001*A[2]*B[81]+0.5*A[3]*B[49]; 
  tmp[104] = 0.4472135954999579*A[5]*B[104]+0.4472135954999579*A[4]*B[104]+0.5*A[0]*B[104]+0.4472135954999579*A[7]*B[84]+0.5000000000000001*A[1]*B[84]+0.4472135954999579*A[6]*B[83]+0.5000000000000001*A[2]*B[83]+0.5*A[3]*B[50]; 
  tmp[105] = 0.4472135954999579*A[6]*B[111]+0.5000000000000001*A[2]*B[111]+0.5*A[3]*B[106]+0.4472135954999579*A[4]*B[105]+0.5*A[0]*B[105]+0.5000000000000001*A[1]*B[85]; 
  tmp[106] = 0.4472135954999579*A[7]*B[111]+0.5000000000000001*A[1]*B[111]+0.4472135954999579*A[5]*B[106]+0.5*A[0]*B[106]+0.5*A[3]*B[105]+0.5000000000000001*A[2]*B[85]; 
  tmp[107] = 0.4*A[3]*B[108]+0.4472135954999579*A[5]*B[107]+0.31943828249997*A[4]*B[107]+0.5*A[0]*B[107]+0.4472135954999579*A[6]*B[97]+0.31943828249997*A[6]*B[96]+0.5000000000000001*A[2]*B[96]+0.4*A[7]*B[86]+0.4472135954999579*A[1]*B[86]+0.5*A[4]*B[55]+0.4472135954999579*A[3]*B[54]+0.5000000000000001*A[6]*B[30]; 
  tmp[108] = 0.31943828249997*A[5]*B[108]+0.4472135954999579*A[4]*B[108]+0.5*A[0]*B[108]+0.4*A[3]*B[107]+0.31943828249997*A[7]*B[97]+0.5000000000000001*A[1]*B[97]+0.4472135954999579*A[7]*B[96]+0.4*A[6]*B[86]+0.4472135954999579*A[2]*B[86]+0.4472135954999579*A[3]*B[55]+0.5*A[5]*B[54]+0.5000000000000001*A[7]*B[30]; 
  tmp[109] = 0.4472135954999579*A[5]*B[109]+0.4472135954999579*A[4]*B[109]+0.5*A[0]*B[109]+0.4472135954999579*A[7]*B[99]+0.5000000000000001*A[1]*B[99]+0.4472135954999579*A[6]*B[98]+0.5000000000000001*A[2]*B[98]+0.5*A[3]*B[76]; 
  tmp[110] = 0.4472135954999579*A[5]*B[110]+0.4472135954999579*A[4]*B[110]+0.5*A[0]*B[110]+0.4472135954999579*A[7]*B[102]+0.5000000000000001*A[1]*B[102]+0.4472135954999579*A[6]*B[101]+0.5000000000000001*A[2]*B[101]+0.5*A[3]*B[79]; 
  tmp[111] = 0.4472135954999579*A[5]*B[111]+0.4472135954999579*A[4]*B[111]+0.5*A[0]*B[111]+0.4472135954999579*A[7]*B[106]+0.5000000000000001*A[1]*B[106]+0.4472135954999579*A[6]*B[105]+0.5000000000000001*A[2]*B[105]+0.5*A[3]*B[85]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<112; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide2x3vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.5*A[3])-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.5*A[3])-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
 
  double As[4]; 
  double Bs[32]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = 0.0; 
    Bs[11] = B[11]; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = 0.0; 
    Bs[17] = 0.0; 
    Bs[18] = 0.0; 
    Bs[19] = 0.0; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = B[25]; 
    Bs[26] = 0.0; 
    Bs[27] = 0.0; 
    Bs[28] = 0.0; 
    Bs[29] = 0.0; 
    Bs[30] = 0.0; 
    Bs[31] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
  } 
 
  // Fill AEM_D matrix. 
  data->AEM_D(0,0) = 0.5*As[0]; 
  data->AEM_D(0,1) = 0.5*As[1]; 
  data->AEM_D(0,2) = 0.5*As[2]; 
  data->AEM_D(0,4) = 0.5*As[1]; 
  data->AEM_D(0,5) = 0.5*As[0]; 
  data->AEM_D(0,6) = 0.5*As[3]; 
  data->AEM_D(0,8) = 0.5*As[2]; 
  data->AEM_D(0,9) = 0.5*As[3]; 
  data->AEM_D(0,10) = 0.5*As[0]; 
  data->AEM_D(0,15) = 0.5*As[0]; 
  data->AEM_D(0,24) = 0.5*As[3]; 
  data->AEM_D(0,25) = 0.5*As[2]; 
  data->AEM_D(0,26) = 0.5*As[1]; 
  data->AEM_D(0,31) = 0.5*As[1]; 
  data->AEM_D(1,3) = 0.5*As[2]; 
  data->AEM_D(2,3) = 0.5*As[3]; 
 
  // Fill BEV_D. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,32,1) = data->u_D; 
 
} 
 
void CartFieldBinOpDivide2x3vSer_P2(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.936491673103709*A[7])-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]+1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if ((-1.936491673103709*A[7])-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]+1.5*A[3]-0.8660254037844386*A[2]-0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.936491673103709*A[7]-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]-1.5*A[3]-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
  if (1.936491673103709*A[7]-1.936491673103709*A[6]+1.118033988749895*A[5]+1.118033988749895*A[4]-1.5*A[3]-0.8660254037844386*A[2]+0.8660254037844386*A[1]+0.5*A[0] < 0) { 
    avgA = true;
  }
 
  double As[8]; 
  double Bs[112]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = 0.0; 
    Bs[11] = B[11]; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = 0.0; 
    Bs[17] = 0.0; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = 0.0; 
    Bs[26] = 0.0; 
    Bs[27] = 0.0; 
    Bs[28] = 0.0; 
    Bs[29] = 0.0; 
    Bs[30] = B[30]; 
    Bs[31] = 0.0; 
    Bs[32] = 0.0; 
    Bs[33] = 0.0; 
    Bs[34] = 0.0; 
    Bs[35] = 0.0; 
    Bs[36] = 0.0; 
    Bs[37] = 0.0; 
    Bs[38] = 0.0; 
    Bs[39] = B[39]; 
    Bs[40] = 0.0; 
    Bs[41] = 0.0; 
    Bs[42] = B[42]; 
    Bs[43] = 0.0; 
    Bs[44] = 0.0; 
    Bs[45] = B[45]; 
    Bs[46] = B[46]; 
    Bs[47] = 0.0; 
    Bs[48] = 0.0; 
    Bs[49] = B[49]; 
    Bs[50] = B[50]; 
    Bs[51] = 0.0; 
    Bs[52] = 0.0; 
    Bs[53] = 0.0; 
    Bs[54] = 0.0; 
    Bs[55] = 0.0; 
    Bs[56] = 0.0; 
    Bs[57] = 0.0; 
    Bs[58] = 0.0; 
    Bs[59] = 0.0; 
    Bs[60] = 0.0; 
    Bs[61] = 0.0; 
    Bs[62] = 0.0; 
    Bs[63] = 0.0; 
    Bs[64] = 0.0; 
    Bs[65] = 0.0; 
    Bs[66] = 0.0; 
    Bs[67] = 0.0; 
    Bs[68] = 0.0; 
    Bs[69] = 0.0; 
    Bs[70] = 0.0; 
    Bs[71] = 0.0; 
    Bs[72] = 0.0; 
    Bs[73] = 0.0; 
    Bs[74] = 0.0; 
    Bs[75] = 0.0; 
    Bs[76] = B[76]; 
    Bs[77] = 0.0; 
    Bs[78] = 0.0; 
    Bs[79] = B[79]; 
    Bs[80] = 0.0; 
    Bs[81] = 0.0; 
    Bs[82] = 0.0; 
    Bs[83] = 0.0; 
    Bs[84] = 0.0; 
    Bs[85] = B[85]; 
    Bs[86] = 0.0; 
    Bs[87] = 0.0; 
    Bs[88] = 0.0; 
    Bs[89] = 0.0; 
    Bs[90] = 0.0; 
    Bs[91] = 0.0; 
    Bs[92] = 0.0; 
    Bs[93] = 0.0; 
    Bs[94] = 0.0; 
    Bs[95] = 0.0; 
    Bs[96] = 0.0; 
    Bs[97] = 0.0; 
    Bs[98] = 0.0; 
    Bs[99] = 0.0; 
    Bs[100] = 0.0; 
    Bs[101] = 0.0; 
    Bs[102] = 0.0; 
    Bs[103] = 0.0; 
    Bs[104] = 0.0; 
    Bs[105] = 0.0; 
    Bs[106] = 0.0; 
    Bs[107] = 0.0; 
    Bs[108] = 0.0; 
    Bs[109] = 0.0; 
    Bs[110] = 0.0; 
    Bs[111] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
    Bs[32] = B[32]; 
    Bs[33] = B[33]; 
    Bs[34] = B[34]; 
    Bs[35] = B[35]; 
    Bs[36] = B[36]; 
    Bs[37] = B[37]; 
    Bs[38] = B[38]; 
    Bs[39] = B[39]; 
    Bs[40] = B[40]; 
    Bs[41] = B[41]; 
    Bs[42] = B[42]; 
    Bs[43] = B[43]; 
    Bs[44] = B[44]; 
    Bs[45] = B[45]; 
    Bs[46] = B[46]; 
    Bs[47] = B[47]; 
    Bs[48] = B[48]; 
    Bs[49] = B[49]; 
    Bs[50] = B[50]; 
    Bs[51] = B[51]; 
    Bs[52] = B[52]; 
    Bs[53] = B[53]; 
    Bs[54] = B[54]; 
    Bs[55] = B[55]; 
    Bs[56] = B[56]; 
    Bs[57] = B[57]; 
    Bs[58] = B[58]; 
    Bs[59] = B[59]; 
    Bs[60] = B[60]; 
    Bs[61] = B[61]; 
    Bs[62] = B[62]; 
    Bs[63] = B[63]; 
    Bs[64] = B[64]; 
    Bs[65] = B[65]; 
    Bs[66] = B[66]; 
    Bs[67] = B[67]; 
    Bs[68] = B[68]; 
    Bs[69] = B[69]; 
    Bs[70] = B[70]; 
    Bs[71] = B[71]; 
    Bs[72] = B[72]; 
    Bs[73] = B[73]; 
    Bs[74] = B[74]; 
    Bs[75] = B[75]; 
    Bs[76] = B[76]; 
    Bs[77] = B[77]; 
    Bs[78] = B[78]; 
    Bs[79] = B[79]; 
    Bs[80] = B[80]; 
    Bs[81] = B[81]; 
    Bs[82] = B[82]; 
    Bs[83] = B[83]; 
    Bs[84] = B[84]; 
    Bs[85] = B[85]; 
    Bs[86] = B[86]; 
    Bs[87] = B[87]; 
    Bs[88] = B[88]; 
    Bs[89] = B[89]; 
    Bs[90] = B[90]; 
    Bs[91] = B[91]; 
    Bs[92] = B[92]; 
    Bs[93] = B[93]; 
    Bs[94] = B[94]; 
    Bs[95] = B[95]; 
    Bs[96] = B[96]; 
    Bs[97] = B[97]; 
    Bs[98] = B[98]; 
    Bs[99] = B[99]; 
    Bs[100] = B[100]; 
    Bs[101] = B[101]; 
    Bs[102] = B[102]; 
    Bs[103] = B[103]; 
    Bs[104] = B[104]; 
    Bs[105] = B[105]; 
    Bs[106] = B[106]; 
    Bs[107] = B[107]; 
    Bs[108] = B[108]; 
    Bs[109] = B[109]; 
    Bs[110] = B[110]; 
    Bs[111] = B[111]; 
  } 
 
  // Fill AEM_D matrix. 
  data->AEM_D(0,0) = 0.5*As[0]; 
  data->AEM_D(0,1) = 0.5*As[1]; 
  data->AEM_D(0,2) = 0.5*As[2]; 
  data->AEM_D(0,6) = 0.5*As[3]; 
  data->AEM_D(0,8) = 0.5*As[1]; 
  data->AEM_D(0,9) = 0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(0,10) = 0.5*As[3]; 
  data->AEM_D(0,14) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(0,16) = 0.5*As[2]; 
  data->AEM_D(0,17) = 0.5*As[3]; 
  data->AEM_D(0,18) = 0.4472135954999579*As[5]+0.5*As[0]; 
  data->AEM_D(0,22) = 0.447213595499958*As[7]+0.5*As[1]; 
  data->AEM_D(0,27) = 0.5*As[0]; 
  data->AEM_D(0,31) = 0.5*As[1]; 
  data->AEM_D(0,36) = 0.5*As[0]; 
  data->AEM_D(0,45) = 0.5*As[0]; 
  data->AEM_D(0,48) = 0.5*As[3]; 
  data->AEM_D(0,49) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(0,50) = 0.447213595499958*As[7]+0.5*As[1]; 
  data->AEM_D(0,54) = 0.4472135954999579*As[5]+0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(0,59) = 0.5*As[1]; 
  data->AEM_D(0,63) = 0.4472135954999579*As[4]+0.5*As[0]; 
  data->AEM_D(0,67) = 0.5*As[2]; 
  data->AEM_D(0,71) = 0.5*As[3]; 
  data->AEM_D(0,76) = 0.5*As[1]; 
  data->AEM_D(0,84) = 0.5*As[2]; 
  data->AEM_D(0,101) = 0.5*As[1]; 
  data->AEM_D(0,109) = 0.5*As[2]; 
  data->AEM_D(1,16) = 0.5*As[4]; 
  data->AEM_D(1,17) = 0.4472135954999579*As[1]; 
  data->AEM_D(1,18) = 0.5000000000000001*As[6]; 
  data->AEM_D(1,22) = 0.4472135954999579*As[3]; 
  data->AEM_D(1,24) = 0.5*As[5]; 
  data->AEM_D(1,25) = 0.5000000000000001*As[7]; 
  data->AEM_D(1,26) = 0.4472135954999579*As[2]; 
  data->AEM_D(1,30) = 0.4472135954999579*As[3]; 
  data->AEM_D(1,59) = 0.5*As[3]; 
  data->AEM_D(1,63) = 0.447213595499958*As[6]+0.5*As[2]; 
  data->AEM_D(1,68) = 0.5*As[3]; 
  data->AEM_D(1,93) = 0.5*As[3]; 
  data->AEM_D(2,24) = 0.5*As[6]; 
  data->AEM_D(2,25) = 0.447213595499958*As[3]; 
  data->AEM_D(2,26) = 0.5000000000000001*As[4]; 
  data->AEM_D(2,30) = 0.4*As[7]+0.447213595499958*As[1]; 
  data->AEM_D(2,32) = 0.5*As[7]; 
  data->AEM_D(2,33) = 0.5000000000000001*As[5]; 
  data->AEM_D(2,34) = 0.447213595499958*As[3]; 
  data->AEM_D(2,38) = 0.4*As[6]+0.447213595499958*As[2]; 
  data->AEM_D(2,43) = 0.5000000000000001*As[4]; 
  data->AEM_D(2,47) = 0.447213595499958*As[1]; 
  data->AEM_D(2,51) = 0.5000000000000001*As[5]; 
  data->AEM_D(2,55) = 0.5*As[7]; 
  data->AEM_D(2,76) = 0.5000000000000001*As[4]; 
  data->AEM_D(2,84) = 0.5000000000000001*As[5]; 
  data->AEM_D(3,13) = 0.5000000000000001*As[4]; 
  data->AEM_D(3,21) = 0.5000000000000001*As[5]; 
  data->AEM_D(4,3) = 0.5000000000000001*As[6]; 
  data->AEM_D(4,7) = 0.4472135954999579*As[3]; 
  data->AEM_D(4,11) = 0.5000000000000001*As[7]; 
  data->AEM_D(4,15) = 0.5*As[5]; 
  data->AEM_D(4,28) = 0.5000000000000001*As[6]; 
  data->AEM_D(4,36) = 0.5000000000000001*As[7]; 
  data->AEM_D(4,101) = 0.5000000000000001*As[6]; 
  data->AEM_D(4,109) = 0.5000000000000001*As[7]; 
 
  // Fill BEV_D. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31],Bs[32],Bs[33],Bs[34],Bs[35],Bs[36],Bs[37],Bs[38],Bs[39],Bs[40],Bs[41],Bs[42],Bs[43],Bs[44],Bs[45],Bs[46],Bs[47],Bs[48],Bs[49],Bs[50],Bs[51],Bs[52],Bs[53],Bs[54],Bs[55],Bs[56],Bs[57],Bs[58],Bs[59],Bs[60],Bs[61],Bs[62],Bs[63],Bs[64],Bs[65],Bs[66],Bs[67],Bs[68],Bs[69],Bs[70],Bs[71],Bs[72],Bs[73],Bs[74],Bs[75],Bs[76],Bs[77],Bs[78],Bs[79],Bs[80],Bs[81],Bs[82],Bs[83],Bs[84],Bs[85],Bs[86],Bs[87],Bs[88],Bs[89],Bs[90],Bs[91],Bs[92],Bs[93],Bs[94],Bs[95],Bs[96],Bs[97],Bs[98],Bs[99],Bs[100],Bs[101],Bs[102],Bs[103],Bs[104],Bs[105],Bs[106],Bs[107],Bs[108],Bs[109],Bs[110],Bs[111]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,112,1) = data->u_D; 
 
} 
 
