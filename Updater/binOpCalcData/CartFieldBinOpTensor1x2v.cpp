#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x2vTensor_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[8]; 
  tmp[0] = 0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[1]*B[7]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.7071067811865475*A[0]*B[7]+0.7071067811865475*A[1]*B[6]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<8; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x2vTensor_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[27]; 
  tmp[0] = 0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.632455532033676*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.632455532033676*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[2]*B[17]+0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.4517539514526256*A[2]*B[7]+0.7071067811865475*A[0]*B[7]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865475*A[2]*B[20]+0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865475*A[2]*B[21]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6324555320336759*A[1]*B[17]+0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.632455532033676*A[1]*B[4]+0.7071067811865475*A[2]*B[2]; 
  tmp[12] = 0.632455532033676*A[1]*B[20]+0.6324555320336759*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4517539514526256*A[2]*B[13]+0.7071067811865475*A[0]*B[13]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[3]; 
  tmp[14] = 0.7071067811865475*A[2]*B[23]+0.7071067811865475*A[1]*B[18]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.632455532033676*A[1]*B[21]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865475*A[2]*B[24]+0.7071067811865475*A[1]*B[19]+0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.4517539514526256*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.6324555320336759*A[1]*B[10]+0.7071067811865475*A[2]*B[6]; 
  tmp[18] = 0.6324555320336759*A[1]*B[23]+0.6324555320336759*A[2]*B[18]+0.7071067811865475*A[0]*B[18]+0.7071067811865475*A[1]*B[14]; 
  tmp[19] = 0.6324555320336759*A[1]*B[24]+0.6324555320336759*A[2]*B[19]+0.7071067811865475*A[0]*B[19]+0.7071067811865475*A[1]*B[16]; 
  tmp[20] = 0.4517539514526256*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.632455532033676*A[1]*B[12]+0.7071067811865475*A[2]*B[8]; 
  tmp[21] = 0.4517539514526256*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.632455532033676*A[1]*B[15]+0.7071067811865475*A[2]*B[9]; 
  tmp[22] = 0.7071067811865475*A[2]*B[26]+0.7071067811865475*A[1]*B[25]+0.7071067811865475*A[0]*B[22]; 
  tmp[23] = 0.4517539514526256*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.6324555320336759*A[1]*B[18]+0.7071067811865475*A[2]*B[14]; 
  tmp[24] = 0.4517539514526256*A[2]*B[24]+0.7071067811865475*A[0]*B[24]+0.6324555320336759*A[1]*B[19]+0.7071067811865475*A[2]*B[16]; 
  tmp[25] = 0.6324555320336759*A[1]*B[26]+0.6324555320336759*A[2]*B[25]+0.7071067811865475*A[0]*B[25]+0.7071067811865475*A[1]*B[22]; 
  tmp[26] = 0.4517539514526256*A[2]*B[26]+0.7071067811865475*A[0]*B[26]+0.6324555320336759*A[1]*B[25]+0.7071067811865475*A[2]*B[22]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<27; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpMultiply1x2vTensor_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[64]; 
  tmp[0] = 0.7071067811865475*A[3]*B[17]+0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6210590034081186*A[2]*B[17]+0.6210590034081186*A[3]*B[7]+0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865474*A[3]*B[26]+0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865474*A[3]*B[28]+0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.6210590034081187*A[2]*B[26]+0.6210590034081187*A[3]*B[11]+0.632455532033676*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865475*A[0]*B[4]+0.7071067811865475*A[1]*B[2]; 
  tmp[5] = 0.6210590034081187*A[2]*B[28]+0.6210590034081187*A[3]*B[13]+0.632455532033676*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865475*A[0]*B[5]+0.7071067811865475*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[3]*B[35]+0.7071067811865475*A[2]*B[20]+0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.421637021355784*A[3]*B[17]+0.6210590034081186*A[1]*B[17]+0.4517539514526256*A[2]*B[7]+0.7071067811865475*A[0]*B[7]+0.6210590034081186*B[1]*A[3]+0.7071067811865475*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865474*A[3]*B[38]+0.7071067811865475*A[2]*B[23]+0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865474*A[3]*B[40]+0.7071067811865475*A[2]*B[24]+0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6210590034081186*A[2]*B[35]+0.6210590034081186*A[3]*B[20]+0.6324555320336759*A[1]*B[20]+0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4216370213557839*A[3]*B[26]+0.6210590034081187*A[1]*B[26]+0.4517539514526256*A[2]*B[11]+0.7071067811865475*A[0]*B[11]+0.6210590034081187*A[3]*B[4]+0.632455532033676*A[1]*B[4]+0.7071067811865475*A[2]*B[2]; 
  tmp[12] = 0.6210590034081186*A[2]*B[38]+0.6210590034081188*A[3]*B[23]+0.632455532033676*A[1]*B[23]+0.6324555320336759*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4216370213557839*A[3]*B[28]+0.6210590034081187*A[1]*B[28]+0.4517539514526256*A[2]*B[13]+0.7071067811865475*A[0]*B[13]+0.6210590034081187*A[3]*B[5]+0.632455532033676*A[1]*B[5]+0.7071067811865475*A[2]*B[3]; 
  tmp[14] = 0.7071067811865474*A[3]*B[45]+0.7071067811865475*A[2]*B[32]+0.7071067811865475*A[1]*B[21]+0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6210590034081186*A[2]*B[40]+0.6210590034081188*A[3]*B[24]+0.632455532033676*A[1]*B[24]+0.6324555320336759*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865474*A[3]*B[47]+0.7071067811865475*A[2]*B[33]+0.7071067811865475*A[1]*B[22]+0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.421637021355784*A[2]*B[17]+0.7071067811865475*A[0]*B[17]+0.421637021355784*A[3]*B[7]+0.6210590034081186*A[1]*B[7]+0.7071067811865475*B[0]*A[3]+0.6210590034081186*B[1]*A[2]; 
  tmp[18] = 0.7071067811865475*A[3]*B[51]+0.7071067811865474*A[2]*B[39]+0.7071067811865474*A[1]*B[27]+0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.7071067811865475*A[3]*B[52]+0.7071067811865474*A[2]*B[42]+0.7071067811865474*A[1]*B[30]+0.7071067811865475*A[0]*B[19]; 
  tmp[20] = 0.421637021355784*A[3]*B[35]+0.6210590034081186*A[1]*B[35]+0.4517539514526256*A[2]*B[20]+0.7071067811865475*A[0]*B[20]+0.6210590034081186*A[3]*B[10]+0.6324555320336759*A[1]*B[10]+0.7071067811865475*A[2]*B[6]; 
  tmp[21] = 0.6210590034081187*A[2]*B[45]+0.6210590034081186*A[3]*B[32]+0.6324555320336759*A[1]*B[32]+0.6324555320336759*A[2]*B[21]+0.7071067811865475*A[0]*B[21]+0.7071067811865475*A[1]*B[14]; 
  tmp[22] = 0.6210590034081187*A[2]*B[47]+0.6210590034081186*A[3]*B[33]+0.6324555320336759*A[1]*B[33]+0.6324555320336759*A[2]*B[22]+0.7071067811865475*A[0]*B[22]+0.7071067811865475*A[1]*B[16]; 
  tmp[23] = 0.421637021355784*A[3]*B[38]+0.6210590034081186*A[1]*B[38]+0.4517539514526256*A[2]*B[23]+0.7071067811865475*A[0]*B[23]+0.6210590034081187*A[3]*B[12]+0.632455532033676*A[1]*B[12]+0.7071067811865475*A[2]*B[8]; 
  tmp[24] = 0.421637021355784*A[3]*B[40]+0.6210590034081186*A[1]*B[40]+0.4517539514526256*A[2]*B[24]+0.7071067811865475*A[0]*B[24]+0.6210590034081187*A[3]*B[15]+0.632455532033676*A[1]*B[15]+0.7071067811865475*A[2]*B[9]; 
  tmp[25] = 0.7071067811865475*A[3]*B[54]+0.7071067811865475*A[2]*B[44]+0.7071067811865475*A[1]*B[34]+0.7071067811865475*A[0]*B[25]; 
  tmp[26] = 0.421637021355784*A[2]*B[26]+0.7071067811865475*A[0]*B[26]+0.4216370213557839*A[3]*B[11]+0.6210590034081187*A[1]*B[11]+0.6210590034081187*A[2]*B[4]+0.7071067811865474*B[2]*A[3]; 
  tmp[27] = 0.6210590034081186*A[2]*B[51]+0.6210590034081186*A[3]*B[39]+0.6324555320336759*A[1]*B[39]+0.6324555320336759*A[2]*B[27]+0.7071067811865475*A[0]*B[27]+0.7071067811865474*A[1]*B[18]; 
  tmp[28] = 0.421637021355784*A[2]*B[28]+0.7071067811865475*A[0]*B[28]+0.4216370213557839*A[3]*B[13]+0.6210590034081187*A[1]*B[13]+0.6210590034081187*A[2]*B[5]+0.7071067811865474*A[3]*B[3]; 
  tmp[29] = 0.7071067811865474*A[3]*B[57]+0.7071067811865474*A[2]*B[46]+0.7071067811865474*A[1]*B[36]+0.7071067811865475*A[0]*B[29]; 
  tmp[30] = 0.6210590034081186*A[2]*B[52]+0.6210590034081186*A[3]*B[42]+0.6324555320336759*A[1]*B[42]+0.6324555320336759*A[2]*B[30]+0.7071067811865475*A[0]*B[30]+0.7071067811865474*A[1]*B[19]; 
  tmp[31] = 0.7071067811865474*A[3]*B[58]+0.7071067811865474*A[2]*B[49]+0.7071067811865474*A[1]*B[37]+0.7071067811865475*A[0]*B[31]; 
  tmp[32] = 0.421637021355784*A[3]*B[45]+0.6210590034081187*A[1]*B[45]+0.4517539514526256*A[2]*B[32]+0.7071067811865475*A[0]*B[32]+0.6210590034081186*A[3]*B[21]+0.6324555320336759*A[1]*B[21]+0.7071067811865475*A[2]*B[14]; 
  tmp[33] = 0.421637021355784*A[3]*B[47]+0.6210590034081187*A[1]*B[47]+0.4517539514526256*A[2]*B[33]+0.7071067811865475*A[0]*B[33]+0.6210590034081186*A[3]*B[22]+0.6324555320336759*A[1]*B[22]+0.7071067811865475*A[2]*B[16]; 
  tmp[34] = 0.6210590034081186*A[2]*B[54]+0.6210590034081186*A[3]*B[44]+0.6324555320336759*A[1]*B[44]+0.6324555320336759*A[2]*B[34]+0.7071067811865475*A[0]*B[34]+0.7071067811865475*A[1]*B[25]; 
  tmp[35] = 0.421637021355784*A[2]*B[35]+0.7071067811865475*A[0]*B[35]+0.421637021355784*A[3]*B[20]+0.6210590034081186*A[1]*B[20]+0.6210590034081186*A[2]*B[10]+0.7071067811865475*A[3]*B[6]; 
  tmp[36] = 0.6210590034081186*A[2]*B[57]+0.6210590034081187*A[3]*B[46]+0.632455532033676*A[1]*B[46]+0.6324555320336759*A[2]*B[36]+0.7071067811865475*A[0]*B[36]+0.7071067811865474*A[1]*B[29]; 
  tmp[37] = 0.6210590034081186*A[2]*B[58]+0.6210590034081187*A[3]*B[49]+0.632455532033676*A[1]*B[49]+0.6324555320336759*A[2]*B[37]+0.7071067811865475*A[0]*B[37]+0.7071067811865474*A[1]*B[31]; 
  tmp[38] = 0.421637021355784*A[2]*B[38]+0.7071067811865475*A[0]*B[38]+0.421637021355784*A[3]*B[23]+0.6210590034081186*A[1]*B[23]+0.6210590034081186*A[2]*B[12]+0.7071067811865474*A[3]*B[8]; 
  tmp[39] = 0.421637021355784*A[3]*B[51]+0.6210590034081186*A[1]*B[51]+0.4517539514526256*A[2]*B[39]+0.7071067811865475*A[0]*B[39]+0.6210590034081186*A[3]*B[27]+0.6324555320336759*A[1]*B[27]+0.7071067811865474*A[2]*B[18]; 
  tmp[40] = 0.421637021355784*A[2]*B[40]+0.7071067811865475*A[0]*B[40]+0.421637021355784*A[3]*B[24]+0.6210590034081186*A[1]*B[24]+0.6210590034081186*A[2]*B[15]+0.7071067811865474*A[3]*B[9]; 
  tmp[41] = 0.7071067811865474*A[3]*B[60]+0.7071067811865474*A[2]*B[55]+0.7071067811865475*A[1]*B[48]+0.7071067811865475*A[0]*B[41]; 
  tmp[42] = 0.421637021355784*A[3]*B[52]+0.6210590034081186*A[1]*B[52]+0.4517539514526256*A[2]*B[42]+0.7071067811865475*A[0]*B[42]+0.6210590034081186*A[3]*B[30]+0.6324555320336759*A[1]*B[30]+0.7071067811865474*A[2]*B[19]; 
  tmp[43] = 0.7071067811865474*A[3]*B[61]+0.7071067811865474*A[2]*B[56]+0.7071067811865475*A[1]*B[50]+0.7071067811865475*A[0]*B[43]; 
  tmp[44] = 0.421637021355784*A[3]*B[54]+0.6210590034081186*A[1]*B[54]+0.4517539514526256*A[2]*B[44]+0.7071067811865475*A[0]*B[44]+0.6210590034081186*A[3]*B[34]+0.6324555320336759*A[1]*B[34]+0.7071067811865475*A[2]*B[25]; 
  tmp[45] = 0.421637021355784*A[2]*B[45]+0.7071067811865475*A[0]*B[45]+0.421637021355784*A[3]*B[32]+0.6210590034081187*A[1]*B[32]+0.6210590034081187*A[2]*B[21]+0.7071067811865474*A[3]*B[14]; 
  tmp[46] = 0.421637021355784*A[3]*B[57]+0.6210590034081187*A[1]*B[57]+0.4517539514526256*A[2]*B[46]+0.7071067811865475*A[0]*B[46]+0.6210590034081187*A[3]*B[36]+0.632455532033676*A[1]*B[36]+0.7071067811865474*A[2]*B[29]; 
  tmp[47] = 0.421637021355784*A[2]*B[47]+0.7071067811865475*A[0]*B[47]+0.421637021355784*A[3]*B[33]+0.6210590034081187*A[1]*B[33]+0.6210590034081187*A[2]*B[22]+0.7071067811865474*A[3]*B[16]; 
  tmp[48] = 0.6210590034081187*A[2]*B[60]+0.6210590034081187*A[3]*B[55]+0.632455532033676*A[1]*B[55]+0.6324555320336759*A[2]*B[48]+0.7071067811865475*A[0]*B[48]+0.7071067811865475*A[1]*B[41]; 
  tmp[49] = 0.421637021355784*A[3]*B[58]+0.6210590034081187*A[1]*B[58]+0.4517539514526256*A[2]*B[49]+0.7071067811865475*A[0]*B[49]+0.6210590034081187*A[3]*B[37]+0.632455532033676*A[1]*B[37]+0.7071067811865474*A[2]*B[31]; 
  tmp[50] = 0.6210590034081187*A[2]*B[61]+0.6210590034081187*A[3]*B[56]+0.632455532033676*A[1]*B[56]+0.6324555320336759*A[2]*B[50]+0.7071067811865475*A[0]*B[50]+0.7071067811865475*A[1]*B[43]; 
  tmp[51] = 0.421637021355784*A[2]*B[51]+0.7071067811865475*A[0]*B[51]+0.421637021355784*A[3]*B[39]+0.6210590034081186*A[1]*B[39]+0.6210590034081187*A[2]*B[27]+0.7071067811865475*A[3]*B[18]; 
  tmp[52] = 0.421637021355784*A[2]*B[52]+0.7071067811865475*A[0]*B[52]+0.421637021355784*A[3]*B[42]+0.6210590034081186*A[1]*B[42]+0.6210590034081187*A[2]*B[30]+0.7071067811865475*A[3]*B[19]; 
  tmp[53] = 0.7071067811865475*A[3]*B[63]+0.7071067811865475*A[2]*B[62]+0.7071067811865475*A[1]*B[59]+0.7071067811865475*A[0]*B[53]; 
  tmp[54] = 0.421637021355784*A[2]*B[54]+0.7071067811865475*A[0]*B[54]+0.421637021355784*A[3]*B[44]+0.6210590034081186*A[1]*B[44]+0.6210590034081186*A[2]*B[34]+0.7071067811865475*A[3]*B[25]; 
  tmp[55] = 0.421637021355784*A[3]*B[60]+0.6210590034081186*A[1]*B[60]+0.4517539514526256*A[2]*B[55]+0.7071067811865475*A[0]*B[55]+0.6210590034081187*A[3]*B[48]+0.632455532033676*A[1]*B[48]+0.7071067811865474*A[2]*B[41]; 
  tmp[56] = 0.421637021355784*A[3]*B[61]+0.6210590034081186*A[1]*B[61]+0.4517539514526256*A[2]*B[56]+0.7071067811865475*A[0]*B[56]+0.6210590034081187*A[3]*B[50]+0.632455532033676*A[1]*B[50]+0.7071067811865474*A[2]*B[43]; 
  tmp[57] = 0.421637021355784*A[2]*B[57]+0.7071067811865475*A[0]*B[57]+0.421637021355784*A[3]*B[46]+0.6210590034081187*A[1]*B[46]+0.6210590034081186*A[2]*B[36]+0.7071067811865474*A[3]*B[29]; 
  tmp[58] = 0.421637021355784*A[2]*B[58]+0.7071067811865475*A[0]*B[58]+0.421637021355784*A[3]*B[49]+0.6210590034081187*A[1]*B[49]+0.6210590034081186*A[2]*B[37]+0.7071067811865474*A[3]*B[31]; 
  tmp[59] = 0.6210590034081186*A[2]*B[63]+0.6210590034081186*A[3]*B[62]+0.6324555320336759*A[1]*B[62]+0.6324555320336759*A[2]*B[59]+0.7071067811865475*A[0]*B[59]+0.7071067811865475*A[1]*B[53]; 
  tmp[60] = 0.421637021355784*A[2]*B[60]+0.7071067811865475*A[0]*B[60]+0.421637021355784*A[3]*B[55]+0.6210590034081186*A[1]*B[55]+0.6210590034081187*A[2]*B[48]+0.7071067811865474*A[3]*B[41]; 
  tmp[61] = 0.421637021355784*A[2]*B[61]+0.7071067811865475*A[0]*B[61]+0.421637021355784*A[3]*B[56]+0.6210590034081186*A[1]*B[56]+0.6210590034081187*A[2]*B[50]+0.7071067811865474*A[3]*B[43]; 
  tmp[62] = 0.421637021355784*A[3]*B[63]+0.6210590034081186*A[1]*B[63]+0.4517539514526256*A[2]*B[62]+0.7071067811865475*A[0]*B[62]+0.6210590034081186*A[3]*B[59]+0.6324555320336759*A[1]*B[59]+0.7071067811865475*A[2]*B[53]; 
  tmp[63] = 0.421637021355784*A[2]*B[63]+0.7071067811865475*A[0]*B[63]+0.421637021355784*A[3]*B[62]+0.6210590034081186*A[1]*B[62]+0.6210590034081186*A[2]*B[59]+0.7071067811865475*A[3]*B[53]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<64; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpDivide1x2vTensor_P1(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (0.7071067811865475*A[0]-1.224744871391589*A[1] < 0) { 
    avgA = true;
  }
  if (1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[2]; 
  double Bs[8]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = 0.0; 
    Bs[5] = 0.0; 
    Bs[6] = B[6]; 
    Bs[7] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(8,8); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(8);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(8);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,2) = 0.7071067811865475*As[1]; 
  AEM(0,3) = 0.7071067811865475*As[0]; 
 
  // Fill BEV. 
  BEV << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,8,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x2vTensor_P2(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if (1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
  if (1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[3]; 
  double Bs[27]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = 0.0; 
    Bs[5] = 0.0; 
    Bs[6] = B[6]; 
    Bs[7] = 0.0; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = B[14]; 
    Bs[15] = 0.0; 
    Bs[16] = B[16]; 
    Bs[17] = 0.0; 
    Bs[18] = 0.0; 
    Bs[19] = 0.0; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = B[22]; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = 0.0; 
    Bs[26] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(27,27); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(27);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(27);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,3) = 0.7071067811865475*As[1]; 
  AEM(0,4) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  AEM(0,8) = 0.7071067811865475*As[0]; 
  AEM(0,14) = 0.7071067811865475*As[1]; 
  AEM(0,21) = 0.7071067811865475*As[2]; 
  AEM(0,22) = 0.6324555320336759*As[1]; 
  AEM(1,8) = 0.7071067811865475*As[2]; 
 
  // Fill BEV. 
  BEV << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,27,1) = u; 
 
} 
 
void CartFieldBinOpDivide1x2vTensor_P3(const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.870828693386971*A[3])+1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
  if (1.870828693386971*A[3]+1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0) { 
    avgA = true;
  }
 
  double As[4]; 
  double Bs[64]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = 0.0; 
    Bs[5] = 0.0; 
    Bs[6] = B[6]; 
    Bs[7] = 0.0; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = B[14]; 
    Bs[15] = 0.0; 
    Bs[16] = B[16]; 
    Bs[17] = 0.0; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = B[25]; 
    Bs[26] = 0.0; 
    Bs[27] = 0.0; 
    Bs[28] = 0.0; 
    Bs[29] = B[29]; 
    Bs[30] = 0.0; 
    Bs[31] = B[31]; 
    Bs[32] = 0.0; 
    Bs[33] = 0.0; 
    Bs[34] = 0.0; 
    Bs[35] = 0.0; 
    Bs[36] = 0.0; 
    Bs[37] = 0.0; 
    Bs[38] = 0.0; 
    Bs[39] = 0.0; 
    Bs[40] = 0.0; 
    Bs[41] = B[41]; 
    Bs[42] = 0.0; 
    Bs[43] = B[43]; 
    Bs[44] = 0.0; 
    Bs[45] = 0.0; 
    Bs[46] = 0.0; 
    Bs[47] = 0.0; 
    Bs[48] = 0.0; 
    Bs[49] = 0.0; 
    Bs[50] = 0.0; 
    Bs[51] = 0.0; 
    Bs[52] = 0.0; 
    Bs[53] = B[53]; 
    Bs[54] = 0.0; 
    Bs[55] = 0.0; 
    Bs[56] = 0.0; 
    Bs[57] = 0.0; 
    Bs[58] = 0.0; 
    Bs[59] = 0.0; 
    Bs[60] = 0.0; 
    Bs[61] = 0.0; 
    Bs[62] = 0.0; 
    Bs[63] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
    Bs[32] = B[32]; 
    Bs[33] = B[33]; 
    Bs[34] = B[34]; 
    Bs[35] = B[35]; 
    Bs[36] = B[36]; 
    Bs[37] = B[37]; 
    Bs[38] = B[38]; 
    Bs[39] = B[39]; 
    Bs[40] = B[40]; 
    Bs[41] = B[41]; 
    Bs[42] = B[42]; 
    Bs[43] = B[43]; 
    Bs[44] = B[44]; 
    Bs[45] = B[45]; 
    Bs[46] = B[46]; 
    Bs[47] = B[47]; 
    Bs[48] = B[48]; 
    Bs[49] = B[49]; 
    Bs[50] = B[50]; 
    Bs[51] = B[51]; 
    Bs[52] = B[52]; 
    Bs[53] = B[53]; 
    Bs[54] = B[54]; 
    Bs[55] = B[55]; 
    Bs[56] = B[56]; 
    Bs[57] = B[57]; 
    Bs[58] = B[58]; 
    Bs[59] = B[59]; 
    Bs[60] = B[60]; 
    Bs[61] = B[61]; 
    Bs[62] = B[62]; 
    Bs[63] = B[63]; 
  } 
 
  // Declare Eigen Matrix with triple basis tensor dotted with B vector. 
  Eigen::MatrixXd AEM = Eigen::MatrixXd::Zero(64,64); 
  // Declare Eigen Vector with coefficients of B. 
  Eigen::VectorXd BEV = Eigen::VectorXd::Zero(64);  
  // Declare vector with solution to system of equations. 
  Eigen::VectorXd u = Eigen::VectorXd::Zero(64);  
 
  // Fill AEM matrix. 
  AEM(0,0) = 0.7071067811865475*As[0]; 
  AEM(0,1) = 0.7071067811865475*As[1]; 
  AEM(0,4) = 0.7071067811865475*As[1]; 
  AEM(0,5) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  AEM(0,10) = 0.7071067811865475*As[0]; 
  AEM(0,15) = 0.7071067811865475*As[0]; 
  AEM(0,18) = 0.7071067811865475*As[1]; 
  AEM(0,23) = 0.7071067811865475*As[1]; 
  AEM(0,28) = 0.7071067811865475*As[2]; 
  AEM(0,29) = 0.6210590034081186*As[3]+0.6324555320336759*As[1]; 
  AEM(0,46) = 0.7071067811865475*As[2]; 
  AEM(0,55) = 0.7071067811865475*As[2]; 
  AEM(1,4) = 0.7071067811865475*As[3]; 
  AEM(1,5) = 0.6210590034081186*As[2]; 
  AEM(1,42) = 0.7071067811865474*As[3]; 
  AEM(1,51) = 0.7071067811865474*As[3]; 
 
  // Fill BEV. 
  BEV << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31],Bs[32],Bs[33],Bs[34],Bs[35],Bs[36],Bs[37],Bs[38],Bs[39],Bs[40],Bs[41],Bs[42],Bs[43],Bs[44],Bs[45],Bs[46],Bs[47],Bs[48],Bs[49],Bs[50],Bs[51],Bs[52],Bs[53],Bs[54],Bs[55],Bs[56],Bs[57],Bs[58],Bs[59],Bs[60],Bs[61],Bs[62],Bs[63]; 
 
  // Solve the system of equations. 
  u = AEM.colPivHouseholderQr().solve(BEV); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,64,1) = u; 
 
} 
 
