#include <PositivityRescaleImpl.h> 
#include <vector>
#define NODE 0.3333333333333333 
//#define NODE 0.5773502691896258 
double findMinNodalValue(const double *fIn, int ndim) { 
  double fmin = 0.0; 
  if (ndim == 1) { 
  double fVal[2]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = -0.5*(2.449489742783178*fIn[1]*NODE-1.414213562373095*fIn[0]); 
  fVal[1] = 0.5*(2.449489742783178*fIn[1]*NODE+1.414213562373095*fIn[0]); 
  fmin = *std::min_element(fVal, fVal+2); 
  } 
  else if(ndim == 2) { 
  double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = 0.5*(NODE*(3.0*fIn[3]*NODE-1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
  fVal[1] = -0.5*(NODE*(3.0*fIn[3]*NODE+1.732050807568877*fIn[2]-1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[2] = -0.5*(NODE*(3.0*fIn[3]*NODE-1.732050807568877*fIn[2]+1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[3] = 0.5*(NODE*(3.0*fIn[3]*NODE+1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
  fmin = *std::min_element(fVal, fVal+4); 
  //if(fmin<-EPSILON) printf("f at control = {%e, %e, %e, %e}\n", fVal[0], fVal[1], fVal[2], fVal[3]);
  } 
  else if(ndim == 3) { 
  double fVal[8]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = -0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE-4.242640687119286*(fIn[6]+fIn[5]+fIn[4]))+2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[1] = 0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE+4.242640687119286*fIn[6]-4.242640687119286*(fIn[5]+fIn[4]))-2.449489742783178*(fIn[3]+fIn[2])+2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[2] = 0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE-4.242640687119286*fIn[6]+4.242640687119286*fIn[5]-4.242640687119286*fIn[4])-2.449489742783178*fIn[3]+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[3] = -0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE+4.242640687119286*(fIn[6]+fIn[5])-4.242640687119286*fIn[4])+2.449489742783178*fIn[3]-2.449489742783178*(fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[4] = 0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE-4.242640687119286*(fIn[6]+fIn[5])+4.242640687119286*fIn[4])+2.449489742783178*fIn[3]-2.449489742783178*(fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[5] = -0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE+4.242640687119286*fIn[6]-4.242640687119286*fIn[5]+4.242640687119286*fIn[4])-2.449489742783178*fIn[3]+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[6] = -0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE-4.242640687119286*fIn[6]+4.242640687119286*(fIn[5]+fIn[4]))-2.449489742783178*(fIn[3]+fIn[2])+2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[7] = 0.25*(NODE*(NODE*(7.348469228349534*fIn[7]*NODE+4.242640687119286*(fIn[6]+fIn[5]+fIn[4]))+2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fmin = *std::min_element(fVal, fVal+8); 
  } 
  else if(ndim == 4) { 
  double fVal[16]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*(fIn[14]+fIn[13]+fIn[12]+fIn[11]))+3.0*(fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]+fIn[5]))-1.732050807568877*(fIn[4]+fIn[3]+fIn[2]+fIn[1]))+fIn[0]); 
  fVal[1] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*fIn[14]-5.196152422706631*(fIn[13]+fIn[12]+fIn[11]))-3.0*(fIn[10]+fIn[9])+3.0*fIn[8]-3.0*fIn[7]+3.0*(fIn[6]+fIn[5]))+1.732050807568877*(fIn[4]+fIn[3]+fIn[2])-1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[2] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*fIn[14]+5.196152422706631*fIn[13]-5.196152422706631*(fIn[12]+fIn[11]))-3.0*fIn[10]+3.0*fIn[9]-3.0*fIn[8]+3.0*fIn[7]-3.0*fIn[6]+3.0*fIn[5])+1.732050807568877*(fIn[4]+fIn[3])-1.732050807568877*fIn[2]+1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[3] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*(fIn[14]+fIn[13])-5.196152422706631*(fIn[12]+fIn[11]))+3.0*fIn[10]-3.0*(fIn[9]+fIn[8]+fIn[7]+fIn[6])+3.0*fIn[5])-1.732050807568877*(fIn[4]+fIn[3])+1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
  fVal[4] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*(fIn[14]+fIn[13])+5.196152422706631*fIn[12]-5.196152422706631*fIn[11])+3.0*fIn[10]-3.0*(fIn[9]+fIn[8])+3.0*(fIn[7]+fIn[6])-3.0*fIn[5])+1.732050807568877*fIn[4]-1.732050807568877*fIn[3]+1.732050807568877*(fIn[2]+fIn[1]))-1.0*fIn[0]); 
  fVal[5] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*fIn[14]-5.196152422706631*fIn[13]+5.196152422706631*fIn[12]-5.196152422706631*fIn[11])-3.0*fIn[10]+3.0*fIn[9]-3.0*(fIn[8]+fIn[7])+3.0*fIn[6]-3.0*fIn[5])-1.732050807568877*fIn[4]+1.732050807568877*fIn[3]-1.732050807568877*fIn[2]+1.732050807568877*fIn[1])+fIn[0]); 
  fVal[6] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*fIn[14]+5.196152422706631*(fIn[13]+fIn[12])-5.196152422706631*fIn[11])-3.0*(fIn[10]+fIn[9])+3.0*(fIn[8]+fIn[7])-3.0*(fIn[6]+fIn[5]))-1.732050807568877*fIn[4]+1.732050807568877*(fIn[3]+fIn[2])-1.732050807568877*fIn[1])+fIn[0]); 
  fVal[7] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*(fIn[14]+fIn[13]+fIn[12])-5.196152422706631*fIn[11])+3.0*(fIn[10]+fIn[9]+fIn[8])-3.0*(fIn[7]+fIn[6]+fIn[5]))+1.732050807568877*fIn[4]-1.732050807568877*(fIn[3]+fIn[2]+fIn[1]))-1.0*fIn[0]); 
  fVal[8] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*(fIn[14]+fIn[13]+fIn[12])+5.196152422706631*fIn[11])+3.0*(fIn[10]+fIn[9]+fIn[8])-3.0*(fIn[7]+fIn[6]+fIn[5]))-1.732050807568877*fIn[4]+1.732050807568877*(fIn[3]+fIn[2]+fIn[1]))-1.0*fIn[0]); 
  fVal[9] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*fIn[14]-5.196152422706631*(fIn[13]+fIn[12])+5.196152422706631*fIn[11])-3.0*(fIn[10]+fIn[9])+3.0*(fIn[8]+fIn[7])-3.0*(fIn[6]+fIn[5]))+1.732050807568877*fIn[4]-1.732050807568877*(fIn[3]+fIn[2])+1.732050807568877*fIn[1])+fIn[0]); 
  fVal[10] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*fIn[14]+5.196152422706631*fIn[13]-5.196152422706631*fIn[12]+5.196152422706631*fIn[11])-3.0*fIn[10]+3.0*fIn[9]-3.0*(fIn[8]+fIn[7])+3.0*fIn[6]-3.0*fIn[5])+1.732050807568877*fIn[4]-1.732050807568877*fIn[3]+1.732050807568877*fIn[2]-1.732050807568877*fIn[1])+fIn[0]); 
  fVal[11] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*(fIn[14]+fIn[13])-5.196152422706631*fIn[12]+5.196152422706631*fIn[11])+3.0*fIn[10]-3.0*(fIn[9]+fIn[8])+3.0*(fIn[7]+fIn[6])-3.0*fIn[5])-1.732050807568877*fIn[4]+1.732050807568877*fIn[3]-1.732050807568877*(fIn[2]+fIn[1]))-1.0*fIn[0]); 
  fVal[12] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*(fIn[14]+fIn[13])+5.196152422706631*(fIn[12]+fIn[11]))+3.0*fIn[10]-3.0*(fIn[9]+fIn[8]+fIn[7]+fIn[6])+3.0*fIn[5])+1.732050807568877*(fIn[4]+fIn[3])-1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
  fVal[13] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*fIn[14]-5.196152422706631*fIn[13]+5.196152422706631*(fIn[12]+fIn[11]))-3.0*fIn[10]+3.0*fIn[9]-3.0*fIn[8]+3.0*fIn[7]-3.0*fIn[6]+3.0*fIn[5])-1.732050807568877*(fIn[4]+fIn[3])+1.732050807568877*fIn[2]-1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[14] = -0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE-5.196152422706631*fIn[14]+5.196152422706631*(fIn[13]+fIn[12]+fIn[11]))-3.0*(fIn[10]+fIn[9])+3.0*fIn[8]-3.0*fIn[7]+3.0*(fIn[6]+fIn[5]))-1.732050807568877*(fIn[4]+fIn[3]+fIn[2])+1.732050807568877*fIn[1])-1.0*fIn[0]); 
  fVal[15] = 0.25*(NODE*(NODE*(NODE*(9.0*fIn[15]*NODE+5.196152422706631*(fIn[14]+fIn[13]+fIn[12]+fIn[11]))+3.0*(fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]+fIn[5]))+1.732050807568877*(fIn[4]+fIn[3]+fIn[2]+fIn[1]))+fIn[0]); 
  fmin = *std::min_element(fVal, fVal+16); 
  } 
  else if(ndim == 5) { 
  double fVal[32]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29]+fIn[28]+fIn[27]+fIn[26]))+7.348469228349534*(fIn[25]+fIn[24]+fIn[23]+fIn[22]+fIn[21]+fIn[20]+fIn[19]+fIn[18]+fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14]+fIn[13]+fIn[12]+fIn[11]+fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]))+2.449489742783178*(fIn[5]+fIn[4]+fIn[3]+fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[1] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*(fIn[29]+fIn[28]+fIn[27]+fIn[26]))-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*fIn[23]-7.348469228349534*fIn[22]+7.348469228349534*(fIn[21]+fIn[20])-7.348469228349534*fIn[19]+7.348469228349534*(fIn[18]+fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14]+fIn[13])-4.242640687119286*fIn[12]+4.242640687119286*(fIn[11]+fIn[10])-4.242640687119286*fIn[9]+4.242640687119286*fIn[8]-4.242640687119286*(fIn[7]+fIn[6]))-2.449489742783178*(fIn[5]+fIn[4]+fIn[3]+fIn[2])+2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[2] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*fIn[29]-12.72792206135786*(fIn[28]+fIn[27]+fIn[26]))-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*fIn[23]+7.348469228349534*fIn[22]-7.348469228349534*fIn[21]+7.348469228349534*(fIn[20]+fIn[19])-7.348469228349534*fIn[18]+7.348469228349534*(fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14])-4.242640687119286*fIn[13]+4.242640687119286*(fIn[12]+fIn[11])-4.242640687119286*fIn[10]+4.242640687119286*fIn[9]-4.242640687119286*fIn[8]+4.242640687119286*fIn[7]-4.242640687119286*fIn[6])-2.449489742783178*(fIn[5]+fIn[4]+fIn[3])+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[3] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29])-12.72792206135786*(fIn[28]+fIn[27]+fIn[26]))+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23]+fIn[22]+fIn[21])+7.348469228349534*fIn[20]-7.348469228349534*(fIn[19]+fIn[18])+7.348469228349534*(fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14])+4.242640687119286*(fIn[13]+fIn[12])-4.242640687119286*fIn[11]+4.242640687119286*(fIn[10]+fIn[9]+fIn[8]+fIn[7])-4.242640687119286*fIn[6])+2.449489742783178*(fIn[5]+fIn[4]+fIn[3])-2.449489742783178*(fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[4] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29])+12.72792206135786*fIn[28]-12.72792206135786*(fIn[27]+fIn[26]))+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23])+7.348469228349534*(fIn[22]+fIn[21])-7.348469228349534*fIn[20]+7.348469228349534*(fIn[19]+fIn[18])-7.348469228349534*fIn[17]+7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*fIn[14]+4.242640687119286*(fIn[13]+fIn[12])-4.242640687119286*fIn[11]+4.242640687119286*(fIn[10]+fIn[9])-4.242640687119286*(fIn[8]+fIn[7])+4.242640687119286*fIn[6])-2.449489742783178*(fIn[5]+fIn[4])+2.449489742783178*fIn[3]-2.449489742783178*(fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[5] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*fIn[29]+12.72792206135786*fIn[28]-12.72792206135786*(fIn[27]+fIn[26]))-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*(fIn[23]+fIn[22])+7.348469228349534*fIn[21]-7.348469228349534*(fIn[20]+fIn[19])+7.348469228349534*fIn[18]-7.348469228349534*fIn[17]+7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*fIn[14]-4.242640687119286*fIn[13]+4.242640687119286*(fIn[12]+fIn[11])-4.242640687119286*fIn[10]+4.242640687119286*(fIn[9]+fIn[8])-4.242640687119286*fIn[7]+4.242640687119286*fIn[6])+2.449489742783178*(fIn[5]+fIn[4])-2.449489742783178*fIn[3]+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[6] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*(fIn[29]+fIn[28])-12.72792206135786*(fIn[27]+fIn[26]))-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*(fIn[23]+fIn[22])-7.348469228349534*(fIn[21]+fIn[20])+7.348469228349534*fIn[19]-7.348469228349534*(fIn[18]+fIn[17])+7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*(fIn[14]+fIn[13])-4.242640687119286*fIn[12]+4.242640687119286*(fIn[11]+fIn[10])-4.242640687119286*(fIn[9]+fIn[8])+4.242640687119286*(fIn[7]+fIn[6]))+2.449489742783178*(fIn[5]+fIn[4])-2.449489742783178*(fIn[3]+fIn[2])+2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[7] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29]+fIn[28])-12.72792206135786*(fIn[27]+fIn[26]))+7.348469228349534*(fIn[25]+fIn[24]+fIn[23])-7.348469228349534*(fIn[22]+fIn[21]+fIn[20]+fIn[19]+fIn[18]+fIn[17])+7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*(fIn[14]+fIn[13]+fIn[12]+fIn[11]+fIn[10]+fIn[9])+4.242640687119286*(fIn[8]+fIn[7]+fIn[6]))-2.449489742783178*(fIn[5]+fIn[4])+2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[8] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29]+fIn[28])+12.72792206135786*fIn[27]-12.72792206135786*fIn[26])+7.348469228349534*(fIn[25]+fIn[24]+fIn[23])-7.348469228349534*(fIn[22]+fIn[21]+fIn[20])+7.348469228349534*(fIn[19]+fIn[18]+fIn[17])-7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*(fIn[14]+fIn[13]+fIn[12])-4.242640687119286*(fIn[11]+fIn[10]+fIn[9])+4.242640687119286*(fIn[8]+fIn[7]+fIn[6]))-2.449489742783178*fIn[5]+2.449489742783178*fIn[4]-2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[9] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*(fIn[29]+fIn[28])+12.72792206135786*fIn[27]-12.72792206135786*fIn[26])-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*(fIn[23]+fIn[22])-7.348469228349534*(fIn[21]+fIn[20]+fIn[19])+7.348469228349534*(fIn[18]+fIn[17])-7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*(fIn[14]+fIn[13])+4.242640687119286*(fIn[12]+fIn[11]+fIn[10])-4.242640687119286*(fIn[9]+fIn[8])+4.242640687119286*(fIn[7]+fIn[6]))+2.449489742783178*fIn[5]-2.449489742783178*fIn[4]+2.449489742783178*(fIn[3]+fIn[2])-2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[10] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*fIn[29]-12.72792206135786*fIn[28]+12.72792206135786*fIn[27]-12.72792206135786*fIn[26])-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*(fIn[23]+fIn[22])+7.348469228349534*fIn[21]-7.348469228349534*fIn[20]+7.348469228349534*fIn[19]-7.348469228349534*fIn[18]+7.348469228349534*fIn[17]-7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*fIn[14]+4.242640687119286*fIn[13]-4.242640687119286*fIn[12]+4.242640687119286*fIn[11]-4.242640687119286*fIn[10]+4.242640687119286*(fIn[9]+fIn[8])-4.242640687119286*fIn[7]+4.242640687119286*fIn[6])+2.449489742783178*fIn[5]-2.449489742783178*fIn[4]+2.449489742783178*fIn[3]-2.449489742783178*fIn[2]+2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[11] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29])-12.72792206135786*fIn[28]+12.72792206135786*fIn[27]-12.72792206135786*fIn[26])+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23])+7.348469228349534*(fIn[22]+fIn[21])-7.348469228349534*(fIn[20]+fIn[19]+fIn[18])+7.348469228349534*fIn[17]-7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*fIn[14]-4.242640687119286*(fIn[13]+fIn[12]+fIn[11])+4.242640687119286*(fIn[10]+fIn[9])-4.242640687119286*(fIn[8]+fIn[7])+4.242640687119286*fIn[6])-2.449489742783178*fIn[5]+2.449489742783178*fIn[4]-2.449489742783178*fIn[3]+2.449489742783178*(fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[12] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29])+12.72792206135786*(fIn[28]+fIn[27])-12.72792206135786*fIn[26])+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23]+fIn[22]+fIn[21])+7.348469228349534*(fIn[20]+fIn[19]+fIn[18])-7.348469228349534*(fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14])-4.242640687119286*(fIn[13]+fIn[12]+fIn[11])+4.242640687119286*(fIn[10]+fIn[9]+fIn[8]+fIn[7])-4.242640687119286*fIn[6])+2.449489742783178*fIn[5]-2.449489742783178*(fIn[4]+fIn[3])+2.449489742783178*(fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[13] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*fIn[29]+12.72792206135786*(fIn[28]+fIn[27])-12.72792206135786*fIn[26])-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*fIn[23]+7.348469228349534*fIn[22]-7.348469228349534*fIn[21]+7.348469228349534*fIn[20]-7.348469228349534*fIn[19]+7.348469228349534*fIn[18]-7.348469228349534*(fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14])+4.242640687119286*fIn[13]-4.242640687119286*fIn[12]+4.242640687119286*fIn[11]-4.242640687119286*fIn[10]+4.242640687119286*fIn[9]-4.242640687119286*fIn[8]+4.242640687119286*fIn[7]-4.242640687119286*fIn[6])-2.449489742783178*fIn[5]+2.449489742783178*(fIn[4]+fIn[3])-2.449489742783178*fIn[2]+2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[14] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*(fIn[29]+fIn[28]+fIn[27])-12.72792206135786*fIn[26])-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*fIn[23]-7.348469228349534*fIn[22]+7.348469228349534*(fIn[21]+fIn[20]+fIn[19])-7.348469228349534*(fIn[18]+fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14]+fIn[13])+4.242640687119286*(fIn[12]+fIn[11]+fIn[10])-4.242640687119286*fIn[9]+4.242640687119286*fIn[8]-4.242640687119286*(fIn[7]+fIn[6]))-2.449489742783178*fIn[5]+2.449489742783178*(fIn[4]+fIn[3]+fIn[2])-2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[15] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29]+fIn[28]+fIn[27])-12.72792206135786*fIn[26])+7.348469228349534*(fIn[25]+fIn[24]+fIn[23]+fIn[22]+fIn[21]+fIn[20])-7.348469228349534*(fIn[19]+fIn[18]+fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14]+fIn[13]+fIn[12])-4.242640687119286*(fIn[11]+fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]))+2.449489742783178*fIn[5]-2.449489742783178*(fIn[4]+fIn[3]+fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[16] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29]+fIn[28]+fIn[27])+12.72792206135786*fIn[26])+7.348469228349534*(fIn[25]+fIn[24]+fIn[23]+fIn[22]+fIn[21]+fIn[20])-7.348469228349534*(fIn[19]+fIn[18]+fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14]+fIn[13]+fIn[12])+4.242640687119286*(fIn[11]+fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]))+2.449489742783178*fIn[5]-2.449489742783178*(fIn[4]+fIn[3]+fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[17] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*(fIn[29]+fIn[28]+fIn[27])+12.72792206135786*fIn[26])-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*fIn[23]-7.348469228349534*fIn[22]+7.348469228349534*(fIn[21]+fIn[20]+fIn[19])-7.348469228349534*(fIn[18]+fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14]+fIn[13])-4.242640687119286*(fIn[12]+fIn[11]+fIn[10])+4.242640687119286*fIn[9]-4.242640687119286*fIn[8]+4.242640687119286*(fIn[7]+fIn[6]))-2.449489742783178*fIn[5]+2.449489742783178*(fIn[4]+fIn[3]+fIn[2])-2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[18] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*fIn[29]-12.72792206135786*(fIn[28]+fIn[27])+12.72792206135786*fIn[26])-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*fIn[23]+7.348469228349534*fIn[22]-7.348469228349534*fIn[21]+7.348469228349534*fIn[20]-7.348469228349534*fIn[19]+7.348469228349534*fIn[18]-7.348469228349534*(fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14])-4.242640687119286*fIn[13]+4.242640687119286*fIn[12]-4.242640687119286*fIn[11]+4.242640687119286*fIn[10]-4.242640687119286*fIn[9]+4.242640687119286*fIn[8]-4.242640687119286*fIn[7]+4.242640687119286*fIn[6])-2.449489742783178*fIn[5]+2.449489742783178*(fIn[4]+fIn[3])-2.449489742783178*fIn[2]+2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[19] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29])-12.72792206135786*(fIn[28]+fIn[27])+12.72792206135786*fIn[26])+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23]+fIn[22]+fIn[21])+7.348469228349534*(fIn[20]+fIn[19]+fIn[18])-7.348469228349534*(fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14])+4.242640687119286*(fIn[13]+fIn[12]+fIn[11])-4.242640687119286*(fIn[10]+fIn[9]+fIn[8]+fIn[7])+4.242640687119286*fIn[6])+2.449489742783178*fIn[5]-2.449489742783178*(fIn[4]+fIn[3])+2.449489742783178*(fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[20] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29])+12.72792206135786*fIn[28]-12.72792206135786*fIn[27]+12.72792206135786*fIn[26])+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23])+7.348469228349534*(fIn[22]+fIn[21])-7.348469228349534*(fIn[20]+fIn[19]+fIn[18])+7.348469228349534*fIn[17]-7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*fIn[14]+4.242640687119286*(fIn[13]+fIn[12]+fIn[11])-4.242640687119286*(fIn[10]+fIn[9])+4.242640687119286*(fIn[8]+fIn[7])-4.242640687119286*fIn[6])-2.449489742783178*fIn[5]+2.449489742783178*fIn[4]-2.449489742783178*fIn[3]+2.449489742783178*(fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[21] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*fIn[29]+12.72792206135786*fIn[28]-12.72792206135786*fIn[27]+12.72792206135786*fIn[26])-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*(fIn[23]+fIn[22])+7.348469228349534*fIn[21]-7.348469228349534*fIn[20]+7.348469228349534*fIn[19]-7.348469228349534*fIn[18]+7.348469228349534*fIn[17]-7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*fIn[14]-4.242640687119286*fIn[13]+4.242640687119286*fIn[12]-4.242640687119286*fIn[11]+4.242640687119286*fIn[10]-4.242640687119286*(fIn[9]+fIn[8])+4.242640687119286*fIn[7]-4.242640687119286*fIn[6])+2.449489742783178*fIn[5]-2.449489742783178*fIn[4]+2.449489742783178*fIn[3]-2.449489742783178*fIn[2]+2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[22] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*(fIn[29]+fIn[28])-12.72792206135786*fIn[27]+12.72792206135786*fIn[26])-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*(fIn[23]+fIn[22])-7.348469228349534*(fIn[21]+fIn[20]+fIn[19])+7.348469228349534*(fIn[18]+fIn[17])-7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*(fIn[14]+fIn[13])-4.242640687119286*(fIn[12]+fIn[11]+fIn[10])+4.242640687119286*(fIn[9]+fIn[8])-4.242640687119286*(fIn[7]+fIn[6]))+2.449489742783178*fIn[5]-2.449489742783178*fIn[4]+2.449489742783178*(fIn[3]+fIn[2])-2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[23] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29]+fIn[28])-12.72792206135786*fIn[27]+12.72792206135786*fIn[26])+7.348469228349534*(fIn[25]+fIn[24]+fIn[23])-7.348469228349534*(fIn[22]+fIn[21]+fIn[20])+7.348469228349534*(fIn[19]+fIn[18]+fIn[17])-7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*(fIn[14]+fIn[13]+fIn[12])+4.242640687119286*(fIn[11]+fIn[10]+fIn[9])-4.242640687119286*(fIn[8]+fIn[7]+fIn[6]))-2.449489742783178*fIn[5]+2.449489742783178*fIn[4]-2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[24] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29]+fIn[28])+12.72792206135786*(fIn[27]+fIn[26]))+7.348469228349534*(fIn[25]+fIn[24]+fIn[23])-7.348469228349534*(fIn[22]+fIn[21]+fIn[20]+fIn[19]+fIn[18]+fIn[17])+7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*(fIn[14]+fIn[13]+fIn[12]+fIn[11]+fIn[10]+fIn[9])-4.242640687119286*(fIn[8]+fIn[7]+fIn[6]))-2.449489742783178*(fIn[5]+fIn[4])+2.449489742783178*(fIn[3]+fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[25] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*(fIn[29]+fIn[28])+12.72792206135786*(fIn[27]+fIn[26]))-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*(fIn[23]+fIn[22])-7.348469228349534*(fIn[21]+fIn[20])+7.348469228349534*fIn[19]-7.348469228349534*(fIn[18]+fIn[17])+7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*(fIn[14]+fIn[13])+4.242640687119286*fIn[12]-4.242640687119286*(fIn[11]+fIn[10])+4.242640687119286*(fIn[9]+fIn[8])-4.242640687119286*(fIn[7]+fIn[6]))+2.449489742783178*(fIn[5]+fIn[4])-2.449489742783178*(fIn[3]+fIn[2])+2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[26] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*fIn[29]-12.72792206135786*fIn[28]+12.72792206135786*(fIn[27]+fIn[26]))-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*(fIn[23]+fIn[22])+7.348469228349534*fIn[21]-7.348469228349534*(fIn[20]+fIn[19])+7.348469228349534*fIn[18]-7.348469228349534*fIn[17]+7.348469228349534*fIn[16])+4.242640687119286*fIn[15]-4.242640687119286*fIn[14]+4.242640687119286*fIn[13]-4.242640687119286*(fIn[12]+fIn[11])+4.242640687119286*fIn[10]-4.242640687119286*(fIn[9]+fIn[8])+4.242640687119286*fIn[7]-4.242640687119286*fIn[6])+2.449489742783178*(fIn[5]+fIn[4])-2.449489742783178*fIn[3]+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])+1.414213562373095*fIn[0]); 
  fVal[27] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29])-12.72792206135786*fIn[28]+12.72792206135786*(fIn[27]+fIn[26]))+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23])+7.348469228349534*(fIn[22]+fIn[21])-7.348469228349534*fIn[20]+7.348469228349534*(fIn[19]+fIn[18])-7.348469228349534*fIn[17]+7.348469228349534*fIn[16])-4.242640687119286*fIn[15]+4.242640687119286*fIn[14]-4.242640687119286*(fIn[13]+fIn[12])+4.242640687119286*fIn[11]-4.242640687119286*(fIn[10]+fIn[9])+4.242640687119286*(fIn[8]+fIn[7])-4.242640687119286*fIn[6])-2.449489742783178*(fIn[5]+fIn[4])+2.449489742783178*fIn[3]-2.449489742783178*(fIn[2]+fIn[1]))-1.414213562373095*fIn[0]); 
  fVal[28] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*(fIn[30]+fIn[29])+12.72792206135786*(fIn[28]+fIn[27]+fIn[26]))+7.348469228349534*fIn[25]-7.348469228349534*(fIn[24]+fIn[23]+fIn[22]+fIn[21])+7.348469228349534*fIn[20]-7.348469228349534*(fIn[19]+fIn[18])+7.348469228349534*(fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14])-4.242640687119286*(fIn[13]+fIn[12])+4.242640687119286*fIn[11]-4.242640687119286*(fIn[10]+fIn[9]+fIn[8]+fIn[7])+4.242640687119286*fIn[6])+2.449489742783178*(fIn[5]+fIn[4]+fIn[3])-2.449489742783178*(fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fVal[29] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*fIn[30]-12.72792206135786*fIn[29]+12.72792206135786*(fIn[28]+fIn[27]+fIn[26]))-7.348469228349534*fIn[25]+7.348469228349534*fIn[24]-7.348469228349534*fIn[23]+7.348469228349534*fIn[22]-7.348469228349534*fIn[21]+7.348469228349534*(fIn[20]+fIn[19])-7.348469228349534*fIn[18]+7.348469228349534*(fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14])+4.242640687119286*fIn[13]-4.242640687119286*(fIn[12]+fIn[11])+4.242640687119286*fIn[10]-4.242640687119286*fIn[9]+4.242640687119286*fIn[8]-4.242640687119286*fIn[7]+4.242640687119286*fIn[6])-2.449489742783178*(fIn[5]+fIn[4]+fIn[3])+2.449489742783178*fIn[2]-2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[30] = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE-12.72792206135786*fIn[30]+12.72792206135786*(fIn[29]+fIn[28]+fIn[27]+fIn[26]))-7.348469228349534*(fIn[25]+fIn[24])+7.348469228349534*fIn[23]-7.348469228349534*fIn[22]+7.348469228349534*(fIn[21]+fIn[20])-7.348469228349534*fIn[19]+7.348469228349534*(fIn[18]+fIn[17]+fIn[16]))-4.242640687119286*(fIn[15]+fIn[14]+fIn[13])+4.242640687119286*fIn[12]-4.242640687119286*(fIn[11]+fIn[10])+4.242640687119286*fIn[9]-4.242640687119286*fIn[8]+4.242640687119286*(fIn[7]+fIn[6]))-2.449489742783178*(fIn[5]+fIn[4]+fIn[3]+fIn[2])+2.449489742783178*fIn[1])-1.414213562373095*fIn[0]); 
  fVal[31] = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fIn[31]*NODE+12.72792206135786*(fIn[30]+fIn[29]+fIn[28]+fIn[27]+fIn[26]))+7.348469228349534*(fIn[25]+fIn[24]+fIn[23]+fIn[22]+fIn[21]+fIn[20]+fIn[19]+fIn[18]+fIn[17]+fIn[16]))+4.242640687119286*(fIn[15]+fIn[14]+fIn[13]+fIn[12]+fIn[11]+fIn[10]+fIn[9]+fIn[8]+fIn[7]+fIn[6]))+2.449489742783178*(fIn[5]+fIn[4]+fIn[3]+fIn[2]+fIn[1]))+1.414213562373095*fIn[0]); 
  fmin = *std::min_element(fVal, fVal+32); 
  } 
  return fmin; 
}
double findMinNodalRatio(const double *fNum, const double *fDenom, double fac, int ndim) { 
  double fmin = 0.0; 
  if (ndim == 1) { 
  double fVal[2]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = -0.5*(2.449489742783178*fNum[1]*NODE-1.414213562373095*fNum[0]); 
  denom = -0.5*(2.449489742783178*fDenom[1]*NODE-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[0] = 0.; 
  else fVal[0] = -fac*num/denom; 
  num = 0.5*(2.449489742783178*fNum[1]*NODE+1.414213562373095*fNum[0]); 
  denom = 0.5*(2.449489742783178*fDenom[1]*NODE+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[1] = 0.; 
  else fVal[1] = -fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+2); 
  } 
  else if(ndim == 2) { 
  double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom;
  num = 0.5*(NODE*(3.0*fNum[3]*NODE-1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]);
  denom = 0.5*(NODE*(3.0*fDenom[3]*NODE-1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]);
  if (denom >= 0.) fVal[0] = 1.;
  else if (std::abs(num) < EPSILON) fVal[0] = 0.;
  else fVal[0] = -fac*num/denom;
  num = -0.5*(NODE*(3.0*fNum[3]*NODE+1.732050807568877*fNum[2]-1.732050807568877*fNum[1])-1.0*fNum[0]);
  denom = -0.5*(NODE*(3.0*fDenom[3]*NODE+1.732050807568877*fDenom[2]-1.732050807568877*fDenom[1])-1.0*fDenom[0]);
  if (denom >= 0.) fVal[1] = 1.;
  else if (std::abs(num) < EPSILON) fVal[1] = 0.;
  else fVal[1] = -fac*num/denom;
  num = -0.5*(NODE*(3.0*fNum[3]*NODE-1.732050807568877*fNum[2]+1.732050807568877*fNum[1])-1.0*fNum[0]);
  denom = -0.5*(NODE*(3.0*fDenom[3]*NODE-1.732050807568877*fDenom[2]+1.732050807568877*fDenom[1])-1.0*fDenom[0]);
  if (denom >= 0.) fVal[2] = 1.;
  else if (std::abs(num) < EPSILON) fVal[2] = 0.;
  else fVal[2] = -fac*num/denom;
  num = 0.5*(NODE*(3.0*fNum[3]*NODE+1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]);
  denom = 0.5*(NODE*(3.0*fDenom[3]*NODE+1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]);
  if (denom >= 0.) fVal[3] = 1.;
  else if (std::abs(num) < EPSILON) fVal[3] = 0.;
  else fVal[3] = -fac*num/denom;
  fmin = *std::min_element(fVal, fVal+4);
  //double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
  //double num[4], denom[4]; 
  //num[0] = 0.5*(NODE*(3.0*fNum[3]*NODE-1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]); 
  //num[1] = -0.5*(NODE*(3.0*fNum[3]*NODE+1.732050807568877*fNum[2]-1.732050807568877*fNum[1])-1.0*fNum[0]); 
  //num[2] = -0.5*(NODE*(3.0*fNum[3]*NODE-1.732050807568877*fNum[2]+1.732050807568877*fNum[1])-1.0*fNum[0]); 
  //num[3] = 0.5*(NODE*(3.0*fNum[3]*NODE+1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]); 

  //denom[0] = 0.5*(NODE*(3.0*fDenom[3]*NODE-1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]); 
  //denom[1] = -0.5*(NODE*(3.0*fDenom[3]*NODE+1.732050807568877*fDenom[2]-1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  //denom[2] = -0.5*(NODE*(3.0*fDenom[3]*NODE-1.732050807568877*fDenom[2]+1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  //denom[3] = 0.5*(NODE*(3.0*fDenom[3]*NODE+1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]); 

  //double err=0.;
  //for(int j=0; j<4; j++) {
  //  err+=std::pow(std::min(0., num[j]+denom[j]/fac),2.);
  //}
  //if(err==0) return 1.;
 

  //// compute beta options. each makes a control node go to zero
  //double b[4];
  //for(int i=0; i<4; i++) {
  //  b[i] = -fac*num[i]/denom[i];
  //}

  //double beta = 1.;
  ////double delChange = 100000000000000.;
  ////double dc[4];
  ////if(err!=0) {
  ////  double fOut[4];
  ////  int idx[2];
  ////  for(int i=0; i<4; i++) {
  ////    for(int j=0; j<4; j++) {
  ////      fOut[j] = fNum[j] + fDenom[j]/fac*b[i];
  ////    }
  ////    dc[i] = rescale(fOut, fOut, ndim, 4, idx, 0.);
  ////    if(dc[i]<delChange && fOut[0]>=0) {
  ////      delChange = dc[i];
  ////      beta = b[i];
  ////    }
  ////  }
  ////}

  //double e[4];
  //if(err!=0){
  //  err = 1000000;
  //  for(int i=0; i<4; i++) {
  //    e[i] = 0.;
  //    for(int j=0; j<4; j++) {
  //      e[i] += std::pow(std::min(0.,num[j]+b[i]*denom[j]/fac),2.);
  //    }
  //    if(e[i]<err) {
  //      beta = b[i]; 
  //      err = e[i];
  //    }
  //  }
  //}
  //if(err>EPSILON){
  //printf("Rescaling volume term in cell\t\t%d\t%d\n", idx[0], idx[1]);
  //printf("fIn_c + dt*Surf_c \t= \t%e\t%e\t%e\t%e\n", num[0], num[1], num[2], num[3]);
  //printf("dt*Vol_c \t\t= \t%e\t%e\t%e\t%e\n", denom[0]/fac, denom[1]/fac, denom[2]/fac, denom[3]/fac);
  //printf("beta_c \t\t\t= \t%e\t%e\t%e\t%e\n", -fac*num[0]/denom[0], -fac*num[1]/denom[1], -fac*num[2]/denom[2], -fac*num[3]/denom[3]);
  //printf("err_c \t\t= \t%e\t%e\t%e\t%e\n", e[0], e[1], e[2], e[3]);
  ////printf("delChange_c \t\t= \t%e\t%e\t%e\t%e\n", dc[0], dc[1], dc[2], dc[3]);
  //printf("beta = %e, delChange = %e => \nfIn_c + dt*Surf_c + dt*beta*Vol_c = %e\t%e\t%e\t%e\n\n", beta, err, num[0]+beta*denom[0]/fac, num[1]+beta*denom[1]/fac, num[2]+beta*denom[2]/fac, num[3]+beta*denom[3]/fac);
  //}
  //return beta;
  } 
  else if(ndim == 3) { 
  double fVal[8]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = -0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE-4.242640687119286*(fNum[6]+fNum[5]+fNum[4]))+2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE-4.242640687119286*(fDenom[6]+fDenom[5]+fDenom[4]))+2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[0] = 0.; 
  else fVal[0] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE+4.242640687119286*fNum[6]-4.242640687119286*(fNum[5]+fNum[4]))-2.449489742783178*(fNum[3]+fNum[2])+2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE+4.242640687119286*fDenom[6]-4.242640687119286*(fDenom[5]+fDenom[4]))-2.449489742783178*(fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[1] = 0.; 
  else fVal[1] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE-4.242640687119286*fNum[6]+4.242640687119286*fNum[5]-4.242640687119286*fNum[4])-2.449489742783178*fNum[3]+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE-4.242640687119286*fDenom[6]+4.242640687119286*fDenom[5]-4.242640687119286*fDenom[4])-2.449489742783178*fDenom[3]+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[2] = 0.; 
  else fVal[2] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE+4.242640687119286*(fNum[6]+fNum[5])-4.242640687119286*fNum[4])+2.449489742783178*fNum[3]-2.449489742783178*(fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE+4.242640687119286*(fDenom[6]+fDenom[5])-4.242640687119286*fDenom[4])+2.449489742783178*fDenom[3]-2.449489742783178*(fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[3] = 0.; 
  else fVal[3] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE-4.242640687119286*(fNum[6]+fNum[5])+4.242640687119286*fNum[4])+2.449489742783178*fNum[3]-2.449489742783178*(fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE-4.242640687119286*(fDenom[6]+fDenom[5])+4.242640687119286*fDenom[4])+2.449489742783178*fDenom[3]-2.449489742783178*(fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[4] = 0.; 
  else fVal[4] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE+4.242640687119286*fNum[6]-4.242640687119286*fNum[5]+4.242640687119286*fNum[4])-2.449489742783178*fNum[3]+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE+4.242640687119286*fDenom[6]-4.242640687119286*fDenom[5]+4.242640687119286*fDenom[4])-2.449489742783178*fDenom[3]+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[5] = 0.; 
  else fVal[5] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE-4.242640687119286*fNum[6]+4.242640687119286*(fNum[5]+fNum[4]))-2.449489742783178*(fNum[3]+fNum[2])+2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE-4.242640687119286*fDenom[6]+4.242640687119286*(fDenom[5]+fDenom[4]))-2.449489742783178*(fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[6] = 0.; 
  else fVal[6] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(7.348469228349534*fNum[7]*NODE+4.242640687119286*(fNum[6]+fNum[5]+fNum[4]))+2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.25*(NODE*(NODE*(7.348469228349534*fDenom[7]*NODE+4.242640687119286*(fDenom[6]+fDenom[5]+fDenom[4]))+2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[7] = 0.; 
  else fVal[7] = -fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+8); 
  } 
  else if(ndim == 4) { 
  double fVal[16]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*(fNum[14]+fNum[13]+fNum[12]+fNum[11]))+3.0*(fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]+fNum[5]))-1.732050807568877*(fNum[4]+fNum[3]+fNum[2]+fNum[1]))+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*(fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]))+3.0*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]+fDenom[5]))-1.732050807568877*(fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))+fDenom[0]); 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[0] = 0.; 
  else fVal[0] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*fNum[14]-5.196152422706631*(fNum[13]+fNum[12]+fNum[11]))-3.0*(fNum[10]+fNum[9])+3.0*fNum[8]-3.0*fNum[7]+3.0*(fNum[6]+fNum[5]))+1.732050807568877*(fNum[4]+fNum[3]+fNum[2])-1.732050807568877*fNum[1])-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*fDenom[14]-5.196152422706631*(fDenom[13]+fDenom[12]+fDenom[11]))-3.0*(fDenom[10]+fDenom[9])+3.0*fDenom[8]-3.0*fDenom[7]+3.0*(fDenom[6]+fDenom[5]))+1.732050807568877*(fDenom[4]+fDenom[3]+fDenom[2])-1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[1] = 0.; 
  else fVal[1] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*fNum[14]+5.196152422706631*fNum[13]-5.196152422706631*(fNum[12]+fNum[11]))-3.0*fNum[10]+3.0*fNum[9]-3.0*fNum[8]+3.0*fNum[7]-3.0*fNum[6]+3.0*fNum[5])+1.732050807568877*(fNum[4]+fNum[3])-1.732050807568877*fNum[2]+1.732050807568877*fNum[1])-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*fDenom[14]+5.196152422706631*fDenom[13]-5.196152422706631*(fDenom[12]+fDenom[11]))-3.0*fDenom[10]+3.0*fDenom[9]-3.0*fDenom[8]+3.0*fDenom[7]-3.0*fDenom[6]+3.0*fDenom[5])+1.732050807568877*(fDenom[4]+fDenom[3])-1.732050807568877*fDenom[2]+1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[2] = 0.; 
  else fVal[2] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*(fNum[14]+fNum[13])-5.196152422706631*(fNum[12]+fNum[11]))+3.0*fNum[10]-3.0*(fNum[9]+fNum[8]+fNum[7]+fNum[6])+3.0*fNum[5])-1.732050807568877*(fNum[4]+fNum[3])+1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*(fDenom[14]+fDenom[13])-5.196152422706631*(fDenom[12]+fDenom[11]))+3.0*fDenom[10]-3.0*(fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6])+3.0*fDenom[5])-1.732050807568877*(fDenom[4]+fDenom[3])+1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]); 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[3] = 0.; 
  else fVal[3] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*(fNum[14]+fNum[13])+5.196152422706631*fNum[12]-5.196152422706631*fNum[11])+3.0*fNum[10]-3.0*(fNum[9]+fNum[8])+3.0*(fNum[7]+fNum[6])-3.0*fNum[5])+1.732050807568877*fNum[4]-1.732050807568877*fNum[3]+1.732050807568877*(fNum[2]+fNum[1]))-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*(fDenom[14]+fDenom[13])+5.196152422706631*fDenom[12]-5.196152422706631*fDenom[11])+3.0*fDenom[10]-3.0*(fDenom[9]+fDenom[8])+3.0*(fDenom[7]+fDenom[6])-3.0*fDenom[5])+1.732050807568877*fDenom[4]-1.732050807568877*fDenom[3]+1.732050807568877*(fDenom[2]+fDenom[1]))-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[4] = 0.; 
  else fVal[4] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*fNum[14]-5.196152422706631*fNum[13]+5.196152422706631*fNum[12]-5.196152422706631*fNum[11])-3.0*fNum[10]+3.0*fNum[9]-3.0*(fNum[8]+fNum[7])+3.0*fNum[6]-3.0*fNum[5])-1.732050807568877*fNum[4]+1.732050807568877*fNum[3]-1.732050807568877*fNum[2]+1.732050807568877*fNum[1])+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*fDenom[14]-5.196152422706631*fDenom[13]+5.196152422706631*fDenom[12]-5.196152422706631*fDenom[11])-3.0*fDenom[10]+3.0*fDenom[9]-3.0*(fDenom[8]+fDenom[7])+3.0*fDenom[6]-3.0*fDenom[5])-1.732050807568877*fDenom[4]+1.732050807568877*fDenom[3]-1.732050807568877*fDenom[2]+1.732050807568877*fDenom[1])+fDenom[0]); 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[5] = 0.; 
  else fVal[5] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*fNum[14]+5.196152422706631*(fNum[13]+fNum[12])-5.196152422706631*fNum[11])-3.0*(fNum[10]+fNum[9])+3.0*(fNum[8]+fNum[7])-3.0*(fNum[6]+fNum[5]))-1.732050807568877*fNum[4]+1.732050807568877*(fNum[3]+fNum[2])-1.732050807568877*fNum[1])+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*fDenom[14]+5.196152422706631*(fDenom[13]+fDenom[12])-5.196152422706631*fDenom[11])-3.0*(fDenom[10]+fDenom[9])+3.0*(fDenom[8]+fDenom[7])-3.0*(fDenom[6]+fDenom[5]))-1.732050807568877*fDenom[4]+1.732050807568877*(fDenom[3]+fDenom[2])-1.732050807568877*fDenom[1])+fDenom[0]); 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[6] = 0.; 
  else fVal[6] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*(fNum[14]+fNum[13]+fNum[12])-5.196152422706631*fNum[11])+3.0*(fNum[10]+fNum[9]+fNum[8])-3.0*(fNum[7]+fNum[6]+fNum[5]))+1.732050807568877*fNum[4]-1.732050807568877*(fNum[3]+fNum[2]+fNum[1]))-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*(fDenom[14]+fDenom[13]+fDenom[12])-5.196152422706631*fDenom[11])+3.0*(fDenom[10]+fDenom[9]+fDenom[8])-3.0*(fDenom[7]+fDenom[6]+fDenom[5]))+1.732050807568877*fDenom[4]-1.732050807568877*(fDenom[3]+fDenom[2]+fDenom[1]))-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[7] = 0.; 
  else fVal[7] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*(fNum[14]+fNum[13]+fNum[12])+5.196152422706631*fNum[11])+3.0*(fNum[10]+fNum[9]+fNum[8])-3.0*(fNum[7]+fNum[6]+fNum[5]))-1.732050807568877*fNum[4]+1.732050807568877*(fNum[3]+fNum[2]+fNum[1]))-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*(fDenom[14]+fDenom[13]+fDenom[12])+5.196152422706631*fDenom[11])+3.0*(fDenom[10]+fDenom[9]+fDenom[8])-3.0*(fDenom[7]+fDenom[6]+fDenom[5]))-1.732050807568877*fDenom[4]+1.732050807568877*(fDenom[3]+fDenom[2]+fDenom[1]))-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[8] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[8] = 0.; 
  else fVal[8] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*fNum[14]-5.196152422706631*(fNum[13]+fNum[12])+5.196152422706631*fNum[11])-3.0*(fNum[10]+fNum[9])+3.0*(fNum[8]+fNum[7])-3.0*(fNum[6]+fNum[5]))+1.732050807568877*fNum[4]-1.732050807568877*(fNum[3]+fNum[2])+1.732050807568877*fNum[1])+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*fDenom[14]-5.196152422706631*(fDenom[13]+fDenom[12])+5.196152422706631*fDenom[11])-3.0*(fDenom[10]+fDenom[9])+3.0*(fDenom[8]+fDenom[7])-3.0*(fDenom[6]+fDenom[5]))+1.732050807568877*fDenom[4]-1.732050807568877*(fDenom[3]+fDenom[2])+1.732050807568877*fDenom[1])+fDenom[0]); 
  if (denom >= 0.) fVal[9] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[9] = 0.; 
  else fVal[9] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*fNum[14]+5.196152422706631*fNum[13]-5.196152422706631*fNum[12]+5.196152422706631*fNum[11])-3.0*fNum[10]+3.0*fNum[9]-3.0*(fNum[8]+fNum[7])+3.0*fNum[6]-3.0*fNum[5])+1.732050807568877*fNum[4]-1.732050807568877*fNum[3]+1.732050807568877*fNum[2]-1.732050807568877*fNum[1])+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*fDenom[14]+5.196152422706631*fDenom[13]-5.196152422706631*fDenom[12]+5.196152422706631*fDenom[11])-3.0*fDenom[10]+3.0*fDenom[9]-3.0*(fDenom[8]+fDenom[7])+3.0*fDenom[6]-3.0*fDenom[5])+1.732050807568877*fDenom[4]-1.732050807568877*fDenom[3]+1.732050807568877*fDenom[2]-1.732050807568877*fDenom[1])+fDenom[0]); 
  if (denom >= 0.) fVal[10] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[10] = 0.; 
  else fVal[10] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*(fNum[14]+fNum[13])-5.196152422706631*fNum[12]+5.196152422706631*fNum[11])+3.0*fNum[10]-3.0*(fNum[9]+fNum[8])+3.0*(fNum[7]+fNum[6])-3.0*fNum[5])-1.732050807568877*fNum[4]+1.732050807568877*fNum[3]-1.732050807568877*(fNum[2]+fNum[1]))-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*(fDenom[14]+fDenom[13])-5.196152422706631*fDenom[12]+5.196152422706631*fDenom[11])+3.0*fDenom[10]-3.0*(fDenom[9]+fDenom[8])+3.0*(fDenom[7]+fDenom[6])-3.0*fDenom[5])-1.732050807568877*fDenom[4]+1.732050807568877*fDenom[3]-1.732050807568877*(fDenom[2]+fDenom[1]))-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[11] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[11] = 0.; 
  else fVal[11] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*(fNum[14]+fNum[13])+5.196152422706631*(fNum[12]+fNum[11]))+3.0*fNum[10]-3.0*(fNum[9]+fNum[8]+fNum[7]+fNum[6])+3.0*fNum[5])+1.732050807568877*(fNum[4]+fNum[3])-1.732050807568877*(fNum[2]+fNum[1]))+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*(fDenom[14]+fDenom[13])+5.196152422706631*(fDenom[12]+fDenom[11]))+3.0*fDenom[10]-3.0*(fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6])+3.0*fDenom[5])+1.732050807568877*(fDenom[4]+fDenom[3])-1.732050807568877*(fDenom[2]+fDenom[1]))+fDenom[0]); 
  if (denom >= 0.) fVal[12] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[12] = 0.; 
  else fVal[12] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*fNum[14]-5.196152422706631*fNum[13]+5.196152422706631*(fNum[12]+fNum[11]))-3.0*fNum[10]+3.0*fNum[9]-3.0*fNum[8]+3.0*fNum[7]-3.0*fNum[6]+3.0*fNum[5])-1.732050807568877*(fNum[4]+fNum[3])+1.732050807568877*fNum[2]-1.732050807568877*fNum[1])-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*fDenom[14]-5.196152422706631*fDenom[13]+5.196152422706631*(fDenom[12]+fDenom[11]))-3.0*fDenom[10]+3.0*fDenom[9]-3.0*fDenom[8]+3.0*fDenom[7]-3.0*fDenom[6]+3.0*fDenom[5])-1.732050807568877*(fDenom[4]+fDenom[3])+1.732050807568877*fDenom[2]-1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[13] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[13] = 0.; 
  else fVal[13] = -fac*num/denom; 
  num = -0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE-5.196152422706631*fNum[14]+5.196152422706631*(fNum[13]+fNum[12]+fNum[11]))-3.0*(fNum[10]+fNum[9])+3.0*fNum[8]-3.0*fNum[7]+3.0*(fNum[6]+fNum[5]))-1.732050807568877*(fNum[4]+fNum[3]+fNum[2])+1.732050807568877*fNum[1])-1.0*fNum[0]); 
  denom = -0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE-5.196152422706631*fDenom[14]+5.196152422706631*(fDenom[13]+fDenom[12]+fDenom[11]))-3.0*(fDenom[10]+fDenom[9])+3.0*fDenom[8]-3.0*fDenom[7]+3.0*(fDenom[6]+fDenom[5]))-1.732050807568877*(fDenom[4]+fDenom[3]+fDenom[2])+1.732050807568877*fDenom[1])-1.0*fDenom[0]); 
  if (denom >= 0.) fVal[14] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[14] = 0.; 
  else fVal[14] = -fac*num/denom; 
  num = 0.25*(NODE*(NODE*(NODE*(9.0*fNum[15]*NODE+5.196152422706631*(fNum[14]+fNum[13]+fNum[12]+fNum[11]))+3.0*(fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]+fNum[5]))+1.732050807568877*(fNum[4]+fNum[3]+fNum[2]+fNum[1]))+fNum[0]); 
  denom = 0.25*(NODE*(NODE*(NODE*(9.0*fDenom[15]*NODE+5.196152422706631*(fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]))+3.0*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]+fDenom[5]))+1.732050807568877*(fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))+fDenom[0]); 
  if (denom >= 0.) fVal[15] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[15] = 0.; 
  else fVal[15] = -fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+16); 
  } 
  else if(ndim == 5) { 
  double fVal[32]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29]+fNum[28]+fNum[27]+fNum[26]))+7.348469228349534*(fNum[25]+fNum[24]+fNum[23]+fNum[22]+fNum[21]+fNum[20]+fNum[19]+fNum[18]+fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14]+fNum[13]+fNum[12]+fNum[11]+fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]))+2.449489742783178*(fNum[5]+fNum[4]+fNum[3]+fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28]+fDenom[27]+fDenom[26]))+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21]+fDenom[20]+fDenom[19]+fDenom[18]+fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]+fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]))+2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[0] = 0.; 
  else fVal[0] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*(fNum[29]+fNum[28]+fNum[27]+fNum[26]))-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*fNum[23]-7.348469228349534*fNum[22]+7.348469228349534*(fNum[21]+fNum[20])-7.348469228349534*fNum[19]+7.348469228349534*(fNum[18]+fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14]+fNum[13])-4.242640687119286*fNum[12]+4.242640687119286*(fNum[11]+fNum[10])-4.242640687119286*fNum[9]+4.242640687119286*fNum[8]-4.242640687119286*(fNum[7]+fNum[6]))-2.449489742783178*(fNum[5]+fNum[4]+fNum[3]+fNum[2])+2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*(fDenom[29]+fDenom[28]+fDenom[27]+fDenom[26]))-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*fDenom[23]-7.348469228349534*fDenom[22]+7.348469228349534*(fDenom[21]+fDenom[20])-7.348469228349534*fDenom[19]+7.348469228349534*(fDenom[18]+fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13])-4.242640687119286*fDenom[12]+4.242640687119286*(fDenom[11]+fDenom[10])-4.242640687119286*fDenom[9]+4.242640687119286*fDenom[8]-4.242640687119286*(fDenom[7]+fDenom[6]))-2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[1] = 0.; 
  else fVal[1] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*fNum[29]-12.72792206135786*(fNum[28]+fNum[27]+fNum[26]))-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*fNum[23]+7.348469228349534*fNum[22]-7.348469228349534*fNum[21]+7.348469228349534*(fNum[20]+fNum[19])-7.348469228349534*fNum[18]+7.348469228349534*(fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14])-4.242640687119286*fNum[13]+4.242640687119286*(fNum[12]+fNum[11])-4.242640687119286*fNum[10]+4.242640687119286*fNum[9]-4.242640687119286*fNum[8]+4.242640687119286*fNum[7]-4.242640687119286*fNum[6])-2.449489742783178*(fNum[5]+fNum[4]+fNum[3])+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*fDenom[29]-12.72792206135786*(fDenom[28]+fDenom[27]+fDenom[26]))-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*fDenom[23]+7.348469228349534*fDenom[22]-7.348469228349534*fDenom[21]+7.348469228349534*(fDenom[20]+fDenom[19])-7.348469228349534*fDenom[18]+7.348469228349534*(fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14])-4.242640687119286*fDenom[13]+4.242640687119286*(fDenom[12]+fDenom[11])-4.242640687119286*fDenom[10]+4.242640687119286*fDenom[9]-4.242640687119286*fDenom[8]+4.242640687119286*fDenom[7]-4.242640687119286*fDenom[6])-2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3])+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[2] = 0.; 
  else fVal[2] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29])-12.72792206135786*(fNum[28]+fNum[27]+fNum[26]))+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23]+fNum[22]+fNum[21])+7.348469228349534*fNum[20]-7.348469228349534*(fNum[19]+fNum[18])+7.348469228349534*(fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14])+4.242640687119286*(fNum[13]+fNum[12])-4.242640687119286*fNum[11]+4.242640687119286*(fNum[10]+fNum[9]+fNum[8]+fNum[7])-4.242640687119286*fNum[6])+2.449489742783178*(fNum[5]+fNum[4]+fNum[3])-2.449489742783178*(fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29])-12.72792206135786*(fDenom[28]+fDenom[27]+fDenom[26]))+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21])+7.348469228349534*fDenom[20]-7.348469228349534*(fDenom[19]+fDenom[18])+7.348469228349534*(fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14])+4.242640687119286*(fDenom[13]+fDenom[12])-4.242640687119286*fDenom[11]+4.242640687119286*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7])-4.242640687119286*fDenom[6])+2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3])-2.449489742783178*(fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[3] = 0.; 
  else fVal[3] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29])+12.72792206135786*fNum[28]-12.72792206135786*(fNum[27]+fNum[26]))+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23])+7.348469228349534*(fNum[22]+fNum[21])-7.348469228349534*fNum[20]+7.348469228349534*(fNum[19]+fNum[18])-7.348469228349534*fNum[17]+7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*fNum[14]+4.242640687119286*(fNum[13]+fNum[12])-4.242640687119286*fNum[11]+4.242640687119286*(fNum[10]+fNum[9])-4.242640687119286*(fNum[8]+fNum[7])+4.242640687119286*fNum[6])-2.449489742783178*(fNum[5]+fNum[4])+2.449489742783178*fNum[3]-2.449489742783178*(fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29])+12.72792206135786*fDenom[28]-12.72792206135786*(fDenom[27]+fDenom[26]))+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23])+7.348469228349534*(fDenom[22]+fDenom[21])-7.348469228349534*fDenom[20]+7.348469228349534*(fDenom[19]+fDenom[18])-7.348469228349534*fDenom[17]+7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*fDenom[14]+4.242640687119286*(fDenom[13]+fDenom[12])-4.242640687119286*fDenom[11]+4.242640687119286*(fDenom[10]+fDenom[9])-4.242640687119286*(fDenom[8]+fDenom[7])+4.242640687119286*fDenom[6])-2.449489742783178*(fDenom[5]+fDenom[4])+2.449489742783178*fDenom[3]-2.449489742783178*(fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[4] = 0.; 
  else fVal[4] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*fNum[29]+12.72792206135786*fNum[28]-12.72792206135786*(fNum[27]+fNum[26]))-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*(fNum[23]+fNum[22])+7.348469228349534*fNum[21]-7.348469228349534*(fNum[20]+fNum[19])+7.348469228349534*fNum[18]-7.348469228349534*fNum[17]+7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*fNum[14]-4.242640687119286*fNum[13]+4.242640687119286*(fNum[12]+fNum[11])-4.242640687119286*fNum[10]+4.242640687119286*(fNum[9]+fNum[8])-4.242640687119286*fNum[7]+4.242640687119286*fNum[6])+2.449489742783178*(fNum[5]+fNum[4])-2.449489742783178*fNum[3]+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*fDenom[29]+12.72792206135786*fDenom[28]-12.72792206135786*(fDenom[27]+fDenom[26]))-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*(fDenom[23]+fDenom[22])+7.348469228349534*fDenom[21]-7.348469228349534*(fDenom[20]+fDenom[19])+7.348469228349534*fDenom[18]-7.348469228349534*fDenom[17]+7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*fDenom[14]-4.242640687119286*fDenom[13]+4.242640687119286*(fDenom[12]+fDenom[11])-4.242640687119286*fDenom[10]+4.242640687119286*(fDenom[9]+fDenom[8])-4.242640687119286*fDenom[7]+4.242640687119286*fDenom[6])+2.449489742783178*(fDenom[5]+fDenom[4])-2.449489742783178*fDenom[3]+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[5] = 0.; 
  else fVal[5] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*(fNum[29]+fNum[28])-12.72792206135786*(fNum[27]+fNum[26]))-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*(fNum[23]+fNum[22])-7.348469228349534*(fNum[21]+fNum[20])+7.348469228349534*fNum[19]-7.348469228349534*(fNum[18]+fNum[17])+7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*(fNum[14]+fNum[13])-4.242640687119286*fNum[12]+4.242640687119286*(fNum[11]+fNum[10])-4.242640687119286*(fNum[9]+fNum[8])+4.242640687119286*(fNum[7]+fNum[6]))+2.449489742783178*(fNum[5]+fNum[4])-2.449489742783178*(fNum[3]+fNum[2])+2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*(fDenom[29]+fDenom[28])-12.72792206135786*(fDenom[27]+fDenom[26]))-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*(fDenom[23]+fDenom[22])-7.348469228349534*(fDenom[21]+fDenom[20])+7.348469228349534*fDenom[19]-7.348469228349534*(fDenom[18]+fDenom[17])+7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*(fDenom[14]+fDenom[13])-4.242640687119286*fDenom[12]+4.242640687119286*(fDenom[11]+fDenom[10])-4.242640687119286*(fDenom[9]+fDenom[8])+4.242640687119286*(fDenom[7]+fDenom[6]))+2.449489742783178*(fDenom[5]+fDenom[4])-2.449489742783178*(fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[6] = 0.; 
  else fVal[6] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29]+fNum[28])-12.72792206135786*(fNum[27]+fNum[26]))+7.348469228349534*(fNum[25]+fNum[24]+fNum[23])-7.348469228349534*(fNum[22]+fNum[21]+fNum[20]+fNum[19]+fNum[18]+fNum[17])+7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*(fNum[14]+fNum[13]+fNum[12]+fNum[11]+fNum[10]+fNum[9])+4.242640687119286*(fNum[8]+fNum[7]+fNum[6]))-2.449489742783178*(fNum[5]+fNum[4])+2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28])-12.72792206135786*(fDenom[27]+fDenom[26]))+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23])-7.348469228349534*(fDenom[22]+fDenom[21]+fDenom[20]+fDenom[19]+fDenom[18]+fDenom[17])+7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*(fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]+fDenom[10]+fDenom[9])+4.242640687119286*(fDenom[8]+fDenom[7]+fDenom[6]))-2.449489742783178*(fDenom[5]+fDenom[4])+2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[7] = 0.; 
  else fVal[7] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29]+fNum[28])+12.72792206135786*fNum[27]-12.72792206135786*fNum[26])+7.348469228349534*(fNum[25]+fNum[24]+fNum[23])-7.348469228349534*(fNum[22]+fNum[21]+fNum[20])+7.348469228349534*(fNum[19]+fNum[18]+fNum[17])-7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*(fNum[14]+fNum[13]+fNum[12])-4.242640687119286*(fNum[11]+fNum[10]+fNum[9])+4.242640687119286*(fNum[8]+fNum[7]+fNum[6]))-2.449489742783178*fNum[5]+2.449489742783178*fNum[4]-2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28])+12.72792206135786*fDenom[27]-12.72792206135786*fDenom[26])+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23])-7.348469228349534*(fDenom[22]+fDenom[21]+fDenom[20])+7.348469228349534*(fDenom[19]+fDenom[18]+fDenom[17])-7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*(fDenom[14]+fDenom[13]+fDenom[12])-4.242640687119286*(fDenom[11]+fDenom[10]+fDenom[9])+4.242640687119286*(fDenom[8]+fDenom[7]+fDenom[6]))-2.449489742783178*fDenom[5]+2.449489742783178*fDenom[4]-2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[8] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[8] = 0.; 
  else fVal[8] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*(fNum[29]+fNum[28])+12.72792206135786*fNum[27]-12.72792206135786*fNum[26])-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*(fNum[23]+fNum[22])-7.348469228349534*(fNum[21]+fNum[20]+fNum[19])+7.348469228349534*(fNum[18]+fNum[17])-7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*(fNum[14]+fNum[13])+4.242640687119286*(fNum[12]+fNum[11]+fNum[10])-4.242640687119286*(fNum[9]+fNum[8])+4.242640687119286*(fNum[7]+fNum[6]))+2.449489742783178*fNum[5]-2.449489742783178*fNum[4]+2.449489742783178*(fNum[3]+fNum[2])-2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*(fDenom[29]+fDenom[28])+12.72792206135786*fDenom[27]-12.72792206135786*fDenom[26])-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*(fDenom[23]+fDenom[22])-7.348469228349534*(fDenom[21]+fDenom[20]+fDenom[19])+7.348469228349534*(fDenom[18]+fDenom[17])-7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*(fDenom[14]+fDenom[13])+4.242640687119286*(fDenom[12]+fDenom[11]+fDenom[10])-4.242640687119286*(fDenom[9]+fDenom[8])+4.242640687119286*(fDenom[7]+fDenom[6]))+2.449489742783178*fDenom[5]-2.449489742783178*fDenom[4]+2.449489742783178*(fDenom[3]+fDenom[2])-2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[9] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[9] = 0.; 
  else fVal[9] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*fNum[29]-12.72792206135786*fNum[28]+12.72792206135786*fNum[27]-12.72792206135786*fNum[26])-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*(fNum[23]+fNum[22])+7.348469228349534*fNum[21]-7.348469228349534*fNum[20]+7.348469228349534*fNum[19]-7.348469228349534*fNum[18]+7.348469228349534*fNum[17]-7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*fNum[14]+4.242640687119286*fNum[13]-4.242640687119286*fNum[12]+4.242640687119286*fNum[11]-4.242640687119286*fNum[10]+4.242640687119286*(fNum[9]+fNum[8])-4.242640687119286*fNum[7]+4.242640687119286*fNum[6])+2.449489742783178*fNum[5]-2.449489742783178*fNum[4]+2.449489742783178*fNum[3]-2.449489742783178*fNum[2]+2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*fDenom[29]-12.72792206135786*fDenom[28]+12.72792206135786*fDenom[27]-12.72792206135786*fDenom[26])-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*(fDenom[23]+fDenom[22])+7.348469228349534*fDenom[21]-7.348469228349534*fDenom[20]+7.348469228349534*fDenom[19]-7.348469228349534*fDenom[18]+7.348469228349534*fDenom[17]-7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*fDenom[14]+4.242640687119286*fDenom[13]-4.242640687119286*fDenom[12]+4.242640687119286*fDenom[11]-4.242640687119286*fDenom[10]+4.242640687119286*(fDenom[9]+fDenom[8])-4.242640687119286*fDenom[7]+4.242640687119286*fDenom[6])+2.449489742783178*fDenom[5]-2.449489742783178*fDenom[4]+2.449489742783178*fDenom[3]-2.449489742783178*fDenom[2]+2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[10] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[10] = 0.; 
  else fVal[10] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29])-12.72792206135786*fNum[28]+12.72792206135786*fNum[27]-12.72792206135786*fNum[26])+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23])+7.348469228349534*(fNum[22]+fNum[21])-7.348469228349534*(fNum[20]+fNum[19]+fNum[18])+7.348469228349534*fNum[17]-7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*fNum[14]-4.242640687119286*(fNum[13]+fNum[12]+fNum[11])+4.242640687119286*(fNum[10]+fNum[9])-4.242640687119286*(fNum[8]+fNum[7])+4.242640687119286*fNum[6])-2.449489742783178*fNum[5]+2.449489742783178*fNum[4]-2.449489742783178*fNum[3]+2.449489742783178*(fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29])-12.72792206135786*fDenom[28]+12.72792206135786*fDenom[27]-12.72792206135786*fDenom[26])+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23])+7.348469228349534*(fDenom[22]+fDenom[21])-7.348469228349534*(fDenom[20]+fDenom[19]+fDenom[18])+7.348469228349534*fDenom[17]-7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*fDenom[14]-4.242640687119286*(fDenom[13]+fDenom[12]+fDenom[11])+4.242640687119286*(fDenom[10]+fDenom[9])-4.242640687119286*(fDenom[8]+fDenom[7])+4.242640687119286*fDenom[6])-2.449489742783178*fDenom[5]+2.449489742783178*fDenom[4]-2.449489742783178*fDenom[3]+2.449489742783178*(fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[11] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[11] = 0.; 
  else fVal[11] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29])+12.72792206135786*(fNum[28]+fNum[27])-12.72792206135786*fNum[26])+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23]+fNum[22]+fNum[21])+7.348469228349534*(fNum[20]+fNum[19]+fNum[18])-7.348469228349534*(fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14])-4.242640687119286*(fNum[13]+fNum[12]+fNum[11])+4.242640687119286*(fNum[10]+fNum[9]+fNum[8]+fNum[7])-4.242640687119286*fNum[6])+2.449489742783178*fNum[5]-2.449489742783178*(fNum[4]+fNum[3])+2.449489742783178*(fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29])+12.72792206135786*(fDenom[28]+fDenom[27])-12.72792206135786*fDenom[26])+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21])+7.348469228349534*(fDenom[20]+fDenom[19]+fDenom[18])-7.348469228349534*(fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14])-4.242640687119286*(fDenom[13]+fDenom[12]+fDenom[11])+4.242640687119286*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7])-4.242640687119286*fDenom[6])+2.449489742783178*fDenom[5]-2.449489742783178*(fDenom[4]+fDenom[3])+2.449489742783178*(fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[12] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[12] = 0.; 
  else fVal[12] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*fNum[29]+12.72792206135786*(fNum[28]+fNum[27])-12.72792206135786*fNum[26])-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*fNum[23]+7.348469228349534*fNum[22]-7.348469228349534*fNum[21]+7.348469228349534*fNum[20]-7.348469228349534*fNum[19]+7.348469228349534*fNum[18]-7.348469228349534*(fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14])+4.242640687119286*fNum[13]-4.242640687119286*fNum[12]+4.242640687119286*fNum[11]-4.242640687119286*fNum[10]+4.242640687119286*fNum[9]-4.242640687119286*fNum[8]+4.242640687119286*fNum[7]-4.242640687119286*fNum[6])-2.449489742783178*fNum[5]+2.449489742783178*(fNum[4]+fNum[3])-2.449489742783178*fNum[2]+2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*fDenom[29]+12.72792206135786*(fDenom[28]+fDenom[27])-12.72792206135786*fDenom[26])-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*fDenom[23]+7.348469228349534*fDenom[22]-7.348469228349534*fDenom[21]+7.348469228349534*fDenom[20]-7.348469228349534*fDenom[19]+7.348469228349534*fDenom[18]-7.348469228349534*(fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14])+4.242640687119286*fDenom[13]-4.242640687119286*fDenom[12]+4.242640687119286*fDenom[11]-4.242640687119286*fDenom[10]+4.242640687119286*fDenom[9]-4.242640687119286*fDenom[8]+4.242640687119286*fDenom[7]-4.242640687119286*fDenom[6])-2.449489742783178*fDenom[5]+2.449489742783178*(fDenom[4]+fDenom[3])-2.449489742783178*fDenom[2]+2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[13] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[13] = 0.; 
  else fVal[13] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*(fNum[29]+fNum[28]+fNum[27])-12.72792206135786*fNum[26])-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*fNum[23]-7.348469228349534*fNum[22]+7.348469228349534*(fNum[21]+fNum[20]+fNum[19])-7.348469228349534*(fNum[18]+fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14]+fNum[13])+4.242640687119286*(fNum[12]+fNum[11]+fNum[10])-4.242640687119286*fNum[9]+4.242640687119286*fNum[8]-4.242640687119286*(fNum[7]+fNum[6]))-2.449489742783178*fNum[5]+2.449489742783178*(fNum[4]+fNum[3]+fNum[2])-2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*(fDenom[29]+fDenom[28]+fDenom[27])-12.72792206135786*fDenom[26])-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*fDenom[23]-7.348469228349534*fDenom[22]+7.348469228349534*(fDenom[21]+fDenom[20]+fDenom[19])-7.348469228349534*(fDenom[18]+fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13])+4.242640687119286*(fDenom[12]+fDenom[11]+fDenom[10])-4.242640687119286*fDenom[9]+4.242640687119286*fDenom[8]-4.242640687119286*(fDenom[7]+fDenom[6]))-2.449489742783178*fDenom[5]+2.449489742783178*(fDenom[4]+fDenom[3]+fDenom[2])-2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[14] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[14] = 0.; 
  else fVal[14] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29]+fNum[28]+fNum[27])-12.72792206135786*fNum[26])+7.348469228349534*(fNum[25]+fNum[24]+fNum[23]+fNum[22]+fNum[21]+fNum[20])-7.348469228349534*(fNum[19]+fNum[18]+fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14]+fNum[13]+fNum[12])-4.242640687119286*(fNum[11]+fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]))+2.449489742783178*fNum[5]-2.449489742783178*(fNum[4]+fNum[3]+fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28]+fDenom[27])-12.72792206135786*fDenom[26])+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21]+fDenom[20])-7.348469228349534*(fDenom[19]+fDenom[18]+fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13]+fDenom[12])-4.242640687119286*(fDenom[11]+fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]))+2.449489742783178*fDenom[5]-2.449489742783178*(fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[15] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[15] = 0.; 
  else fVal[15] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29]+fNum[28]+fNum[27])+12.72792206135786*fNum[26])+7.348469228349534*(fNum[25]+fNum[24]+fNum[23]+fNum[22]+fNum[21]+fNum[20])-7.348469228349534*(fNum[19]+fNum[18]+fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14]+fNum[13]+fNum[12])+4.242640687119286*(fNum[11]+fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]))+2.449489742783178*fNum[5]-2.449489742783178*(fNum[4]+fNum[3]+fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28]+fDenom[27])+12.72792206135786*fDenom[26])+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21]+fDenom[20])-7.348469228349534*(fDenom[19]+fDenom[18]+fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13]+fDenom[12])+4.242640687119286*(fDenom[11]+fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]))+2.449489742783178*fDenom[5]-2.449489742783178*(fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[16] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[16] = 0.; 
  else fVal[16] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*(fNum[29]+fNum[28]+fNum[27])+12.72792206135786*fNum[26])-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*fNum[23]-7.348469228349534*fNum[22]+7.348469228349534*(fNum[21]+fNum[20]+fNum[19])-7.348469228349534*(fNum[18]+fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14]+fNum[13])-4.242640687119286*(fNum[12]+fNum[11]+fNum[10])+4.242640687119286*fNum[9]-4.242640687119286*fNum[8]+4.242640687119286*(fNum[7]+fNum[6]))-2.449489742783178*fNum[5]+2.449489742783178*(fNum[4]+fNum[3]+fNum[2])-2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*(fDenom[29]+fDenom[28]+fDenom[27])+12.72792206135786*fDenom[26])-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*fDenom[23]-7.348469228349534*fDenom[22]+7.348469228349534*(fDenom[21]+fDenom[20]+fDenom[19])-7.348469228349534*(fDenom[18]+fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13])-4.242640687119286*(fDenom[12]+fDenom[11]+fDenom[10])+4.242640687119286*fDenom[9]-4.242640687119286*fDenom[8]+4.242640687119286*(fDenom[7]+fDenom[6]))-2.449489742783178*fDenom[5]+2.449489742783178*(fDenom[4]+fDenom[3]+fDenom[2])-2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[17] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[17] = 0.; 
  else fVal[17] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*fNum[29]-12.72792206135786*(fNum[28]+fNum[27])+12.72792206135786*fNum[26])-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*fNum[23]+7.348469228349534*fNum[22]-7.348469228349534*fNum[21]+7.348469228349534*fNum[20]-7.348469228349534*fNum[19]+7.348469228349534*fNum[18]-7.348469228349534*(fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14])-4.242640687119286*fNum[13]+4.242640687119286*fNum[12]-4.242640687119286*fNum[11]+4.242640687119286*fNum[10]-4.242640687119286*fNum[9]+4.242640687119286*fNum[8]-4.242640687119286*fNum[7]+4.242640687119286*fNum[6])-2.449489742783178*fNum[5]+2.449489742783178*(fNum[4]+fNum[3])-2.449489742783178*fNum[2]+2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*fDenom[29]-12.72792206135786*(fDenom[28]+fDenom[27])+12.72792206135786*fDenom[26])-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*fDenom[23]+7.348469228349534*fDenom[22]-7.348469228349534*fDenom[21]+7.348469228349534*fDenom[20]-7.348469228349534*fDenom[19]+7.348469228349534*fDenom[18]-7.348469228349534*(fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14])-4.242640687119286*fDenom[13]+4.242640687119286*fDenom[12]-4.242640687119286*fDenom[11]+4.242640687119286*fDenom[10]-4.242640687119286*fDenom[9]+4.242640687119286*fDenom[8]-4.242640687119286*fDenom[7]+4.242640687119286*fDenom[6])-2.449489742783178*fDenom[5]+2.449489742783178*(fDenom[4]+fDenom[3])-2.449489742783178*fDenom[2]+2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[18] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[18] = 0.; 
  else fVal[18] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29])-12.72792206135786*(fNum[28]+fNum[27])+12.72792206135786*fNum[26])+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23]+fNum[22]+fNum[21])+7.348469228349534*(fNum[20]+fNum[19]+fNum[18])-7.348469228349534*(fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14])+4.242640687119286*(fNum[13]+fNum[12]+fNum[11])-4.242640687119286*(fNum[10]+fNum[9]+fNum[8]+fNum[7])+4.242640687119286*fNum[6])+2.449489742783178*fNum[5]-2.449489742783178*(fNum[4]+fNum[3])+2.449489742783178*(fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29])-12.72792206135786*(fDenom[28]+fDenom[27])+12.72792206135786*fDenom[26])+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21])+7.348469228349534*(fDenom[20]+fDenom[19]+fDenom[18])-7.348469228349534*(fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14])+4.242640687119286*(fDenom[13]+fDenom[12]+fDenom[11])-4.242640687119286*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7])+4.242640687119286*fDenom[6])+2.449489742783178*fDenom[5]-2.449489742783178*(fDenom[4]+fDenom[3])+2.449489742783178*(fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[19] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[19] = 0.; 
  else fVal[19] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29])+12.72792206135786*fNum[28]-12.72792206135786*fNum[27]+12.72792206135786*fNum[26])+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23])+7.348469228349534*(fNum[22]+fNum[21])-7.348469228349534*(fNum[20]+fNum[19]+fNum[18])+7.348469228349534*fNum[17]-7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*fNum[14]+4.242640687119286*(fNum[13]+fNum[12]+fNum[11])-4.242640687119286*(fNum[10]+fNum[9])+4.242640687119286*(fNum[8]+fNum[7])-4.242640687119286*fNum[6])-2.449489742783178*fNum[5]+2.449489742783178*fNum[4]-2.449489742783178*fNum[3]+2.449489742783178*(fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29])+12.72792206135786*fDenom[28]-12.72792206135786*fDenom[27]+12.72792206135786*fDenom[26])+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23])+7.348469228349534*(fDenom[22]+fDenom[21])-7.348469228349534*(fDenom[20]+fDenom[19]+fDenom[18])+7.348469228349534*fDenom[17]-7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*fDenom[14]+4.242640687119286*(fDenom[13]+fDenom[12]+fDenom[11])-4.242640687119286*(fDenom[10]+fDenom[9])+4.242640687119286*(fDenom[8]+fDenom[7])-4.242640687119286*fDenom[6])-2.449489742783178*fDenom[5]+2.449489742783178*fDenom[4]-2.449489742783178*fDenom[3]+2.449489742783178*(fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[20] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[20] = 0.; 
  else fVal[20] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*fNum[29]+12.72792206135786*fNum[28]-12.72792206135786*fNum[27]+12.72792206135786*fNum[26])-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*(fNum[23]+fNum[22])+7.348469228349534*fNum[21]-7.348469228349534*fNum[20]+7.348469228349534*fNum[19]-7.348469228349534*fNum[18]+7.348469228349534*fNum[17]-7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*fNum[14]-4.242640687119286*fNum[13]+4.242640687119286*fNum[12]-4.242640687119286*fNum[11]+4.242640687119286*fNum[10]-4.242640687119286*(fNum[9]+fNum[8])+4.242640687119286*fNum[7]-4.242640687119286*fNum[6])+2.449489742783178*fNum[5]-2.449489742783178*fNum[4]+2.449489742783178*fNum[3]-2.449489742783178*fNum[2]+2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*fDenom[29]+12.72792206135786*fDenom[28]-12.72792206135786*fDenom[27]+12.72792206135786*fDenom[26])-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*(fDenom[23]+fDenom[22])+7.348469228349534*fDenom[21]-7.348469228349534*fDenom[20]+7.348469228349534*fDenom[19]-7.348469228349534*fDenom[18]+7.348469228349534*fDenom[17]-7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*fDenom[14]-4.242640687119286*fDenom[13]+4.242640687119286*fDenom[12]-4.242640687119286*fDenom[11]+4.242640687119286*fDenom[10]-4.242640687119286*(fDenom[9]+fDenom[8])+4.242640687119286*fDenom[7]-4.242640687119286*fDenom[6])+2.449489742783178*fDenom[5]-2.449489742783178*fDenom[4]+2.449489742783178*fDenom[3]-2.449489742783178*fDenom[2]+2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[21] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[21] = 0.; 
  else fVal[21] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*(fNum[29]+fNum[28])-12.72792206135786*fNum[27]+12.72792206135786*fNum[26])-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*(fNum[23]+fNum[22])-7.348469228349534*(fNum[21]+fNum[20]+fNum[19])+7.348469228349534*(fNum[18]+fNum[17])-7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*(fNum[14]+fNum[13])-4.242640687119286*(fNum[12]+fNum[11]+fNum[10])+4.242640687119286*(fNum[9]+fNum[8])-4.242640687119286*(fNum[7]+fNum[6]))+2.449489742783178*fNum[5]-2.449489742783178*fNum[4]+2.449489742783178*(fNum[3]+fNum[2])-2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*(fDenom[29]+fDenom[28])-12.72792206135786*fDenom[27]+12.72792206135786*fDenom[26])-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*(fDenom[23]+fDenom[22])-7.348469228349534*(fDenom[21]+fDenom[20]+fDenom[19])+7.348469228349534*(fDenom[18]+fDenom[17])-7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*(fDenom[14]+fDenom[13])-4.242640687119286*(fDenom[12]+fDenom[11]+fDenom[10])+4.242640687119286*(fDenom[9]+fDenom[8])-4.242640687119286*(fDenom[7]+fDenom[6]))+2.449489742783178*fDenom[5]-2.449489742783178*fDenom[4]+2.449489742783178*(fDenom[3]+fDenom[2])-2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[22] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[22] = 0.; 
  else fVal[22] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29]+fNum[28])-12.72792206135786*fNum[27]+12.72792206135786*fNum[26])+7.348469228349534*(fNum[25]+fNum[24]+fNum[23])-7.348469228349534*(fNum[22]+fNum[21]+fNum[20])+7.348469228349534*(fNum[19]+fNum[18]+fNum[17])-7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*(fNum[14]+fNum[13]+fNum[12])+4.242640687119286*(fNum[11]+fNum[10]+fNum[9])-4.242640687119286*(fNum[8]+fNum[7]+fNum[6]))-2.449489742783178*fNum[5]+2.449489742783178*fNum[4]-2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28])-12.72792206135786*fDenom[27]+12.72792206135786*fDenom[26])+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23])-7.348469228349534*(fDenom[22]+fDenom[21]+fDenom[20])+7.348469228349534*(fDenom[19]+fDenom[18]+fDenom[17])-7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*(fDenom[14]+fDenom[13]+fDenom[12])+4.242640687119286*(fDenom[11]+fDenom[10]+fDenom[9])-4.242640687119286*(fDenom[8]+fDenom[7]+fDenom[6]))-2.449489742783178*fDenom[5]+2.449489742783178*fDenom[4]-2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[23] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[23] = 0.; 
  else fVal[23] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29]+fNum[28])+12.72792206135786*(fNum[27]+fNum[26]))+7.348469228349534*(fNum[25]+fNum[24]+fNum[23])-7.348469228349534*(fNum[22]+fNum[21]+fNum[20]+fNum[19]+fNum[18]+fNum[17])+7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*(fNum[14]+fNum[13]+fNum[12]+fNum[11]+fNum[10]+fNum[9])-4.242640687119286*(fNum[8]+fNum[7]+fNum[6]))-2.449489742783178*(fNum[5]+fNum[4])+2.449489742783178*(fNum[3]+fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28])+12.72792206135786*(fDenom[27]+fDenom[26]))+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23])-7.348469228349534*(fDenom[22]+fDenom[21]+fDenom[20]+fDenom[19]+fDenom[18]+fDenom[17])+7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*(fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]+fDenom[10]+fDenom[9])-4.242640687119286*(fDenom[8]+fDenom[7]+fDenom[6]))-2.449489742783178*(fDenom[5]+fDenom[4])+2.449489742783178*(fDenom[3]+fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[24] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[24] = 0.; 
  else fVal[24] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*(fNum[29]+fNum[28])+12.72792206135786*(fNum[27]+fNum[26]))-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*(fNum[23]+fNum[22])-7.348469228349534*(fNum[21]+fNum[20])+7.348469228349534*fNum[19]-7.348469228349534*(fNum[18]+fNum[17])+7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*(fNum[14]+fNum[13])+4.242640687119286*fNum[12]-4.242640687119286*(fNum[11]+fNum[10])+4.242640687119286*(fNum[9]+fNum[8])-4.242640687119286*(fNum[7]+fNum[6]))+2.449489742783178*(fNum[5]+fNum[4])-2.449489742783178*(fNum[3]+fNum[2])+2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*(fDenom[29]+fDenom[28])+12.72792206135786*(fDenom[27]+fDenom[26]))-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*(fDenom[23]+fDenom[22])-7.348469228349534*(fDenom[21]+fDenom[20])+7.348469228349534*fDenom[19]-7.348469228349534*(fDenom[18]+fDenom[17])+7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*(fDenom[14]+fDenom[13])+4.242640687119286*fDenom[12]-4.242640687119286*(fDenom[11]+fDenom[10])+4.242640687119286*(fDenom[9]+fDenom[8])-4.242640687119286*(fDenom[7]+fDenom[6]))+2.449489742783178*(fDenom[5]+fDenom[4])-2.449489742783178*(fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[25] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[25] = 0.; 
  else fVal[25] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*fNum[29]-12.72792206135786*fNum[28]+12.72792206135786*(fNum[27]+fNum[26]))-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*(fNum[23]+fNum[22])+7.348469228349534*fNum[21]-7.348469228349534*(fNum[20]+fNum[19])+7.348469228349534*fNum[18]-7.348469228349534*fNum[17]+7.348469228349534*fNum[16])+4.242640687119286*fNum[15]-4.242640687119286*fNum[14]+4.242640687119286*fNum[13]-4.242640687119286*(fNum[12]+fNum[11])+4.242640687119286*fNum[10]-4.242640687119286*(fNum[9]+fNum[8])+4.242640687119286*fNum[7]-4.242640687119286*fNum[6])+2.449489742783178*(fNum[5]+fNum[4])-2.449489742783178*fNum[3]+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*fDenom[29]-12.72792206135786*fDenom[28]+12.72792206135786*(fDenom[27]+fDenom[26]))-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*(fDenom[23]+fDenom[22])+7.348469228349534*fDenom[21]-7.348469228349534*(fDenom[20]+fDenom[19])+7.348469228349534*fDenom[18]-7.348469228349534*fDenom[17]+7.348469228349534*fDenom[16])+4.242640687119286*fDenom[15]-4.242640687119286*fDenom[14]+4.242640687119286*fDenom[13]-4.242640687119286*(fDenom[12]+fDenom[11])+4.242640687119286*fDenom[10]-4.242640687119286*(fDenom[9]+fDenom[8])+4.242640687119286*fDenom[7]-4.242640687119286*fDenom[6])+2.449489742783178*(fDenom[5]+fDenom[4])-2.449489742783178*fDenom[3]+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[26] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[26] = 0.; 
  else fVal[26] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29])-12.72792206135786*fNum[28]+12.72792206135786*(fNum[27]+fNum[26]))+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23])+7.348469228349534*(fNum[22]+fNum[21])-7.348469228349534*fNum[20]+7.348469228349534*(fNum[19]+fNum[18])-7.348469228349534*fNum[17]+7.348469228349534*fNum[16])-4.242640687119286*fNum[15]+4.242640687119286*fNum[14]-4.242640687119286*(fNum[13]+fNum[12])+4.242640687119286*fNum[11]-4.242640687119286*(fNum[10]+fNum[9])+4.242640687119286*(fNum[8]+fNum[7])-4.242640687119286*fNum[6])-2.449489742783178*(fNum[5]+fNum[4])+2.449489742783178*fNum[3]-2.449489742783178*(fNum[2]+fNum[1]))-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29])-12.72792206135786*fDenom[28]+12.72792206135786*(fDenom[27]+fDenom[26]))+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23])+7.348469228349534*(fDenom[22]+fDenom[21])-7.348469228349534*fDenom[20]+7.348469228349534*(fDenom[19]+fDenom[18])-7.348469228349534*fDenom[17]+7.348469228349534*fDenom[16])-4.242640687119286*fDenom[15]+4.242640687119286*fDenom[14]-4.242640687119286*(fDenom[13]+fDenom[12])+4.242640687119286*fDenom[11]-4.242640687119286*(fDenom[10]+fDenom[9])+4.242640687119286*(fDenom[8]+fDenom[7])-4.242640687119286*fDenom[6])-2.449489742783178*(fDenom[5]+fDenom[4])+2.449489742783178*fDenom[3]-2.449489742783178*(fDenom[2]+fDenom[1]))-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[27] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[27] = 0.; 
  else fVal[27] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*(fNum[30]+fNum[29])+12.72792206135786*(fNum[28]+fNum[27]+fNum[26]))+7.348469228349534*fNum[25]-7.348469228349534*(fNum[24]+fNum[23]+fNum[22]+fNum[21])+7.348469228349534*fNum[20]-7.348469228349534*(fNum[19]+fNum[18])+7.348469228349534*(fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14])-4.242640687119286*(fNum[13]+fNum[12])+4.242640687119286*fNum[11]-4.242640687119286*(fNum[10]+fNum[9]+fNum[8]+fNum[7])+4.242640687119286*fNum[6])+2.449489742783178*(fNum[5]+fNum[4]+fNum[3])-2.449489742783178*(fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*(fDenom[30]+fDenom[29])+12.72792206135786*(fDenom[28]+fDenom[27]+fDenom[26]))+7.348469228349534*fDenom[25]-7.348469228349534*(fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21])+7.348469228349534*fDenom[20]-7.348469228349534*(fDenom[19]+fDenom[18])+7.348469228349534*(fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14])-4.242640687119286*(fDenom[13]+fDenom[12])+4.242640687119286*fDenom[11]-4.242640687119286*(fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7])+4.242640687119286*fDenom[6])+2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3])-2.449489742783178*(fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[28] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[28] = 0.; 
  else fVal[28] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*fNum[30]-12.72792206135786*fNum[29]+12.72792206135786*(fNum[28]+fNum[27]+fNum[26]))-7.348469228349534*fNum[25]+7.348469228349534*fNum[24]-7.348469228349534*fNum[23]+7.348469228349534*fNum[22]-7.348469228349534*fNum[21]+7.348469228349534*(fNum[20]+fNum[19])-7.348469228349534*fNum[18]+7.348469228349534*(fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14])+4.242640687119286*fNum[13]-4.242640687119286*(fNum[12]+fNum[11])+4.242640687119286*fNum[10]-4.242640687119286*fNum[9]+4.242640687119286*fNum[8]-4.242640687119286*fNum[7]+4.242640687119286*fNum[6])-2.449489742783178*(fNum[5]+fNum[4]+fNum[3])+2.449489742783178*fNum[2]-2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*fDenom[30]-12.72792206135786*fDenom[29]+12.72792206135786*(fDenom[28]+fDenom[27]+fDenom[26]))-7.348469228349534*fDenom[25]+7.348469228349534*fDenom[24]-7.348469228349534*fDenom[23]+7.348469228349534*fDenom[22]-7.348469228349534*fDenom[21]+7.348469228349534*(fDenom[20]+fDenom[19])-7.348469228349534*fDenom[18]+7.348469228349534*(fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14])+4.242640687119286*fDenom[13]-4.242640687119286*(fDenom[12]+fDenom[11])+4.242640687119286*fDenom[10]-4.242640687119286*fDenom[9]+4.242640687119286*fDenom[8]-4.242640687119286*fDenom[7]+4.242640687119286*fDenom[6])-2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3])+2.449489742783178*fDenom[2]-2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[29] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[29] = 0.; 
  else fVal[29] = -fac*num/denom; 
  num = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE-12.72792206135786*fNum[30]+12.72792206135786*(fNum[29]+fNum[28]+fNum[27]+fNum[26]))-7.348469228349534*(fNum[25]+fNum[24])+7.348469228349534*fNum[23]-7.348469228349534*fNum[22]+7.348469228349534*(fNum[21]+fNum[20])-7.348469228349534*fNum[19]+7.348469228349534*(fNum[18]+fNum[17]+fNum[16]))-4.242640687119286*(fNum[15]+fNum[14]+fNum[13])+4.242640687119286*fNum[12]-4.242640687119286*(fNum[11]+fNum[10])+4.242640687119286*fNum[9]-4.242640687119286*fNum[8]+4.242640687119286*(fNum[7]+fNum[6]))-2.449489742783178*(fNum[5]+fNum[4]+fNum[3]+fNum[2])+2.449489742783178*fNum[1])-1.414213562373095*fNum[0]); 
  denom = -0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE-12.72792206135786*fDenom[30]+12.72792206135786*(fDenom[29]+fDenom[28]+fDenom[27]+fDenom[26]))-7.348469228349534*(fDenom[25]+fDenom[24])+7.348469228349534*fDenom[23]-7.348469228349534*fDenom[22]+7.348469228349534*(fDenom[21]+fDenom[20])-7.348469228349534*fDenom[19]+7.348469228349534*(fDenom[18]+fDenom[17]+fDenom[16]))-4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13])+4.242640687119286*fDenom[12]-4.242640687119286*(fDenom[11]+fDenom[10])+4.242640687119286*fDenom[9]-4.242640687119286*fDenom[8]+4.242640687119286*(fDenom[7]+fDenom[6]))-2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3]+fDenom[2])+2.449489742783178*fDenom[1])-1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[30] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[30] = 0.; 
  else fVal[30] = -fac*num/denom; 
  num = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fNum[31]*NODE+12.72792206135786*(fNum[30]+fNum[29]+fNum[28]+fNum[27]+fNum[26]))+7.348469228349534*(fNum[25]+fNum[24]+fNum[23]+fNum[22]+fNum[21]+fNum[20]+fNum[19]+fNum[18]+fNum[17]+fNum[16]))+4.242640687119286*(fNum[15]+fNum[14]+fNum[13]+fNum[12]+fNum[11]+fNum[10]+fNum[9]+fNum[8]+fNum[7]+fNum[6]))+2.449489742783178*(fNum[5]+fNum[4]+fNum[3]+fNum[2]+fNum[1]))+1.414213562373095*fNum[0]); 
  denom = 0.125*(NODE*(NODE*(NODE*(NODE*(22.0454076850486*fDenom[31]*NODE+12.72792206135786*(fDenom[30]+fDenom[29]+fDenom[28]+fDenom[27]+fDenom[26]))+7.348469228349534*(fDenom[25]+fDenom[24]+fDenom[23]+fDenom[22]+fDenom[21]+fDenom[20]+fDenom[19]+fDenom[18]+fDenom[17]+fDenom[16]))+4.242640687119286*(fDenom[15]+fDenom[14]+fDenom[13]+fDenom[12]+fDenom[11]+fDenom[10]+fDenom[9]+fDenom[8]+fDenom[7]+fDenom[6]))+2.449489742783178*(fDenom[5]+fDenom[4]+fDenom[3]+fDenom[2]+fDenom[1]))+1.414213562373095*fDenom[0]); 
  if (denom >= 0.) fVal[31] = 1.; 
  else if (std::abs(num) < EPSILON) fVal[31] = 0.; 
  else fVal[31] = -fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+32); 
  } 
  return fmin; 
}

// check positivity of cell average and control nodes
bool check(const double *fIn, int ndim, int numBasis, int *idx, double tCurr, int rkIdx)
{
  double f0 = fIn[0]*std::pow(0.7071067811865475,ndim);
  bool status = true;

  if(f0 < 0.) {
     if(ndim == 1) {
       printf("WARNING: negative cell avg %e in cell %2d, tCurr = %e\n", f0, idx[0], tCurr);
     } else if( ndim == 2) {
       printf("WARNING: negative cell avg %e in cell %2d %2d, tCurr = %e, rkIdx = %d\n", f0, idx[0], idx[1], tCurr, rkIdx);
     } else if( ndim == 3) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d, tCurr = %e\n", f0, idx[0], idx[1], idx[2], tCurr);
     } else if( ndim == 4) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d %2d, tCurr = %e\n", f0, idx[0], idx[1], idx[2], idx[3], tCurr);
     } else if( ndim == 5) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d %2d %2d, tCurr = %e, rkIdx = %d\n", f0, idx[0], idx[1], idx[2], idx[3], idx[4], tCurr, rkIdx);
     }
     status = false;
  }

  double fmin = findMinNodalValue(fIn, ndim);
  if (fmin < -EPSILON && status) {
     if(ndim == 1) {
       printf("warning: negative control node %e in cell %2d, tCurr = %e \n", fmin, idx[0], tCurr);
     } else if(ndim == 2) {
       double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
       fVal[0] = 0.5*(NODE*(3.0*fIn[3]*NODE-1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
       fVal[1] = -0.5*(NODE*(3.0*fIn[3]*NODE+1.732050807568877*fIn[2]-1.732050807568877*fIn[1])-1.0*fIn[0]); 
       fVal[2] = -0.5*(NODE*(3.0*fIn[3]*NODE-1.732050807568877*fIn[2]+1.732050807568877*fIn[1])-1.0*fIn[0]); 
       fVal[3] = 0.5*(NODE*(3.0*fIn[3]*NODE+1.732050807568877*(fIn[2]+fIn[1]))+fIn[0]); 
       printf("warning: negative control node %e in cell %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], tCurr);
       printf("f at control = {%e, %e, %e, %e}\n", fVal[0], fVal[1], fVal[2], fVal[3]);
     } else if(ndim == 3) {
       printf("warning: negative control node %e in cell %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], tCurr);
     } else if(ndim == 4) {
       printf("warning: negative control node %e in cell %2d %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], idx[3], tCurr);
     } else if(ndim == 5) {
       printf("warning: negative control node %e in cell %2d %2d %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], idx[3], idx[4], tCurr);
     }
  }
  return status;
}


double rescale(const double *fIn, double *fOut, int ndim, int numBasis, int *idx, double tCurr)
{
  double f0 = fIn[0]*std::pow(0.7071067811865475,ndim);
  if (f0 < 0.) return 0.;

  double fmin = findMinNodalValue(fIn, ndim);
  double fminOld, del2Change = 0.;
  int j = 0;

  while (j<10 && fmin < -EPSILON) {
     double theta = std::min(1.0, (1. - EPSILON)/(1. - fmin/f0));
     //double theta = std::min(1.0, f0/(f0 - fmin + EPSILON));

     // modify moments. note no change to cell average
     fOut[0] = fIn[0]; 
     double del2 = 0.0;
     for(int i=1; i<numBasis; i++) {
       if(theta < 1 && j==0) {
          del2 += fIn[i]*fIn[i];
          fOut[i] = theta*fIn[i];
       } else {
          fOut[i] = theta*fOut[i];
       }
     }
     del2Change += del2*(1-theta)*(1-theta);
     
     fmin = findMinNodalValue(fOut, ndim);
     j++;
  }
  
  return del2Change;
}

double rescaleVolTerm(const double *fOutSurf, const double dt, double *fVol, int ndim, int numBasis, int *idx)
{
  double scaler = findMinNodalRatio(fOutSurf, fVol, 1./dt, ndim);
  for(int i=0; i<numBasis; i++) {
    fVol[i] *= scaler;
  }

  return scaler;
}
