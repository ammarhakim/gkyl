#include <DistFuncMomentCalcModDecl.h> 
#include <cmath> 
void GkM0Star2x2vSer_VX(const double intFac, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *fl, const double *fr, double *out) 
{ 
  // intFac:  =2pi/m for gyrokinetics (not used in Vlasov). 
  // w[NDIM]: Cell-center coordinates. 
  // dxv[4]:  cell length in each direciton. 
  // fl/fr:   Distribution function in left/right cells 
  // out:     Increment to M_0^star from this cell surface. 
 
  const double dS = 0.5*dxvl[3]*intFac*(wr[2]-wl[2]); 
 
  out[0] += ((-0.5773502691896258*fr[3])+0.5773502691896258*fl[3]+0.5*fr[0]+0.5*fl[0])*dS; 
  out[1] += ((-0.5773502691896258*fr[6])+0.5773502691896258*fl[6]+0.5*fr[1]+0.5*fl[1])*dS; 
  out[2] += ((-0.5773502691896258*fr[7])+0.5773502691896258*fl[7]+0.5*fr[2]+0.5*fl[2])*dS; 
  out[3] += ((-0.5773502691896258*fr[11])+0.5773502691896258*fl[11]+0.5*fr[5]+0.5*fl[5])*dS; 
 
} 
 
void GkM0StarPositivity2x2vSer_VX(const double intFac, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *fl, const double *fr, double *out) 
{ 
  // intFac:  =2pi/m for gyrokinetics (not used in Vlasov). 
  // w[NDIM]: Cell-center coordinates. 
  // dxv[4]:  cell length in each direciton. 
  // fl/fr:   Distribution function in left/right cells 
  // out:     Increment to M_0^star from this cell surface. 
 
  const double dS = 0.5*dxvl[3]*intFac*(wr[2]-wl[2]); 
 
  if ( (0.02777777777777778*fr[15]-0.02777777777777778*fl[15]-0.04811252243246882*fr[14]+0.04811252243246882*fl[14]-0.04811252243246882*fr[13]+0.04811252243246882*fl[13]-0.02405626121623441*fr[12]-0.02405626121623441*fl[12]-0.04811252243246882*fr[11]+0.04811252243246882*fl[11]+0.08333333333333333*fr[10]-0.08333333333333333*fl[10]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]+0.08333333333333333*fr[7]-0.08333333333333333*fl[7]+0.08333333333333333*fr[6]-0.08333333333333333*fl[6]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]-0.07216878364870323*fr[2]-0.07216878364870323*fl[2]-0.07216878364870323*fr[1]-0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && ((-0.02777777777777778*fr[15])+0.02777777777777778*fl[15]+0.04811252243246882*fr[14]-0.04811252243246882*fl[14]+0.04811252243246882*fr[13]-0.04811252243246882*fl[13]+0.02405626121623441*fr[12]+0.02405626121623441*fl[12]-0.04811252243246882*fr[11]+0.04811252243246882*fl[11]-0.08333333333333333*fr[10]+0.08333333333333333*fl[10]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]+0.08333333333333333*fr[7]-0.08333333333333333*fl[7]+0.08333333333333333*fr[6]-0.08333333333333333*fl[6]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]-0.07216878364870323*fr[2]-0.07216878364870323*fl[2]-0.07216878364870323*fr[1]-0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && ((-0.02777777777777778*fr[15])+0.02777777777777778*fl[15]+0.04811252243246882*fr[14]-0.04811252243246882*fl[14]-0.04811252243246882*fr[13]+0.04811252243246882*fl[13]+0.02405626121623441*fr[12]+0.02405626121623441*fl[12]+0.04811252243246882*fr[11]-0.04811252243246882*fl[11]+0.08333333333333333*fr[10]-0.08333333333333333*fl[10]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]-0.08333333333333333*fr[7]+0.08333333333333333*fl[7]+0.08333333333333333*fr[6]-0.08333333333333333*fl[6]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]+0.07216878364870323*fr[2]+0.07216878364870323*fl[2]-0.07216878364870323*fr[1]-0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && (0.02777777777777778*fr[15]-0.02777777777777778*fl[15]-0.04811252243246882*fr[14]+0.04811252243246882*fl[14]+0.04811252243246882*fr[13]-0.04811252243246882*fl[13]-0.02405626121623441*fr[12]-0.02405626121623441*fl[12]+0.04811252243246882*fr[11]-0.04811252243246882*fl[11]-0.08333333333333333*fr[10]+0.08333333333333333*fl[10]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]-0.08333333333333333*fr[7]+0.08333333333333333*fl[7]+0.08333333333333333*fr[6]-0.08333333333333333*fl[6]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]+0.07216878364870323*fr[2]+0.07216878364870323*fl[2]-0.07216878364870323*fr[1]-0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && ((-0.02777777777777778*fr[15])+0.02777777777777778*fl[15]-0.04811252243246882*fr[14]+0.04811252243246882*fl[14]+0.04811252243246882*fr[13]-0.04811252243246882*fl[13]+0.02405626121623441*fr[12]+0.02405626121623441*fl[12]+0.04811252243246882*fr[11]-0.04811252243246882*fl[11]+0.08333333333333333*fr[10]-0.08333333333333333*fl[10]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]+0.08333333333333333*fr[7]-0.08333333333333333*fl[7]-0.08333333333333333*fr[6]+0.08333333333333333*fl[6]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]-0.07216878364870323*fr[2]-0.07216878364870323*fl[2]+0.07216878364870323*fr[1]+0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && (0.02777777777777778*fr[15]-0.02777777777777778*fl[15]+0.04811252243246882*fr[14]-0.04811252243246882*fl[14]-0.04811252243246882*fr[13]+0.04811252243246882*fl[13]-0.02405626121623441*fr[12]-0.02405626121623441*fl[12]+0.04811252243246882*fr[11]-0.04811252243246882*fl[11]-0.08333333333333333*fr[10]+0.08333333333333333*fl[10]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]+0.08333333333333333*fr[7]-0.08333333333333333*fl[7]-0.08333333333333333*fr[6]+0.08333333333333333*fl[6]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]-0.07216878364870323*fr[2]-0.07216878364870323*fl[2]+0.07216878364870323*fr[1]+0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && (0.02777777777777778*fr[15]-0.02777777777777778*fl[15]+0.04811252243246882*fr[14]-0.04811252243246882*fl[14]+0.04811252243246882*fr[13]-0.04811252243246882*fl[13]-0.02405626121623441*fr[12]-0.02405626121623441*fl[12]-0.04811252243246882*fr[11]+0.04811252243246882*fl[11]+0.08333333333333333*fr[10]-0.08333333333333333*fl[10]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]-0.08333333333333333*fr[7]+0.08333333333333333*fl[7]-0.08333333333333333*fr[6]+0.08333333333333333*fl[6]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]+0.07216878364870323*fr[2]+0.07216878364870323*fl[2]+0.07216878364870323*fr[1]+0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) && ((-0.02777777777777778*fr[15])+0.02777777777777778*fl[15]-0.04811252243246882*fr[14]+0.04811252243246882*fl[14]-0.04811252243246882*fr[13]+0.04811252243246882*fl[13]+0.02405626121623441*fr[12]+0.02405626121623441*fl[12]-0.04811252243246882*fr[11]+0.04811252243246882*fl[11]-0.08333333333333333*fr[10]+0.08333333333333333*fl[10]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]-0.08333333333333333*fr[7]+0.08333333333333333*fl[7]-0.08333333333333333*fr[6]+0.08333333333333333*fl[6]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.1443375672974065*fr[3]+0.1443375672974065*fl[3]+0.07216878364870323*fr[2]+0.07216878364870323*fl[2]+0.07216878364870323*fr[1]+0.07216878364870323*fl[1]+0.125*fr[0]+0.125*fl[0]>=0.0) ) {
    out[0] += ((-0.5773502691896258*fr[3])+0.5773502691896258*fl[3]+0.5*fr[0]+0.5*fl[0])*dS; 
    out[1] += ((-0.5773502691896258*fr[6])+0.5773502691896258*fl[6]+0.5*fr[1]+0.5*fl[1])*dS; 
    out[2] += ((-0.5773502691896258*fr[7])+0.5773502691896258*fl[7]+0.5*fr[2]+0.5*fl[2])*dS; 
    out[3] += ((-0.5773502691896258*fr[11])+0.5773502691896258*fl[11]+0.5*fr[5]+0.5*fl[5])*dS; 
  } else {

    double xBar[8];
    xBar[0] = ((-0.02083333333333333*fr[15])-0.02083333333333333*fl[15]+0.03608439182435158*fr[14]+0.03608439182435158*fl[14]+0.03608439182435158*fr[13]+0.03608439182435158*fl[13]-0.03608439182435159*fr[12]+0.03608439182435159*fl[12]+0.03608439182435158*fr[11]+0.03608439182435158*fl[11]-0.0625*fr[10]-0.0625*fl[10]+0.0625*fr[9]-0.0625*fl[9]+0.0625*fr[8]-0.0625*fl[8]-0.0625*fr[7]-0.0625*fl[7]-0.0625*fr[6]-0.0625*fl[6]+0.0625*fr[5]-0.0625*fl[5]-0.1082531754730548*fr[4]+0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]-0.1082531754730548*fr[2]+0.1082531754730548*fl[2]-0.1082531754730548*fr[1]+0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*((-0.3333333333333333*((-0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15]))-1.0*fr[14]+1.732050807568877*fr[7]))-0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*((-0.3333333333333333*((-0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15]))-1.0*fl[14]+1.732050807568877*fl[7]))-0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*((-0.3333333333333333*((-0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15]))-1.0*fr[14]+1.732050807568877*fr[7]))-0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-1.732050807568877*((-0.3333333333333333*((-0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15]))-1.0*fl[14]+1.732050807568877*fl[7]))-0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3])-1.5*((-0.3333333333333333*((-0.3333333333333333*(3.0*fr[5]-1.732050807568877*fr[12]))-1.0*fr[9]+1.732050807568877*fr[2]))-0.3333333333333333*(1.732050807568877*fr[1]-1.0*fr[8])-0.5773502691896258*fr[4]+fr[0])-1.5*((-0.3333333333333333*((-0.3333333333333333*(3.0*fl[5]-1.732050807568877*fl[12]))-1.0*fl[9]+1.732050807568877*fl[2]))-0.3333333333333333*(1.732050807568877*fl[1]-1.0*fl[8])-0.5773502691896258*fl[4]+fl[0]))); 
    xBar[1] = (0.02083333333333333*fr[15]+0.02083333333333333*fl[15]-0.03608439182435158*fr[14]-0.03608439182435158*fl[14]-0.03608439182435158*fr[13]-0.03608439182435158*fl[13]+0.03608439182435159*fr[12]-0.03608439182435159*fl[12]+0.03608439182435158*fr[11]+0.03608439182435158*fl[11]+0.0625*fr[10]+0.0625*fl[10]-0.0625*fr[9]+0.0625*fl[9]-0.0625*fr[8]+0.0625*fl[8]-0.0625*fr[7]-0.0625*fl[7]-0.0625*fr[6]-0.0625*fl[6]+0.0625*fr[5]-0.0625*fl[5]+0.1082531754730548*fr[4]-0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]-0.1082531754730548*fr[2]+0.1082531754730548*fl[2]-0.1082531754730548*fr[1]+0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11]))+fr[14]+1.732050807568877*fr[7]))-0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11]))+fl[14]+1.732050807568877*fl[7]))-0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11]))+fr[14]+1.732050807568877*fr[7]))-0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-1.732050807568877*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11]))+fl[14]+1.732050807568877*fl[7]))-0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3])-1.5*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[12]+3.0*fr[5]))+fr[9]+1.732050807568877*fr[2]))-0.3333333333333333*(fr[8]+1.732050807568877*fr[1])+0.5773502691896258*fr[4]+fr[0])-1.5*((-0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[12]+3.0*fl[5]))+fl[9]+1.732050807568877*fl[2]))-0.3333333333333333*(fl[8]+1.732050807568877*fl[1])+0.5773502691896258*fl[4]+fl[0]))); 
    xBar[2] = (0.02083333333333333*fr[15]+0.02083333333333333*fl[15]-0.03608439182435158*fr[14]-0.03608439182435158*fl[14]+0.03608439182435158*fr[13]+0.03608439182435158*fl[13]+0.03608439182435159*fr[12]-0.03608439182435159*fl[12]-0.03608439182435158*fr[11]-0.03608439182435158*fl[11]-0.0625*fr[10]-0.0625*fl[10]-0.0625*fr[9]+0.0625*fl[9]+0.0625*fr[8]-0.0625*fl[8]+0.0625*fr[7]+0.0625*fl[7]-0.0625*fr[6]-0.0625*fl[6]-0.0625*fr[5]+0.0625*fl[5]-0.1082531754730548*fr[4]+0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]+0.1082531754730548*fr[2]-0.1082531754730548*fl[2]-0.1082531754730548*fr[1]+0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*(0.3333333333333333*((-0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15]))-1.0*fr[14]+1.732050807568877*fr[7])-0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*(0.3333333333333333*((-0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15]))-1.0*fl[14]+1.732050807568877*fl[7])-0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*(0.3333333333333333*((-0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15]))-1.0*fr[14]+1.732050807568877*fr[7])-0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-1.732050807568877*(0.3333333333333333*((-0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15]))-1.0*fl[14]+1.732050807568877*fl[7])-0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3])-1.5*(0.3333333333333333*((-0.3333333333333333*(3.0*fr[5]-1.732050807568877*fr[12]))-1.0*fr[9]+1.732050807568877*fr[2])-0.3333333333333333*(1.732050807568877*fr[1]-1.0*fr[8])-0.5773502691896258*fr[4]+fr[0])-1.5*(0.3333333333333333*((-0.3333333333333333*(3.0*fl[5]-1.732050807568877*fl[12]))-1.0*fl[9]+1.732050807568877*fl[2])-0.3333333333333333*(1.732050807568877*fl[1]-1.0*fl[8])-0.5773502691896258*fl[4]+fl[0]))); 
    xBar[3] = ((-0.02083333333333333*fr[15])-0.02083333333333333*fl[15]+0.03608439182435158*fr[14]+0.03608439182435158*fl[14]-0.03608439182435158*fr[13]-0.03608439182435158*fl[13]-0.03608439182435159*fr[12]+0.03608439182435159*fl[12]-0.03608439182435158*fr[11]-0.03608439182435158*fl[11]+0.0625*fr[10]+0.0625*fl[10]+0.0625*fr[9]-0.0625*fl[9]-0.0625*fr[8]+0.0625*fl[8]+0.0625*fr[7]+0.0625*fl[7]-0.0625*fr[6]-0.0625*fl[6]-0.0625*fr[5]+0.0625*fl[5]+0.1082531754730548*fr[4]-0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]+0.1082531754730548*fr[2]-0.1082531754730548*fl[2]-0.1082531754730548*fr[1]+0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11]))+fr[14]+1.732050807568877*fr[7])-0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11]))+fl[14]+1.732050807568877*fl[7])-0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11]))+fr[14]+1.732050807568877*fr[7])-0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-1.732050807568877*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11]))+fl[14]+1.732050807568877*fl[7])-0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3])-1.5*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fr[12]+3.0*fr[5]))+fr[9]+1.732050807568877*fr[2])-0.3333333333333333*(fr[8]+1.732050807568877*fr[1])+0.5773502691896258*fr[4]+fr[0])-1.5*(0.3333333333333333*((-0.3333333333333333*(1.732050807568877*fl[12]+3.0*fl[5]))+fl[9]+1.732050807568877*fl[2])-0.3333333333333333*(fl[8]+1.732050807568877*fl[1])+0.5773502691896258*fl[4]+fl[0]))); 
    xBar[4] = (0.02083333333333333*fr[15]+0.02083333333333333*fl[15]+0.03608439182435158*fr[14]+0.03608439182435158*fl[14]-0.03608439182435158*fr[13]-0.03608439182435158*fl[13]+0.03608439182435159*fr[12]-0.03608439182435159*fl[12]-0.03608439182435158*fr[11]-0.03608439182435158*fl[11]-0.0625*fr[10]-0.0625*fl[10]+0.0625*fr[9]-0.0625*fl[9]-0.0625*fr[8]+0.0625*fl[8]-0.0625*fr[7]-0.0625*fl[7]+0.0625*fr[6]+0.0625*fl[6]-0.0625*fr[5]+0.0625*fl[5]-0.1082531754730548*fr[4]+0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]-0.1082531754730548*fr[2]+0.1082531754730548*fl[2]+0.1082531754730548*fr[1]-0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*((-0.3333333333333333*(0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15])-1.0*fr[14]+1.732050807568877*fr[7]))+0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*((-0.3333333333333333*(0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15])-1.0*fl[14]+1.732050807568877*fl[7]))+0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*((-0.3333333333333333*(0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15])-1.0*fr[14]+1.732050807568877*fr[7]))+0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-1.732050807568877*((-0.3333333333333333*(0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15])-1.0*fl[14]+1.732050807568877*fl[7]))+0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3])-1.5*((-0.3333333333333333*(0.3333333333333333*(3.0*fr[5]-1.732050807568877*fr[12])-1.0*fr[9]+1.732050807568877*fr[2]))+0.3333333333333333*(1.732050807568877*fr[1]-1.0*fr[8])-0.5773502691896258*fr[4]+fr[0])-1.5*((-0.3333333333333333*(0.3333333333333333*(3.0*fl[5]-1.732050807568877*fl[12])-1.0*fl[9]+1.732050807568877*fl[2]))+0.3333333333333333*(1.732050807568877*fl[1]-1.0*fl[8])-0.5773502691896258*fl[4]+fl[0]))); 
    xBar[5] = ((-0.02083333333333333*fr[15])-0.02083333333333333*fl[15]-0.03608439182435158*fr[14]-0.03608439182435158*fl[14]+0.03608439182435158*fr[13]+0.03608439182435158*fl[13]-0.03608439182435159*fr[12]+0.03608439182435159*fl[12]-0.03608439182435158*fr[11]-0.03608439182435158*fl[11]+0.0625*fr[10]+0.0625*fl[10]-0.0625*fr[9]+0.0625*fl[9]+0.0625*fr[8]-0.0625*fl[8]-0.0625*fr[7]-0.0625*fl[7]+0.0625*fr[6]+0.0625*fl[6]-0.0625*fr[5]+0.0625*fl[5]+0.1082531754730548*fr[4]-0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]-0.1082531754730548*fr[2]+0.1082531754730548*fl[2]+0.1082531754730548*fr[1]-0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11])+fr[14]+1.732050807568877*fr[7]))+0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11])+fl[14]+1.732050807568877*fl[7]))+0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11])+fr[14]+1.732050807568877*fr[7]))+0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-1.732050807568877*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11])+fl[14]+1.732050807568877*fl[7]))+0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3])-1.5*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[12]+3.0*fr[5])+fr[9]+1.732050807568877*fr[2]))+0.3333333333333333*(fr[8]+1.732050807568877*fr[1])+0.5773502691896258*fr[4]+fr[0])-1.5*((-0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[12]+3.0*fl[5])+fl[9]+1.732050807568877*fl[2]))+0.3333333333333333*(fl[8]+1.732050807568877*fl[1])+0.5773502691896258*fl[4]+fl[0]))); 
    xBar[6] = ((-0.02083333333333333*fr[15])-0.02083333333333333*fl[15]-0.03608439182435158*fr[14]-0.03608439182435158*fl[14]-0.03608439182435158*fr[13]-0.03608439182435158*fl[13]-0.03608439182435159*fr[12]+0.03608439182435159*fl[12]+0.03608439182435158*fr[11]+0.03608439182435158*fl[11]-0.0625*fr[10]-0.0625*fl[10]-0.0625*fr[9]+0.0625*fl[9]-0.0625*fr[8]+0.0625*fl[8]+0.0625*fr[7]+0.0625*fl[7]+0.0625*fr[6]+0.0625*fl[6]+0.0625*fr[5]-0.0625*fl[5]-0.1082531754730548*fr[4]+0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]+0.1082531754730548*fr[2]-0.1082531754730548*fl[2]+0.1082531754730548*fr[1]-0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*(0.3333333333333333*(0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15])-1.0*fr[14]+1.732050807568877*fr[7])+0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*(0.3333333333333333*(0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15])-1.0*fl[14]+1.732050807568877*fl[7])+0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*(0.3333333333333333*(0.3333333333333333*(3.0*fr[11]-1.732050807568877*fr[15])-1.0*fr[14]+1.732050807568877*fr[7])+0.3333333333333333*(1.732050807568877*fr[6]-1.0*fr[13])-0.5773502691896258*fr[10]+fr[3])-1.732050807568877*(0.3333333333333333*(0.3333333333333333*(3.0*fl[11]-1.732050807568877*fl[15])-1.0*fl[14]+1.732050807568877*fl[7])+0.3333333333333333*(1.732050807568877*fl[6]-1.0*fl[13])-0.5773502691896258*fl[10]+fl[3])-1.5*(0.3333333333333333*(0.3333333333333333*(3.0*fr[5]-1.732050807568877*fr[12])-1.0*fr[9]+1.732050807568877*fr[2])+0.3333333333333333*(1.732050807568877*fr[1]-1.0*fr[8])-0.5773502691896258*fr[4]+fr[0])-1.5*(0.3333333333333333*(0.3333333333333333*(3.0*fl[5]-1.732050807568877*fl[12])-1.0*fl[9]+1.732050807568877*fl[2])+0.3333333333333333*(1.732050807568877*fl[1]-1.0*fl[8])-0.5773502691896258*fl[4]+fl[0]))); 
    xBar[7] = (0.02083333333333333*fr[15]+0.02083333333333333*fl[15]+0.03608439182435158*fr[14]+0.03608439182435158*fl[14]+0.03608439182435158*fr[13]+0.03608439182435158*fl[13]+0.03608439182435159*fr[12]-0.03608439182435159*fl[12]+0.03608439182435158*fr[11]+0.03608439182435158*fl[11]+0.0625*fr[10]+0.0625*fl[10]+0.0625*fr[9]-0.0625*fl[9]+0.0625*fr[8]-0.0625*fl[8]+0.0625*fr[7]+0.0625*fl[7]+0.0625*fr[6]+0.0625*fl[6]+0.0625*fr[5]-0.0625*fl[5]+0.1082531754730548*fr[4]-0.1082531754730548*fl[4]+0.1082531754730548*fr[3]+0.1082531754730548*fl[3]+0.1082531754730548*fr[2]-0.1082531754730548*fl[2]+0.1082531754730548*fr[1]-0.1082531754730548*fl[1]+0.1875*fr[0]-0.1875*fl[0])/(0.5*(0.8660254037844386*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11])+fr[14]+1.732050807568877*fr[7])+0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-0.8660254037844386*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11])+fl[14]+1.732050807568877*fl[7])+0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3]))-0.25*(1.732050807568877*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[15]+3.0*fr[11])+fr[14]+1.732050807568877*fr[7])+0.3333333333333333*(fr[13]+1.732050807568877*fr[6])+0.5773502691896258*fr[10]+fr[3])-1.732050807568877*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[15]+3.0*fl[11])+fl[14]+1.732050807568877*fl[7])+0.3333333333333333*(fl[13]+1.732050807568877*fl[6])+0.5773502691896258*fl[10]+fl[3])-1.5*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fr[12]+3.0*fr[5])+fr[9]+1.732050807568877*fr[2])+0.3333333333333333*(fr[8]+1.732050807568877*fr[1])+0.5773502691896258*fr[4]+fr[0])-1.5*(0.3333333333333333*(0.3333333333333333*(1.732050807568877*fl[12]+3.0*fl[5])+fl[9]+1.732050807568877*fl[2])+0.3333333333333333*(fl[8]+1.732050807568877*fl[1])+0.5773502691896258*fl[4]+fl[0]))); 

    double xBarSq[8];
    xBarSq[0] = xBar[0]*xBar[0]; 
    xBarSq[1] = xBar[1]*xBar[1]; 
    xBarSq[2] = xBar[2]*xBar[2]; 
    xBarSq[3] = xBar[3]*xBar[3]; 
    xBarSq[4] = xBar[4]*xBar[4]; 
    xBarSq[5] = xBar[5]*xBar[5]; 
    xBarSq[6] = xBar[6]*xBar[6]; 
    xBarSq[7] = xBar[7]*xBar[7]; 

    double g1[8];
    g1[0] = (3.0*xBar[0])/(1.0-1.0*xBarSq[0])-(1.0*xBar[0]*xBarSq[0])/(1.0-1.0*xBarSq[0]); 
    g1[1] = (3.0*xBar[1])/(1.0-1.0*xBarSq[1])-(1.0*xBar[1]*xBarSq[1])/(1.0-1.0*xBarSq[1]); 
    g1[2] = (3.0*xBar[2])/(1.0-1.0*xBarSq[2])-(1.0*xBar[2]*xBarSq[2])/(1.0-1.0*xBarSq[2]); 
    g1[3] = (3.0*xBar[3])/(1.0-1.0*xBarSq[3])-(1.0*xBar[3]*xBarSq[3])/(1.0-1.0*xBarSq[3]); 
    g1[4] = (3.0*xBar[4])/(1.0-1.0*xBarSq[4])-(1.0*xBar[4]*xBarSq[4])/(1.0-1.0*xBarSq[4]); 
    g1[5] = (3.0*xBar[5])/(1.0-1.0*xBarSq[5])-(1.0*xBar[5]*xBarSq[5])/(1.0-1.0*xBarSq[5]); 
    g1[6] = (3.0*xBar[6])/(1.0-1.0*xBarSq[6])-(1.0*xBar[6]*xBarSq[6])/(1.0-1.0*xBarSq[6]); 
    g1[7] = (3.0*xBar[7])/(1.0-1.0*xBarSq[7])-(1.0*xBar[7]*xBarSq[7])/(1.0-1.0*xBarSq[7]); 

    double gBound[8];

    if (std::abs(g1[0]) > 1.0e-15) {
      double g1Sq = g1[0]*g1[0];
      gBound[0] = (-(0.0240562612162344*g1[0]*fr[12])/std::sinh(g1[0]))-(0.0240562612162344*g1[0]*fl[12])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fr[9])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fl[9])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fr[8])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fl[8])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fr[5])/std::sinh(g1[0])+(0.04166666666666666*g1[0]*fl[5])/std::sinh(g1[0])-(0.07216878364870323*g1[0]*fr[4])/std::sinh(g1[0])-(0.07216878364870323*g1[0]*fl[4])/std::sinh(g1[0])-(0.07216878364870322*g1[0]*fr[2])/std::sinh(g1[0])-(0.07216878364870322*g1[0]*fl[2])/std::sinh(g1[0])-(0.07216878364870322*g1[0]*fr[1])/std::sinh(g1[0])-(0.07216878364870322*g1[0]*fl[1])/std::sinh(g1[0])+(0.125*fr[0]*g1[0])/std::sinh(g1[0])+(0.125*fl[0]*g1[0])/std::sinh(g1[0]); 
    } else {
      gBound[0] = (-0.0240562612162344*fr[12])-0.0240562612162344*fl[12]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.07216878364870322*fr[2]-0.07216878364870322*fl[2]-0.07216878364870322*fr[1]-0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[1]) > 1.0e-15) {
      double g1Sq = g1[1]*g1[1];
      gBound[1] = (0.0240562612162344*g1[1]*fr[12])/std::sinh(g1[1])+(0.0240562612162344*g1[1]*fl[12])/std::sinh(g1[1])-(0.04166666666666666*g1[1]*fr[9])/std::sinh(g1[1])-(0.04166666666666666*g1[1]*fl[9])/std::sinh(g1[1])-(0.04166666666666666*g1[1]*fr[8])/std::sinh(g1[1])-(0.04166666666666666*g1[1]*fl[8])/std::sinh(g1[1])+(0.04166666666666666*g1[1]*fr[5])/std::sinh(g1[1])+(0.04166666666666666*g1[1]*fl[5])/std::sinh(g1[1])+(0.07216878364870323*g1[1]*fr[4])/std::sinh(g1[1])+(0.07216878364870323*g1[1]*fl[4])/std::sinh(g1[1])-(0.07216878364870322*g1[1]*fr[2])/std::sinh(g1[1])-(0.07216878364870322*g1[1]*fl[2])/std::sinh(g1[1])-(0.07216878364870322*fr[1]*g1[1])/std::sinh(g1[1])-(0.07216878364870322*fl[1]*g1[1])/std::sinh(g1[1])+(0.125*fr[0]*g1[1])/std::sinh(g1[1])+(0.125*fl[0]*g1[1])/std::sinh(g1[1]); 
    } else {
      gBound[1] = 0.0240562612162344*fr[12]+0.0240562612162344*fl[12]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.07216878364870322*fr[2]-0.07216878364870322*fl[2]-0.07216878364870322*fr[1]-0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[2]) > 1.0e-15) {
      double g1Sq = g1[2]*g1[2];
      gBound[2] = (0.0240562612162344*g1[2]*fr[12])/std::sinh(g1[2])+(0.0240562612162344*g1[2]*fl[12])/std::sinh(g1[2])-(0.04166666666666666*g1[2]*fr[9])/std::sinh(g1[2])-(0.04166666666666666*g1[2]*fl[9])/std::sinh(g1[2])+(0.04166666666666666*g1[2]*fr[8])/std::sinh(g1[2])+(0.04166666666666666*g1[2]*fl[8])/std::sinh(g1[2])-(0.04166666666666666*g1[2]*fr[5])/std::sinh(g1[2])-(0.04166666666666666*g1[2]*fl[5])/std::sinh(g1[2])-(0.07216878364870323*g1[2]*fr[4])/std::sinh(g1[2])-(0.07216878364870323*g1[2]*fl[4])/std::sinh(g1[2])+(0.07216878364870322*fr[2]*g1[2])/std::sinh(g1[2])+(0.07216878364870322*fl[2]*g1[2])/std::sinh(g1[2])-(0.07216878364870322*fr[1]*g1[2])/std::sinh(g1[2])-(0.07216878364870322*fl[1]*g1[2])/std::sinh(g1[2])+(0.125*fr[0]*g1[2])/std::sinh(g1[2])+(0.125*fl[0]*g1[2])/std::sinh(g1[2]); 
    } else {
      gBound[2] = 0.0240562612162344*fr[12]+0.0240562612162344*fl[12]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]+0.07216878364870322*fr[2]+0.07216878364870322*fl[2]-0.07216878364870322*fr[1]-0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[3]) > 1.0e-15) {
      double g1Sq = g1[3]*g1[3];
      gBound[3] = (-(0.0240562612162344*g1[3]*fr[12])/std::sinh(g1[3]))-(0.0240562612162344*g1[3]*fl[12])/std::sinh(g1[3])+(0.04166666666666666*g1[3]*fr[9])/std::sinh(g1[3])+(0.04166666666666666*g1[3]*fl[9])/std::sinh(g1[3])-(0.04166666666666666*g1[3]*fr[8])/std::sinh(g1[3])-(0.04166666666666666*g1[3]*fl[8])/std::sinh(g1[3])-(0.04166666666666666*g1[3]*fr[5])/std::sinh(g1[3])-(0.04166666666666666*g1[3]*fl[5])/std::sinh(g1[3])+(0.07216878364870323*g1[3]*fr[4])/std::sinh(g1[3])+(0.07216878364870323*g1[3]*fl[4])/std::sinh(g1[3])+(0.07216878364870322*fr[2]*g1[3])/std::sinh(g1[3])+(0.07216878364870322*fl[2]*g1[3])/std::sinh(g1[3])-(0.07216878364870322*fr[1]*g1[3])/std::sinh(g1[3])-(0.07216878364870322*fl[1]*g1[3])/std::sinh(g1[3])+(0.125*fr[0]*g1[3])/std::sinh(g1[3])+(0.125*fl[0]*g1[3])/std::sinh(g1[3]); 
    } else {
      gBound[3] = (-0.0240562612162344*fr[12])-0.0240562612162344*fl[12]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]+0.07216878364870322*fr[2]+0.07216878364870322*fl[2]-0.07216878364870322*fr[1]-0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[4]) > 1.0e-15) {
      double g1Sq = g1[4]*g1[4];
      gBound[4] = (0.0240562612162344*g1[4]*fr[12])/std::sinh(g1[4])+(0.0240562612162344*g1[4]*fl[12])/std::sinh(g1[4])+(0.04166666666666666*g1[4]*fr[9])/std::sinh(g1[4])+(0.04166666666666666*g1[4]*fl[9])/std::sinh(g1[4])-(0.04166666666666666*g1[4]*fr[8])/std::sinh(g1[4])-(0.04166666666666666*g1[4]*fl[8])/std::sinh(g1[4])-(0.04166666666666666*g1[4]*fr[5])/std::sinh(g1[4])-(0.04166666666666666*g1[4]*fl[5])/std::sinh(g1[4])-(0.07216878364870323*fr[4]*g1[4])/std::sinh(g1[4])-(0.07216878364870323*fl[4]*g1[4])/std::sinh(g1[4])-(0.07216878364870322*fr[2]*g1[4])/std::sinh(g1[4])-(0.07216878364870322*fl[2]*g1[4])/std::sinh(g1[4])+(0.07216878364870322*fr[1]*g1[4])/std::sinh(g1[4])+(0.07216878364870322*fl[1]*g1[4])/std::sinh(g1[4])+(0.125*fr[0]*g1[4])/std::sinh(g1[4])+(0.125*fl[0]*g1[4])/std::sinh(g1[4]); 
    } else {
      gBound[4] = 0.0240562612162344*fr[12]+0.0240562612162344*fl[12]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]-0.07216878364870322*fr[2]-0.07216878364870322*fl[2]+0.07216878364870322*fr[1]+0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[5]) > 1.0e-15) {
      double g1Sq = g1[5]*g1[5];
      gBound[5] = (-(0.0240562612162344*g1[5]*fr[12])/std::sinh(g1[5]))-(0.0240562612162344*g1[5]*fl[12])/std::sinh(g1[5])-(0.04166666666666666*g1[5]*fr[9])/std::sinh(g1[5])-(0.04166666666666666*g1[5]*fl[9])/std::sinh(g1[5])+(0.04166666666666666*g1[5]*fr[8])/std::sinh(g1[5])+(0.04166666666666666*g1[5]*fl[8])/std::sinh(g1[5])-(0.04166666666666666*fr[5]*g1[5])/std::sinh(g1[5])-(0.04166666666666666*fl[5]*g1[5])/std::sinh(g1[5])+(0.07216878364870323*fr[4]*g1[5])/std::sinh(g1[5])+(0.07216878364870323*fl[4]*g1[5])/std::sinh(g1[5])-(0.07216878364870322*fr[2]*g1[5])/std::sinh(g1[5])-(0.07216878364870322*fl[2]*g1[5])/std::sinh(g1[5])+(0.07216878364870322*fr[1]*g1[5])/std::sinh(g1[5])+(0.07216878364870322*fl[1]*g1[5])/std::sinh(g1[5])+(0.125*fr[0]*g1[5])/std::sinh(g1[5])+(0.125*fl[0]*g1[5])/std::sinh(g1[5]); 
    } else {
      gBound[5] = (-0.0240562612162344*fr[12])-0.0240562612162344*fl[12]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]-0.04166666666666666*fr[5]-0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]-0.07216878364870322*fr[2]-0.07216878364870322*fl[2]+0.07216878364870322*fr[1]+0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[6]) > 1.0e-15) {
      double g1Sq = g1[6]*g1[6];
      gBound[6] = (-(0.0240562612162344*g1[6]*fr[12])/std::sinh(g1[6]))-(0.0240562612162344*g1[6]*fl[12])/std::sinh(g1[6])-(0.04166666666666666*g1[6]*fr[9])/std::sinh(g1[6])-(0.04166666666666666*g1[6]*fl[9])/std::sinh(g1[6])-(0.04166666666666666*g1[6]*fr[8])/std::sinh(g1[6])-(0.04166666666666666*g1[6]*fl[8])/std::sinh(g1[6])+(0.04166666666666666*fr[5]*g1[6])/std::sinh(g1[6])+(0.04166666666666666*fl[5]*g1[6])/std::sinh(g1[6])-(0.07216878364870323*fr[4]*g1[6])/std::sinh(g1[6])-(0.07216878364870323*fl[4]*g1[6])/std::sinh(g1[6])+(0.07216878364870322*fr[2]*g1[6])/std::sinh(g1[6])+(0.07216878364870322*fl[2]*g1[6])/std::sinh(g1[6])+(0.07216878364870322*fr[1]*g1[6])/std::sinh(g1[6])+(0.07216878364870322*fl[1]*g1[6])/std::sinh(g1[6])+(0.125*fr[0]*g1[6])/std::sinh(g1[6])+(0.125*fl[0]*g1[6])/std::sinh(g1[6]); 
    } else {
      gBound[6] = (-0.0240562612162344*fr[12])-0.0240562612162344*fl[12]-0.04166666666666666*fr[9]-0.04166666666666666*fl[9]-0.04166666666666666*fr[8]-0.04166666666666666*fl[8]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]-0.07216878364870323*fr[4]-0.07216878364870323*fl[4]+0.07216878364870322*fr[2]+0.07216878364870322*fl[2]+0.07216878364870322*fr[1]+0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    if (std::abs(g1[7]) > 1.0e-15) {
      double g1Sq = g1[7]*g1[7];
      gBound[7] = (0.0240562612162344*g1[7]*fr[12])/std::sinh(g1[7])+(0.0240562612162344*g1[7]*fl[12])/std::sinh(g1[7])+(0.04166666666666666*g1[7]*fr[9])/std::sinh(g1[7])+(0.04166666666666666*g1[7]*fl[9])/std::sinh(g1[7])+(0.04166666666666666*g1[7]*fr[8])/std::sinh(g1[7])+(0.04166666666666666*g1[7]*fl[8])/std::sinh(g1[7])+(0.04166666666666666*fr[5]*g1[7])/std::sinh(g1[7])+(0.04166666666666666*fl[5]*g1[7])/std::sinh(g1[7])+(0.07216878364870323*fr[4]*g1[7])/std::sinh(g1[7])+(0.07216878364870323*fl[4]*g1[7])/std::sinh(g1[7])+(0.07216878364870322*fr[2]*g1[7])/std::sinh(g1[7])+(0.07216878364870322*fl[2]*g1[7])/std::sinh(g1[7])+(0.07216878364870322*fr[1]*g1[7])/std::sinh(g1[7])+(0.07216878364870322*fl[1]*g1[7])/std::sinh(g1[7])+(0.125*fr[0]*g1[7])/std::sinh(g1[7])+(0.125*fl[0]*g1[7])/std::sinh(g1[7]); 
    } else {
      gBound[7] = 0.0240562612162344*fr[12]+0.0240562612162344*fl[12]+0.04166666666666666*fr[9]+0.04166666666666666*fl[9]+0.04166666666666666*fr[8]+0.04166666666666666*fl[8]+0.04166666666666666*fr[5]+0.04166666666666666*fl[5]+0.07216878364870323*fr[4]+0.07216878364870323*fl[4]+0.07216878364870322*fr[2]+0.07216878364870322*fl[2]+0.07216878364870322*fr[1]+0.07216878364870322*fl[1]+0.125*fr[0]+0.125*fl[0]; 
    };

    out[0] += (0.5*gBound[7]+0.5*gBound[6]+0.5*gBound[5]+0.5*gBound[4]+0.5*gBound[3]+0.5*gBound[2]+0.5*gBound[1]+0.5*gBound[0])*dS; 
    out[1] += (0.8660254037844386*gBound[7]+0.8660254037844386*gBound[6]+0.8660254037844386*gBound[5]+0.8660254037844386*gBound[4]-0.8660254037844386*gBound[3]-0.8660254037844386*gBound[2]-0.8660254037844386*gBound[1]-0.8660254037844386*gBound[0])*dS; 
    out[2] += (0.8660254037844386*gBound[7]+0.8660254037844386*gBound[6]-0.8660254037844386*gBound[5]-0.8660254037844386*gBound[4]+0.8660254037844386*gBound[3]+0.8660254037844386*gBound[2]-0.8660254037844386*gBound[1]-0.8660254037844386*gBound[0])*dS; 
    out[3] += (1.5*gBound[7]+1.5*gBound[6]-1.5*gBound[5]-1.5*gBound[4]-1.5*gBound[3]-1.5*gBound[2]+1.5*gBound[1]+1.5*gBound[0])*dS; 
  };
 
} 
 
void GkM1iM2Star2x2vSer(const double *w, const double *dxv, const double intFac, const double m_, const double *Bmag, const double *f, double *outM1i, double *outM2) 
{ 
  // w[4]:    Cell-center coordinates. 
  // dxv[4]:  Cell length in each direciton. 
  // intFac:  =2pi/m for gyrokinetics. 
  // m_:      mass. 
  // Bmag[4]: Magnetic field magnitude. 
  // f:       Distribution function. 
  // outM1i:  Contribution to M_1^star from this cell. 
  // outM2:   Contribution to M_2^star from this cell. 
 
  const double volFact = intFac*0.25*dxv[2]*dxv[3]; 
  double wvSq[2]; 
  wvSq[0]  = w[2]*w[2]; 
  wvSq[1]  = w[3]*w[3]; 
  double dvSq[2]; 
  dvSq[0] = dxv[2]*dxv[2]; 
  dvSq[1] = dxv[3]*dxv[3]; 
 
  outM1i[0] += 2.0*f[0]*w[2]*volFact; 
  outM1i[1] += 2.0*f[1]*w[2]*volFact; 
  outM1i[2] += 2.0*f[2]*w[2]*volFact; 
  outM1i[3] += 2.0*w[2]*f[5]*volFact; 
 
  double tmp[4]; 
  tmp[0] = 0.5773502691896258*dxv[3]*f[4]+2.0*f[0]*w[3]; 
  tmp[1] = 0.5773502691896258*dxv[3]*f[8]+2.0*f[1]*w[3]; 
  tmp[2] = 0.5773502691896258*dxv[3]*f[9]+2.0*f[2]*w[3]; 
  tmp[3] = 0.5773502691896258*dxv[3]*f[12]+2.0*w[3]*f[5]; 
 
  outM2[0] += ((1.0*Bmag[3]*tmp[3]+1.0*Bmag[2]*tmp[2]+1.0*Bmag[1]*tmp[1]+1.0*Bmag[0]*tmp[0])/m_+0.5773502691896258*dxv[2]*w[2]*f[3]+2.0*f[0]*wvSq[0])*volFact; 
  outM2[1] += ((1.0*Bmag[2]*tmp[3]+1.0*tmp[2]*Bmag[3]+1.0*Bmag[0]*tmp[1]+1.0*tmp[0]*Bmag[1])/m_+0.5773502691896258*dxv[2]*w[2]*f[6]+2.0*f[1]*wvSq[0])*volFact; 
  outM2[2] += ((1.0*Bmag[1]*tmp[3]+1.0*tmp[1]*Bmag[3]+1.0*Bmag[0]*tmp[2]+1.0*tmp[0]*Bmag[2])/m_+0.5773502691896258*dxv[2]*w[2]*f[7]+2.0*f[2]*wvSq[0])*volFact; 
  outM2[3] += ((1.0*Bmag[0]*tmp[3]+1.0*tmp[0]*Bmag[3]+1.0*Bmag[1]*tmp[2]+1.0*tmp[1]*Bmag[2])/m_+0.5773502691896258*dxv[2]*w[2]*f[11]+2.0*wvSq[0]*f[5])*volFact; 
 
} 
void GkBoundaryIntegral2x2vSer_F_VX_P1(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[16]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += (1.732050807568877*fIn[3]-1.0*fIn[0])*dS; 
    out[1] += (1.732050807568877*fIn[6]-1.0*fIn[1])*dS; 
    out[2] += (1.732050807568877*fIn[7]-1.0*fIn[2])*dS; 
    out[3] += (1.732050807568877*fIn[11]-1.0*fIn[5])*dS; 
 
  } else {
 
    out[0] += (1.732050807568877*fIn[3]+fIn[0])*dS; 
    out[1] += (1.732050807568877*fIn[6]+fIn[1])*dS; 
    out[2] += (1.732050807568877*fIn[7]+fIn[2])*dS; 
    out[3] += (1.732050807568877*fIn[11]+fIn[5])*dS; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_F_VX_P2(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[48]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += ((-2.23606797749979*fIn[13])+1.732050807568877*fIn[3]-1.0*fIn[0])*dS; 
    out[1] += ((-2.23606797749979*fIn[23])+1.732050807568877*fIn[6]-1.0*fIn[1])*dS; 
    out[2] += ((-2.23606797749979*fIn[24])+1.732050807568877*fIn[7]-1.0*fIn[2])*dS; 
    out[3] += ((-2.23606797749979*fIn[34])+1.732050807568877*fIn[15]-1.0*fIn[5])*dS; 
    out[4] += (1.732050807568877*fIn[21]-1.0*fIn[11])*dS; 
    out[5] += (1.732050807568877*fIn[22]-1.0*fIn[12])*dS; 
    out[6] += (1.732050807568877*fIn[32]-1.0*fIn[19])*dS; 
    out[7] += (1.732050807568877*fIn[33]-1.0*fIn[20])*dS; 
 
  } else {
 
    out[0] += (2.23606797749979*fIn[13]+1.732050807568877*fIn[3]+fIn[0])*dS; 
    out[1] += (2.23606797749979*fIn[23]+1.732050807568877*fIn[6]+fIn[1])*dS; 
    out[2] += (2.23606797749979*fIn[24]+1.732050807568877*fIn[7]+fIn[2])*dS; 
    out[3] += (2.23606797749979*fIn[34]+1.732050807568877*fIn[15]+fIn[5])*dS; 
    out[4] += (1.732050807568877*fIn[21]+fIn[11])*dS; 
    out[5] += (1.732050807568877*fIn[22]+fIn[12])*dS; 
    out[6] += (1.732050807568877*fIn[32]+fIn[19])*dS; 
    out[7] += (1.732050807568877*fIn[33]+fIn[20])*dS; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_F_VX_P3(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[80]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += (2.645751311064591*fIn[33]-2.23606797749979*fIn[13]+1.732050807568877*fIn[3]-1.0*fIn[0])*dS; 
    out[1] += (2.645751311064591*fIn[52]-2.23606797749979*fIn[23]+1.732050807568877*fIn[6]-1.0*fIn[1])*dS; 
    out[2] += (2.645751311064591*fIn[53]-2.23606797749979*fIn[24]+1.732050807568877*fIn[7]-1.0*fIn[2])*dS; 
    out[3] += (2.645751311064591*fIn[66]-2.23606797749979*fIn[38]+1.732050807568877*fIn[15]-1.0*fIn[5])*dS; 
    out[4] += (1.732050807568877*fIn[21]-1.0*fIn[11])*dS; 
    out[5] += (1.732050807568877*fIn[22]-1.0*fIn[12])*dS; 
    out[6] += (1.732050807568877*fIn[36]-1.0*fIn[19])*dS; 
    out[7] += (1.732050807568877*fIn[37]-1.0*fIn[20])*dS; 
    out[8] += (1.732050807568877*fIn[50]-1.0*fIn[31])*dS; 
    out[9] += (1.732050807568877*fIn[51]-1.0*fIn[32])*dS; 
    out[10] += (1.732050807568877*fIn[64]-1.0*fIn[48])*dS; 
    out[11] += (1.732050807568877*fIn[65]-1.0*fIn[49])*dS; 
 
  } else {
 
    out[0] += (2.645751311064591*fIn[33]+2.23606797749979*fIn[13]+1.732050807568877*fIn[3]+fIn[0])*dS; 
    out[1] += (2.645751311064591*fIn[52]+2.23606797749979*fIn[23]+1.732050807568877*fIn[6]+fIn[1])*dS; 
    out[2] += (2.645751311064591*fIn[53]+2.23606797749979*fIn[24]+1.732050807568877*fIn[7]+fIn[2])*dS; 
    out[3] += (2.645751311064591*fIn[66]+2.23606797749979*fIn[38]+1.732050807568877*fIn[15]+fIn[5])*dS; 
    out[4] += (1.732050807568877*fIn[21]+fIn[11])*dS; 
    out[5] += (1.732050807568877*fIn[22]+fIn[12])*dS; 
    out[6] += (1.732050807568877*fIn[36]+fIn[19])*dS; 
    out[7] += (1.732050807568877*fIn[37]+fIn[20])*dS; 
    out[8] += (1.732050807568877*fIn[50]+fIn[31])*dS; 
    out[9] += (1.732050807568877*fIn[51]+fIn[32])*dS; 
    out[10] += (1.732050807568877*fIn[64]+fIn[48])*dS; 
    out[11] += (1.732050807568877*fIn[65]+fIn[49])*dS; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VX_P1(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[16]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += (1.732050807568877*fIn[3]-1.0*fIn[0])*dS*vBoundary+(0.8660254037844386*dxv[2]*fIn[3]-0.5*fIn[0]*dxv[2])*dS; 
    out[1] += (1.732050807568877*fIn[6]-1.0*fIn[1])*dS*vBoundary+(0.8660254037844386*dxv[2]*fIn[6]-0.5*fIn[1]*dxv[2])*dS; 
    out[2] += (1.732050807568877*fIn[7]-1.0*fIn[2])*dS*vBoundary+(0.8660254037844386*dxv[2]*fIn[7]-0.5*dxv[2]*fIn[2])*dS; 
    out[3] += (1.732050807568877*fIn[11]-1.0*fIn[5])*dS*vBoundary+(0.8660254037844386*dxv[2]*fIn[11]-0.5*dxv[2]*fIn[5])*dS; 
 
  } else {
 
    out[0] += (1.732050807568877*fIn[3]+fIn[0])*dS*vBoundary+((-0.8660254037844386*dxv[2]*fIn[3])-0.5*fIn[0]*dxv[2])*dS; 
    out[1] += (1.732050807568877*fIn[6]+fIn[1])*dS*vBoundary+((-0.8660254037844386*dxv[2]*fIn[6])-0.5*fIn[1]*dxv[2])*dS; 
    out[2] += (1.732050807568877*fIn[7]+fIn[2])*dS*vBoundary+((-0.8660254037844386*dxv[2]*fIn[7])-0.5*dxv[2]*fIn[2])*dS; 
    out[3] += (1.732050807568877*fIn[11]+fIn[5])*dS*vBoundary+((-0.8660254037844386*dxv[2]*fIn[11])-0.5*dxv[2]*fIn[5])*dS; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VX_P2(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[48]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += ((-2.23606797749979*fIn[13])+1.732050807568877*fIn[3]-1.0*fIn[0])*dS*vBoundary; 
    out[1] += ((-2.23606797749979*fIn[23])+1.732050807568877*fIn[6]-1.0*fIn[1])*dS*vBoundary; 
    out[2] += ((-2.23606797749979*fIn[24])+1.732050807568877*fIn[7]-1.0*fIn[2])*dS*vBoundary; 
    out[3] += ((-2.23606797749979*fIn[34])+1.732050807568877*fIn[15]-1.0*fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[21]-1.0*fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[22]-1.0*fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[32]-1.0*fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[33]-1.0*fIn[20])*dS*vBoundary; 
 
  } else {
 
    out[0] += (2.23606797749979*fIn[13]+1.732050807568877*fIn[3]+fIn[0])*dS*vBoundary; 
    out[1] += (2.23606797749979*fIn[23]+1.732050807568877*fIn[6]+fIn[1])*dS*vBoundary; 
    out[2] += (2.23606797749979*fIn[24]+1.732050807568877*fIn[7]+fIn[2])*dS*vBoundary; 
    out[3] += (2.23606797749979*fIn[34]+1.732050807568877*fIn[15]+fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[21]+fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[22]+fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[32]+fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[33]+fIn[20])*dS*vBoundary; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VX_P3(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[80]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]*intFac; 
 
  if (atLower) {
 
    out[0] += (2.645751311064591*fIn[33]-2.23606797749979*fIn[13]+1.732050807568877*fIn[3]-1.0*fIn[0])*dS*vBoundary; 
    out[1] += (2.645751311064591*fIn[52]-2.23606797749979*fIn[23]+1.732050807568877*fIn[6]-1.0*fIn[1])*dS*vBoundary; 
    out[2] += (2.645751311064591*fIn[53]-2.23606797749979*fIn[24]+1.732050807568877*fIn[7]-1.0*fIn[2])*dS*vBoundary; 
    out[3] += (2.645751311064591*fIn[66]-2.23606797749979*fIn[38]+1.732050807568877*fIn[15]-1.0*fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[21]-1.0*fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[22]-1.0*fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[36]-1.0*fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[37]-1.0*fIn[20])*dS*vBoundary; 
    out[8] += (1.732050807568877*fIn[50]-1.0*fIn[31])*dS*vBoundary; 
    out[9] += (1.732050807568877*fIn[51]-1.0*fIn[32])*dS*vBoundary; 
    out[10] += (1.732050807568877*fIn[64]-1.0*fIn[48])*dS*vBoundary; 
    out[11] += (1.732050807568877*fIn[65]-1.0*fIn[49])*dS*vBoundary; 
 
  } else {
 
    out[0] += (2.645751311064591*fIn[33]+2.23606797749979*fIn[13]+1.732050807568877*fIn[3]+fIn[0])*dS*vBoundary; 
    out[1] += (2.645751311064591*fIn[52]+2.23606797749979*fIn[23]+1.732050807568877*fIn[6]+fIn[1])*dS*vBoundary; 
    out[2] += (2.645751311064591*fIn[53]+2.23606797749979*fIn[24]+1.732050807568877*fIn[7]+fIn[2])*dS*vBoundary; 
    out[3] += (2.645751311064591*fIn[66]+2.23606797749979*fIn[38]+1.732050807568877*fIn[15]+fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[21]+fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[22]+fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[36]+fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[37]+fIn[20])*dS*vBoundary; 
    out[8] += (1.732050807568877*fIn[50]+fIn[31])*dS*vBoundary; 
    out[9] += (1.732050807568877*fIn[51]+fIn[32])*dS*vBoundary; 
    out[10] += (1.732050807568877*fIn[64]+fIn[48])*dS*vBoundary; 
    out[11] += (1.732050807568877*fIn[65]+fIn[49])*dS*vBoundary; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VY_P1(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[16]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]*intFac; 
 
  if (atLower) {
 
    out[0] += (1.732050807568877*fIn[4]-1.0*fIn[0])*dS*vBoundary; 
    out[1] += (1.732050807568877*fIn[8]-1.0*fIn[1])*dS*vBoundary; 
    out[2] += (1.732050807568877*fIn[9]-1.0*fIn[2])*dS*vBoundary; 
    out[3] += (1.732050807568877*fIn[12]-1.0*fIn[5])*dS*vBoundary; 
 
  } else {
 
    out[0] += (1.732050807568877*fIn[4]+fIn[0])*dS*vBoundary; 
    out[1] += (1.732050807568877*fIn[8]+fIn[1])*dS*vBoundary; 
    out[2] += (1.732050807568877*fIn[9]+fIn[2])*dS*vBoundary; 
    out[3] += (1.732050807568877*fIn[12]+fIn[5])*dS*vBoundary; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VY_P2(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[48]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]*intFac; 
 
  if (atLower) {
 
    out[0] += ((-2.23606797749979*fIn[14])+1.732050807568877*fIn[4]-1.0*fIn[0])*dS*vBoundary; 
    out[1] += ((-2.23606797749979*fIn[28])+1.732050807568877*fIn[8]-1.0*fIn[1])*dS*vBoundary; 
    out[2] += ((-2.23606797749979*fIn[29])+1.732050807568877*fIn[9]-1.0*fIn[2])*dS*vBoundary; 
    out[3] += ((-2.23606797749979*fIn[41])+1.732050807568877*fIn[16]-1.0*fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[25]-1.0*fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[26]-1.0*fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[35]-1.0*fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[36]-1.0*fIn[20])*dS*vBoundary; 
 
  } else {
 
    out[0] += (2.23606797749979*fIn[14]+1.732050807568877*fIn[4]+fIn[0])*dS*vBoundary; 
    out[1] += (2.23606797749979*fIn[28]+1.732050807568877*fIn[8]+fIn[1])*dS*vBoundary; 
    out[2] += (2.23606797749979*fIn[29]+1.732050807568877*fIn[9]+fIn[2])*dS*vBoundary; 
    out[3] += (2.23606797749979*fIn[41]+1.732050807568877*fIn[16]+fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[25]+fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[26]+fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[35]+fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[36]+fIn[20])*dS*vBoundary; 
 
  }
 
} 
 
void GkBoundaryIntegral2x2vSer_vF_VY_P3(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out) 
{ 
  // atLower:   =true(false) if in cell at lower(upper) velocity boundary. 
  // intFac:    =2pi/m or 4pi/m for GkLBO (not used for Vlasov). 
  // vBoundary: velocity at the boundary of the velocity grid. 
  // dxv[4]:    cell length in each direciton. 
  // fIn[80]:    distribution function at velocity boundaries. 
  // out:       int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]*intFac; 
 
  if (atLower) {
 
    out[0] += (2.645751311064591*fIn[34]-2.23606797749979*fIn[14]+1.732050807568877*fIn[4]-1.0*fIn[0])*dS*vBoundary; 
    out[1] += (2.645751311064591*fIn[57]-2.23606797749979*fIn[28]+1.732050807568877*fIn[8]-1.0*fIn[1])*dS*vBoundary; 
    out[2] += (2.645751311064591*fIn[58]-2.23606797749979*fIn[29]+1.732050807568877*fIn[9]-1.0*fIn[2])*dS*vBoundary; 
    out[3] += (2.645751311064591*fIn[73]-2.23606797749979*fIn[45]+1.732050807568877*fIn[16]-1.0*fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[25]-1.0*fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[26]-1.0*fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[39]-1.0*fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[40]-1.0*fIn[20])*dS*vBoundary; 
    out[8] += (1.732050807568877*fIn[54]-1.0*fIn[31])*dS*vBoundary; 
    out[9] += (1.732050807568877*fIn[55]-1.0*fIn[32])*dS*vBoundary; 
    out[10] += (1.732050807568877*fIn[67]-1.0*fIn[48])*dS*vBoundary; 
    out[11] += (1.732050807568877*fIn[68]-1.0*fIn[49])*dS*vBoundary; 
 
  } else {
 
    out[0] += (2.645751311064591*fIn[34]+2.23606797749979*fIn[14]+1.732050807568877*fIn[4]+fIn[0])*dS*vBoundary; 
    out[1] += (2.645751311064591*fIn[57]+2.23606797749979*fIn[28]+1.732050807568877*fIn[8]+fIn[1])*dS*vBoundary; 
    out[2] += (2.645751311064591*fIn[58]+2.23606797749979*fIn[29]+1.732050807568877*fIn[9]+fIn[2])*dS*vBoundary; 
    out[3] += (2.645751311064591*fIn[73]+2.23606797749979*fIn[45]+1.732050807568877*fIn[16]+fIn[5])*dS*vBoundary; 
    out[4] += (1.732050807568877*fIn[25]+fIn[11])*dS*vBoundary; 
    out[5] += (1.732050807568877*fIn[26]+fIn[12])*dS*vBoundary; 
    out[6] += (1.732050807568877*fIn[39]+fIn[19])*dS*vBoundary; 
    out[7] += (1.732050807568877*fIn[40]+fIn[20])*dS*vBoundary; 
    out[8] += (1.732050807568877*fIn[54]+fIn[31])*dS*vBoundary; 
    out[9] += (1.732050807568877*fIn[55]+fIn[32])*dS*vBoundary; 
    out[10] += (1.732050807568877*fIn[67]+fIn[48])*dS*vBoundary; 
    out[11] += (1.732050807568877*fIn[68]+fIn[49])*dS*vBoundary; 
 
  }
 
} 
 
