#include <math.h> 
#include <PrimMomentsModDecl.h> 
 
using namespace Eigen; 
 
void SelfPrimMoments2x3vSer_P1(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // If a corner value is below zero, use cell average m0.
  bool m0Avg = false;
  if (1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.5*m0[3])-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.5*m0[3])-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
 
  double m0s[4]; 
  if (m0Avg) { 
    m0s[0] = m0[0]; 
    m0s[1] = 0.0; 
    m0s[2] = 0.0; 
    m0s[3] = 0.0; 
  } else { 
    m0s[0] = m0[0]; 
    m0s[1] = m0[1]; 
    m0s[2] = m0[2]; 
    m0s[3] = m0[3]; 
  } 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(16,16); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(16);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(16);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0s[0]; 
  BigAEM(0,1) = 0.5*m0s[1]; 
  BigAEM(0,2) = 0.5*m0s[2]; 
  BigAEM(0,3) = 0.5*m0s[3]; 
  BigAEM(1,0) = 0.5*m0s[1]; 
  BigAEM(1,1) = 0.5*m0s[0]; 
  BigAEM(1,2) = 0.5*m0s[3]; 
  BigAEM(1,3) = 0.5*m0s[2]; 
  BigAEM(2,0) = 0.5*m0s[2]; 
  BigAEM(2,1) = 0.5*m0s[3]; 
  BigAEM(2,2) = 0.5*m0s[0]; 
  BigAEM(2,3) = 0.5*m0s[1]; 
  BigAEM(3,0) = 0.5*m0s[3]; 
  BigAEM(3,1) = 0.5*m0s[2]; 
  BigAEM(3,2) = 0.5*m0s[1]; 
  BigAEM(3,3) = 0.5*m0s[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,12) = -0.5*cM[0]; 
  BigAEM(0,13) = -0.5*cM[1]; 
  BigAEM(0,14) = -0.5*cM[2]; 
  BigAEM(0,15) = -0.5*cM[3]; 
  BigAEM(1,12) = -0.5*cM[1]; 
  BigAEM(1,13) = -0.5*cM[0]; 
  BigAEM(1,14) = -0.5*cM[3]; 
  BigAEM(1,15) = -0.5*cM[2]; 
  BigAEM(2,12) = -0.5*cM[2]; 
  BigAEM(2,13) = -0.5*cM[3]; 
  BigAEM(2,14) = -0.5*cM[0]; 
  BigAEM(2,15) = -0.5*cM[1]; 
  BigAEM(3,12) = -0.5*cM[3]; 
  BigAEM(3,13) = -0.5*cM[2]; 
  BigAEM(3,14) = -0.5*cM[1]; 
  BigAEM(3,15) = -0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(12,0) = 0.5*m1[0]; 
  BigAEM(12,1) = 0.5*m1[1]; 
  BigAEM(12,2) = 0.5*m1[2]; 
  BigAEM(12,3) = 0.5*m1[3]; 
  BigAEM(13,0) = 0.5*m1[1]; 
  BigAEM(13,1) = 0.5*m1[0]; 
  BigAEM(13,2) = 0.5*m1[3]; 
  BigAEM(13,3) = 0.5*m1[2]; 
  BigAEM(14,0) = 0.5*m1[2]; 
  BigAEM(14,1) = 0.5*m1[3]; 
  BigAEM(14,2) = 0.5*m1[0]; 
  BigAEM(14,3) = 0.5*m1[1]; 
  BigAEM(15,0) = 0.5*m1[3]; 
  BigAEM(15,1) = 0.5*m1[2]; 
  BigAEM(15,2) = 0.5*m1[1]; 
  BigAEM(15,3) = 0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(4,4) = 0.5*m0s[0]; 
  BigAEM(4,5) = 0.5*m0s[1]; 
  BigAEM(4,6) = 0.5*m0s[2]; 
  BigAEM(4,7) = 0.5*m0s[3]; 
  BigAEM(5,4) = 0.5*m0s[1]; 
  BigAEM(5,5) = 0.5*m0s[0]; 
  BigAEM(5,6) = 0.5*m0s[3]; 
  BigAEM(5,7) = 0.5*m0s[2]; 
  BigAEM(6,4) = 0.5*m0s[2]; 
  BigAEM(6,5) = 0.5*m0s[3]; 
  BigAEM(6,6) = 0.5*m0s[0]; 
  BigAEM(6,7) = 0.5*m0s[1]; 
  BigAEM(7,4) = 0.5*m0s[3]; 
  BigAEM(7,5) = 0.5*m0s[2]; 
  BigAEM(7,6) = 0.5*m0s[1]; 
  BigAEM(7,7) = 0.5*m0s[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(4,12) = -0.5*cM[4]; 
  BigAEM(4,13) = -0.5*cM[5]; 
  BigAEM(4,14) = -0.5*cM[6]; 
  BigAEM(4,15) = -0.5*cM[7]; 
  BigAEM(5,12) = -0.5*cM[5]; 
  BigAEM(5,13) = -0.5*cM[4]; 
  BigAEM(5,14) = -0.5*cM[7]; 
  BigAEM(5,15) = -0.5*cM[6]; 
  BigAEM(6,12) = -0.5*cM[6]; 
  BigAEM(6,13) = -0.5*cM[7]; 
  BigAEM(6,14) = -0.5*cM[4]; 
  BigAEM(6,15) = -0.5*cM[5]; 
  BigAEM(7,12) = -0.5*cM[7]; 
  BigAEM(7,13) = -0.5*cM[6]; 
  BigAEM(7,14) = -0.5*cM[5]; 
  BigAEM(7,15) = -0.5*cM[4]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(12,4) = 0.5*m1[4]; 
  BigAEM(12,5) = 0.5*m1[5]; 
  BigAEM(12,6) = 0.5*m1[6]; 
  BigAEM(12,7) = 0.5*m1[7]; 
  BigAEM(13,4) = 0.5*m1[5]; 
  BigAEM(13,5) = 0.5*m1[4]; 
  BigAEM(13,6) = 0.5*m1[7]; 
  BigAEM(13,7) = 0.5*m1[6]; 
  BigAEM(14,4) = 0.5*m1[6]; 
  BigAEM(14,5) = 0.5*m1[7]; 
  BigAEM(14,6) = 0.5*m1[4]; 
  BigAEM(14,7) = 0.5*m1[5]; 
  BigAEM(15,4) = 0.5*m1[7]; 
  BigAEM(15,5) = 0.5*m1[6]; 
  BigAEM(15,6) = 0.5*m1[5]; 
  BigAEM(15,7) = 0.5*m1[4]; 
 
  // ....... Block from weak multiply of uZ and m0  .......... // 
  BigAEM(8,8) = 0.5*m0s[0]; 
  BigAEM(8,9) = 0.5*m0s[1]; 
  BigAEM(8,10) = 0.5*m0s[2]; 
  BigAEM(8,11) = 0.5*m0s[3]; 
  BigAEM(9,8) = 0.5*m0s[1]; 
  BigAEM(9,9) = 0.5*m0s[0]; 
  BigAEM(9,10) = 0.5*m0s[3]; 
  BigAEM(9,11) = 0.5*m0s[2]; 
  BigAEM(10,8) = 0.5*m0s[2]; 
  BigAEM(10,9) = 0.5*m0s[3]; 
  BigAEM(10,10) = 0.5*m0s[0]; 
  BigAEM(10,11) = 0.5*m0s[1]; 
  BigAEM(11,8) = 0.5*m0s[3]; 
  BigAEM(11,9) = 0.5*m0s[2]; 
  BigAEM(11,10) = 0.5*m0s[1]; 
  BigAEM(11,11) = 0.5*m0s[0]; 
 
  // ....... Block from correction to uZ .......... // 
  BigAEM(8,12) = -0.5*cM[8]; 
  BigAEM(8,13) = -0.5*cM[9]; 
  BigAEM(8,14) = -0.5*cM[10]; 
  BigAEM(8,15) = -0.5*cM[11]; 
  BigAEM(9,12) = -0.5*cM[9]; 
  BigAEM(9,13) = -0.5*cM[8]; 
  BigAEM(9,14) = -0.5*cM[11]; 
  BigAEM(9,15) = -0.5*cM[10]; 
  BigAEM(10,12) = -0.5*cM[10]; 
  BigAEM(10,13) = -0.5*cM[11]; 
  BigAEM(10,14) = -0.5*cM[8]; 
  BigAEM(10,15) = -0.5*cM[9]; 
  BigAEM(11,12) = -0.5*cM[11]; 
  BigAEM(11,13) = -0.5*cM[10]; 
  BigAEM(11,14) = -0.5*cM[9]; 
  BigAEM(11,15) = -0.5*cM[8]; 
 
  // ....... Block from weak multiply of uZ and m1Z  .......... // 
  BigAEM(12,8) = 0.5*m1[8]; 
  BigAEM(12,9) = 0.5*m1[9]; 
  BigAEM(12,10) = 0.5*m1[10]; 
  BigAEM(12,11) = 0.5*m1[11]; 
  BigAEM(13,8) = 0.5*m1[9]; 
  BigAEM(13,9) = 0.5*m1[8]; 
  BigAEM(13,10) = 0.5*m1[11]; 
  BigAEM(13,11) = 0.5*m1[10]; 
  BigAEM(14,8) = 0.5*m1[10]; 
  BigAEM(14,9) = 0.5*m1[11]; 
  BigAEM(14,10) = 0.5*m1[8]; 
  BigAEM(14,11) = 0.5*m1[9]; 
  BigAEM(15,8) = 0.5*m1[11]; 
  BigAEM(15,9) = 0.5*m1[10]; 
  BigAEM(15,10) = 0.5*m1[9]; 
  BigAEM(15,11) = 0.5*m1[8]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(12,12) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(12,13) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(12,14) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(12,15) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(13,12) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(13,13) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(13,14) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(13,15) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(14,12) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(14,13) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(14,14) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(14,15) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(15,12) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(15,13) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(15,14) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(15,15) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<4,8>(0,4).setZero(); 
  BigAEM.block<8,4>(4,0).setZero(); 
  BigAEM.block<4,4>(4,8).setZero(); 
  BigAEM.block<4,4>(8,4).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m2[0],m2[1],m2[2],m2[3]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,12,1) = xEV.segment<12>(0); 
 
  Eigen::Map<VectorXd>(vtSq,4,1) = xEV.segment<4>(12); 
 
} 
 
void SelfPrimMoments2x3vSer_P2(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // If a corner value is below zero, use cell average m0.
  bool m0Avg = false;
  if ((-1.936491673103709*m0[7])-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.936491673103709*m0[7])-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
 
  double m0s[8]; 
  if (m0Avg) { 
    m0s[0] = m0[0]; 
    m0s[1] = 0.0; 
    m0s[2] = 0.0; 
    m0s[3] = 0.0; 
    m0s[4] = 0.0; 
    m0s[5] = 0.0; 
    m0s[6] = 0.0; 
    m0s[7] = 0.0; 
  } else { 
    m0s[0] = m0[0]; 
    m0s[1] = m0[1]; 
    m0s[2] = m0[2]; 
    m0s[3] = m0[3]; 
    m0s[4] = m0[4]; 
    m0s[5] = m0[5]; 
    m0s[6] = m0[6]; 
    m0s[7] = m0[7]; 
  } 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(32,32); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(32);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(32);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0s[0]; 
  BigAEM(0,1) = 0.5*m0s[1]; 
  BigAEM(0,2) = 0.5*m0s[2]; 
  BigAEM(0,3) = 0.5*m0s[3]; 
  BigAEM(0,4) = 0.5*m0s[4]; 
  BigAEM(0,5) = 0.5*m0s[5]; 
  BigAEM(0,6) = 0.5*m0s[6]; 
  BigAEM(0,7) = 0.5*m0s[7]; 
  BigAEM(1,0) = 0.5*m0s[1]; 
  BigAEM(1,1) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(1,2) = 0.5*m0s[3]; 
  BigAEM(1,3) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(1,4) = 0.4472135954999579*m0s[1]; 
  BigAEM(1,5) = 0.5000000000000001*m0s[7]; 
  BigAEM(1,6) = 0.447213595499958*m0s[3]; 
  BigAEM(1,7) = 0.5000000000000001*m0s[5]; 
  BigAEM(2,0) = 0.5*m0s[2]; 
  BigAEM(2,1) = 0.5*m0s[3]; 
  BigAEM(2,2) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(2,3) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(2,4) = 0.5000000000000001*m0s[6]; 
  BigAEM(2,5) = 0.4472135954999579*m0s[2]; 
  BigAEM(2,6) = 0.5000000000000001*m0s[4]; 
  BigAEM(2,7) = 0.447213595499958*m0s[3]; 
  BigAEM(3,0) = 0.5*m0s[3]; 
  BigAEM(3,1) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(3,2) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(3,3) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(3,4) = 0.4472135954999579*m0s[3]; 
  BigAEM(3,5) = 0.4472135954999579*m0s[3]; 
  BigAEM(3,6) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(3,7) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(4,0) = 0.5*m0s[4]; 
  BigAEM(4,1) = 0.4472135954999579*m0s[1]; 
  BigAEM(4,2) = 0.5000000000000001*m0s[6]; 
  BigAEM(4,3) = 0.4472135954999579*m0s[3]; 
  BigAEM(4,4) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(4,6) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(4,7) = 0.4472135954999579*m0s[7]; 
  BigAEM(5,0) = 0.5*m0s[5]; 
  BigAEM(5,1) = 0.5000000000000001*m0s[7]; 
  BigAEM(5,2) = 0.4472135954999579*m0s[2]; 
  BigAEM(5,3) = 0.4472135954999579*m0s[3]; 
  BigAEM(5,5) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(5,6) = 0.4472135954999579*m0s[6]; 
  BigAEM(5,7) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(6,0) = 0.5*m0s[6]; 
  BigAEM(6,1) = 0.447213595499958*m0s[3]; 
  BigAEM(6,2) = 0.5000000000000001*m0s[4]; 
  BigAEM(6,3) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(6,4) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(6,5) = 0.4472135954999579*m0s[6]; 
  BigAEM(6,6) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(6,7) = 0.4*m0s[3]; 
  BigAEM(7,0) = 0.5*m0s[7]; 
  BigAEM(7,1) = 0.5000000000000001*m0s[5]; 
  BigAEM(7,2) = 0.447213595499958*m0s[3]; 
  BigAEM(7,3) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(7,4) = 0.4472135954999579*m0s[7]; 
  BigAEM(7,5) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(7,6) = 0.4*m0s[3]; 
  BigAEM(7,7) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,24) = -0.5*cM[0]; 
  BigAEM(0,25) = -0.5*cM[1]; 
  BigAEM(0,26) = -0.5*cM[2]; 
  BigAEM(0,27) = -0.5*cM[3]; 
  BigAEM(0,28) = -0.5*cM[4]; 
  BigAEM(0,29) = -0.5*cM[5]; 
  BigAEM(0,30) = -0.5*cM[6]; 
  BigAEM(0,31) = -0.5*cM[7]; 
  BigAEM(1,24) = -0.5*cM[1]; 
  BigAEM(1,25) = (-0.4472135954999579*cM[4])-0.5*cM[0]; 
  BigAEM(1,26) = -0.5*cM[3]; 
  BigAEM(1,27) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(1,28) = -0.4472135954999579*cM[1]; 
  BigAEM(1,29) = -0.5000000000000001*cM[7]; 
  BigAEM(1,30) = -0.447213595499958*cM[3]; 
  BigAEM(1,31) = -0.5000000000000001*cM[5]; 
  BigAEM(2,24) = -0.5*cM[2]; 
  BigAEM(2,25) = -0.5*cM[3]; 
  BigAEM(2,26) = (-0.4472135954999579*cM[5])-0.5*cM[0]; 
  BigAEM(2,27) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(2,28) = -0.5000000000000001*cM[6]; 
  BigAEM(2,29) = -0.4472135954999579*cM[2]; 
  BigAEM(2,30) = -0.5000000000000001*cM[4]; 
  BigAEM(2,31) = -0.447213595499958*cM[3]; 
  BigAEM(3,24) = -0.5*cM[3]; 
  BigAEM(3,25) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(3,26) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(3,27) = (-0.4472135954999579*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(3,28) = -0.4472135954999579*cM[3]; 
  BigAEM(3,29) = -0.4472135954999579*cM[3]; 
  BigAEM(3,30) = (-0.4*cM[7])-0.447213595499958*cM[1]; 
  BigAEM(3,31) = (-0.4*cM[6])-0.447213595499958*cM[2]; 
  BigAEM(4,24) = -0.5*cM[4]; 
  BigAEM(4,25) = -0.4472135954999579*cM[1]; 
  BigAEM(4,26) = -0.5000000000000001*cM[6]; 
  BigAEM(4,27) = -0.4472135954999579*cM[3]; 
  BigAEM(4,28) = (-0.31943828249997*cM[4])-0.5*cM[0]; 
  BigAEM(4,30) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(4,31) = -0.4472135954999579*cM[7]; 
  BigAEM(5,24) = -0.5*cM[5]; 
  BigAEM(5,25) = -0.5000000000000001*cM[7]; 
  BigAEM(5,26) = -0.4472135954999579*cM[2]; 
  BigAEM(5,27) = -0.4472135954999579*cM[3]; 
  BigAEM(5,29) = (-0.31943828249997*cM[5])-0.5*cM[0]; 
  BigAEM(5,30) = -0.4472135954999579*cM[6]; 
  BigAEM(5,31) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(6,24) = -0.5*cM[6]; 
  BigAEM(6,25) = -0.447213595499958*cM[3]; 
  BigAEM(6,26) = -0.5000000000000001*cM[4]; 
  BigAEM(6,27) = (-0.4*cM[7])-0.447213595499958*cM[1]; 
  BigAEM(6,28) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(6,29) = -0.4472135954999579*cM[6]; 
  BigAEM(6,30) = (-0.4472135954999579*cM[5])-0.31943828249997*cM[4]-0.5*cM[0]; 
  BigAEM(6,31) = -0.4*cM[3]; 
  BigAEM(7,24) = -0.5*cM[7]; 
  BigAEM(7,25) = -0.5000000000000001*cM[5]; 
  BigAEM(7,26) = -0.447213595499958*cM[3]; 
  BigAEM(7,27) = (-0.4*cM[6])-0.447213595499958*cM[2]; 
  BigAEM(7,28) = -0.4472135954999579*cM[7]; 
  BigAEM(7,29) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(7,30) = -0.4*cM[3]; 
  BigAEM(7,31) = (-0.31943828249997*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(24,0) = 0.5*m1[0]; 
  BigAEM(24,1) = 0.5*m1[1]; 
  BigAEM(24,2) = 0.5*m1[2]; 
  BigAEM(24,3) = 0.5*m1[3]; 
  BigAEM(24,4) = 0.5*m1[4]; 
  BigAEM(24,5) = 0.5*m1[5]; 
  BigAEM(24,6) = 0.5*m1[6]; 
  BigAEM(24,7) = 0.5*m1[7]; 
  BigAEM(25,0) = 0.5*m1[1]; 
  BigAEM(25,1) = 0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(25,2) = 0.5*m1[3]; 
  BigAEM(25,3) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(25,4) = 0.4472135954999579*m1[1]; 
  BigAEM(25,5) = 0.5000000000000001*m1[7]; 
  BigAEM(25,6) = 0.447213595499958*m1[3]; 
  BigAEM(25,7) = 0.5000000000000001*m1[5]; 
  BigAEM(26,0) = 0.5*m1[2]; 
  BigAEM(26,1) = 0.5*m1[3]; 
  BigAEM(26,2) = 0.4472135954999579*m1[5]+0.5*m1[0]; 
  BigAEM(26,3) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(26,4) = 0.5000000000000001*m1[6]; 
  BigAEM(26,5) = 0.4472135954999579*m1[2]; 
  BigAEM(26,6) = 0.5000000000000001*m1[4]; 
  BigAEM(26,7) = 0.447213595499958*m1[3]; 
  BigAEM(27,0) = 0.5*m1[3]; 
  BigAEM(27,1) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(27,2) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(27,3) = 0.4472135954999579*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(27,4) = 0.4472135954999579*m1[3]; 
  BigAEM(27,5) = 0.4472135954999579*m1[3]; 
  BigAEM(27,6) = 0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(27,7) = 0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(28,0) = 0.5*m1[4]; 
  BigAEM(28,1) = 0.4472135954999579*m1[1]; 
  BigAEM(28,2) = 0.5000000000000001*m1[6]; 
  BigAEM(28,3) = 0.4472135954999579*m1[3]; 
  BigAEM(28,4) = 0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(28,6) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(28,7) = 0.4472135954999579*m1[7]; 
  BigAEM(29,0) = 0.5*m1[5]; 
  BigAEM(29,1) = 0.5000000000000001*m1[7]; 
  BigAEM(29,2) = 0.4472135954999579*m1[2]; 
  BigAEM(29,3) = 0.4472135954999579*m1[3]; 
  BigAEM(29,5) = 0.31943828249997*m1[5]+0.5*m1[0]; 
  BigAEM(29,6) = 0.4472135954999579*m1[6]; 
  BigAEM(29,7) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(30,0) = 0.5*m1[6]; 
  BigAEM(30,1) = 0.447213595499958*m1[3]; 
  BigAEM(30,2) = 0.5000000000000001*m1[4]; 
  BigAEM(30,3) = 0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(30,4) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(30,5) = 0.4472135954999579*m1[6]; 
  BigAEM(30,6) = 0.4472135954999579*m1[5]+0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(30,7) = 0.4*m1[3]; 
  BigAEM(31,0) = 0.5*m1[7]; 
  BigAEM(31,1) = 0.5000000000000001*m1[5]; 
  BigAEM(31,2) = 0.447213595499958*m1[3]; 
  BigAEM(31,3) = 0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(31,4) = 0.4472135954999579*m1[7]; 
  BigAEM(31,5) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(31,6) = 0.4*m1[3]; 
  BigAEM(31,7) = 0.31943828249997*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(8,8) = 0.5*m0s[0]; 
  BigAEM(8,9) = 0.5*m0s[1]; 
  BigAEM(8,10) = 0.5*m0s[2]; 
  BigAEM(8,11) = 0.5*m0s[3]; 
  BigAEM(8,12) = 0.5*m0s[4]; 
  BigAEM(8,13) = 0.5*m0s[5]; 
  BigAEM(8,14) = 0.5*m0s[6]; 
  BigAEM(8,15) = 0.5*m0s[7]; 
  BigAEM(9,8) = 0.5*m0s[1]; 
  BigAEM(9,9) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(9,10) = 0.5*m0s[3]; 
  BigAEM(9,11) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(9,12) = 0.4472135954999579*m0s[1]; 
  BigAEM(9,13) = 0.5000000000000001*m0s[7]; 
  BigAEM(9,14) = 0.447213595499958*m0s[3]; 
  BigAEM(9,15) = 0.5000000000000001*m0s[5]; 
  BigAEM(10,8) = 0.5*m0s[2]; 
  BigAEM(10,9) = 0.5*m0s[3]; 
  BigAEM(10,10) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(10,11) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(10,12) = 0.5000000000000001*m0s[6]; 
  BigAEM(10,13) = 0.4472135954999579*m0s[2]; 
  BigAEM(10,14) = 0.5000000000000001*m0s[4]; 
  BigAEM(10,15) = 0.447213595499958*m0s[3]; 
  BigAEM(11,8) = 0.5*m0s[3]; 
  BigAEM(11,9) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(11,10) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(11,11) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(11,12) = 0.4472135954999579*m0s[3]; 
  BigAEM(11,13) = 0.4472135954999579*m0s[3]; 
  BigAEM(11,14) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(11,15) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(12,8) = 0.5*m0s[4]; 
  BigAEM(12,9) = 0.4472135954999579*m0s[1]; 
  BigAEM(12,10) = 0.5000000000000001*m0s[6]; 
  BigAEM(12,11) = 0.4472135954999579*m0s[3]; 
  BigAEM(12,12) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(12,14) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(12,15) = 0.4472135954999579*m0s[7]; 
  BigAEM(13,8) = 0.5*m0s[5]; 
  BigAEM(13,9) = 0.5000000000000001*m0s[7]; 
  BigAEM(13,10) = 0.4472135954999579*m0s[2]; 
  BigAEM(13,11) = 0.4472135954999579*m0s[3]; 
  BigAEM(13,13) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(13,14) = 0.4472135954999579*m0s[6]; 
  BigAEM(13,15) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(14,8) = 0.5*m0s[6]; 
  BigAEM(14,9) = 0.447213595499958*m0s[3]; 
  BigAEM(14,10) = 0.5000000000000001*m0s[4]; 
  BigAEM(14,11) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(14,12) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(14,13) = 0.4472135954999579*m0s[6]; 
  BigAEM(14,14) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(14,15) = 0.4*m0s[3]; 
  BigAEM(15,8) = 0.5*m0s[7]; 
  BigAEM(15,9) = 0.5000000000000001*m0s[5]; 
  BigAEM(15,10) = 0.447213595499958*m0s[3]; 
  BigAEM(15,11) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(15,12) = 0.4472135954999579*m0s[7]; 
  BigAEM(15,13) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(15,14) = 0.4*m0s[3]; 
  BigAEM(15,15) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(8,24) = -0.5*cM[8]; 
  BigAEM(8,25) = -0.5*cM[9]; 
  BigAEM(8,26) = -0.5*cM[10]; 
  BigAEM(8,27) = -0.5*cM[11]; 
  BigAEM(8,28) = -0.5*cM[12]; 
  BigAEM(8,29) = -0.5*cM[13]; 
  BigAEM(8,30) = -0.5*cM[14]; 
  BigAEM(8,31) = -0.5*cM[15]; 
  BigAEM(9,24) = -0.5*cM[9]; 
  BigAEM(9,25) = (-0.4472135954999579*cM[12])-0.5*cM[8]; 
  BigAEM(9,26) = -0.5*cM[11]; 
  BigAEM(9,27) = (-0.447213595499958*cM[14])-0.5*cM[10]; 
  BigAEM(9,28) = -0.4472135954999579*cM[9]; 
  BigAEM(9,29) = -0.5000000000000001*cM[15]; 
  BigAEM(9,30) = -0.447213595499958*cM[11]; 
  BigAEM(9,31) = -0.5000000000000001*cM[13]; 
  BigAEM(10,24) = -0.5*cM[10]; 
  BigAEM(10,25) = -0.5*cM[11]; 
  BigAEM(10,26) = (-0.4472135954999579*cM[13])-0.5*cM[8]; 
  BigAEM(10,27) = (-0.447213595499958*cM[15])-0.5*cM[9]; 
  BigAEM(10,28) = -0.5000000000000001*cM[14]; 
  BigAEM(10,29) = -0.4472135954999579*cM[10]; 
  BigAEM(10,30) = -0.5000000000000001*cM[12]; 
  BigAEM(10,31) = -0.447213595499958*cM[11]; 
  BigAEM(11,24) = -0.5*cM[11]; 
  BigAEM(11,25) = (-0.447213595499958*cM[14])-0.5*cM[10]; 
  BigAEM(11,26) = (-0.447213595499958*cM[15])-0.5*cM[9]; 
  BigAEM(11,27) = (-0.4472135954999579*cM[13])-0.4472135954999579*cM[12]-0.5*cM[8]; 
  BigAEM(11,28) = -0.4472135954999579*cM[11]; 
  BigAEM(11,29) = -0.4472135954999579*cM[11]; 
  BigAEM(11,30) = (-0.4*cM[15])-0.447213595499958*cM[9]; 
  BigAEM(11,31) = (-0.4*cM[14])-0.447213595499958*cM[10]; 
  BigAEM(12,24) = -0.5*cM[12]; 
  BigAEM(12,25) = -0.4472135954999579*cM[9]; 
  BigAEM(12,26) = -0.5000000000000001*cM[14]; 
  BigAEM(12,27) = -0.4472135954999579*cM[11]; 
  BigAEM(12,28) = (-0.31943828249997*cM[12])-0.5*cM[8]; 
  BigAEM(12,30) = (-0.31943828249997*cM[14])-0.5000000000000001*cM[10]; 
  BigAEM(12,31) = -0.4472135954999579*cM[15]; 
  BigAEM(13,24) = -0.5*cM[13]; 
  BigAEM(13,25) = -0.5000000000000001*cM[15]; 
  BigAEM(13,26) = -0.4472135954999579*cM[10]; 
  BigAEM(13,27) = -0.4472135954999579*cM[11]; 
  BigAEM(13,29) = (-0.31943828249997*cM[13])-0.5*cM[8]; 
  BigAEM(13,30) = -0.4472135954999579*cM[14]; 
  BigAEM(13,31) = (-0.31943828249997*cM[15])-0.5000000000000001*cM[9]; 
  BigAEM(14,24) = -0.5*cM[14]; 
  BigAEM(14,25) = -0.447213595499958*cM[11]; 
  BigAEM(14,26) = -0.5000000000000001*cM[12]; 
  BigAEM(14,27) = (-0.4*cM[15])-0.447213595499958*cM[9]; 
  BigAEM(14,28) = (-0.31943828249997*cM[14])-0.5000000000000001*cM[10]; 
  BigAEM(14,29) = -0.4472135954999579*cM[14]; 
  BigAEM(14,30) = (-0.4472135954999579*cM[13])-0.31943828249997*cM[12]-0.5*cM[8]; 
  BigAEM(14,31) = -0.4*cM[11]; 
  BigAEM(15,24) = -0.5*cM[15]; 
  BigAEM(15,25) = -0.5000000000000001*cM[13]; 
  BigAEM(15,26) = -0.447213595499958*cM[11]; 
  BigAEM(15,27) = (-0.4*cM[14])-0.447213595499958*cM[10]; 
  BigAEM(15,28) = -0.4472135954999579*cM[15]; 
  BigAEM(15,29) = (-0.31943828249997*cM[15])-0.5000000000000001*cM[9]; 
  BigAEM(15,30) = -0.4*cM[11]; 
  BigAEM(15,31) = (-0.31943828249997*cM[13])-0.4472135954999579*cM[12]-0.5*cM[8]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(24,8) = 0.5*m1[8]; 
  BigAEM(24,9) = 0.5*m1[9]; 
  BigAEM(24,10) = 0.5*m1[10]; 
  BigAEM(24,11) = 0.5*m1[11]; 
  BigAEM(24,12) = 0.5*m1[12]; 
  BigAEM(24,13) = 0.5*m1[13]; 
  BigAEM(24,14) = 0.5*m1[14]; 
  BigAEM(24,15) = 0.5*m1[15]; 
  BigAEM(25,8) = 0.5*m1[9]; 
  BigAEM(25,9) = 0.4472135954999579*m1[12]+0.5*m1[8]; 
  BigAEM(25,10) = 0.5*m1[11]; 
  BigAEM(25,11) = 0.447213595499958*m1[14]+0.5*m1[10]; 
  BigAEM(25,12) = 0.4472135954999579*m1[9]; 
  BigAEM(25,13) = 0.5000000000000001*m1[15]; 
  BigAEM(25,14) = 0.447213595499958*m1[11]; 
  BigAEM(25,15) = 0.5000000000000001*m1[13]; 
  BigAEM(26,8) = 0.5*m1[10]; 
  BigAEM(26,9) = 0.5*m1[11]; 
  BigAEM(26,10) = 0.4472135954999579*m1[13]+0.5*m1[8]; 
  BigAEM(26,11) = 0.447213595499958*m1[15]+0.5*m1[9]; 
  BigAEM(26,12) = 0.5000000000000001*m1[14]; 
  BigAEM(26,13) = 0.4472135954999579*m1[10]; 
  BigAEM(26,14) = 0.5000000000000001*m1[12]; 
  BigAEM(26,15) = 0.447213595499958*m1[11]; 
  BigAEM(27,8) = 0.5*m1[11]; 
  BigAEM(27,9) = 0.447213595499958*m1[14]+0.5*m1[10]; 
  BigAEM(27,10) = 0.447213595499958*m1[15]+0.5*m1[9]; 
  BigAEM(27,11) = 0.4472135954999579*m1[13]+0.4472135954999579*m1[12]+0.5*m1[8]; 
  BigAEM(27,12) = 0.4472135954999579*m1[11]; 
  BigAEM(27,13) = 0.4472135954999579*m1[11]; 
  BigAEM(27,14) = 0.4*m1[15]+0.447213595499958*m1[9]; 
  BigAEM(27,15) = 0.4*m1[14]+0.447213595499958*m1[10]; 
  BigAEM(28,8) = 0.5*m1[12]; 
  BigAEM(28,9) = 0.4472135954999579*m1[9]; 
  BigAEM(28,10) = 0.5000000000000001*m1[14]; 
  BigAEM(28,11) = 0.4472135954999579*m1[11]; 
  BigAEM(28,12) = 0.31943828249997*m1[12]+0.5*m1[8]; 
  BigAEM(28,14) = 0.31943828249997*m1[14]+0.5000000000000001*m1[10]; 
  BigAEM(28,15) = 0.4472135954999579*m1[15]; 
  BigAEM(29,8) = 0.5*m1[13]; 
  BigAEM(29,9) = 0.5000000000000001*m1[15]; 
  BigAEM(29,10) = 0.4472135954999579*m1[10]; 
  BigAEM(29,11) = 0.4472135954999579*m1[11]; 
  BigAEM(29,13) = 0.31943828249997*m1[13]+0.5*m1[8]; 
  BigAEM(29,14) = 0.4472135954999579*m1[14]; 
  BigAEM(29,15) = 0.31943828249997*m1[15]+0.5000000000000001*m1[9]; 
  BigAEM(30,8) = 0.5*m1[14]; 
  BigAEM(30,9) = 0.447213595499958*m1[11]; 
  BigAEM(30,10) = 0.5000000000000001*m1[12]; 
  BigAEM(30,11) = 0.4*m1[15]+0.447213595499958*m1[9]; 
  BigAEM(30,12) = 0.31943828249997*m1[14]+0.5000000000000001*m1[10]; 
  BigAEM(30,13) = 0.4472135954999579*m1[14]; 
  BigAEM(30,14) = 0.4472135954999579*m1[13]+0.31943828249997*m1[12]+0.5*m1[8]; 
  BigAEM(30,15) = 0.4*m1[11]; 
  BigAEM(31,8) = 0.5*m1[15]; 
  BigAEM(31,9) = 0.5000000000000001*m1[13]; 
  BigAEM(31,10) = 0.447213595499958*m1[11]; 
  BigAEM(31,11) = 0.4*m1[14]+0.447213595499958*m1[10]; 
  BigAEM(31,12) = 0.4472135954999579*m1[15]; 
  BigAEM(31,13) = 0.31943828249997*m1[15]+0.5000000000000001*m1[9]; 
  BigAEM(31,14) = 0.4*m1[11]; 
  BigAEM(31,15) = 0.31943828249997*m1[13]+0.4472135954999579*m1[12]+0.5*m1[8]; 
 
  // ....... Block from weak multiply of uZ and m0  .......... // 
  BigAEM(16,16) = 0.5*m0s[0]; 
  BigAEM(16,17) = 0.5*m0s[1]; 
  BigAEM(16,18) = 0.5*m0s[2]; 
  BigAEM(16,19) = 0.5*m0s[3]; 
  BigAEM(16,20) = 0.5*m0s[4]; 
  BigAEM(16,21) = 0.5*m0s[5]; 
  BigAEM(16,22) = 0.5*m0s[6]; 
  BigAEM(16,23) = 0.5*m0s[7]; 
  BigAEM(17,16) = 0.5*m0s[1]; 
  BigAEM(17,17) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(17,18) = 0.5*m0s[3]; 
  BigAEM(17,19) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(17,20) = 0.4472135954999579*m0s[1]; 
  BigAEM(17,21) = 0.5000000000000001*m0s[7]; 
  BigAEM(17,22) = 0.447213595499958*m0s[3]; 
  BigAEM(17,23) = 0.5000000000000001*m0s[5]; 
  BigAEM(18,16) = 0.5*m0s[2]; 
  BigAEM(18,17) = 0.5*m0s[3]; 
  BigAEM(18,18) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(18,19) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(18,20) = 0.5000000000000001*m0s[6]; 
  BigAEM(18,21) = 0.4472135954999579*m0s[2]; 
  BigAEM(18,22) = 0.5000000000000001*m0s[4]; 
  BigAEM(18,23) = 0.447213595499958*m0s[3]; 
  BigAEM(19,16) = 0.5*m0s[3]; 
  BigAEM(19,17) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(19,18) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(19,19) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(19,20) = 0.4472135954999579*m0s[3]; 
  BigAEM(19,21) = 0.4472135954999579*m0s[3]; 
  BigAEM(19,22) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(19,23) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(20,16) = 0.5*m0s[4]; 
  BigAEM(20,17) = 0.4472135954999579*m0s[1]; 
  BigAEM(20,18) = 0.5000000000000001*m0s[6]; 
  BigAEM(20,19) = 0.4472135954999579*m0s[3]; 
  BigAEM(20,20) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(20,22) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(20,23) = 0.4472135954999579*m0s[7]; 
  BigAEM(21,16) = 0.5*m0s[5]; 
  BigAEM(21,17) = 0.5000000000000001*m0s[7]; 
  BigAEM(21,18) = 0.4472135954999579*m0s[2]; 
  BigAEM(21,19) = 0.4472135954999579*m0s[3]; 
  BigAEM(21,21) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(21,22) = 0.4472135954999579*m0s[6]; 
  BigAEM(21,23) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(22,16) = 0.5*m0s[6]; 
  BigAEM(22,17) = 0.447213595499958*m0s[3]; 
  BigAEM(22,18) = 0.5000000000000001*m0s[4]; 
  BigAEM(22,19) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(22,20) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(22,21) = 0.4472135954999579*m0s[6]; 
  BigAEM(22,22) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(22,23) = 0.4*m0s[3]; 
  BigAEM(23,16) = 0.5*m0s[7]; 
  BigAEM(23,17) = 0.5000000000000001*m0s[5]; 
  BigAEM(23,18) = 0.447213595499958*m0s[3]; 
  BigAEM(23,19) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(23,20) = 0.4472135954999579*m0s[7]; 
  BigAEM(23,21) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(23,22) = 0.4*m0s[3]; 
  BigAEM(23,23) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uZ .......... // 
  BigAEM(16,24) = -0.5*cM[16]; 
  BigAEM(16,25) = -0.5*cM[17]; 
  BigAEM(16,26) = -0.5*cM[18]; 
  BigAEM(16,27) = -0.5*cM[19]; 
  BigAEM(16,28) = -0.5*cM[20]; 
  BigAEM(16,29) = -0.5*cM[21]; 
  BigAEM(16,30) = -0.5*cM[22]; 
  BigAEM(16,31) = -0.5*cM[23]; 
  BigAEM(17,24) = -0.5*cM[17]; 
  BigAEM(17,25) = (-0.4472135954999579*cM[20])-0.5*cM[16]; 
  BigAEM(17,26) = -0.5*cM[19]; 
  BigAEM(17,27) = (-0.447213595499958*cM[22])-0.5*cM[18]; 
  BigAEM(17,28) = -0.4472135954999579*cM[17]; 
  BigAEM(17,29) = -0.5000000000000001*cM[23]; 
  BigAEM(17,30) = -0.447213595499958*cM[19]; 
  BigAEM(17,31) = -0.5000000000000001*cM[21]; 
  BigAEM(18,24) = -0.5*cM[18]; 
  BigAEM(18,25) = -0.5*cM[19]; 
  BigAEM(18,26) = (-0.4472135954999579*cM[21])-0.5*cM[16]; 
  BigAEM(18,27) = (-0.447213595499958*cM[23])-0.5*cM[17]; 
  BigAEM(18,28) = -0.5000000000000001*cM[22]; 
  BigAEM(18,29) = -0.4472135954999579*cM[18]; 
  BigAEM(18,30) = -0.5000000000000001*cM[20]; 
  BigAEM(18,31) = -0.447213595499958*cM[19]; 
  BigAEM(19,24) = -0.5*cM[19]; 
  BigAEM(19,25) = (-0.447213595499958*cM[22])-0.5*cM[18]; 
  BigAEM(19,26) = (-0.447213595499958*cM[23])-0.5*cM[17]; 
  BigAEM(19,27) = (-0.4472135954999579*cM[21])-0.4472135954999579*cM[20]-0.5*cM[16]; 
  BigAEM(19,28) = -0.4472135954999579*cM[19]; 
  BigAEM(19,29) = -0.4472135954999579*cM[19]; 
  BigAEM(19,30) = (-0.4*cM[23])-0.447213595499958*cM[17]; 
  BigAEM(19,31) = (-0.4*cM[22])-0.447213595499958*cM[18]; 
  BigAEM(20,24) = -0.5*cM[20]; 
  BigAEM(20,25) = -0.4472135954999579*cM[17]; 
  BigAEM(20,26) = -0.5000000000000001*cM[22]; 
  BigAEM(20,27) = -0.4472135954999579*cM[19]; 
  BigAEM(20,28) = (-0.31943828249997*cM[20])-0.5*cM[16]; 
  BigAEM(20,30) = (-0.31943828249997*cM[22])-0.5000000000000001*cM[18]; 
  BigAEM(20,31) = -0.4472135954999579*cM[23]; 
  BigAEM(21,24) = -0.5*cM[21]; 
  BigAEM(21,25) = -0.5000000000000001*cM[23]; 
  BigAEM(21,26) = -0.4472135954999579*cM[18]; 
  BigAEM(21,27) = -0.4472135954999579*cM[19]; 
  BigAEM(21,29) = (-0.31943828249997*cM[21])-0.5*cM[16]; 
  BigAEM(21,30) = -0.4472135954999579*cM[22]; 
  BigAEM(21,31) = (-0.31943828249997*cM[23])-0.5000000000000001*cM[17]; 
  BigAEM(22,24) = -0.5*cM[22]; 
  BigAEM(22,25) = -0.447213595499958*cM[19]; 
  BigAEM(22,26) = -0.5000000000000001*cM[20]; 
  BigAEM(22,27) = (-0.4*cM[23])-0.447213595499958*cM[17]; 
  BigAEM(22,28) = (-0.31943828249997*cM[22])-0.5000000000000001*cM[18]; 
  BigAEM(22,29) = -0.4472135954999579*cM[22]; 
  BigAEM(22,30) = (-0.4472135954999579*cM[21])-0.31943828249997*cM[20]-0.5*cM[16]; 
  BigAEM(22,31) = -0.4*cM[19]; 
  BigAEM(23,24) = -0.5*cM[23]; 
  BigAEM(23,25) = -0.5000000000000001*cM[21]; 
  BigAEM(23,26) = -0.447213595499958*cM[19]; 
  BigAEM(23,27) = (-0.4*cM[22])-0.447213595499958*cM[18]; 
  BigAEM(23,28) = -0.4472135954999579*cM[23]; 
  BigAEM(23,29) = (-0.31943828249997*cM[23])-0.5000000000000001*cM[17]; 
  BigAEM(23,30) = -0.4*cM[19]; 
  BigAEM(23,31) = (-0.31943828249997*cM[21])-0.4472135954999579*cM[20]-0.5*cM[16]; 
 
  // ....... Block from weak multiply of uZ and m1Z  .......... // 
  BigAEM(24,16) = 0.5*m1[16]; 
  BigAEM(24,17) = 0.5*m1[17]; 
  BigAEM(24,18) = 0.5*m1[18]; 
  BigAEM(24,19) = 0.5*m1[19]; 
  BigAEM(24,20) = 0.5*m1[20]; 
  BigAEM(24,21) = 0.5*m1[21]; 
  BigAEM(24,22) = 0.5*m1[22]; 
  BigAEM(24,23) = 0.5*m1[23]; 
  BigAEM(25,16) = 0.5*m1[17]; 
  BigAEM(25,17) = 0.4472135954999579*m1[20]+0.5*m1[16]; 
  BigAEM(25,18) = 0.5*m1[19]; 
  BigAEM(25,19) = 0.447213595499958*m1[22]+0.5*m1[18]; 
  BigAEM(25,20) = 0.4472135954999579*m1[17]; 
  BigAEM(25,21) = 0.5000000000000001*m1[23]; 
  BigAEM(25,22) = 0.447213595499958*m1[19]; 
  BigAEM(25,23) = 0.5000000000000001*m1[21]; 
  BigAEM(26,16) = 0.5*m1[18]; 
  BigAEM(26,17) = 0.5*m1[19]; 
  BigAEM(26,18) = 0.4472135954999579*m1[21]+0.5*m1[16]; 
  BigAEM(26,19) = 0.447213595499958*m1[23]+0.5*m1[17]; 
  BigAEM(26,20) = 0.5000000000000001*m1[22]; 
  BigAEM(26,21) = 0.4472135954999579*m1[18]; 
  BigAEM(26,22) = 0.5000000000000001*m1[20]; 
  BigAEM(26,23) = 0.447213595499958*m1[19]; 
  BigAEM(27,16) = 0.5*m1[19]; 
  BigAEM(27,17) = 0.447213595499958*m1[22]+0.5*m1[18]; 
  BigAEM(27,18) = 0.447213595499958*m1[23]+0.5*m1[17]; 
  BigAEM(27,19) = 0.4472135954999579*m1[21]+0.4472135954999579*m1[20]+0.5*m1[16]; 
  BigAEM(27,20) = 0.4472135954999579*m1[19]; 
  BigAEM(27,21) = 0.4472135954999579*m1[19]; 
  BigAEM(27,22) = 0.4*m1[23]+0.447213595499958*m1[17]; 
  BigAEM(27,23) = 0.4*m1[22]+0.447213595499958*m1[18]; 
  BigAEM(28,16) = 0.5*m1[20]; 
  BigAEM(28,17) = 0.4472135954999579*m1[17]; 
  BigAEM(28,18) = 0.5000000000000001*m1[22]; 
  BigAEM(28,19) = 0.4472135954999579*m1[19]; 
  BigAEM(28,20) = 0.31943828249997*m1[20]+0.5*m1[16]; 
  BigAEM(28,22) = 0.31943828249997*m1[22]+0.5000000000000001*m1[18]; 
  BigAEM(28,23) = 0.4472135954999579*m1[23]; 
  BigAEM(29,16) = 0.5*m1[21]; 
  BigAEM(29,17) = 0.5000000000000001*m1[23]; 
  BigAEM(29,18) = 0.4472135954999579*m1[18]; 
  BigAEM(29,19) = 0.4472135954999579*m1[19]; 
  BigAEM(29,21) = 0.31943828249997*m1[21]+0.5*m1[16]; 
  BigAEM(29,22) = 0.4472135954999579*m1[22]; 
  BigAEM(29,23) = 0.31943828249997*m1[23]+0.5000000000000001*m1[17]; 
  BigAEM(30,16) = 0.5*m1[22]; 
  BigAEM(30,17) = 0.447213595499958*m1[19]; 
  BigAEM(30,18) = 0.5000000000000001*m1[20]; 
  BigAEM(30,19) = 0.4*m1[23]+0.447213595499958*m1[17]; 
  BigAEM(30,20) = 0.31943828249997*m1[22]+0.5000000000000001*m1[18]; 
  BigAEM(30,21) = 0.4472135954999579*m1[22]; 
  BigAEM(30,22) = 0.4472135954999579*m1[21]+0.31943828249997*m1[20]+0.5*m1[16]; 
  BigAEM(30,23) = 0.4*m1[19]; 
  BigAEM(31,16) = 0.5*m1[23]; 
  BigAEM(31,17) = 0.5000000000000001*m1[21]; 
  BigAEM(31,18) = 0.447213595499958*m1[19]; 
  BigAEM(31,19) = 0.4*m1[22]+0.447213595499958*m1[18]; 
  BigAEM(31,20) = 0.4472135954999579*m1[23]; 
  BigAEM(31,21) = 0.31943828249997*m1[23]+0.5000000000000001*m1[17]; 
  BigAEM(31,22) = 0.4*m1[19]; 
  BigAEM(31,23) = 0.31943828249997*m1[21]+0.4472135954999579*m1[20]+0.5*m1[16]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(24,24) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(24,25) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(24,26) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(24,27) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(24,28) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(24,29) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(24,30) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(24,31) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(25,24) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(25,25) = 0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(25,26) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(25,27) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(25,28) = 0.4472135954999579*m0s[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(25,29) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(25,30) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(25,31) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(26,24) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(26,25) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(26,26) = 0.4472135954999579*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.5*cE[0]; 
  BigAEM(26,27) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(26,28) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(26,29) = 0.4472135954999579*m0s[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(26,30) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(26,31) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(27,24) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(27,25) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(27,26) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(27,27) = 0.4472135954999579*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(27,28) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(27,29) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(27,30) = 0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(27,31) = 0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(28,24) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(28,25) = 0.4472135954999579*m0s[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(28,26) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(28,27) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(28,28) = 0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(28,30) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(28,31) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(29,24) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(29,25) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(29,26) = 0.4472135954999579*m0s[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(29,27) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(29,29) = 0.31943828249997*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.5*cE[0]; 
  BigAEM(29,30) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(29,31) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(30,24) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(30,25) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(30,26) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(30,27) = 0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(30,28) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(30,29) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(30,30) = 0.4472135954999579*m0s[5]*pVdim+0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(30,31) = 0.4*m0s[3]*pVdim-0.4*cE[3]; 
  BigAEM(31,24) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(31,25) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(31,26) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(31,27) = 0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(31,28) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(31,29) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(31,30) = 0.4*m0s[3]*pVdim-0.4*cE[3]; 
  BigAEM(31,31) = 0.31943828249997*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<8,16>(0,8).setZero(); 
  BigAEM.block<16,8>(8,0).setZero(); 
  BigAEM.block<8,8>(8,16).setZero(); 
  BigAEM.block<8,8>(16,8).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m1[12],m1[13],m1[14],m1[15],m1[16],m1[17],m1[18],m1[19],m1[20],m1[21],m1[22],m1[23],m2[0],m2[1],m2[2],m2[3],m2[4],m2[5],m2[6],m2[7]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,24,1) = xEV.segment<24>(0); 
 
  Eigen::Map<VectorXd>(vtSq,8,1) = xEV.segment<8>(24); 
 
} 
 
void BoundaryIntegral2x3vSer_F_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += (2.449489742783178*fvmin[3]*dS+2.449489742783178*fvmax[3]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[1] += (2.449489742783178*fvmin[7]*dS+2.449489742783178*fvmax[7]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[2] += (2.449489742783178*fvmin[8]*dS+2.449489742783178*fvmax[8]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[3] += (2.449489742783178*fvmin[16]*dS+2.449489742783178*fvmax[16]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_F_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += ((-3.16227766016838*fvmin[18]*dS)+3.16227766016838*fvmax[18]*dS+2.449489742783178*fvmin[3]*dS+2.449489742783178*fvmax[3]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[1] += ((-3.16227766016838*fvmin[35]*dS)+3.16227766016838*fvmax[35]*dS+2.449489742783178*fvmin[7]*dS+2.449489742783178*fvmax[7]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[2] += ((-3.16227766016838*fvmin[36]*dS)+3.16227766016838*fvmax[36]*dS+2.449489742783178*fvmin[8]*dS+2.449489742783178*fvmax[8]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[3] += ((-3.16227766016838*fvmin[58]*dS)+3.16227766016838*fvmax[58]*dS+2.449489742783178*fvmin[21]*dS+2.449489742783178*fvmax[21]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[4] += (2.449489742783178*fvmin[33]*dS+2.449489742783178*fvmax[33]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[5] += (2.449489742783178*fvmin[34]*dS+2.449489742783178*fvmax[34]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[6] += (2.449489742783178*fvmin[56]*dS+2.449489742783178*fvmax[56]*dS-1.414213562373095*fvmin[31]*dS+1.414213562373095*fvmax[31]*dS)*intFac; 
  out[7] += (2.449489742783178*fvmin[57]*dS+2.449489742783178*fvmax[57]*dS-1.414213562373095*fvmin[32]*dS+1.414213562373095*fvmax[32]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[3]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[3]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[7]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[7]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[8]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[8]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[16]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[16]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[18]*dS*vmin)+2.449489742783178*fvmin[3]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[18]*dS*vmax+2.449489742783178*fvmax[3]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[35]*dS*vmin)+2.449489742783178*fvmin[7]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[35]*dS*vmax+2.449489742783178*fvmax[7]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[36]*dS*vmin)+2.449489742783178*fvmin[8]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[36]*dS*vmax+2.449489742783178*fvmax[8]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*((-3.16227766016838*fvmin[58]*dS*vmin)+2.449489742783178*fvmin[21]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+3.16227766016838*fvmax[58]*dS*vmax+2.449489742783178*fvmax[21]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[33]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[33]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[34]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[34]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(2.449489742783178*fvmin[56]*dS*vmin-1.414213562373095*fvmin[31]*dS*vmin+2.449489742783178*fvmax[56]*dS*vmax+1.414213562373095*fvmax[31]*dS*vmax); 
  out[7] += intFac*(2.449489742783178*fvmin[57]*dS*vmin-1.414213562373095*fvmin[32]*dS*vmin+2.449489742783178*fvmax[57]*dS*vmax+1.414213562373095*fvmax[32]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x3vSer_F_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[4] += (2.449489742783178*fvmin[4]*dS+2.449489742783178*fvmax[4]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[5] += (2.449489742783178*fvmin[9]*dS+2.449489742783178*fvmax[9]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[6] += (2.449489742783178*fvmin[10]*dS+2.449489742783178*fvmax[10]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[7] += (2.449489742783178*fvmin[17]*dS+2.449489742783178*fvmax[17]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_F_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[8] += ((-3.16227766016838*fvmin[19]*dS)+3.16227766016838*fvmax[19]*dS+2.449489742783178*fvmin[4]*dS+2.449489742783178*fvmax[4]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[9] += ((-3.16227766016838*fvmin[40]*dS)+3.16227766016838*fvmax[40]*dS+2.449489742783178*fvmin[9]*dS+2.449489742783178*fvmax[9]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[10] += ((-3.16227766016838*fvmin[41]*dS)+3.16227766016838*fvmax[41]*dS+2.449489742783178*fvmin[10]*dS+2.449489742783178*fvmax[10]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[11] += ((-3.16227766016838*fvmin[65]*dS)+3.16227766016838*fvmax[65]*dS+2.449489742783178*fvmin[22]*dS+2.449489742783178*fvmax[22]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[12] += (2.449489742783178*fvmin[37]*dS+2.449489742783178*fvmax[37]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[13] += (2.449489742783178*fvmin[38]*dS+2.449489742783178*fvmax[38]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[14] += (2.449489742783178*fvmin[59]*dS+2.449489742783178*fvmax[59]*dS-1.414213562373095*fvmin[31]*dS+1.414213562373095*fvmax[31]*dS)*intFac; 
  out[15] += (2.449489742783178*fvmin[60]*dS+2.449489742783178*fvmax[60]*dS-1.414213562373095*fvmin[32]*dS+1.414213562373095*fvmax[32]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[4]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[4]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[9]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[9]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[10]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[10]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[17]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[17]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[19]*dS*vmin)+2.449489742783178*fvmin[4]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[19]*dS*vmax+2.449489742783178*fvmax[4]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[40]*dS*vmin)+2.449489742783178*fvmin[9]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[40]*dS*vmax+2.449489742783178*fvmax[9]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[41]*dS*vmin)+2.449489742783178*fvmin[10]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[41]*dS*vmax+2.449489742783178*fvmax[10]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*((-3.16227766016838*fvmin[65]*dS*vmin)+2.449489742783178*fvmin[22]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+3.16227766016838*fvmax[65]*dS*vmax+2.449489742783178*fvmax[22]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[37]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[37]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[38]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[38]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(2.449489742783178*fvmin[59]*dS*vmin-1.414213562373095*fvmin[31]*dS*vmin+2.449489742783178*fvmax[59]*dS*vmax+1.414213562373095*fvmax[31]*dS*vmax); 
  out[7] += intFac*(2.449489742783178*fvmin[60]*dS*vmin-1.414213562373095*fvmin[32]*dS*vmin+2.449489742783178*fvmax[60]*dS*vmax+1.414213562373095*fvmax[32]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x3vSer_F_VZ_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[8] += (2.449489742783178*fvmin[5]*dS+2.449489742783178*fvmax[5]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[9] += (2.449489742783178*fvmin[12]*dS+2.449489742783178*fvmax[12]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[10] += (2.449489742783178*fvmin[13]*dS+2.449489742783178*fvmax[13]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[11] += (2.449489742783178*fvmin[20]*dS+2.449489742783178*fvmax[20]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_F_VZ_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[16] += ((-3.16227766016838*fvmin[20]*dS)+3.16227766016838*fvmax[20]*dS+2.449489742783178*fvmin[5]*dS+2.449489742783178*fvmax[5]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[17] += ((-3.16227766016838*fvmin[47]*dS)+3.16227766016838*fvmax[47]*dS+2.449489742783178*fvmin[12]*dS+2.449489742783178*fvmax[12]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[18] += ((-3.16227766016838*fvmin[48]*dS)+3.16227766016838*fvmax[48]*dS+2.449489742783178*fvmin[13]*dS+2.449489742783178*fvmax[13]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[19] += ((-3.16227766016838*fvmin[80]*dS)+3.16227766016838*fvmax[80]*dS+2.449489742783178*fvmin[25]*dS+2.449489742783178*fvmax[25]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[20] += (2.449489742783178*fvmin[43]*dS+2.449489742783178*fvmax[43]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[21] += (2.449489742783178*fvmin[44]*dS+2.449489742783178*fvmax[44]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[22] += (2.449489742783178*fvmin[68]*dS+2.449489742783178*fvmax[68]*dS-1.414213562373095*fvmin[31]*dS+1.414213562373095*fvmax[31]*dS)*intFac; 
  out[23] += (2.449489742783178*fvmin[69]*dS+2.449489742783178*fvmax[69]*dS-1.414213562373095*fvmin[32]*dS+1.414213562373095*fvmax[32]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VZ_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[32], fvmin[32]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[5]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[5]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[12]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[12]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[13]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[13]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[20]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[20]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x3vSer_vF_VZ_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[112], fvmin[112]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[20]*dS*vmin)+2.449489742783178*fvmin[5]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[20]*dS*vmax+2.449489742783178*fvmax[5]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[47]*dS*vmin)+2.449489742783178*fvmin[12]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[47]*dS*vmax+2.449489742783178*fvmax[12]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[48]*dS*vmin)+2.449489742783178*fvmin[13]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[48]*dS*vmax+2.449489742783178*fvmax[13]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*((-3.16227766016838*fvmin[80]*dS*vmin)+2.449489742783178*fvmin[25]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+3.16227766016838*fvmax[80]*dS*vmax+2.449489742783178*fvmax[25]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[43]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[43]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[44]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[44]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(2.449489742783178*fvmin[68]*dS*vmin-1.414213562373095*fvmin[31]*dS*vmin+2.449489742783178*fvmax[68]*dS*vmax+1.414213562373095*fvmax[31]*dS*vmax); 
  out[7] += intFac*(2.449489742783178*fvmin[69]*dS*vmin-1.414213562373095*fvmin[32]*dS*vmin+2.449489742783178*fvmax[69]*dS*vmax+1.414213562373095*fvmax[32]*dS*vmax); 
 
} 
 
