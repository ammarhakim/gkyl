#include <math.h> 
#include <PrimMomentsModDecl.h> 
 
using namespace Eigen; 
 
void SelfPrimMoments2x3vMax_P1(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(12,12); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(12);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(12);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0[0]; 
  BigAEM(0,1) = 0.5*m0[1]; 
  BigAEM(0,2) = 0.5*m0[2]; 
  BigAEM(1,0) = 0.5*m0[1]; 
  BigAEM(1,1) = 0.5*m0[0]; 
  BigAEM(2,0) = 0.5*m0[2]; 
  BigAEM(2,2) = 0.5*m0[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,9) = -0.5*cM[0]; 
  BigAEM(0,10) = -0.5*cM[1]; 
  BigAEM(0,11) = -0.5*cM[2]; 
  BigAEM(1,9) = -0.5*cM[1]; 
  BigAEM(1,10) = -0.5*cM[0]; 
  BigAEM(2,9) = -0.5*cM[2]; 
  BigAEM(2,11) = -0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(9,0) = 0.5*m1[0]; 
  BigAEM(9,1) = 0.5*m1[1]; 
  BigAEM(9,2) = 0.5*m1[2]; 
  BigAEM(10,0) = 0.5*m1[1]; 
  BigAEM(10,1) = 0.5*m1[0]; 
  BigAEM(11,0) = 0.5*m1[2]; 
  BigAEM(11,2) = 0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(3,3) = 0.5*m0[0]; 
  BigAEM(3,4) = 0.5*m0[1]; 
  BigAEM(3,5) = 0.5*m0[2]; 
  BigAEM(4,3) = 0.5*m0[1]; 
  BigAEM(4,4) = 0.5*m0[0]; 
  BigAEM(5,3) = 0.5*m0[2]; 
  BigAEM(5,5) = 0.5*m0[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(3,9) = -0.5*cM[3]; 
  BigAEM(3,10) = -0.5*cM[4]; 
  BigAEM(3,11) = -0.5*cM[5]; 
  BigAEM(4,9) = -0.5*cM[4]; 
  BigAEM(4,10) = -0.5*cM[3]; 
  BigAEM(5,9) = -0.5*cM[5]; 
  BigAEM(5,11) = -0.5*cM[3]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(9,3) = 0.5*m1[3]; 
  BigAEM(9,4) = 0.5*m1[4]; 
  BigAEM(9,5) = 0.5*m1[5]; 
  BigAEM(10,3) = 0.5*m1[4]; 
  BigAEM(10,4) = 0.5*m1[3]; 
  BigAEM(11,3) = 0.5*m1[5]; 
  BigAEM(11,5) = 0.5*m1[3]; 
 
  // ....... Block from weak multiply of uZ and m0  .......... // 
  BigAEM(6,6) = 0.5*m0[0]; 
  BigAEM(6,7) = 0.5*m0[1]; 
  BigAEM(6,8) = 0.5*m0[2]; 
  BigAEM(7,6) = 0.5*m0[1]; 
  BigAEM(7,7) = 0.5*m0[0]; 
  BigAEM(8,6) = 0.5*m0[2]; 
  BigAEM(8,8) = 0.5*m0[0]; 
 
  // ....... Block from correction to uZ .......... // 
  BigAEM(6,9) = -0.5*cM[6]; 
  BigAEM(6,10) = -0.5*cM[7]; 
  BigAEM(6,11) = -0.5*cM[8]; 
  BigAEM(7,9) = -0.5*cM[7]; 
  BigAEM(7,10) = -0.5*cM[6]; 
  BigAEM(8,9) = -0.5*cM[8]; 
  BigAEM(8,11) = -0.5*cM[6]; 
 
  // ....... Block from weak multiply of uZ and m1Z  .......... // 
  BigAEM(9,6) = 0.5*m1[6]; 
  BigAEM(9,7) = 0.5*m1[7]; 
  BigAEM(9,8) = 0.5*m1[8]; 
  BigAEM(10,6) = 0.5*m1[7]; 
  BigAEM(10,7) = 0.5*m1[6]; 
  BigAEM(11,6) = 0.5*m1[8]; 
  BigAEM(11,8) = 0.5*m1[6]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(9,9) = 0.5*m0[0]*pVdim-0.5*cE[0]; 
  BigAEM(9,10) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(9,11) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(10,9) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(10,10) = 0.5*m0[0]*pVdim-0.5*cE[0]; 
  BigAEM(11,9) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(11,11) = 0.5*m0[0]*pVdim-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<3,6>(0,3).setZero(); 
  BigAEM.block<6,3>(3,0).setZero(); 
  BigAEM.block<3,3>(3,6).setZero(); 
  BigAEM.block<3,3>(6,3).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m2[0],m2[1],m2[2]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,9,1) = xEV.segment<9>(0); 
 
  Eigen::Map<VectorXd>(vtSq,3,1) = xEV.segment<3>(9); 
 
} 
 
void SelfPrimMoments2x3vMax_P2(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(24,24); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(24);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(24);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0[0]; 
  BigAEM(0,1) = 0.5*m0[1]; 
  BigAEM(0,2) = 0.5*m0[2]; 
  BigAEM(0,3) = 0.5*m0[3]; 
  BigAEM(0,4) = 0.5*m0[4]; 
  BigAEM(0,5) = 0.5*m0[5]; 
  BigAEM(1,0) = 0.5*m0[1]; 
  BigAEM(1,1) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(1,2) = 0.5*m0[3]; 
  BigAEM(1,3) = 0.5*m0[2]; 
  BigAEM(1,4) = 0.4472135954999579*m0[1]; 
  BigAEM(2,0) = 0.5*m0[2]; 
  BigAEM(2,1) = 0.5*m0[3]; 
  BigAEM(2,2) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(2,3) = 0.5*m0[1]; 
  BigAEM(2,5) = 0.4472135954999579*m0[2]; 
  BigAEM(3,0) = 0.5*m0[3]; 
  BigAEM(3,1) = 0.5*m0[2]; 
  BigAEM(3,2) = 0.5*m0[1]; 
  BigAEM(3,3) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(3,4) = 0.4472135954999579*m0[3]; 
  BigAEM(3,5) = 0.4472135954999579*m0[3]; 
  BigAEM(4,0) = 0.5*m0[4]; 
  BigAEM(4,1) = 0.4472135954999579*m0[1]; 
  BigAEM(4,3) = 0.4472135954999579*m0[3]; 
  BigAEM(4,4) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(5,0) = 0.5*m0[5]; 
  BigAEM(5,2) = 0.4472135954999579*m0[2]; 
  BigAEM(5,3) = 0.4472135954999579*m0[3]; 
  BigAEM(5,5) = 0.31943828249997*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,18) = -0.5*cM[0]; 
  BigAEM(0,19) = -0.5*cM[1]; 
  BigAEM(0,20) = -0.5*cM[2]; 
  BigAEM(0,21) = -0.5*cM[3]; 
  BigAEM(0,22) = -0.5*cM[4]; 
  BigAEM(0,23) = -0.5*cM[5]; 
  BigAEM(1,18) = -0.5*cM[1]; 
  BigAEM(1,19) = (-0.4472135954999579*cM[4])-0.5*cM[0]; 
  BigAEM(1,20) = -0.5*cM[3]; 
  BigAEM(1,21) = -0.5*cM[2]; 
  BigAEM(1,22) = -0.4472135954999579*cM[1]; 
  BigAEM(2,18) = -0.5*cM[2]; 
  BigAEM(2,19) = -0.5*cM[3]; 
  BigAEM(2,20) = (-0.4472135954999579*cM[5])-0.5*cM[0]; 
  BigAEM(2,21) = -0.5*cM[1]; 
  BigAEM(2,23) = -0.4472135954999579*cM[2]; 
  BigAEM(3,18) = -0.5*cM[3]; 
  BigAEM(3,19) = -0.5*cM[2]; 
  BigAEM(3,20) = -0.5*cM[1]; 
  BigAEM(3,21) = (-0.4472135954999579*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(3,22) = -0.4472135954999579*cM[3]; 
  BigAEM(3,23) = -0.4472135954999579*cM[3]; 
  BigAEM(4,18) = -0.5*cM[4]; 
  BigAEM(4,19) = -0.4472135954999579*cM[1]; 
  BigAEM(4,21) = -0.4472135954999579*cM[3]; 
  BigAEM(4,22) = (-0.31943828249997*cM[4])-0.5*cM[0]; 
  BigAEM(5,18) = -0.5*cM[5]; 
  BigAEM(5,20) = -0.4472135954999579*cM[2]; 
  BigAEM(5,21) = -0.4472135954999579*cM[3]; 
  BigAEM(5,23) = (-0.31943828249997*cM[5])-0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(18,0) = 0.5*m1[0]; 
  BigAEM(18,1) = 0.5*m1[1]; 
  BigAEM(18,2) = 0.5*m1[2]; 
  BigAEM(18,3) = 0.5*m1[3]; 
  BigAEM(18,4) = 0.5*m1[4]; 
  BigAEM(18,5) = 0.5*m1[5]; 
  BigAEM(19,0) = 0.5*m1[1]; 
  BigAEM(19,1) = 0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(19,2) = 0.5*m1[3]; 
  BigAEM(19,3) = 0.5*m1[2]; 
  BigAEM(19,4) = 0.4472135954999579*m1[1]; 
  BigAEM(20,0) = 0.5*m1[2]; 
  BigAEM(20,1) = 0.5*m1[3]; 
  BigAEM(20,2) = 0.4472135954999579*m1[5]+0.5*m1[0]; 
  BigAEM(20,3) = 0.5*m1[1]; 
  BigAEM(20,5) = 0.4472135954999579*m1[2]; 
  BigAEM(21,0) = 0.5*m1[3]; 
  BigAEM(21,1) = 0.5*m1[2]; 
  BigAEM(21,2) = 0.5*m1[1]; 
  BigAEM(21,3) = 0.4472135954999579*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(21,4) = 0.4472135954999579*m1[3]; 
  BigAEM(21,5) = 0.4472135954999579*m1[3]; 
  BigAEM(22,0) = 0.5*m1[4]; 
  BigAEM(22,1) = 0.4472135954999579*m1[1]; 
  BigAEM(22,3) = 0.4472135954999579*m1[3]; 
  BigAEM(22,4) = 0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(23,0) = 0.5*m1[5]; 
  BigAEM(23,2) = 0.4472135954999579*m1[2]; 
  BigAEM(23,3) = 0.4472135954999579*m1[3]; 
  BigAEM(23,5) = 0.31943828249997*m1[5]+0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(6,6) = 0.5*m0[0]; 
  BigAEM(6,7) = 0.5*m0[1]; 
  BigAEM(6,8) = 0.5*m0[2]; 
  BigAEM(6,9) = 0.5*m0[3]; 
  BigAEM(6,10) = 0.5*m0[4]; 
  BigAEM(6,11) = 0.5*m0[5]; 
  BigAEM(7,6) = 0.5*m0[1]; 
  BigAEM(7,7) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(7,8) = 0.5*m0[3]; 
  BigAEM(7,9) = 0.5*m0[2]; 
  BigAEM(7,10) = 0.4472135954999579*m0[1]; 
  BigAEM(8,6) = 0.5*m0[2]; 
  BigAEM(8,7) = 0.5*m0[3]; 
  BigAEM(8,8) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(8,9) = 0.5*m0[1]; 
  BigAEM(8,11) = 0.4472135954999579*m0[2]; 
  BigAEM(9,6) = 0.5*m0[3]; 
  BigAEM(9,7) = 0.5*m0[2]; 
  BigAEM(9,8) = 0.5*m0[1]; 
  BigAEM(9,9) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(9,10) = 0.4472135954999579*m0[3]; 
  BigAEM(9,11) = 0.4472135954999579*m0[3]; 
  BigAEM(10,6) = 0.5*m0[4]; 
  BigAEM(10,7) = 0.4472135954999579*m0[1]; 
  BigAEM(10,9) = 0.4472135954999579*m0[3]; 
  BigAEM(10,10) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(11,6) = 0.5*m0[5]; 
  BigAEM(11,8) = 0.4472135954999579*m0[2]; 
  BigAEM(11,9) = 0.4472135954999579*m0[3]; 
  BigAEM(11,11) = 0.31943828249997*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(6,18) = -0.5*cM[6]; 
  BigAEM(6,19) = -0.5*cM[7]; 
  BigAEM(6,20) = -0.5*cM[8]; 
  BigAEM(6,21) = -0.5*cM[9]; 
  BigAEM(6,22) = -0.5*cM[10]; 
  BigAEM(6,23) = -0.5*cM[11]; 
  BigAEM(7,18) = -0.5*cM[7]; 
  BigAEM(7,19) = (-0.4472135954999579*cM[10])-0.5*cM[6]; 
  BigAEM(7,20) = -0.5*cM[9]; 
  BigAEM(7,21) = -0.5*cM[8]; 
  BigAEM(7,22) = -0.4472135954999579*cM[7]; 
  BigAEM(8,18) = -0.5*cM[8]; 
  BigAEM(8,19) = -0.5*cM[9]; 
  BigAEM(8,20) = (-0.4472135954999579*cM[11])-0.5*cM[6]; 
  BigAEM(8,21) = -0.5*cM[7]; 
  BigAEM(8,23) = -0.4472135954999579*cM[8]; 
  BigAEM(9,18) = -0.5*cM[9]; 
  BigAEM(9,19) = -0.5*cM[8]; 
  BigAEM(9,20) = -0.5*cM[7]; 
  BigAEM(9,21) = (-0.4472135954999579*cM[11])-0.4472135954999579*cM[10]-0.5*cM[6]; 
  BigAEM(9,22) = -0.4472135954999579*cM[9]; 
  BigAEM(9,23) = -0.4472135954999579*cM[9]; 
  BigAEM(10,18) = -0.5*cM[10]; 
  BigAEM(10,19) = -0.4472135954999579*cM[7]; 
  BigAEM(10,21) = -0.4472135954999579*cM[9]; 
  BigAEM(10,22) = (-0.31943828249997*cM[10])-0.5*cM[6]; 
  BigAEM(11,18) = -0.5*cM[11]; 
  BigAEM(11,20) = -0.4472135954999579*cM[8]; 
  BigAEM(11,21) = -0.4472135954999579*cM[9]; 
  BigAEM(11,23) = (-0.31943828249997*cM[11])-0.5*cM[6]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(18,6) = 0.5*m1[6]; 
  BigAEM(18,7) = 0.5*m1[7]; 
  BigAEM(18,8) = 0.5*m1[8]; 
  BigAEM(18,9) = 0.5*m1[9]; 
  BigAEM(18,10) = 0.5*m1[10]; 
  BigAEM(18,11) = 0.5*m1[11]; 
  BigAEM(19,6) = 0.5*m1[7]; 
  BigAEM(19,7) = 0.4472135954999579*m1[10]+0.5*m1[6]; 
  BigAEM(19,8) = 0.5*m1[9]; 
  BigAEM(19,9) = 0.5*m1[8]; 
  BigAEM(19,10) = 0.4472135954999579*m1[7]; 
  BigAEM(20,6) = 0.5*m1[8]; 
  BigAEM(20,7) = 0.5*m1[9]; 
  BigAEM(20,8) = 0.4472135954999579*m1[11]+0.5*m1[6]; 
  BigAEM(20,9) = 0.5*m1[7]; 
  BigAEM(20,11) = 0.4472135954999579*m1[8]; 
  BigAEM(21,6) = 0.5*m1[9]; 
  BigAEM(21,7) = 0.5*m1[8]; 
  BigAEM(21,8) = 0.5*m1[7]; 
  BigAEM(21,9) = 0.4472135954999579*m1[11]+0.4472135954999579*m1[10]+0.5*m1[6]; 
  BigAEM(21,10) = 0.4472135954999579*m1[9]; 
  BigAEM(21,11) = 0.4472135954999579*m1[9]; 
  BigAEM(22,6) = 0.5*m1[10]; 
  BigAEM(22,7) = 0.4472135954999579*m1[7]; 
  BigAEM(22,9) = 0.4472135954999579*m1[9]; 
  BigAEM(22,10) = 0.31943828249997*m1[10]+0.5*m1[6]; 
  BigAEM(23,6) = 0.5*m1[11]; 
  BigAEM(23,8) = 0.4472135954999579*m1[8]; 
  BigAEM(23,9) = 0.4472135954999579*m1[9]; 
  BigAEM(23,11) = 0.31943828249997*m1[11]+0.5*m1[6]; 
 
  // ....... Block from weak multiply of uZ and m0  .......... // 
  BigAEM(12,12) = 0.5*m0[0]; 
  BigAEM(12,13) = 0.5*m0[1]; 
  BigAEM(12,14) = 0.5*m0[2]; 
  BigAEM(12,15) = 0.5*m0[3]; 
  BigAEM(12,16) = 0.5*m0[4]; 
  BigAEM(12,17) = 0.5*m0[5]; 
  BigAEM(13,12) = 0.5*m0[1]; 
  BigAEM(13,13) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(13,14) = 0.5*m0[3]; 
  BigAEM(13,15) = 0.5*m0[2]; 
  BigAEM(13,16) = 0.4472135954999579*m0[1]; 
  BigAEM(14,12) = 0.5*m0[2]; 
  BigAEM(14,13) = 0.5*m0[3]; 
  BigAEM(14,14) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(14,15) = 0.5*m0[1]; 
  BigAEM(14,17) = 0.4472135954999579*m0[2]; 
  BigAEM(15,12) = 0.5*m0[3]; 
  BigAEM(15,13) = 0.5*m0[2]; 
  BigAEM(15,14) = 0.5*m0[1]; 
  BigAEM(15,15) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(15,16) = 0.4472135954999579*m0[3]; 
  BigAEM(15,17) = 0.4472135954999579*m0[3]; 
  BigAEM(16,12) = 0.5*m0[4]; 
  BigAEM(16,13) = 0.4472135954999579*m0[1]; 
  BigAEM(16,15) = 0.4472135954999579*m0[3]; 
  BigAEM(16,16) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(17,12) = 0.5*m0[5]; 
  BigAEM(17,14) = 0.4472135954999579*m0[2]; 
  BigAEM(17,15) = 0.4472135954999579*m0[3]; 
  BigAEM(17,17) = 0.31943828249997*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uZ .......... // 
  BigAEM(12,18) = -0.5*cM[12]; 
  BigAEM(12,19) = -0.5*cM[13]; 
  BigAEM(12,20) = -0.5*cM[14]; 
  BigAEM(12,21) = -0.5*cM[15]; 
  BigAEM(12,22) = -0.5*cM[16]; 
  BigAEM(12,23) = -0.5*cM[17]; 
  BigAEM(13,18) = -0.5*cM[13]; 
  BigAEM(13,19) = (-0.4472135954999579*cM[16])-0.5*cM[12]; 
  BigAEM(13,20) = -0.5*cM[15]; 
  BigAEM(13,21) = -0.5*cM[14]; 
  BigAEM(13,22) = -0.4472135954999579*cM[13]; 
  BigAEM(14,18) = -0.5*cM[14]; 
  BigAEM(14,19) = -0.5*cM[15]; 
  BigAEM(14,20) = (-0.4472135954999579*cM[17])-0.5*cM[12]; 
  BigAEM(14,21) = -0.5*cM[13]; 
  BigAEM(14,23) = -0.4472135954999579*cM[14]; 
  BigAEM(15,18) = -0.5*cM[15]; 
  BigAEM(15,19) = -0.5*cM[14]; 
  BigAEM(15,20) = -0.5*cM[13]; 
  BigAEM(15,21) = (-0.4472135954999579*cM[17])-0.4472135954999579*cM[16]-0.5*cM[12]; 
  BigAEM(15,22) = -0.4472135954999579*cM[15]; 
  BigAEM(15,23) = -0.4472135954999579*cM[15]; 
  BigAEM(16,18) = -0.5*cM[16]; 
  BigAEM(16,19) = -0.4472135954999579*cM[13]; 
  BigAEM(16,21) = -0.4472135954999579*cM[15]; 
  BigAEM(16,22) = (-0.31943828249997*cM[16])-0.5*cM[12]; 
  BigAEM(17,18) = -0.5*cM[17]; 
  BigAEM(17,20) = -0.4472135954999579*cM[14]; 
  BigAEM(17,21) = -0.4472135954999579*cM[15]; 
  BigAEM(17,23) = (-0.31943828249997*cM[17])-0.5*cM[12]; 
 
  // ....... Block from weak multiply of uZ and m1Z  .......... // 
  BigAEM(18,12) = 0.5*m1[12]; 
  BigAEM(18,13) = 0.5*m1[13]; 
  BigAEM(18,14) = 0.5*m1[14]; 
  BigAEM(18,15) = 0.5*m1[15]; 
  BigAEM(18,16) = 0.5*m1[16]; 
  BigAEM(18,17) = 0.5*m1[17]; 
  BigAEM(19,12) = 0.5*m1[13]; 
  BigAEM(19,13) = 0.4472135954999579*m1[16]+0.5*m1[12]; 
  BigAEM(19,14) = 0.5*m1[15]; 
  BigAEM(19,15) = 0.5*m1[14]; 
  BigAEM(19,16) = 0.4472135954999579*m1[13]; 
  BigAEM(20,12) = 0.5*m1[14]; 
  BigAEM(20,13) = 0.5*m1[15]; 
  BigAEM(20,14) = 0.4472135954999579*m1[17]+0.5*m1[12]; 
  BigAEM(20,15) = 0.5*m1[13]; 
  BigAEM(20,17) = 0.4472135954999579*m1[14]; 
  BigAEM(21,12) = 0.5*m1[15]; 
  BigAEM(21,13) = 0.5*m1[14]; 
  BigAEM(21,14) = 0.5*m1[13]; 
  BigAEM(21,15) = 0.4472135954999579*m1[17]+0.4472135954999579*m1[16]+0.5*m1[12]; 
  BigAEM(21,16) = 0.4472135954999579*m1[15]; 
  BigAEM(21,17) = 0.4472135954999579*m1[15]; 
  BigAEM(22,12) = 0.5*m1[16]; 
  BigAEM(22,13) = 0.4472135954999579*m1[13]; 
  BigAEM(22,15) = 0.4472135954999579*m1[15]; 
  BigAEM(22,16) = 0.31943828249997*m1[16]+0.5*m1[12]; 
  BigAEM(23,12) = 0.5*m1[17]; 
  BigAEM(23,14) = 0.4472135954999579*m1[14]; 
  BigAEM(23,15) = 0.4472135954999579*m1[15]; 
  BigAEM(23,17) = 0.31943828249997*m1[17]+0.5*m1[12]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(18,18) = 0.5*m0[0]*pVdim-0.5*cE[0]; 
  BigAEM(18,19) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(18,20) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(18,21) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(18,22) = 0.5*m0[4]*pVdim-0.5*cE[4]; 
  BigAEM(18,23) = 0.5*m0[5]*pVdim-0.5*cE[5]; 
  BigAEM(19,18) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(19,19) = 0.4472135954999579*m0[4]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(19,20) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(19,21) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(19,22) = 0.4472135954999579*m0[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(20,18) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(20,19) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(20,20) = 0.4472135954999579*m0[5]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[5]-0.5*cE[0]; 
  BigAEM(20,21) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(20,23) = 0.4472135954999579*m0[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(21,18) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(21,19) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(21,20) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(21,21) = 0.4472135954999579*m0[5]*pVdim+0.4472135954999579*m0[4]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(21,22) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(21,23) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(22,18) = 0.5*m0[4]*pVdim-0.5*cE[4]; 
  BigAEM(22,19) = 0.4472135954999579*m0[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(22,21) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(22,22) = 0.31943828249997*m0[4]*pVdim+0.5*m0[0]*pVdim-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(23,18) = 0.5*m0[5]*pVdim-0.5*cE[5]; 
  BigAEM(23,20) = 0.4472135954999579*m0[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(23,21) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(23,23) = 0.31943828249997*m0[5]*pVdim+0.5*m0[0]*pVdim-0.31943828249997*cE[5]-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<6,12>(0,6).setZero(); 
  BigAEM.block<12,6>(6,0).setZero(); 
  BigAEM.block<6,6>(6,12).setZero(); 
  BigAEM.block<6,6>(12,6).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m1[12],m1[13],m1[14],m1[15],m1[16],m1[17],m2[0],m2[1],m2[2],m2[3],m2[4],m2[5]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,18,1) = xEV.segment<18>(0); 
 
  Eigen::Map<VectorXd>(vtSq,6,1) = xEV.segment<6>(18); 
 
} 
 
void SelfPrimMoments2x3vMax_P3(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(40,40); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(40);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(40);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0[0]; 
  BigAEM(0,1) = 0.5*m0[1]; 
  BigAEM(0,2) = 0.5*m0[2]; 
  BigAEM(0,3) = 0.5*m0[3]; 
  BigAEM(0,4) = 0.5*m0[4]; 
  BigAEM(0,5) = 0.5*m0[5]; 
  BigAEM(0,6) = 0.5*m0[6]; 
  BigAEM(0,7) = 0.5*m0[7]; 
  BigAEM(0,8) = 0.5*m0[8]; 
  BigAEM(0,9) = 0.5*m0[9]; 
  BigAEM(1,0) = 0.5*m0[1]; 
  BigAEM(1,1) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(1,2) = 0.5*m0[3]; 
  BigAEM(1,3) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(1,4) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(1,5) = 0.5000000000000001*m0[7]; 
  BigAEM(1,6) = 0.447213595499958*m0[3]; 
  BigAEM(1,7) = 0.5000000000000001*m0[5]; 
  BigAEM(1,8) = 0.4391550328268398*m0[4]; 
  BigAEM(2,0) = 0.5*m0[2]; 
  BigAEM(2,1) = 0.5*m0[3]; 
  BigAEM(2,2) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(2,3) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(2,4) = 0.5000000000000001*m0[6]; 
  BigAEM(2,5) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(2,6) = 0.5000000000000001*m0[4]; 
  BigAEM(2,7) = 0.447213595499958*m0[3]; 
  BigAEM(2,9) = 0.4391550328268398*m0[5]; 
  BigAEM(3,0) = 0.5*m0[3]; 
  BigAEM(3,1) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(3,2) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(3,3) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(3,4) = 0.4472135954999579*m0[3]; 
  BigAEM(3,5) = 0.4472135954999579*m0[3]; 
  BigAEM(3,6) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(3,7) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(3,8) = 0.4391550328268399*m0[6]; 
  BigAEM(3,9) = 0.4391550328268399*m0[7]; 
  BigAEM(4,0) = 0.5*m0[4]; 
  BigAEM(4,1) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(4,2) = 0.5000000000000001*m0[6]; 
  BigAEM(4,3) = 0.4472135954999579*m0[3]; 
  BigAEM(4,4) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(4,6) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(4,7) = 0.4472135954999579*m0[7]; 
  BigAEM(4,8) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(5,0) = 0.5*m0[5]; 
  BigAEM(5,1) = 0.5000000000000001*m0[7]; 
  BigAEM(5,2) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(5,3) = 0.4472135954999579*m0[3]; 
  BigAEM(5,5) = 0.31943828249997*m0[5]+0.5*m0[0]; 
  BigAEM(5,6) = 0.4472135954999579*m0[6]; 
  BigAEM(5,7) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(5,9) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(6,0) = 0.5*m0[6]; 
  BigAEM(6,1) = 0.447213595499958*m0[3]; 
  BigAEM(6,2) = 0.5000000000000001*m0[4]; 
  BigAEM(6,3) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(6,4) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(6,5) = 0.4472135954999579*m0[6]; 
  BigAEM(6,6) = 0.4472135954999579*m0[5]+0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(6,7) = 0.4*m0[3]; 
  BigAEM(6,8) = 0.4391550328268399*m0[3]; 
  BigAEM(7,0) = 0.5*m0[7]; 
  BigAEM(7,1) = 0.5000000000000001*m0[5]; 
  BigAEM(7,2) = 0.447213595499958*m0[3]; 
  BigAEM(7,3) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(7,4) = 0.4472135954999579*m0[7]; 
  BigAEM(7,5) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(7,6) = 0.4*m0[3]; 
  BigAEM(7,7) = 0.31943828249997*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(7,9) = 0.4391550328268399*m0[3]; 
  BigAEM(8,0) = 0.5*m0[8]; 
  BigAEM(8,1) = 0.4391550328268398*m0[4]; 
  BigAEM(8,3) = 0.4391550328268399*m0[6]; 
  BigAEM(8,4) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(8,6) = 0.4391550328268399*m0[3]; 
  BigAEM(8,8) = 0.2981423969999719*m0[4]+0.5*m0[0]; 
  BigAEM(9,0) = 0.5*m0[9]; 
  BigAEM(9,2) = 0.4391550328268398*m0[5]; 
  BigAEM(9,3) = 0.4391550328268399*m0[7]; 
  BigAEM(9,5) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(9,7) = 0.4391550328268399*m0[3]; 
  BigAEM(9,9) = 0.2981423969999719*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,30) = -0.5*cM[0]; 
  BigAEM(0,31) = -0.5*cM[1]; 
  BigAEM(0,32) = -0.5*cM[2]; 
  BigAEM(0,33) = -0.5*cM[3]; 
  BigAEM(0,34) = -0.5*cM[4]; 
  BigAEM(0,35) = -0.5*cM[5]; 
  BigAEM(0,36) = -0.5*cM[6]; 
  BigAEM(0,37) = -0.5*cM[7]; 
  BigAEM(0,38) = -0.5*cM[8]; 
  BigAEM(0,39) = -0.5*cM[9]; 
  BigAEM(1,30) = -0.5*cM[1]; 
  BigAEM(1,31) = (-0.4472135954999579*cM[4])-0.5*cM[0]; 
  BigAEM(1,32) = -0.5*cM[3]; 
  BigAEM(1,33) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(1,34) = (-0.4391550328268398*cM[8])-0.4472135954999579*cM[1]; 
  BigAEM(1,35) = -0.5000000000000001*cM[7]; 
  BigAEM(1,36) = -0.447213595499958*cM[3]; 
  BigAEM(1,37) = -0.5000000000000001*cM[5]; 
  BigAEM(1,38) = -0.4391550328268398*cM[4]; 
  BigAEM(2,30) = -0.5*cM[2]; 
  BigAEM(2,31) = -0.5*cM[3]; 
  BigAEM(2,32) = (-0.4472135954999579*cM[5])-0.5*cM[0]; 
  BigAEM(2,33) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(2,34) = -0.5000000000000001*cM[6]; 
  BigAEM(2,35) = (-0.4391550328268398*cM[9])-0.4472135954999579*cM[2]; 
  BigAEM(2,36) = -0.5000000000000001*cM[4]; 
  BigAEM(2,37) = -0.447213595499958*cM[3]; 
  BigAEM(2,39) = -0.4391550328268398*cM[5]; 
  BigAEM(3,30) = -0.5*cM[3]; 
  BigAEM(3,31) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(3,32) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(3,33) = (-0.4472135954999579*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(3,34) = -0.4472135954999579*cM[3]; 
  BigAEM(3,35) = -0.4472135954999579*cM[3]; 
  BigAEM(3,36) = (-0.4391550328268399*cM[8])-0.4*cM[7]-0.447213595499958*cM[1]; 
  BigAEM(3,37) = (-0.4391550328268399*cM[9])-0.4*cM[6]-0.447213595499958*cM[2]; 
  BigAEM(3,38) = -0.4391550328268399*cM[6]; 
  BigAEM(3,39) = -0.4391550328268399*cM[7]; 
  BigAEM(4,30) = -0.5*cM[4]; 
  BigAEM(4,31) = (-0.4391550328268398*cM[8])-0.4472135954999579*cM[1]; 
  BigAEM(4,32) = -0.5000000000000001*cM[6]; 
  BigAEM(4,33) = -0.4472135954999579*cM[3]; 
  BigAEM(4,34) = (-0.31943828249997*cM[4])-0.5*cM[0]; 
  BigAEM(4,36) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(4,37) = -0.4472135954999579*cM[7]; 
  BigAEM(4,38) = (-0.2981423969999719*cM[8])-0.4391550328268398*cM[1]; 
  BigAEM(5,30) = -0.5*cM[5]; 
  BigAEM(5,31) = -0.5000000000000001*cM[7]; 
  BigAEM(5,32) = (-0.4391550328268398*cM[9])-0.4472135954999579*cM[2]; 
  BigAEM(5,33) = -0.4472135954999579*cM[3]; 
  BigAEM(5,35) = (-0.31943828249997*cM[5])-0.5*cM[0]; 
  BigAEM(5,36) = -0.4472135954999579*cM[6]; 
  BigAEM(5,37) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(5,39) = (-0.2981423969999719*cM[9])-0.4391550328268398*cM[2]; 
  BigAEM(6,30) = -0.5*cM[6]; 
  BigAEM(6,31) = -0.447213595499958*cM[3]; 
  BigAEM(6,32) = -0.5000000000000001*cM[4]; 
  BigAEM(6,33) = (-0.4391550328268399*cM[8])-0.4*cM[7]-0.447213595499958*cM[1]; 
  BigAEM(6,34) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(6,35) = -0.4472135954999579*cM[6]; 
  BigAEM(6,36) = (-0.4472135954999579*cM[5])-0.31943828249997*cM[4]-0.5*cM[0]; 
  BigAEM(6,37) = -0.4*cM[3]; 
  BigAEM(6,38) = -0.4391550328268399*cM[3]; 
  BigAEM(7,30) = -0.5*cM[7]; 
  BigAEM(7,31) = -0.5000000000000001*cM[5]; 
  BigAEM(7,32) = -0.447213595499958*cM[3]; 
  BigAEM(7,33) = (-0.4391550328268399*cM[9])-0.4*cM[6]-0.447213595499958*cM[2]; 
  BigAEM(7,34) = -0.4472135954999579*cM[7]; 
  BigAEM(7,35) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(7,36) = -0.4*cM[3]; 
  BigAEM(7,37) = (-0.31943828249997*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(7,39) = -0.4391550328268399*cM[3]; 
  BigAEM(8,30) = -0.5*cM[8]; 
  BigAEM(8,31) = -0.4391550328268398*cM[4]; 
  BigAEM(8,33) = -0.4391550328268399*cM[6]; 
  BigAEM(8,34) = (-0.2981423969999719*cM[8])-0.4391550328268398*cM[1]; 
  BigAEM(8,36) = -0.4391550328268399*cM[3]; 
  BigAEM(8,38) = (-0.2981423969999719*cM[4])-0.5*cM[0]; 
  BigAEM(9,30) = -0.5*cM[9]; 
  BigAEM(9,32) = -0.4391550328268398*cM[5]; 
  BigAEM(9,33) = -0.4391550328268399*cM[7]; 
  BigAEM(9,35) = (-0.2981423969999719*cM[9])-0.4391550328268398*cM[2]; 
  BigAEM(9,37) = -0.4391550328268399*cM[3]; 
  BigAEM(9,39) = (-0.2981423969999719*cM[5])-0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(30,0) = 0.5*m1[0]; 
  BigAEM(30,1) = 0.5*m1[1]; 
  BigAEM(30,2) = 0.5*m1[2]; 
  BigAEM(30,3) = 0.5*m1[3]; 
  BigAEM(30,4) = 0.5*m1[4]; 
  BigAEM(30,5) = 0.5*m1[5]; 
  BigAEM(30,6) = 0.5*m1[6]; 
  BigAEM(30,7) = 0.5*m1[7]; 
  BigAEM(30,8) = 0.5*m1[8]; 
  BigAEM(30,9) = 0.5*m1[9]; 
  BigAEM(31,0) = 0.5*m1[1]; 
  BigAEM(31,1) = 0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(31,2) = 0.5*m1[3]; 
  BigAEM(31,3) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(31,4) = 0.4391550328268398*m1[8]+0.4472135954999579*m1[1]; 
  BigAEM(31,5) = 0.5000000000000001*m1[7]; 
  BigAEM(31,6) = 0.447213595499958*m1[3]; 
  BigAEM(31,7) = 0.5000000000000001*m1[5]; 
  BigAEM(31,8) = 0.4391550328268398*m1[4]; 
  BigAEM(32,0) = 0.5*m1[2]; 
  BigAEM(32,1) = 0.5*m1[3]; 
  BigAEM(32,2) = 0.4472135954999579*m1[5]+0.5*m1[0]; 
  BigAEM(32,3) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(32,4) = 0.5000000000000001*m1[6]; 
  BigAEM(32,5) = 0.4391550328268398*m1[9]+0.4472135954999579*m1[2]; 
  BigAEM(32,6) = 0.5000000000000001*m1[4]; 
  BigAEM(32,7) = 0.447213595499958*m1[3]; 
  BigAEM(32,9) = 0.4391550328268398*m1[5]; 
  BigAEM(33,0) = 0.5*m1[3]; 
  BigAEM(33,1) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(33,2) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(33,3) = 0.4472135954999579*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(33,4) = 0.4472135954999579*m1[3]; 
  BigAEM(33,5) = 0.4472135954999579*m1[3]; 
  BigAEM(33,6) = 0.4391550328268399*m1[8]+0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(33,7) = 0.4391550328268399*m1[9]+0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(33,8) = 0.4391550328268399*m1[6]; 
  BigAEM(33,9) = 0.4391550328268399*m1[7]; 
  BigAEM(34,0) = 0.5*m1[4]; 
  BigAEM(34,1) = 0.4391550328268398*m1[8]+0.4472135954999579*m1[1]; 
  BigAEM(34,2) = 0.5000000000000001*m1[6]; 
  BigAEM(34,3) = 0.4472135954999579*m1[3]; 
  BigAEM(34,4) = 0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(34,6) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(34,7) = 0.4472135954999579*m1[7]; 
  BigAEM(34,8) = 0.2981423969999719*m1[8]+0.4391550328268398*m1[1]; 
  BigAEM(35,0) = 0.5*m1[5]; 
  BigAEM(35,1) = 0.5000000000000001*m1[7]; 
  BigAEM(35,2) = 0.4391550328268398*m1[9]+0.4472135954999579*m1[2]; 
  BigAEM(35,3) = 0.4472135954999579*m1[3]; 
  BigAEM(35,5) = 0.31943828249997*m1[5]+0.5*m1[0]; 
  BigAEM(35,6) = 0.4472135954999579*m1[6]; 
  BigAEM(35,7) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(35,9) = 0.2981423969999719*m1[9]+0.4391550328268398*m1[2]; 
  BigAEM(36,0) = 0.5*m1[6]; 
  BigAEM(36,1) = 0.447213595499958*m1[3]; 
  BigAEM(36,2) = 0.5000000000000001*m1[4]; 
  BigAEM(36,3) = 0.4391550328268399*m1[8]+0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(36,4) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(36,5) = 0.4472135954999579*m1[6]; 
  BigAEM(36,6) = 0.4472135954999579*m1[5]+0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(36,7) = 0.4*m1[3]; 
  BigAEM(36,8) = 0.4391550328268399*m1[3]; 
  BigAEM(37,0) = 0.5*m1[7]; 
  BigAEM(37,1) = 0.5000000000000001*m1[5]; 
  BigAEM(37,2) = 0.447213595499958*m1[3]; 
  BigAEM(37,3) = 0.4391550328268399*m1[9]+0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(37,4) = 0.4472135954999579*m1[7]; 
  BigAEM(37,5) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(37,6) = 0.4*m1[3]; 
  BigAEM(37,7) = 0.31943828249997*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(37,9) = 0.4391550328268399*m1[3]; 
  BigAEM(38,0) = 0.5*m1[8]; 
  BigAEM(38,1) = 0.4391550328268398*m1[4]; 
  BigAEM(38,3) = 0.4391550328268399*m1[6]; 
  BigAEM(38,4) = 0.2981423969999719*m1[8]+0.4391550328268398*m1[1]; 
  BigAEM(38,6) = 0.4391550328268399*m1[3]; 
  BigAEM(38,8) = 0.2981423969999719*m1[4]+0.5*m1[0]; 
  BigAEM(39,0) = 0.5*m1[9]; 
  BigAEM(39,2) = 0.4391550328268398*m1[5]; 
  BigAEM(39,3) = 0.4391550328268399*m1[7]; 
  BigAEM(39,5) = 0.2981423969999719*m1[9]+0.4391550328268398*m1[2]; 
  BigAEM(39,7) = 0.4391550328268399*m1[3]; 
  BigAEM(39,9) = 0.2981423969999719*m1[5]+0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(10,10) = 0.5*m0[0]; 
  BigAEM(10,11) = 0.5*m0[1]; 
  BigAEM(10,12) = 0.5*m0[2]; 
  BigAEM(10,13) = 0.5*m0[3]; 
  BigAEM(10,14) = 0.5*m0[4]; 
  BigAEM(10,15) = 0.5*m0[5]; 
  BigAEM(10,16) = 0.5*m0[6]; 
  BigAEM(10,17) = 0.5*m0[7]; 
  BigAEM(10,18) = 0.5*m0[8]; 
  BigAEM(10,19) = 0.5*m0[9]; 
  BigAEM(11,10) = 0.5*m0[1]; 
  BigAEM(11,11) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(11,12) = 0.5*m0[3]; 
  BigAEM(11,13) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(11,14) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(11,15) = 0.5000000000000001*m0[7]; 
  BigAEM(11,16) = 0.447213595499958*m0[3]; 
  BigAEM(11,17) = 0.5000000000000001*m0[5]; 
  BigAEM(11,18) = 0.4391550328268398*m0[4]; 
  BigAEM(12,10) = 0.5*m0[2]; 
  BigAEM(12,11) = 0.5*m0[3]; 
  BigAEM(12,12) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(12,13) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(12,14) = 0.5000000000000001*m0[6]; 
  BigAEM(12,15) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(12,16) = 0.5000000000000001*m0[4]; 
  BigAEM(12,17) = 0.447213595499958*m0[3]; 
  BigAEM(12,19) = 0.4391550328268398*m0[5]; 
  BigAEM(13,10) = 0.5*m0[3]; 
  BigAEM(13,11) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(13,12) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(13,13) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(13,14) = 0.4472135954999579*m0[3]; 
  BigAEM(13,15) = 0.4472135954999579*m0[3]; 
  BigAEM(13,16) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(13,17) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(13,18) = 0.4391550328268399*m0[6]; 
  BigAEM(13,19) = 0.4391550328268399*m0[7]; 
  BigAEM(14,10) = 0.5*m0[4]; 
  BigAEM(14,11) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(14,12) = 0.5000000000000001*m0[6]; 
  BigAEM(14,13) = 0.4472135954999579*m0[3]; 
  BigAEM(14,14) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(14,16) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(14,17) = 0.4472135954999579*m0[7]; 
  BigAEM(14,18) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(15,10) = 0.5*m0[5]; 
  BigAEM(15,11) = 0.5000000000000001*m0[7]; 
  BigAEM(15,12) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(15,13) = 0.4472135954999579*m0[3]; 
  BigAEM(15,15) = 0.31943828249997*m0[5]+0.5*m0[0]; 
  BigAEM(15,16) = 0.4472135954999579*m0[6]; 
  BigAEM(15,17) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(15,19) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(16,10) = 0.5*m0[6]; 
  BigAEM(16,11) = 0.447213595499958*m0[3]; 
  BigAEM(16,12) = 0.5000000000000001*m0[4]; 
  BigAEM(16,13) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(16,14) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(16,15) = 0.4472135954999579*m0[6]; 
  BigAEM(16,16) = 0.4472135954999579*m0[5]+0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(16,17) = 0.4*m0[3]; 
  BigAEM(16,18) = 0.4391550328268399*m0[3]; 
  BigAEM(17,10) = 0.5*m0[7]; 
  BigAEM(17,11) = 0.5000000000000001*m0[5]; 
  BigAEM(17,12) = 0.447213595499958*m0[3]; 
  BigAEM(17,13) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(17,14) = 0.4472135954999579*m0[7]; 
  BigAEM(17,15) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(17,16) = 0.4*m0[3]; 
  BigAEM(17,17) = 0.31943828249997*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(17,19) = 0.4391550328268399*m0[3]; 
  BigAEM(18,10) = 0.5*m0[8]; 
  BigAEM(18,11) = 0.4391550328268398*m0[4]; 
  BigAEM(18,13) = 0.4391550328268399*m0[6]; 
  BigAEM(18,14) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(18,16) = 0.4391550328268399*m0[3]; 
  BigAEM(18,18) = 0.2981423969999719*m0[4]+0.5*m0[0]; 
  BigAEM(19,10) = 0.5*m0[9]; 
  BigAEM(19,12) = 0.4391550328268398*m0[5]; 
  BigAEM(19,13) = 0.4391550328268399*m0[7]; 
  BigAEM(19,15) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(19,17) = 0.4391550328268399*m0[3]; 
  BigAEM(19,19) = 0.2981423969999719*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(10,30) = -0.5*cM[10]; 
  BigAEM(10,31) = -0.5*cM[11]; 
  BigAEM(10,32) = -0.5*cM[12]; 
  BigAEM(10,33) = -0.5*cM[13]; 
  BigAEM(10,34) = -0.5*cM[14]; 
  BigAEM(10,35) = -0.5*cM[15]; 
  BigAEM(10,36) = -0.5*cM[16]; 
  BigAEM(10,37) = -0.5*cM[17]; 
  BigAEM(10,38) = -0.5*cM[18]; 
  BigAEM(10,39) = -0.5*cM[19]; 
  BigAEM(11,30) = -0.5*cM[11]; 
  BigAEM(11,31) = (-0.4472135954999579*cM[14])-0.5*cM[10]; 
  BigAEM(11,32) = -0.5*cM[13]; 
  BigAEM(11,33) = (-0.447213595499958*cM[16])-0.5*cM[12]; 
  BigAEM(11,34) = (-0.4391550328268398*cM[18])-0.4472135954999579*cM[11]; 
  BigAEM(11,35) = -0.5000000000000001*cM[17]; 
  BigAEM(11,36) = -0.447213595499958*cM[13]; 
  BigAEM(11,37) = -0.5000000000000001*cM[15]; 
  BigAEM(11,38) = -0.4391550328268398*cM[14]; 
  BigAEM(12,30) = -0.5*cM[12]; 
  BigAEM(12,31) = -0.5*cM[13]; 
  BigAEM(12,32) = (-0.4472135954999579*cM[15])-0.5*cM[10]; 
  BigAEM(12,33) = (-0.447213595499958*cM[17])-0.5*cM[11]; 
  BigAEM(12,34) = -0.5000000000000001*cM[16]; 
  BigAEM(12,35) = (-0.4391550328268398*cM[19])-0.4472135954999579*cM[12]; 
  BigAEM(12,36) = -0.5000000000000001*cM[14]; 
  BigAEM(12,37) = -0.447213595499958*cM[13]; 
  BigAEM(12,39) = -0.4391550328268398*cM[15]; 
  BigAEM(13,30) = -0.5*cM[13]; 
  BigAEM(13,31) = (-0.447213595499958*cM[16])-0.5*cM[12]; 
  BigAEM(13,32) = (-0.447213595499958*cM[17])-0.5*cM[11]; 
  BigAEM(13,33) = (-0.4472135954999579*cM[15])-0.4472135954999579*cM[14]-0.5*cM[10]; 
  BigAEM(13,34) = -0.4472135954999579*cM[13]; 
  BigAEM(13,35) = -0.4472135954999579*cM[13]; 
  BigAEM(13,36) = (-0.4391550328268399*cM[18])-0.4*cM[17]-0.447213595499958*cM[11]; 
  BigAEM(13,37) = (-0.4391550328268399*cM[19])-0.4*cM[16]-0.447213595499958*cM[12]; 
  BigAEM(13,38) = -0.4391550328268399*cM[16]; 
  BigAEM(13,39) = -0.4391550328268399*cM[17]; 
  BigAEM(14,30) = -0.5*cM[14]; 
  BigAEM(14,31) = (-0.4391550328268398*cM[18])-0.4472135954999579*cM[11]; 
  BigAEM(14,32) = -0.5000000000000001*cM[16]; 
  BigAEM(14,33) = -0.4472135954999579*cM[13]; 
  BigAEM(14,34) = (-0.31943828249997*cM[14])-0.5*cM[10]; 
  BigAEM(14,36) = (-0.31943828249997*cM[16])-0.5000000000000001*cM[12]; 
  BigAEM(14,37) = -0.4472135954999579*cM[17]; 
  BigAEM(14,38) = (-0.2981423969999719*cM[18])-0.4391550328268398*cM[11]; 
  BigAEM(15,30) = -0.5*cM[15]; 
  BigAEM(15,31) = -0.5000000000000001*cM[17]; 
  BigAEM(15,32) = (-0.4391550328268398*cM[19])-0.4472135954999579*cM[12]; 
  BigAEM(15,33) = -0.4472135954999579*cM[13]; 
  BigAEM(15,35) = (-0.31943828249997*cM[15])-0.5*cM[10]; 
  BigAEM(15,36) = -0.4472135954999579*cM[16]; 
  BigAEM(15,37) = (-0.31943828249997*cM[17])-0.5000000000000001*cM[11]; 
  BigAEM(15,39) = (-0.2981423969999719*cM[19])-0.4391550328268398*cM[12]; 
  BigAEM(16,30) = -0.5*cM[16]; 
  BigAEM(16,31) = -0.447213595499958*cM[13]; 
  BigAEM(16,32) = -0.5000000000000001*cM[14]; 
  BigAEM(16,33) = (-0.4391550328268399*cM[18])-0.4*cM[17]-0.447213595499958*cM[11]; 
  BigAEM(16,34) = (-0.31943828249997*cM[16])-0.5000000000000001*cM[12]; 
  BigAEM(16,35) = -0.4472135954999579*cM[16]; 
  BigAEM(16,36) = (-0.4472135954999579*cM[15])-0.31943828249997*cM[14]-0.5*cM[10]; 
  BigAEM(16,37) = -0.4*cM[13]; 
  BigAEM(16,38) = -0.4391550328268399*cM[13]; 
  BigAEM(17,30) = -0.5*cM[17]; 
  BigAEM(17,31) = -0.5000000000000001*cM[15]; 
  BigAEM(17,32) = -0.447213595499958*cM[13]; 
  BigAEM(17,33) = (-0.4391550328268399*cM[19])-0.4*cM[16]-0.447213595499958*cM[12]; 
  BigAEM(17,34) = -0.4472135954999579*cM[17]; 
  BigAEM(17,35) = (-0.31943828249997*cM[17])-0.5000000000000001*cM[11]; 
  BigAEM(17,36) = -0.4*cM[13]; 
  BigAEM(17,37) = (-0.31943828249997*cM[15])-0.4472135954999579*cM[14]-0.5*cM[10]; 
  BigAEM(17,39) = -0.4391550328268399*cM[13]; 
  BigAEM(18,30) = -0.5*cM[18]; 
  BigAEM(18,31) = -0.4391550328268398*cM[14]; 
  BigAEM(18,33) = -0.4391550328268399*cM[16]; 
  BigAEM(18,34) = (-0.2981423969999719*cM[18])-0.4391550328268398*cM[11]; 
  BigAEM(18,36) = -0.4391550328268399*cM[13]; 
  BigAEM(18,38) = (-0.2981423969999719*cM[14])-0.5*cM[10]; 
  BigAEM(19,30) = -0.5*cM[19]; 
  BigAEM(19,32) = -0.4391550328268398*cM[15]; 
  BigAEM(19,33) = -0.4391550328268399*cM[17]; 
  BigAEM(19,35) = (-0.2981423969999719*cM[19])-0.4391550328268398*cM[12]; 
  BigAEM(19,37) = -0.4391550328268399*cM[13]; 
  BigAEM(19,39) = (-0.2981423969999719*cM[15])-0.5*cM[10]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(30,10) = 0.5*m1[10]; 
  BigAEM(30,11) = 0.5*m1[11]; 
  BigAEM(30,12) = 0.5*m1[12]; 
  BigAEM(30,13) = 0.5*m1[13]; 
  BigAEM(30,14) = 0.5*m1[14]; 
  BigAEM(30,15) = 0.5*m1[15]; 
  BigAEM(30,16) = 0.5*m1[16]; 
  BigAEM(30,17) = 0.5*m1[17]; 
  BigAEM(30,18) = 0.5*m1[18]; 
  BigAEM(30,19) = 0.5*m1[19]; 
  BigAEM(31,10) = 0.5*m1[11]; 
  BigAEM(31,11) = 0.4472135954999579*m1[14]+0.5*m1[10]; 
  BigAEM(31,12) = 0.5*m1[13]; 
  BigAEM(31,13) = 0.447213595499958*m1[16]+0.5*m1[12]; 
  BigAEM(31,14) = 0.4391550328268398*m1[18]+0.4472135954999579*m1[11]; 
  BigAEM(31,15) = 0.5000000000000001*m1[17]; 
  BigAEM(31,16) = 0.447213595499958*m1[13]; 
  BigAEM(31,17) = 0.5000000000000001*m1[15]; 
  BigAEM(31,18) = 0.4391550328268398*m1[14]; 
  BigAEM(32,10) = 0.5*m1[12]; 
  BigAEM(32,11) = 0.5*m1[13]; 
  BigAEM(32,12) = 0.4472135954999579*m1[15]+0.5*m1[10]; 
  BigAEM(32,13) = 0.447213595499958*m1[17]+0.5*m1[11]; 
  BigAEM(32,14) = 0.5000000000000001*m1[16]; 
  BigAEM(32,15) = 0.4391550328268398*m1[19]+0.4472135954999579*m1[12]; 
  BigAEM(32,16) = 0.5000000000000001*m1[14]; 
  BigAEM(32,17) = 0.447213595499958*m1[13]; 
  BigAEM(32,19) = 0.4391550328268398*m1[15]; 
  BigAEM(33,10) = 0.5*m1[13]; 
  BigAEM(33,11) = 0.447213595499958*m1[16]+0.5*m1[12]; 
  BigAEM(33,12) = 0.447213595499958*m1[17]+0.5*m1[11]; 
  BigAEM(33,13) = 0.4472135954999579*m1[15]+0.4472135954999579*m1[14]+0.5*m1[10]; 
  BigAEM(33,14) = 0.4472135954999579*m1[13]; 
  BigAEM(33,15) = 0.4472135954999579*m1[13]; 
  BigAEM(33,16) = 0.4391550328268399*m1[18]+0.4*m1[17]+0.447213595499958*m1[11]; 
  BigAEM(33,17) = 0.4391550328268399*m1[19]+0.4*m1[16]+0.447213595499958*m1[12]; 
  BigAEM(33,18) = 0.4391550328268399*m1[16]; 
  BigAEM(33,19) = 0.4391550328268399*m1[17]; 
  BigAEM(34,10) = 0.5*m1[14]; 
  BigAEM(34,11) = 0.4391550328268398*m1[18]+0.4472135954999579*m1[11]; 
  BigAEM(34,12) = 0.5000000000000001*m1[16]; 
  BigAEM(34,13) = 0.4472135954999579*m1[13]; 
  BigAEM(34,14) = 0.31943828249997*m1[14]+0.5*m1[10]; 
  BigAEM(34,16) = 0.31943828249997*m1[16]+0.5000000000000001*m1[12]; 
  BigAEM(34,17) = 0.4472135954999579*m1[17]; 
  BigAEM(34,18) = 0.2981423969999719*m1[18]+0.4391550328268398*m1[11]; 
  BigAEM(35,10) = 0.5*m1[15]; 
  BigAEM(35,11) = 0.5000000000000001*m1[17]; 
  BigAEM(35,12) = 0.4391550328268398*m1[19]+0.4472135954999579*m1[12]; 
  BigAEM(35,13) = 0.4472135954999579*m1[13]; 
  BigAEM(35,15) = 0.31943828249997*m1[15]+0.5*m1[10]; 
  BigAEM(35,16) = 0.4472135954999579*m1[16]; 
  BigAEM(35,17) = 0.31943828249997*m1[17]+0.5000000000000001*m1[11]; 
  BigAEM(35,19) = 0.2981423969999719*m1[19]+0.4391550328268398*m1[12]; 
  BigAEM(36,10) = 0.5*m1[16]; 
  BigAEM(36,11) = 0.447213595499958*m1[13]; 
  BigAEM(36,12) = 0.5000000000000001*m1[14]; 
  BigAEM(36,13) = 0.4391550328268399*m1[18]+0.4*m1[17]+0.447213595499958*m1[11]; 
  BigAEM(36,14) = 0.31943828249997*m1[16]+0.5000000000000001*m1[12]; 
  BigAEM(36,15) = 0.4472135954999579*m1[16]; 
  BigAEM(36,16) = 0.4472135954999579*m1[15]+0.31943828249997*m1[14]+0.5*m1[10]; 
  BigAEM(36,17) = 0.4*m1[13]; 
  BigAEM(36,18) = 0.4391550328268399*m1[13]; 
  BigAEM(37,10) = 0.5*m1[17]; 
  BigAEM(37,11) = 0.5000000000000001*m1[15]; 
  BigAEM(37,12) = 0.447213595499958*m1[13]; 
  BigAEM(37,13) = 0.4391550328268399*m1[19]+0.4*m1[16]+0.447213595499958*m1[12]; 
  BigAEM(37,14) = 0.4472135954999579*m1[17]; 
  BigAEM(37,15) = 0.31943828249997*m1[17]+0.5000000000000001*m1[11]; 
  BigAEM(37,16) = 0.4*m1[13]; 
  BigAEM(37,17) = 0.31943828249997*m1[15]+0.4472135954999579*m1[14]+0.5*m1[10]; 
  BigAEM(37,19) = 0.4391550328268399*m1[13]; 
  BigAEM(38,10) = 0.5*m1[18]; 
  BigAEM(38,11) = 0.4391550328268398*m1[14]; 
  BigAEM(38,13) = 0.4391550328268399*m1[16]; 
  BigAEM(38,14) = 0.2981423969999719*m1[18]+0.4391550328268398*m1[11]; 
  BigAEM(38,16) = 0.4391550328268399*m1[13]; 
  BigAEM(38,18) = 0.2981423969999719*m1[14]+0.5*m1[10]; 
  BigAEM(39,10) = 0.5*m1[19]; 
  BigAEM(39,12) = 0.4391550328268398*m1[15]; 
  BigAEM(39,13) = 0.4391550328268399*m1[17]; 
  BigAEM(39,15) = 0.2981423969999719*m1[19]+0.4391550328268398*m1[12]; 
  BigAEM(39,17) = 0.4391550328268399*m1[13]; 
  BigAEM(39,19) = 0.2981423969999719*m1[15]+0.5*m1[10]; 
 
  // ....... Block from weak multiply of uZ and m0  .......... // 
  BigAEM(20,20) = 0.5*m0[0]; 
  BigAEM(20,21) = 0.5*m0[1]; 
  BigAEM(20,22) = 0.5*m0[2]; 
  BigAEM(20,23) = 0.5*m0[3]; 
  BigAEM(20,24) = 0.5*m0[4]; 
  BigAEM(20,25) = 0.5*m0[5]; 
  BigAEM(20,26) = 0.5*m0[6]; 
  BigAEM(20,27) = 0.5*m0[7]; 
  BigAEM(20,28) = 0.5*m0[8]; 
  BigAEM(20,29) = 0.5*m0[9]; 
  BigAEM(21,20) = 0.5*m0[1]; 
  BigAEM(21,21) = 0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(21,22) = 0.5*m0[3]; 
  BigAEM(21,23) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(21,24) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(21,25) = 0.5000000000000001*m0[7]; 
  BigAEM(21,26) = 0.447213595499958*m0[3]; 
  BigAEM(21,27) = 0.5000000000000001*m0[5]; 
  BigAEM(21,28) = 0.4391550328268398*m0[4]; 
  BigAEM(22,20) = 0.5*m0[2]; 
  BigAEM(22,21) = 0.5*m0[3]; 
  BigAEM(22,22) = 0.4472135954999579*m0[5]+0.5*m0[0]; 
  BigAEM(22,23) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(22,24) = 0.5000000000000001*m0[6]; 
  BigAEM(22,25) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(22,26) = 0.5000000000000001*m0[4]; 
  BigAEM(22,27) = 0.447213595499958*m0[3]; 
  BigAEM(22,29) = 0.4391550328268398*m0[5]; 
  BigAEM(23,20) = 0.5*m0[3]; 
  BigAEM(23,21) = 0.447213595499958*m0[6]+0.5*m0[2]; 
  BigAEM(23,22) = 0.447213595499958*m0[7]+0.5*m0[1]; 
  BigAEM(23,23) = 0.4472135954999579*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(23,24) = 0.4472135954999579*m0[3]; 
  BigAEM(23,25) = 0.4472135954999579*m0[3]; 
  BigAEM(23,26) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(23,27) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(23,28) = 0.4391550328268399*m0[6]; 
  BigAEM(23,29) = 0.4391550328268399*m0[7]; 
  BigAEM(24,20) = 0.5*m0[4]; 
  BigAEM(24,21) = 0.4391550328268398*m0[8]+0.4472135954999579*m0[1]; 
  BigAEM(24,22) = 0.5000000000000001*m0[6]; 
  BigAEM(24,23) = 0.4472135954999579*m0[3]; 
  BigAEM(24,24) = 0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(24,26) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(24,27) = 0.4472135954999579*m0[7]; 
  BigAEM(24,28) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(25,20) = 0.5*m0[5]; 
  BigAEM(25,21) = 0.5000000000000001*m0[7]; 
  BigAEM(25,22) = 0.4391550328268398*m0[9]+0.4472135954999579*m0[2]; 
  BigAEM(25,23) = 0.4472135954999579*m0[3]; 
  BigAEM(25,25) = 0.31943828249997*m0[5]+0.5*m0[0]; 
  BigAEM(25,26) = 0.4472135954999579*m0[6]; 
  BigAEM(25,27) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(25,29) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(26,20) = 0.5*m0[6]; 
  BigAEM(26,21) = 0.447213595499958*m0[3]; 
  BigAEM(26,22) = 0.5000000000000001*m0[4]; 
  BigAEM(26,23) = 0.4391550328268399*m0[8]+0.4*m0[7]+0.447213595499958*m0[1]; 
  BigAEM(26,24) = 0.31943828249997*m0[6]+0.5000000000000001*m0[2]; 
  BigAEM(26,25) = 0.4472135954999579*m0[6]; 
  BigAEM(26,26) = 0.4472135954999579*m0[5]+0.31943828249997*m0[4]+0.5*m0[0]; 
  BigAEM(26,27) = 0.4*m0[3]; 
  BigAEM(26,28) = 0.4391550328268399*m0[3]; 
  BigAEM(27,20) = 0.5*m0[7]; 
  BigAEM(27,21) = 0.5000000000000001*m0[5]; 
  BigAEM(27,22) = 0.447213595499958*m0[3]; 
  BigAEM(27,23) = 0.4391550328268399*m0[9]+0.4*m0[6]+0.447213595499958*m0[2]; 
  BigAEM(27,24) = 0.4472135954999579*m0[7]; 
  BigAEM(27,25) = 0.31943828249997*m0[7]+0.5000000000000001*m0[1]; 
  BigAEM(27,26) = 0.4*m0[3]; 
  BigAEM(27,27) = 0.31943828249997*m0[5]+0.4472135954999579*m0[4]+0.5*m0[0]; 
  BigAEM(27,29) = 0.4391550328268399*m0[3]; 
  BigAEM(28,20) = 0.5*m0[8]; 
  BigAEM(28,21) = 0.4391550328268398*m0[4]; 
  BigAEM(28,23) = 0.4391550328268399*m0[6]; 
  BigAEM(28,24) = 0.2981423969999719*m0[8]+0.4391550328268398*m0[1]; 
  BigAEM(28,26) = 0.4391550328268399*m0[3]; 
  BigAEM(28,28) = 0.2981423969999719*m0[4]+0.5*m0[0]; 
  BigAEM(29,20) = 0.5*m0[9]; 
  BigAEM(29,22) = 0.4391550328268398*m0[5]; 
  BigAEM(29,23) = 0.4391550328268399*m0[7]; 
  BigAEM(29,25) = 0.2981423969999719*m0[9]+0.4391550328268398*m0[2]; 
  BigAEM(29,27) = 0.4391550328268399*m0[3]; 
  BigAEM(29,29) = 0.2981423969999719*m0[5]+0.5*m0[0]; 
 
  // ....... Block from correction to uZ .......... // 
  BigAEM(20,30) = -0.5*cM[20]; 
  BigAEM(20,31) = -0.5*cM[21]; 
  BigAEM(20,32) = -0.5*cM[22]; 
  BigAEM(20,33) = -0.5*cM[23]; 
  BigAEM(20,34) = -0.5*cM[24]; 
  BigAEM(20,35) = -0.5*cM[25]; 
  BigAEM(20,36) = -0.5*cM[26]; 
  BigAEM(20,37) = -0.5*cM[27]; 
  BigAEM(20,38) = -0.5*cM[28]; 
  BigAEM(20,39) = -0.5*cM[29]; 
  BigAEM(21,30) = -0.5*cM[21]; 
  BigAEM(21,31) = (-0.4472135954999579*cM[24])-0.5*cM[20]; 
  BigAEM(21,32) = -0.5*cM[23]; 
  BigAEM(21,33) = (-0.447213595499958*cM[26])-0.5*cM[22]; 
  BigAEM(21,34) = (-0.4391550328268398*cM[28])-0.4472135954999579*cM[21]; 
  BigAEM(21,35) = -0.5000000000000001*cM[27]; 
  BigAEM(21,36) = -0.447213595499958*cM[23]; 
  BigAEM(21,37) = -0.5000000000000001*cM[25]; 
  BigAEM(21,38) = -0.4391550328268398*cM[24]; 
  BigAEM(22,30) = -0.5*cM[22]; 
  BigAEM(22,31) = -0.5*cM[23]; 
  BigAEM(22,32) = (-0.4472135954999579*cM[25])-0.5*cM[20]; 
  BigAEM(22,33) = (-0.447213595499958*cM[27])-0.5*cM[21]; 
  BigAEM(22,34) = -0.5000000000000001*cM[26]; 
  BigAEM(22,35) = (-0.4391550328268398*cM[29])-0.4472135954999579*cM[22]; 
  BigAEM(22,36) = -0.5000000000000001*cM[24]; 
  BigAEM(22,37) = -0.447213595499958*cM[23]; 
  BigAEM(22,39) = -0.4391550328268398*cM[25]; 
  BigAEM(23,30) = -0.5*cM[23]; 
  BigAEM(23,31) = (-0.447213595499958*cM[26])-0.5*cM[22]; 
  BigAEM(23,32) = (-0.447213595499958*cM[27])-0.5*cM[21]; 
  BigAEM(23,33) = (-0.4472135954999579*cM[25])-0.4472135954999579*cM[24]-0.5*cM[20]; 
  BigAEM(23,34) = -0.4472135954999579*cM[23]; 
  BigAEM(23,35) = -0.4472135954999579*cM[23]; 
  BigAEM(23,36) = (-0.4391550328268399*cM[28])-0.4*cM[27]-0.447213595499958*cM[21]; 
  BigAEM(23,37) = (-0.4391550328268399*cM[29])-0.4*cM[26]-0.447213595499958*cM[22]; 
  BigAEM(23,38) = -0.4391550328268399*cM[26]; 
  BigAEM(23,39) = -0.4391550328268399*cM[27]; 
  BigAEM(24,30) = -0.5*cM[24]; 
  BigAEM(24,31) = (-0.4391550328268398*cM[28])-0.4472135954999579*cM[21]; 
  BigAEM(24,32) = -0.5000000000000001*cM[26]; 
  BigAEM(24,33) = -0.4472135954999579*cM[23]; 
  BigAEM(24,34) = (-0.31943828249997*cM[24])-0.5*cM[20]; 
  BigAEM(24,36) = (-0.31943828249997*cM[26])-0.5000000000000001*cM[22]; 
  BigAEM(24,37) = -0.4472135954999579*cM[27]; 
  BigAEM(24,38) = (-0.2981423969999719*cM[28])-0.4391550328268398*cM[21]; 
  BigAEM(25,30) = -0.5*cM[25]; 
  BigAEM(25,31) = -0.5000000000000001*cM[27]; 
  BigAEM(25,32) = (-0.4391550328268398*cM[29])-0.4472135954999579*cM[22]; 
  BigAEM(25,33) = -0.4472135954999579*cM[23]; 
  BigAEM(25,35) = (-0.31943828249997*cM[25])-0.5*cM[20]; 
  BigAEM(25,36) = -0.4472135954999579*cM[26]; 
  BigAEM(25,37) = (-0.31943828249997*cM[27])-0.5000000000000001*cM[21]; 
  BigAEM(25,39) = (-0.2981423969999719*cM[29])-0.4391550328268398*cM[22]; 
  BigAEM(26,30) = -0.5*cM[26]; 
  BigAEM(26,31) = -0.447213595499958*cM[23]; 
  BigAEM(26,32) = -0.5000000000000001*cM[24]; 
  BigAEM(26,33) = (-0.4391550328268399*cM[28])-0.4*cM[27]-0.447213595499958*cM[21]; 
  BigAEM(26,34) = (-0.31943828249997*cM[26])-0.5000000000000001*cM[22]; 
  BigAEM(26,35) = -0.4472135954999579*cM[26]; 
  BigAEM(26,36) = (-0.4472135954999579*cM[25])-0.31943828249997*cM[24]-0.5*cM[20]; 
  BigAEM(26,37) = -0.4*cM[23]; 
  BigAEM(26,38) = -0.4391550328268399*cM[23]; 
  BigAEM(27,30) = -0.5*cM[27]; 
  BigAEM(27,31) = -0.5000000000000001*cM[25]; 
  BigAEM(27,32) = -0.447213595499958*cM[23]; 
  BigAEM(27,33) = (-0.4391550328268399*cM[29])-0.4*cM[26]-0.447213595499958*cM[22]; 
  BigAEM(27,34) = -0.4472135954999579*cM[27]; 
  BigAEM(27,35) = (-0.31943828249997*cM[27])-0.5000000000000001*cM[21]; 
  BigAEM(27,36) = -0.4*cM[23]; 
  BigAEM(27,37) = (-0.31943828249997*cM[25])-0.4472135954999579*cM[24]-0.5*cM[20]; 
  BigAEM(27,39) = -0.4391550328268399*cM[23]; 
  BigAEM(28,30) = -0.5*cM[28]; 
  BigAEM(28,31) = -0.4391550328268398*cM[24]; 
  BigAEM(28,33) = -0.4391550328268399*cM[26]; 
  BigAEM(28,34) = (-0.2981423969999719*cM[28])-0.4391550328268398*cM[21]; 
  BigAEM(28,36) = -0.4391550328268399*cM[23]; 
  BigAEM(28,38) = (-0.2981423969999719*cM[24])-0.5*cM[20]; 
  BigAEM(29,30) = -0.5*cM[29]; 
  BigAEM(29,32) = -0.4391550328268398*cM[25]; 
  BigAEM(29,33) = -0.4391550328268399*cM[27]; 
  BigAEM(29,35) = (-0.2981423969999719*cM[29])-0.4391550328268398*cM[22]; 
  BigAEM(29,37) = -0.4391550328268399*cM[23]; 
  BigAEM(29,39) = (-0.2981423969999719*cM[25])-0.5*cM[20]; 
 
  // ....... Block from weak multiply of uZ and m1Z  .......... // 
  BigAEM(30,20) = 0.5*m1[20]; 
  BigAEM(30,21) = 0.5*m1[21]; 
  BigAEM(30,22) = 0.5*m1[22]; 
  BigAEM(30,23) = 0.5*m1[23]; 
  BigAEM(30,24) = 0.5*m1[24]; 
  BigAEM(30,25) = 0.5*m1[25]; 
  BigAEM(30,26) = 0.5*m1[26]; 
  BigAEM(30,27) = 0.5*m1[27]; 
  BigAEM(30,28) = 0.5*m1[28]; 
  BigAEM(30,29) = 0.5*m1[29]; 
  BigAEM(31,20) = 0.5*m1[21]; 
  BigAEM(31,21) = 0.4472135954999579*m1[24]+0.5*m1[20]; 
  BigAEM(31,22) = 0.5*m1[23]; 
  BigAEM(31,23) = 0.447213595499958*m1[26]+0.5*m1[22]; 
  BigAEM(31,24) = 0.4391550328268398*m1[28]+0.4472135954999579*m1[21]; 
  BigAEM(31,25) = 0.5000000000000001*m1[27]; 
  BigAEM(31,26) = 0.447213595499958*m1[23]; 
  BigAEM(31,27) = 0.5000000000000001*m1[25]; 
  BigAEM(31,28) = 0.4391550328268398*m1[24]; 
  BigAEM(32,20) = 0.5*m1[22]; 
  BigAEM(32,21) = 0.5*m1[23]; 
  BigAEM(32,22) = 0.4472135954999579*m1[25]+0.5*m1[20]; 
  BigAEM(32,23) = 0.447213595499958*m1[27]+0.5*m1[21]; 
  BigAEM(32,24) = 0.5000000000000001*m1[26]; 
  BigAEM(32,25) = 0.4391550328268398*m1[29]+0.4472135954999579*m1[22]; 
  BigAEM(32,26) = 0.5000000000000001*m1[24]; 
  BigAEM(32,27) = 0.447213595499958*m1[23]; 
  BigAEM(32,29) = 0.4391550328268398*m1[25]; 
  BigAEM(33,20) = 0.5*m1[23]; 
  BigAEM(33,21) = 0.447213595499958*m1[26]+0.5*m1[22]; 
  BigAEM(33,22) = 0.447213595499958*m1[27]+0.5*m1[21]; 
  BigAEM(33,23) = 0.4472135954999579*m1[25]+0.4472135954999579*m1[24]+0.5*m1[20]; 
  BigAEM(33,24) = 0.4472135954999579*m1[23]; 
  BigAEM(33,25) = 0.4472135954999579*m1[23]; 
  BigAEM(33,26) = 0.4391550328268399*m1[28]+0.4*m1[27]+0.447213595499958*m1[21]; 
  BigAEM(33,27) = 0.4391550328268399*m1[29]+0.4*m1[26]+0.447213595499958*m1[22]; 
  BigAEM(33,28) = 0.4391550328268399*m1[26]; 
  BigAEM(33,29) = 0.4391550328268399*m1[27]; 
  BigAEM(34,20) = 0.5*m1[24]; 
  BigAEM(34,21) = 0.4391550328268398*m1[28]+0.4472135954999579*m1[21]; 
  BigAEM(34,22) = 0.5000000000000001*m1[26]; 
  BigAEM(34,23) = 0.4472135954999579*m1[23]; 
  BigAEM(34,24) = 0.31943828249997*m1[24]+0.5*m1[20]; 
  BigAEM(34,26) = 0.31943828249997*m1[26]+0.5000000000000001*m1[22]; 
  BigAEM(34,27) = 0.4472135954999579*m1[27]; 
  BigAEM(34,28) = 0.2981423969999719*m1[28]+0.4391550328268398*m1[21]; 
  BigAEM(35,20) = 0.5*m1[25]; 
  BigAEM(35,21) = 0.5000000000000001*m1[27]; 
  BigAEM(35,22) = 0.4391550328268398*m1[29]+0.4472135954999579*m1[22]; 
  BigAEM(35,23) = 0.4472135954999579*m1[23]; 
  BigAEM(35,25) = 0.31943828249997*m1[25]+0.5*m1[20]; 
  BigAEM(35,26) = 0.4472135954999579*m1[26]; 
  BigAEM(35,27) = 0.31943828249997*m1[27]+0.5000000000000001*m1[21]; 
  BigAEM(35,29) = 0.2981423969999719*m1[29]+0.4391550328268398*m1[22]; 
  BigAEM(36,20) = 0.5*m1[26]; 
  BigAEM(36,21) = 0.447213595499958*m1[23]; 
  BigAEM(36,22) = 0.5000000000000001*m1[24]; 
  BigAEM(36,23) = 0.4391550328268399*m1[28]+0.4*m1[27]+0.447213595499958*m1[21]; 
  BigAEM(36,24) = 0.31943828249997*m1[26]+0.5000000000000001*m1[22]; 
  BigAEM(36,25) = 0.4472135954999579*m1[26]; 
  BigAEM(36,26) = 0.4472135954999579*m1[25]+0.31943828249997*m1[24]+0.5*m1[20]; 
  BigAEM(36,27) = 0.4*m1[23]; 
  BigAEM(36,28) = 0.4391550328268399*m1[23]; 
  BigAEM(37,20) = 0.5*m1[27]; 
  BigAEM(37,21) = 0.5000000000000001*m1[25]; 
  BigAEM(37,22) = 0.447213595499958*m1[23]; 
  BigAEM(37,23) = 0.4391550328268399*m1[29]+0.4*m1[26]+0.447213595499958*m1[22]; 
  BigAEM(37,24) = 0.4472135954999579*m1[27]; 
  BigAEM(37,25) = 0.31943828249997*m1[27]+0.5000000000000001*m1[21]; 
  BigAEM(37,26) = 0.4*m1[23]; 
  BigAEM(37,27) = 0.31943828249997*m1[25]+0.4472135954999579*m1[24]+0.5*m1[20]; 
  BigAEM(37,29) = 0.4391550328268399*m1[23]; 
  BigAEM(38,20) = 0.5*m1[28]; 
  BigAEM(38,21) = 0.4391550328268398*m1[24]; 
  BigAEM(38,23) = 0.4391550328268399*m1[26]; 
  BigAEM(38,24) = 0.2981423969999719*m1[28]+0.4391550328268398*m1[21]; 
  BigAEM(38,26) = 0.4391550328268399*m1[23]; 
  BigAEM(38,28) = 0.2981423969999719*m1[24]+0.5*m1[20]; 
  BigAEM(39,20) = 0.5*m1[29]; 
  BigAEM(39,22) = 0.4391550328268398*m1[25]; 
  BigAEM(39,23) = 0.4391550328268399*m1[27]; 
  BigAEM(39,25) = 0.2981423969999719*m1[29]+0.4391550328268398*m1[22]; 
  BigAEM(39,27) = 0.4391550328268399*m1[23]; 
  BigAEM(39,29) = 0.2981423969999719*m1[25]+0.5*m1[20]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(30,30) = 0.5*m0[0]*pVdim-0.5*cE[0]; 
  BigAEM(30,31) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(30,32) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(30,33) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(30,34) = 0.5*m0[4]*pVdim-0.5*cE[4]; 
  BigAEM(30,35) = 0.5*m0[5]*pVdim-0.5*cE[5]; 
  BigAEM(30,36) = 0.5*m0[6]*pVdim-0.5*cE[6]; 
  BigAEM(30,37) = 0.5*m0[7]*pVdim-0.5*cE[7]; 
  BigAEM(30,38) = 0.5*m0[8]*pVdim-0.5*cE[8]; 
  BigAEM(30,39) = 0.5*m0[9]*pVdim-0.5*cE[9]; 
  BigAEM(31,30) = 0.5*m0[1]*pVdim-0.5*cE[1]; 
  BigAEM(31,31) = 0.4472135954999579*m0[4]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(31,32) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(31,33) = 0.447213595499958*m0[6]*pVdim+0.5*m0[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(31,34) = 0.4391550328268398*m0[8]*pVdim+0.4472135954999579*m0[1]*pVdim-0.4391550328268398*cE[8]-0.4472135954999579*cE[1]; 
  BigAEM(31,35) = 0.5000000000000001*m0[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(31,36) = 0.447213595499958*m0[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(31,37) = 0.5000000000000001*m0[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(31,38) = 0.4391550328268398*m0[4]*pVdim-0.4391550328268398*cE[4]; 
  BigAEM(32,30) = 0.5*m0[2]*pVdim-0.5*cE[2]; 
  BigAEM(32,31) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(32,32) = 0.4472135954999579*m0[5]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[5]-0.5*cE[0]; 
  BigAEM(32,33) = 0.447213595499958*m0[7]*pVdim+0.5*m0[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(32,34) = 0.5000000000000001*m0[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(32,35) = 0.4391550328268398*m0[9]*pVdim+0.4472135954999579*m0[2]*pVdim-0.4391550328268398*cE[9]-0.4472135954999579*cE[2]; 
  BigAEM(32,36) = 0.5000000000000001*m0[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(32,37) = 0.447213595499958*m0[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(32,39) = 0.4391550328268398*m0[5]*pVdim-0.4391550328268398*cE[5]; 
  BigAEM(33,30) = 0.5*m0[3]*pVdim-0.5*cE[3]; 
  BigAEM(33,31) = 0.447213595499958*m0[6]*pVdim+0.5*m0[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(33,32) = 0.447213595499958*m0[7]*pVdim+0.5*m0[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(33,33) = 0.4472135954999579*m0[5]*pVdim+0.4472135954999579*m0[4]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(33,34) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(33,35) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(33,36) = 0.4391550328268399*m0[8]*pVdim+0.4*m0[7]*pVdim+0.447213595499958*m0[1]*pVdim-0.4391550328268399*cE[8]-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(33,37) = 0.4391550328268399*m0[9]*pVdim+0.4*m0[6]*pVdim+0.447213595499958*m0[2]*pVdim-0.4391550328268399*cE[9]-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(33,38) = 0.4391550328268399*m0[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(33,39) = 0.4391550328268399*m0[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(34,30) = 0.5*m0[4]*pVdim-0.5*cE[4]; 
  BigAEM(34,31) = 0.4391550328268398*m0[8]*pVdim+0.4472135954999579*m0[1]*pVdim-0.4391550328268398*cE[8]-0.4472135954999579*cE[1]; 
  BigAEM(34,32) = 0.5000000000000001*m0[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(34,33) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(34,34) = 0.31943828249997*m0[4]*pVdim+0.5*m0[0]*pVdim-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(34,36) = 0.31943828249997*m0[6]*pVdim+0.5000000000000001*m0[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(34,37) = 0.4472135954999579*m0[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(34,38) = 0.2981423969999719*m0[8]*pVdim+0.4391550328268398*m0[1]*pVdim-0.2981423969999719*cE[8]-0.4391550328268398*cE[1]; 
  BigAEM(35,30) = 0.5*m0[5]*pVdim-0.5*cE[5]; 
  BigAEM(35,31) = 0.5000000000000001*m0[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(35,32) = 0.4391550328268398*m0[9]*pVdim+0.4472135954999579*m0[2]*pVdim-0.4391550328268398*cE[9]-0.4472135954999579*cE[2]; 
  BigAEM(35,33) = 0.4472135954999579*m0[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(35,35) = 0.31943828249997*m0[5]*pVdim+0.5*m0[0]*pVdim-0.31943828249997*cE[5]-0.5*cE[0]; 
  BigAEM(35,36) = 0.4472135954999579*m0[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(35,37) = 0.31943828249997*m0[7]*pVdim+0.5000000000000001*m0[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(35,39) = 0.2981423969999719*m0[9]*pVdim+0.4391550328268398*m0[2]*pVdim-0.2981423969999719*cE[9]-0.4391550328268398*cE[2]; 
  BigAEM(36,30) = 0.5*m0[6]*pVdim-0.5*cE[6]; 
  BigAEM(36,31) = 0.447213595499958*m0[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(36,32) = 0.5000000000000001*m0[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(36,33) = 0.4391550328268399*m0[8]*pVdim+0.4*m0[7]*pVdim+0.447213595499958*m0[1]*pVdim-0.4391550328268399*cE[8]-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(36,34) = 0.31943828249997*m0[6]*pVdim+0.5000000000000001*m0[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(36,35) = 0.4472135954999579*m0[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(36,36) = 0.4472135954999579*m0[5]*pVdim+0.31943828249997*m0[4]*pVdim+0.5*m0[0]*pVdim-0.4472135954999579*cE[5]-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(36,37) = 0.4*m0[3]*pVdim-0.4*cE[3]; 
  BigAEM(36,38) = 0.4391550328268399*m0[3]*pVdim-0.4391550328268399*cE[3]; 
  BigAEM(37,30) = 0.5*m0[7]*pVdim-0.5*cE[7]; 
  BigAEM(37,31) = 0.5000000000000001*m0[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(37,32) = 0.447213595499958*m0[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(37,33) = 0.4391550328268399*m0[9]*pVdim+0.4*m0[6]*pVdim+0.447213595499958*m0[2]*pVdim-0.4391550328268399*cE[9]-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(37,34) = 0.4472135954999579*m0[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(37,35) = 0.31943828249997*m0[7]*pVdim+0.5000000000000001*m0[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(37,36) = 0.4*m0[3]*pVdim-0.4*cE[3]; 
  BigAEM(37,37) = 0.31943828249997*m0[5]*pVdim+0.4472135954999579*m0[4]*pVdim+0.5*m0[0]*pVdim-0.31943828249997*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(37,39) = 0.4391550328268399*m0[3]*pVdim-0.4391550328268399*cE[3]; 
  BigAEM(38,30) = 0.5*m0[8]*pVdim-0.5*cE[8]; 
  BigAEM(38,31) = 0.4391550328268398*m0[4]*pVdim-0.4391550328268398*cE[4]; 
  BigAEM(38,33) = 0.4391550328268399*m0[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(38,34) = 0.2981423969999719*m0[8]*pVdim+0.4391550328268398*m0[1]*pVdim-0.2981423969999719*cE[8]-0.4391550328268398*cE[1]; 
  BigAEM(38,36) = 0.4391550328268399*m0[3]*pVdim-0.4391550328268399*cE[3]; 
  BigAEM(38,38) = 0.2981423969999719*m0[4]*pVdim+0.5*m0[0]*pVdim-0.2981423969999719*cE[4]-0.5*cE[0]; 
  BigAEM(39,30) = 0.5*m0[9]*pVdim-0.5*cE[9]; 
  BigAEM(39,32) = 0.4391550328268398*m0[5]*pVdim-0.4391550328268398*cE[5]; 
  BigAEM(39,33) = 0.4391550328268399*m0[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(39,35) = 0.2981423969999719*m0[9]*pVdim+0.4391550328268398*m0[2]*pVdim-0.2981423969999719*cE[9]-0.4391550328268398*cE[2]; 
  BigAEM(39,37) = 0.4391550328268399*m0[3]*pVdim-0.4391550328268399*cE[3]; 
  BigAEM(39,39) = 0.2981423969999719*m0[5]*pVdim+0.5*m0[0]*pVdim-0.2981423969999719*cE[5]-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<10,20>(0,10).setZero(); 
  BigAEM.block<20,10>(10,0).setZero(); 
  BigAEM.block<10,10>(10,20).setZero(); 
  BigAEM.block<10,10>(20,10).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m1[12],m1[13],m1[14],m1[15],m1[16],m1[17],m1[18],m1[19],m1[20],m1[21],m1[22],m1[23],m1[24],m1[25],m1[26],m1[27],m1[28],m1[29],m2[0],m2[1],m2[2],m2[3],m2[4],m2[5],m2[6],m2[7],m2[8],m2[9]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,30,1) = xEV.segment<30>(0); 
 
  Eigen::Map<VectorXd>(vtSq,10,1) = xEV.segment<10>(30); 
 
} 
 
void BoundaryIntegral2x3vMax_F_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += (2.449489742783178*fvmin[3]*dS+2.449489742783178*fvmax[3]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[1] += (1.414213562373095*fvmax[1]*dS-1.414213562373095*fvmin[1]*dS)*intFac; 
  out[2] += (1.414213562373095*fvmax[2]*dS-1.414213562373095*fvmin[2]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += ((-3.16227766016838*fvmin[18]*dS)+3.16227766016838*fvmax[18]*dS+2.449489742783178*fvmin[3]*dS+2.449489742783178*fvmax[3]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[1] += (2.449489742783178*fvmin[7]*dS+2.449489742783178*fvmax[7]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[2] += (2.449489742783178*fvmin[8]*dS+2.449489742783178*fvmax[8]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[3] += (1.414213562373095*fvmax[6]*dS-1.414213562373095*fvmin[6]*dS)*intFac; 
  out[4] += (1.414213562373095*fvmax[16]*dS-1.414213562373095*fvmin[16]*dS)*intFac; 
  out[5] += (1.414213562373095*fvmax[17]*dS-1.414213562373095*fvmin[17]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VX_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += (3.741657386773942*fvmin[53]*dS+3.741657386773942*fvmax[53]*dS-3.16227766016838*fvmin[18]*dS+3.16227766016838*fvmax[18]*dS+2.449489742783178*fvmin[3]*dS+2.449489742783178*fvmax[3]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[1] += ((-3.16227766016838*fvmin[35]*dS)+3.16227766016838*fvmax[35]*dS+2.449489742783178*fvmin[7]*dS+2.449489742783178*fvmax[7]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[2] += ((-3.16227766016838*fvmin[36]*dS)+3.16227766016838*fvmax[36]*dS+2.449489742783178*fvmin[8]*dS+2.449489742783178*fvmax[8]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[3] += (2.449489742783178*fvmin[21]*dS+2.449489742783178*fvmax[21]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[4] += (2.449489742783178*fvmin[33]*dS+2.449489742783178*fvmax[33]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[5] += (2.449489742783178*fvmin[34]*dS+2.449489742783178*fvmax[34]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[6] += (1.414213562373095*fvmax[31]*dS-1.414213562373095*fvmin[31]*dS)*intFac; 
  out[7] += (1.414213562373095*fvmax[32]*dS-1.414213562373095*fvmin[32]*dS)*intFac; 
  out[8] += (1.414213562373095*fvmax[51]*dS-1.414213562373095*fvmin[51]*dS)*intFac; 
  out[9] += (1.414213562373095*fvmax[52]*dS-1.414213562373095*fvmin[52]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[3]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[3]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(1.414213562373095*fvmax[1]*dS*vmax-1.414213562373095*fvmin[1]*dS*vmin); 
  out[2] += intFac*(1.414213562373095*fvmax[2]*dS*vmax-1.414213562373095*fvmin[2]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[18]*dS*vmin)+2.449489742783178*fvmin[3]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[18]*dS*vmax+2.449489742783178*fvmax[3]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[7]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[7]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[8]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[8]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(1.414213562373095*fvmax[6]*dS*vmax-1.414213562373095*fvmin[6]*dS*vmin); 
  out[4] += intFac*(1.414213562373095*fvmax[16]*dS*vmax-1.414213562373095*fvmin[16]*dS*vmin); 
  out[5] += intFac*(1.414213562373095*fvmax[17]*dS*vmax-1.414213562373095*fvmin[17]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VX_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[3]*dxv[4]; 
 
  out[0] += intFac*(3.741657386773942*fvmin[53]*dS*vmin-3.16227766016838*fvmin[18]*dS*vmin+2.449489742783178*fvmin[3]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.741657386773942*fvmax[53]*dS*vmax+3.16227766016838*fvmax[18]*dS*vmax+2.449489742783178*fvmax[3]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[35]*dS*vmin)+2.449489742783178*fvmin[7]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[35]*dS*vmax+2.449489742783178*fvmax[7]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[36]*dS*vmin)+2.449489742783178*fvmin[8]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[36]*dS*vmax+2.449489742783178*fvmax[8]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[21]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[21]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[33]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[33]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[34]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[34]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(1.414213562373095*fvmax[31]*dS*vmax-1.414213562373095*fvmin[31]*dS*vmin); 
  out[7] += intFac*(1.414213562373095*fvmax[32]*dS*vmax-1.414213562373095*fvmin[32]*dS*vmin); 
  out[8] += intFac*(1.414213562373095*fvmax[51]*dS*vmax-1.414213562373095*fvmin[51]*dS*vmin); 
  out[9] += intFac*(1.414213562373095*fvmax[52]*dS*vmax-1.414213562373095*fvmin[52]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_F_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[3] += (2.449489742783178*fvmin[4]*dS+2.449489742783178*fvmax[4]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[4] += (1.414213562373095*fvmax[1]*dS-1.414213562373095*fvmin[1]*dS)*intFac; 
  out[5] += (1.414213562373095*fvmax[2]*dS-1.414213562373095*fvmin[2]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[6] += ((-3.16227766016838*fvmin[19]*dS)+3.16227766016838*fvmax[19]*dS+2.449489742783178*fvmin[4]*dS+2.449489742783178*fvmax[4]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[7] += (2.449489742783178*fvmin[9]*dS+2.449489742783178*fvmax[9]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[8] += (2.449489742783178*fvmin[10]*dS+2.449489742783178*fvmax[10]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[9] += (1.414213562373095*fvmax[6]*dS-1.414213562373095*fvmin[6]*dS)*intFac; 
  out[10] += (1.414213562373095*fvmax[16]*dS-1.414213562373095*fvmin[16]*dS)*intFac; 
  out[11] += (1.414213562373095*fvmax[17]*dS-1.414213562373095*fvmin[17]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VY_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[10] += (3.741657386773942*fvmin[54]*dS+3.741657386773942*fvmax[54]*dS-3.16227766016838*fvmin[19]*dS+3.16227766016838*fvmax[19]*dS+2.449489742783178*fvmin[4]*dS+2.449489742783178*fvmax[4]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[11] += ((-3.16227766016838*fvmin[40]*dS)+3.16227766016838*fvmax[40]*dS+2.449489742783178*fvmin[9]*dS+2.449489742783178*fvmax[9]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[12] += ((-3.16227766016838*fvmin[41]*dS)+3.16227766016838*fvmax[41]*dS+2.449489742783178*fvmin[10]*dS+2.449489742783178*fvmax[10]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[13] += (2.449489742783178*fvmin[22]*dS+2.449489742783178*fvmax[22]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[14] += (2.449489742783178*fvmin[37]*dS+2.449489742783178*fvmax[37]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[15] += (2.449489742783178*fvmin[38]*dS+2.449489742783178*fvmax[38]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[16] += (1.414213562373095*fvmax[31]*dS-1.414213562373095*fvmin[31]*dS)*intFac; 
  out[17] += (1.414213562373095*fvmax[32]*dS-1.414213562373095*fvmin[32]*dS)*intFac; 
  out[18] += (1.414213562373095*fvmax[51]*dS-1.414213562373095*fvmin[51]*dS)*intFac; 
  out[19] += (1.414213562373095*fvmax[52]*dS-1.414213562373095*fvmin[52]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[4]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[4]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(1.414213562373095*fvmax[1]*dS*vmax-1.414213562373095*fvmin[1]*dS*vmin); 
  out[2] += intFac*(1.414213562373095*fvmax[2]*dS*vmax-1.414213562373095*fvmin[2]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[19]*dS*vmin)+2.449489742783178*fvmin[4]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[19]*dS*vmax+2.449489742783178*fvmax[4]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[9]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[9]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[10]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[10]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(1.414213562373095*fvmax[6]*dS*vmax-1.414213562373095*fvmin[6]*dS*vmin); 
  out[4] += intFac*(1.414213562373095*fvmax[16]*dS*vmax-1.414213562373095*fvmin[16]*dS*vmin); 
  out[5] += intFac*(1.414213562373095*fvmax[17]*dS*vmax-1.414213562373095*fvmin[17]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VY_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[4]; 
 
  out[0] += intFac*(3.741657386773942*fvmin[54]*dS*vmin-3.16227766016838*fvmin[19]*dS*vmin+2.449489742783178*fvmin[4]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.741657386773942*fvmax[54]*dS*vmax+3.16227766016838*fvmax[19]*dS*vmax+2.449489742783178*fvmax[4]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[40]*dS*vmin)+2.449489742783178*fvmin[9]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[40]*dS*vmax+2.449489742783178*fvmax[9]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[41]*dS*vmin)+2.449489742783178*fvmin[10]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[41]*dS*vmax+2.449489742783178*fvmax[10]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[22]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[22]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[37]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[37]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[38]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[38]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(1.414213562373095*fvmax[31]*dS*vmax-1.414213562373095*fvmin[31]*dS*vmin); 
  out[7] += intFac*(1.414213562373095*fvmax[32]*dS*vmax-1.414213562373095*fvmin[32]*dS*vmin); 
  out[8] += intFac*(1.414213562373095*fvmax[51]*dS*vmax-1.414213562373095*fvmin[51]*dS*vmin); 
  out[9] += intFac*(1.414213562373095*fvmax[52]*dS*vmax-1.414213562373095*fvmin[52]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_F_VZ_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[6] += (2.449489742783178*fvmin[5]*dS+2.449489742783178*fvmax[5]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[7] += (1.414213562373095*fvmax[1]*dS-1.414213562373095*fvmin[1]*dS)*intFac; 
  out[8] += (1.414213562373095*fvmax[2]*dS-1.414213562373095*fvmin[2]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VZ_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[12] += ((-3.16227766016838*fvmin[20]*dS)+3.16227766016838*fvmax[20]*dS+2.449489742783178*fvmin[5]*dS+2.449489742783178*fvmax[5]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[13] += (2.449489742783178*fvmin[12]*dS+2.449489742783178*fvmax[12]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[14] += (2.449489742783178*fvmin[13]*dS+2.449489742783178*fvmax[13]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[15] += (1.414213562373095*fvmax[6]*dS-1.414213562373095*fvmin[6]*dS)*intFac; 
  out[16] += (1.414213562373095*fvmax[16]*dS-1.414213562373095*fvmin[16]*dS)*intFac; 
  out[17] += (1.414213562373095*fvmax[17]*dS-1.414213562373095*fvmin[17]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_F_VZ_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[20] += (3.741657386773942*fvmin[55]*dS+3.741657386773942*fvmax[55]*dS-3.16227766016838*fvmin[20]*dS+3.16227766016838*fvmax[20]*dS+2.449489742783178*fvmin[5]*dS+2.449489742783178*fvmax[5]*dS-1.414213562373095*fvmin[0]*dS+1.414213562373095*fvmax[0]*dS)*intFac; 
  out[21] += ((-3.16227766016838*fvmin[47]*dS)+3.16227766016838*fvmax[47]*dS+2.449489742783178*fvmin[12]*dS+2.449489742783178*fvmax[12]*dS-1.414213562373095*fvmin[1]*dS+1.414213562373095*fvmax[1]*dS)*intFac; 
  out[22] += ((-3.16227766016838*fvmin[48]*dS)+3.16227766016838*fvmax[48]*dS+2.449489742783178*fvmin[13]*dS+2.449489742783178*fvmax[13]*dS-1.414213562373095*fvmin[2]*dS+1.414213562373095*fvmax[2]*dS)*intFac; 
  out[23] += (2.449489742783178*fvmin[25]*dS+2.449489742783178*fvmax[25]*dS-1.414213562373095*fvmin[6]*dS+1.414213562373095*fvmax[6]*dS)*intFac; 
  out[24] += (2.449489742783178*fvmin[43]*dS+2.449489742783178*fvmax[43]*dS-1.414213562373095*fvmin[16]*dS+1.414213562373095*fvmax[16]*dS)*intFac; 
  out[25] += (2.449489742783178*fvmin[44]*dS+2.449489742783178*fvmax[44]*dS-1.414213562373095*fvmin[17]*dS+1.414213562373095*fvmax[17]*dS)*intFac; 
  out[26] += (1.414213562373095*fvmax[31]*dS-1.414213562373095*fvmin[31]*dS)*intFac; 
  out[27] += (1.414213562373095*fvmax[32]*dS-1.414213562373095*fvmin[32]*dS)*intFac; 
  out[28] += (1.414213562373095*fvmax[51]*dS-1.414213562373095*fvmin[51]*dS)*intFac; 
  out[29] += (1.414213562373095*fvmax[52]*dS-1.414213562373095*fvmin[52]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VZ_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[6], fvmin[6]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[0] += intFac*(2.449489742783178*fvmin[5]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+2.449489742783178*fvmax[5]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(1.414213562373095*fvmax[1]*dS*vmax-1.414213562373095*fvmin[1]*dS*vmin); 
  out[2] += intFac*(1.414213562373095*fvmax[2]*dS*vmax-1.414213562373095*fvmin[2]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VZ_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[21], fvmin[21]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[0] += intFac*((-3.16227766016838*fvmin[20]*dS*vmin)+2.449489742783178*fvmin[5]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.16227766016838*fvmax[20]*dS*vmax+2.449489742783178*fvmax[5]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.449489742783178*fvmin[12]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+2.449489742783178*fvmax[12]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.449489742783178*fvmin[13]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+2.449489742783178*fvmax[13]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(1.414213562373095*fvmax[6]*dS*vmax-1.414213562373095*fvmin[6]*dS*vmin); 
  out[4] += intFac*(1.414213562373095*fvmax[16]*dS*vmax-1.414213562373095*fvmin[16]*dS*vmin); 
  out[5] += intFac*(1.414213562373095*fvmax[17]*dS*vmax-1.414213562373095*fvmin[17]*dS*vmin); 
 
} 
 
void BoundaryIntegral2x3vMax_vF_VZ_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[5]:             cell length in each direciton. 
  // fvmax[56], fvmin[56]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.25*dxv[2]*dxv[3]; 
 
  out[0] += intFac*(3.741657386773942*fvmin[55]*dS*vmin-3.16227766016838*fvmin[20]*dS*vmin+2.449489742783178*fvmin[5]*dS*vmin-1.414213562373095*fvmin[0]*dS*vmin+3.741657386773942*fvmax[55]*dS*vmax+3.16227766016838*fvmax[20]*dS*vmax+2.449489742783178*fvmax[5]*dS*vmax+1.414213562373095*fvmax[0]*dS*vmax); 
  out[1] += intFac*((-3.16227766016838*fvmin[47]*dS*vmin)+2.449489742783178*fvmin[12]*dS*vmin-1.414213562373095*fvmin[1]*dS*vmin+3.16227766016838*fvmax[47]*dS*vmax+2.449489742783178*fvmax[12]*dS*vmax+1.414213562373095*fvmax[1]*dS*vmax); 
  out[2] += intFac*((-3.16227766016838*fvmin[48]*dS*vmin)+2.449489742783178*fvmin[13]*dS*vmin-1.414213562373095*fvmin[2]*dS*vmin+3.16227766016838*fvmax[48]*dS*vmax+2.449489742783178*fvmax[13]*dS*vmax+1.414213562373095*fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.449489742783178*fvmin[25]*dS*vmin-1.414213562373095*fvmin[6]*dS*vmin+2.449489742783178*fvmax[25]*dS*vmax+1.414213562373095*fvmax[6]*dS*vmax); 
  out[4] += intFac*(2.449489742783178*fvmin[43]*dS*vmin-1.414213562373095*fvmin[16]*dS*vmin+2.449489742783178*fvmax[43]*dS*vmax+1.414213562373095*fvmax[16]*dS*vmax); 
  out[5] += intFac*(2.449489742783178*fvmin[44]*dS*vmin-1.414213562373095*fvmin[17]*dS*vmin+2.449489742783178*fvmax[44]*dS*vmax+1.414213562373095*fvmax[17]*dS*vmax); 
  out[6] += intFac*(1.414213562373095*fvmax[31]*dS*vmax-1.414213562373095*fvmin[31]*dS*vmin); 
  out[7] += intFac*(1.414213562373095*fvmax[32]*dS*vmax-1.414213562373095*fvmin[32]*dS*vmin); 
  out[8] += intFac*(1.414213562373095*fvmax[51]*dS*vmax-1.414213562373095*fvmin[51]*dS*vmin); 
  out[9] += intFac*(1.414213562373095*fvmax[52]*dS*vmax-1.414213562373095*fvmin[52]*dS*vmin); 
 
} 
 
