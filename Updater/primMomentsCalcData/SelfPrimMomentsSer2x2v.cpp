#include <math.h> 
#include <PrimMomentsModDecl.h> 
 
using namespace Eigen; 
 
void SelfPrimMoments2x2vSer_P1(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // If a corner value is below zero, use cell average m0.
  bool m0Avg = false;
  if (1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.5*m0[3])-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.5*m0[3])-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
 
  double m0s[4]; 
  if (m0Avg) { 
    m0s[0] = m0[0]; 
    m0s[1] = 0.0; 
    m0s[2] = 0.0; 
    m0s[3] = 0.0; 
  } else { 
    m0s[0] = m0[0]; 
    m0s[1] = m0[1]; 
    m0s[2] = m0[2]; 
    m0s[3] = m0[3]; 
  } 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(12,12); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(12);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(12);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0s[0]; 
  BigAEM(0,1) = 0.5*m0s[1]; 
  BigAEM(0,2) = 0.5*m0s[2]; 
  BigAEM(0,3) = 0.5*m0s[3]; 
  BigAEM(1,0) = 0.5*m0s[1]; 
  BigAEM(1,1) = 0.5*m0s[0]; 
  BigAEM(1,2) = 0.5*m0s[3]; 
  BigAEM(1,3) = 0.5*m0s[2]; 
  BigAEM(2,0) = 0.5*m0s[2]; 
  BigAEM(2,1) = 0.5*m0s[3]; 
  BigAEM(2,2) = 0.5*m0s[0]; 
  BigAEM(2,3) = 0.5*m0s[1]; 
  BigAEM(3,0) = 0.5*m0s[3]; 
  BigAEM(3,1) = 0.5*m0s[2]; 
  BigAEM(3,2) = 0.5*m0s[1]; 
  BigAEM(3,3) = 0.5*m0s[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,8) = -0.5*cM[0]; 
  BigAEM(0,9) = -0.5*cM[1]; 
  BigAEM(0,10) = -0.5*cM[2]; 
  BigAEM(0,11) = -0.5*cM[3]; 
  BigAEM(1,8) = -0.5*cM[1]; 
  BigAEM(1,9) = -0.5*cM[0]; 
  BigAEM(1,10) = -0.5*cM[3]; 
  BigAEM(1,11) = -0.5*cM[2]; 
  BigAEM(2,8) = -0.5*cM[2]; 
  BigAEM(2,9) = -0.5*cM[3]; 
  BigAEM(2,10) = -0.5*cM[0]; 
  BigAEM(2,11) = -0.5*cM[1]; 
  BigAEM(3,8) = -0.5*cM[3]; 
  BigAEM(3,9) = -0.5*cM[2]; 
  BigAEM(3,10) = -0.5*cM[1]; 
  BigAEM(3,11) = -0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(8,0) = 0.5*m1[0]; 
  BigAEM(8,1) = 0.5*m1[1]; 
  BigAEM(8,2) = 0.5*m1[2]; 
  BigAEM(8,3) = 0.5*m1[3]; 
  BigAEM(9,0) = 0.5*m1[1]; 
  BigAEM(9,1) = 0.5*m1[0]; 
  BigAEM(9,2) = 0.5*m1[3]; 
  BigAEM(9,3) = 0.5*m1[2]; 
  BigAEM(10,0) = 0.5*m1[2]; 
  BigAEM(10,1) = 0.5*m1[3]; 
  BigAEM(10,2) = 0.5*m1[0]; 
  BigAEM(10,3) = 0.5*m1[1]; 
  BigAEM(11,0) = 0.5*m1[3]; 
  BigAEM(11,1) = 0.5*m1[2]; 
  BigAEM(11,2) = 0.5*m1[1]; 
  BigAEM(11,3) = 0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(4,4) = 0.5*m0s[0]; 
  BigAEM(4,5) = 0.5*m0s[1]; 
  BigAEM(4,6) = 0.5*m0s[2]; 
  BigAEM(4,7) = 0.5*m0s[3]; 
  BigAEM(5,4) = 0.5*m0s[1]; 
  BigAEM(5,5) = 0.5*m0s[0]; 
  BigAEM(5,6) = 0.5*m0s[3]; 
  BigAEM(5,7) = 0.5*m0s[2]; 
  BigAEM(6,4) = 0.5*m0s[2]; 
  BigAEM(6,5) = 0.5*m0s[3]; 
  BigAEM(6,6) = 0.5*m0s[0]; 
  BigAEM(6,7) = 0.5*m0s[1]; 
  BigAEM(7,4) = 0.5*m0s[3]; 
  BigAEM(7,5) = 0.5*m0s[2]; 
  BigAEM(7,6) = 0.5*m0s[1]; 
  BigAEM(7,7) = 0.5*m0s[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(4,8) = -0.5*cM[4]; 
  BigAEM(4,9) = -0.5*cM[5]; 
  BigAEM(4,10) = -0.5*cM[6]; 
  BigAEM(4,11) = -0.5*cM[7]; 
  BigAEM(5,8) = -0.5*cM[5]; 
  BigAEM(5,9) = -0.5*cM[4]; 
  BigAEM(5,10) = -0.5*cM[7]; 
  BigAEM(5,11) = -0.5*cM[6]; 
  BigAEM(6,8) = -0.5*cM[6]; 
  BigAEM(6,9) = -0.5*cM[7]; 
  BigAEM(6,10) = -0.5*cM[4]; 
  BigAEM(6,11) = -0.5*cM[5]; 
  BigAEM(7,8) = -0.5*cM[7]; 
  BigAEM(7,9) = -0.5*cM[6]; 
  BigAEM(7,10) = -0.5*cM[5]; 
  BigAEM(7,11) = -0.5*cM[4]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(8,4) = 0.5*m1[4]; 
  BigAEM(8,5) = 0.5*m1[5]; 
  BigAEM(8,6) = 0.5*m1[6]; 
  BigAEM(8,7) = 0.5*m1[7]; 
  BigAEM(9,4) = 0.5*m1[5]; 
  BigAEM(9,5) = 0.5*m1[4]; 
  BigAEM(9,6) = 0.5*m1[7]; 
  BigAEM(9,7) = 0.5*m1[6]; 
  BigAEM(10,4) = 0.5*m1[6]; 
  BigAEM(10,5) = 0.5*m1[7]; 
  BigAEM(10,6) = 0.5*m1[4]; 
  BigAEM(10,7) = 0.5*m1[5]; 
  BigAEM(11,4) = 0.5*m1[7]; 
  BigAEM(11,5) = 0.5*m1[6]; 
  BigAEM(11,6) = 0.5*m1[5]; 
  BigAEM(11,7) = 0.5*m1[4]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(8,8) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(8,9) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(8,10) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(8,11) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(9,8) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(9,9) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(9,10) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(9,11) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(10,8) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(10,9) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(10,10) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(10,11) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(11,8) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(11,9) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(11,10) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(11,11) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<4,4>(0,4).setZero(); 
  BigAEM.block<4,4>(4,0).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m2[0],m2[1],m2[2],m2[3]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,8,1) = xEV.segment<8>(0); 
 
  Eigen::Map<VectorXd>(vtSq,4,1) = xEV.segment<4>(8); 
 
} 
 
void SelfPrimMoments2x2vSer_P2(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // If a corner value is below zero, use cell average m0.
  bool m0Avg = false;
  if ((-1.936491673103709*m0[7])-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-1.936491673103709*m0[7])-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
 
  double m0s[8]; 
  if (m0Avg) { 
    m0s[0] = m0[0]; 
    m0s[1] = 0.0; 
    m0s[2] = 0.0; 
    m0s[3] = 0.0; 
    m0s[4] = 0.0; 
    m0s[5] = 0.0; 
    m0s[6] = 0.0; 
    m0s[7] = 0.0; 
  } else { 
    m0s[0] = m0[0]; 
    m0s[1] = m0[1]; 
    m0s[2] = m0[2]; 
    m0s[3] = m0[3]; 
    m0s[4] = m0[4]; 
    m0s[5] = m0[5]; 
    m0s[6] = m0[6]; 
    m0s[7] = m0[7]; 
  } 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(24,24); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(24);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(24);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0s[0]; 
  BigAEM(0,1) = 0.5*m0s[1]; 
  BigAEM(0,2) = 0.5*m0s[2]; 
  BigAEM(0,3) = 0.5*m0s[3]; 
  BigAEM(0,4) = 0.5*m0s[4]; 
  BigAEM(0,5) = 0.5*m0s[5]; 
  BigAEM(0,6) = 0.5*m0s[6]; 
  BigAEM(0,7) = 0.5*m0s[7]; 
  BigAEM(1,0) = 0.5*m0s[1]; 
  BigAEM(1,1) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(1,2) = 0.5*m0s[3]; 
  BigAEM(1,3) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(1,4) = 0.4472135954999579*m0s[1]; 
  BigAEM(1,5) = 0.5000000000000001*m0s[7]; 
  BigAEM(1,6) = 0.447213595499958*m0s[3]; 
  BigAEM(1,7) = 0.5000000000000001*m0s[5]; 
  BigAEM(2,0) = 0.5*m0s[2]; 
  BigAEM(2,1) = 0.5*m0s[3]; 
  BigAEM(2,2) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(2,3) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(2,4) = 0.5000000000000001*m0s[6]; 
  BigAEM(2,5) = 0.4472135954999579*m0s[2]; 
  BigAEM(2,6) = 0.5000000000000001*m0s[4]; 
  BigAEM(2,7) = 0.447213595499958*m0s[3]; 
  BigAEM(3,0) = 0.5*m0s[3]; 
  BigAEM(3,1) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(3,2) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(3,3) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(3,4) = 0.4472135954999579*m0s[3]; 
  BigAEM(3,5) = 0.4472135954999579*m0s[3]; 
  BigAEM(3,6) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(3,7) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(4,0) = 0.5*m0s[4]; 
  BigAEM(4,1) = 0.4472135954999579*m0s[1]; 
  BigAEM(4,2) = 0.5000000000000001*m0s[6]; 
  BigAEM(4,3) = 0.4472135954999579*m0s[3]; 
  BigAEM(4,4) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(4,6) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(4,7) = 0.4472135954999579*m0s[7]; 
  BigAEM(5,0) = 0.5*m0s[5]; 
  BigAEM(5,1) = 0.5000000000000001*m0s[7]; 
  BigAEM(5,2) = 0.4472135954999579*m0s[2]; 
  BigAEM(5,3) = 0.4472135954999579*m0s[3]; 
  BigAEM(5,5) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(5,6) = 0.4472135954999579*m0s[6]; 
  BigAEM(5,7) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(6,0) = 0.5*m0s[6]; 
  BigAEM(6,1) = 0.447213595499958*m0s[3]; 
  BigAEM(6,2) = 0.5000000000000001*m0s[4]; 
  BigAEM(6,3) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(6,4) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(6,5) = 0.4472135954999579*m0s[6]; 
  BigAEM(6,6) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(6,7) = 0.4*m0s[3]; 
  BigAEM(7,0) = 0.5*m0s[7]; 
  BigAEM(7,1) = 0.5000000000000001*m0s[5]; 
  BigAEM(7,2) = 0.447213595499958*m0s[3]; 
  BigAEM(7,3) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(7,4) = 0.4472135954999579*m0s[7]; 
  BigAEM(7,5) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(7,6) = 0.4*m0s[3]; 
  BigAEM(7,7) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,16) = -0.5*cM[0]; 
  BigAEM(0,17) = -0.5*cM[1]; 
  BigAEM(0,18) = -0.5*cM[2]; 
  BigAEM(0,19) = -0.5*cM[3]; 
  BigAEM(0,20) = -0.5*cM[4]; 
  BigAEM(0,21) = -0.5*cM[5]; 
  BigAEM(0,22) = -0.5*cM[6]; 
  BigAEM(0,23) = -0.5*cM[7]; 
  BigAEM(1,16) = -0.5*cM[1]; 
  BigAEM(1,17) = (-0.4472135954999579*cM[4])-0.5*cM[0]; 
  BigAEM(1,18) = -0.5*cM[3]; 
  BigAEM(1,19) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(1,20) = -0.4472135954999579*cM[1]; 
  BigAEM(1,21) = -0.5000000000000001*cM[7]; 
  BigAEM(1,22) = -0.447213595499958*cM[3]; 
  BigAEM(1,23) = -0.5000000000000001*cM[5]; 
  BigAEM(2,16) = -0.5*cM[2]; 
  BigAEM(2,17) = -0.5*cM[3]; 
  BigAEM(2,18) = (-0.4472135954999579*cM[5])-0.5*cM[0]; 
  BigAEM(2,19) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(2,20) = -0.5000000000000001*cM[6]; 
  BigAEM(2,21) = -0.4472135954999579*cM[2]; 
  BigAEM(2,22) = -0.5000000000000001*cM[4]; 
  BigAEM(2,23) = -0.447213595499958*cM[3]; 
  BigAEM(3,16) = -0.5*cM[3]; 
  BigAEM(3,17) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(3,18) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(3,19) = (-0.4472135954999579*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(3,20) = -0.4472135954999579*cM[3]; 
  BigAEM(3,21) = -0.4472135954999579*cM[3]; 
  BigAEM(3,22) = (-0.4*cM[7])-0.447213595499958*cM[1]; 
  BigAEM(3,23) = (-0.4*cM[6])-0.447213595499958*cM[2]; 
  BigAEM(4,16) = -0.5*cM[4]; 
  BigAEM(4,17) = -0.4472135954999579*cM[1]; 
  BigAEM(4,18) = -0.5000000000000001*cM[6]; 
  BigAEM(4,19) = -0.4472135954999579*cM[3]; 
  BigAEM(4,20) = (-0.31943828249997*cM[4])-0.5*cM[0]; 
  BigAEM(4,22) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(4,23) = -0.4472135954999579*cM[7]; 
  BigAEM(5,16) = -0.5*cM[5]; 
  BigAEM(5,17) = -0.5000000000000001*cM[7]; 
  BigAEM(5,18) = -0.4472135954999579*cM[2]; 
  BigAEM(5,19) = -0.4472135954999579*cM[3]; 
  BigAEM(5,21) = (-0.31943828249997*cM[5])-0.5*cM[0]; 
  BigAEM(5,22) = -0.4472135954999579*cM[6]; 
  BigAEM(5,23) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(6,16) = -0.5*cM[6]; 
  BigAEM(6,17) = -0.447213595499958*cM[3]; 
  BigAEM(6,18) = -0.5000000000000001*cM[4]; 
  BigAEM(6,19) = (-0.4*cM[7])-0.447213595499958*cM[1]; 
  BigAEM(6,20) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(6,21) = -0.4472135954999579*cM[6]; 
  BigAEM(6,22) = (-0.4472135954999579*cM[5])-0.31943828249997*cM[4]-0.5*cM[0]; 
  BigAEM(6,23) = -0.4*cM[3]; 
  BigAEM(7,16) = -0.5*cM[7]; 
  BigAEM(7,17) = -0.5000000000000001*cM[5]; 
  BigAEM(7,18) = -0.447213595499958*cM[3]; 
  BigAEM(7,19) = (-0.4*cM[6])-0.447213595499958*cM[2]; 
  BigAEM(7,20) = -0.4472135954999579*cM[7]; 
  BigAEM(7,21) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(7,22) = -0.4*cM[3]; 
  BigAEM(7,23) = (-0.31943828249997*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(16,0) = 0.5*m1[0]; 
  BigAEM(16,1) = 0.5*m1[1]; 
  BigAEM(16,2) = 0.5*m1[2]; 
  BigAEM(16,3) = 0.5*m1[3]; 
  BigAEM(16,4) = 0.5*m1[4]; 
  BigAEM(16,5) = 0.5*m1[5]; 
  BigAEM(16,6) = 0.5*m1[6]; 
  BigAEM(16,7) = 0.5*m1[7]; 
  BigAEM(17,0) = 0.5*m1[1]; 
  BigAEM(17,1) = 0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(17,2) = 0.5*m1[3]; 
  BigAEM(17,3) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(17,4) = 0.4472135954999579*m1[1]; 
  BigAEM(17,5) = 0.5000000000000001*m1[7]; 
  BigAEM(17,6) = 0.447213595499958*m1[3]; 
  BigAEM(17,7) = 0.5000000000000001*m1[5]; 
  BigAEM(18,0) = 0.5*m1[2]; 
  BigAEM(18,1) = 0.5*m1[3]; 
  BigAEM(18,2) = 0.4472135954999579*m1[5]+0.5*m1[0]; 
  BigAEM(18,3) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(18,4) = 0.5000000000000001*m1[6]; 
  BigAEM(18,5) = 0.4472135954999579*m1[2]; 
  BigAEM(18,6) = 0.5000000000000001*m1[4]; 
  BigAEM(18,7) = 0.447213595499958*m1[3]; 
  BigAEM(19,0) = 0.5*m1[3]; 
  BigAEM(19,1) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(19,2) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(19,3) = 0.4472135954999579*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(19,4) = 0.4472135954999579*m1[3]; 
  BigAEM(19,5) = 0.4472135954999579*m1[3]; 
  BigAEM(19,6) = 0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(19,7) = 0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(20,0) = 0.5*m1[4]; 
  BigAEM(20,1) = 0.4472135954999579*m1[1]; 
  BigAEM(20,2) = 0.5000000000000001*m1[6]; 
  BigAEM(20,3) = 0.4472135954999579*m1[3]; 
  BigAEM(20,4) = 0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(20,6) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(20,7) = 0.4472135954999579*m1[7]; 
  BigAEM(21,0) = 0.5*m1[5]; 
  BigAEM(21,1) = 0.5000000000000001*m1[7]; 
  BigAEM(21,2) = 0.4472135954999579*m1[2]; 
  BigAEM(21,3) = 0.4472135954999579*m1[3]; 
  BigAEM(21,5) = 0.31943828249997*m1[5]+0.5*m1[0]; 
  BigAEM(21,6) = 0.4472135954999579*m1[6]; 
  BigAEM(21,7) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(22,0) = 0.5*m1[6]; 
  BigAEM(22,1) = 0.447213595499958*m1[3]; 
  BigAEM(22,2) = 0.5000000000000001*m1[4]; 
  BigAEM(22,3) = 0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(22,4) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(22,5) = 0.4472135954999579*m1[6]; 
  BigAEM(22,6) = 0.4472135954999579*m1[5]+0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(22,7) = 0.4*m1[3]; 
  BigAEM(23,0) = 0.5*m1[7]; 
  BigAEM(23,1) = 0.5000000000000001*m1[5]; 
  BigAEM(23,2) = 0.447213595499958*m1[3]; 
  BigAEM(23,3) = 0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(23,4) = 0.4472135954999579*m1[7]; 
  BigAEM(23,5) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(23,6) = 0.4*m1[3]; 
  BigAEM(23,7) = 0.31943828249997*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(8,8) = 0.5*m0s[0]; 
  BigAEM(8,9) = 0.5*m0s[1]; 
  BigAEM(8,10) = 0.5*m0s[2]; 
  BigAEM(8,11) = 0.5*m0s[3]; 
  BigAEM(8,12) = 0.5*m0s[4]; 
  BigAEM(8,13) = 0.5*m0s[5]; 
  BigAEM(8,14) = 0.5*m0s[6]; 
  BigAEM(8,15) = 0.5*m0s[7]; 
  BigAEM(9,8) = 0.5*m0s[1]; 
  BigAEM(9,9) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(9,10) = 0.5*m0s[3]; 
  BigAEM(9,11) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(9,12) = 0.4472135954999579*m0s[1]; 
  BigAEM(9,13) = 0.5000000000000001*m0s[7]; 
  BigAEM(9,14) = 0.447213595499958*m0s[3]; 
  BigAEM(9,15) = 0.5000000000000001*m0s[5]; 
  BigAEM(10,8) = 0.5*m0s[2]; 
  BigAEM(10,9) = 0.5*m0s[3]; 
  BigAEM(10,10) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(10,11) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(10,12) = 0.5000000000000001*m0s[6]; 
  BigAEM(10,13) = 0.4472135954999579*m0s[2]; 
  BigAEM(10,14) = 0.5000000000000001*m0s[4]; 
  BigAEM(10,15) = 0.447213595499958*m0s[3]; 
  BigAEM(11,8) = 0.5*m0s[3]; 
  BigAEM(11,9) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(11,10) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(11,11) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(11,12) = 0.4472135954999579*m0s[3]; 
  BigAEM(11,13) = 0.4472135954999579*m0s[3]; 
  BigAEM(11,14) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(11,15) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(12,8) = 0.5*m0s[4]; 
  BigAEM(12,9) = 0.4472135954999579*m0s[1]; 
  BigAEM(12,10) = 0.5000000000000001*m0s[6]; 
  BigAEM(12,11) = 0.4472135954999579*m0s[3]; 
  BigAEM(12,12) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(12,14) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(12,15) = 0.4472135954999579*m0s[7]; 
  BigAEM(13,8) = 0.5*m0s[5]; 
  BigAEM(13,9) = 0.5000000000000001*m0s[7]; 
  BigAEM(13,10) = 0.4472135954999579*m0s[2]; 
  BigAEM(13,11) = 0.4472135954999579*m0s[3]; 
  BigAEM(13,13) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(13,14) = 0.4472135954999579*m0s[6]; 
  BigAEM(13,15) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(14,8) = 0.5*m0s[6]; 
  BigAEM(14,9) = 0.447213595499958*m0s[3]; 
  BigAEM(14,10) = 0.5000000000000001*m0s[4]; 
  BigAEM(14,11) = 0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(14,12) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(14,13) = 0.4472135954999579*m0s[6]; 
  BigAEM(14,14) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(14,15) = 0.4*m0s[3]; 
  BigAEM(15,8) = 0.5*m0s[7]; 
  BigAEM(15,9) = 0.5000000000000001*m0s[5]; 
  BigAEM(15,10) = 0.447213595499958*m0s[3]; 
  BigAEM(15,11) = 0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(15,12) = 0.4472135954999579*m0s[7]; 
  BigAEM(15,13) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(15,14) = 0.4*m0s[3]; 
  BigAEM(15,15) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(8,16) = -0.5*cM[8]; 
  BigAEM(8,17) = -0.5*cM[9]; 
  BigAEM(8,18) = -0.5*cM[10]; 
  BigAEM(8,19) = -0.5*cM[11]; 
  BigAEM(8,20) = -0.5*cM[12]; 
  BigAEM(8,21) = -0.5*cM[13]; 
  BigAEM(8,22) = -0.5*cM[14]; 
  BigAEM(8,23) = -0.5*cM[15]; 
  BigAEM(9,16) = -0.5*cM[9]; 
  BigAEM(9,17) = (-0.4472135954999579*cM[12])-0.5*cM[8]; 
  BigAEM(9,18) = -0.5*cM[11]; 
  BigAEM(9,19) = (-0.447213595499958*cM[14])-0.5*cM[10]; 
  BigAEM(9,20) = -0.4472135954999579*cM[9]; 
  BigAEM(9,21) = -0.5000000000000001*cM[15]; 
  BigAEM(9,22) = -0.447213595499958*cM[11]; 
  BigAEM(9,23) = -0.5000000000000001*cM[13]; 
  BigAEM(10,16) = -0.5*cM[10]; 
  BigAEM(10,17) = -0.5*cM[11]; 
  BigAEM(10,18) = (-0.4472135954999579*cM[13])-0.5*cM[8]; 
  BigAEM(10,19) = (-0.447213595499958*cM[15])-0.5*cM[9]; 
  BigAEM(10,20) = -0.5000000000000001*cM[14]; 
  BigAEM(10,21) = -0.4472135954999579*cM[10]; 
  BigAEM(10,22) = -0.5000000000000001*cM[12]; 
  BigAEM(10,23) = -0.447213595499958*cM[11]; 
  BigAEM(11,16) = -0.5*cM[11]; 
  BigAEM(11,17) = (-0.447213595499958*cM[14])-0.5*cM[10]; 
  BigAEM(11,18) = (-0.447213595499958*cM[15])-0.5*cM[9]; 
  BigAEM(11,19) = (-0.4472135954999579*cM[13])-0.4472135954999579*cM[12]-0.5*cM[8]; 
  BigAEM(11,20) = -0.4472135954999579*cM[11]; 
  BigAEM(11,21) = -0.4472135954999579*cM[11]; 
  BigAEM(11,22) = (-0.4*cM[15])-0.447213595499958*cM[9]; 
  BigAEM(11,23) = (-0.4*cM[14])-0.447213595499958*cM[10]; 
  BigAEM(12,16) = -0.5*cM[12]; 
  BigAEM(12,17) = -0.4472135954999579*cM[9]; 
  BigAEM(12,18) = -0.5000000000000001*cM[14]; 
  BigAEM(12,19) = -0.4472135954999579*cM[11]; 
  BigAEM(12,20) = (-0.31943828249997*cM[12])-0.5*cM[8]; 
  BigAEM(12,22) = (-0.31943828249997*cM[14])-0.5000000000000001*cM[10]; 
  BigAEM(12,23) = -0.4472135954999579*cM[15]; 
  BigAEM(13,16) = -0.5*cM[13]; 
  BigAEM(13,17) = -0.5000000000000001*cM[15]; 
  BigAEM(13,18) = -0.4472135954999579*cM[10]; 
  BigAEM(13,19) = -0.4472135954999579*cM[11]; 
  BigAEM(13,21) = (-0.31943828249997*cM[13])-0.5*cM[8]; 
  BigAEM(13,22) = -0.4472135954999579*cM[14]; 
  BigAEM(13,23) = (-0.31943828249997*cM[15])-0.5000000000000001*cM[9]; 
  BigAEM(14,16) = -0.5*cM[14]; 
  BigAEM(14,17) = -0.447213595499958*cM[11]; 
  BigAEM(14,18) = -0.5000000000000001*cM[12]; 
  BigAEM(14,19) = (-0.4*cM[15])-0.447213595499958*cM[9]; 
  BigAEM(14,20) = (-0.31943828249997*cM[14])-0.5000000000000001*cM[10]; 
  BigAEM(14,21) = -0.4472135954999579*cM[14]; 
  BigAEM(14,22) = (-0.4472135954999579*cM[13])-0.31943828249997*cM[12]-0.5*cM[8]; 
  BigAEM(14,23) = -0.4*cM[11]; 
  BigAEM(15,16) = -0.5*cM[15]; 
  BigAEM(15,17) = -0.5000000000000001*cM[13]; 
  BigAEM(15,18) = -0.447213595499958*cM[11]; 
  BigAEM(15,19) = (-0.4*cM[14])-0.447213595499958*cM[10]; 
  BigAEM(15,20) = -0.4472135954999579*cM[15]; 
  BigAEM(15,21) = (-0.31943828249997*cM[15])-0.5000000000000001*cM[9]; 
  BigAEM(15,22) = -0.4*cM[11]; 
  BigAEM(15,23) = (-0.31943828249997*cM[13])-0.4472135954999579*cM[12]-0.5*cM[8]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(16,8) = 0.5*m1[8]; 
  BigAEM(16,9) = 0.5*m1[9]; 
  BigAEM(16,10) = 0.5*m1[10]; 
  BigAEM(16,11) = 0.5*m1[11]; 
  BigAEM(16,12) = 0.5*m1[12]; 
  BigAEM(16,13) = 0.5*m1[13]; 
  BigAEM(16,14) = 0.5*m1[14]; 
  BigAEM(16,15) = 0.5*m1[15]; 
  BigAEM(17,8) = 0.5*m1[9]; 
  BigAEM(17,9) = 0.4472135954999579*m1[12]+0.5*m1[8]; 
  BigAEM(17,10) = 0.5*m1[11]; 
  BigAEM(17,11) = 0.447213595499958*m1[14]+0.5*m1[10]; 
  BigAEM(17,12) = 0.4472135954999579*m1[9]; 
  BigAEM(17,13) = 0.5000000000000001*m1[15]; 
  BigAEM(17,14) = 0.447213595499958*m1[11]; 
  BigAEM(17,15) = 0.5000000000000001*m1[13]; 
  BigAEM(18,8) = 0.5*m1[10]; 
  BigAEM(18,9) = 0.5*m1[11]; 
  BigAEM(18,10) = 0.4472135954999579*m1[13]+0.5*m1[8]; 
  BigAEM(18,11) = 0.447213595499958*m1[15]+0.5*m1[9]; 
  BigAEM(18,12) = 0.5000000000000001*m1[14]; 
  BigAEM(18,13) = 0.4472135954999579*m1[10]; 
  BigAEM(18,14) = 0.5000000000000001*m1[12]; 
  BigAEM(18,15) = 0.447213595499958*m1[11]; 
  BigAEM(19,8) = 0.5*m1[11]; 
  BigAEM(19,9) = 0.447213595499958*m1[14]+0.5*m1[10]; 
  BigAEM(19,10) = 0.447213595499958*m1[15]+0.5*m1[9]; 
  BigAEM(19,11) = 0.4472135954999579*m1[13]+0.4472135954999579*m1[12]+0.5*m1[8]; 
  BigAEM(19,12) = 0.4472135954999579*m1[11]; 
  BigAEM(19,13) = 0.4472135954999579*m1[11]; 
  BigAEM(19,14) = 0.4*m1[15]+0.447213595499958*m1[9]; 
  BigAEM(19,15) = 0.4*m1[14]+0.447213595499958*m1[10]; 
  BigAEM(20,8) = 0.5*m1[12]; 
  BigAEM(20,9) = 0.4472135954999579*m1[9]; 
  BigAEM(20,10) = 0.5000000000000001*m1[14]; 
  BigAEM(20,11) = 0.4472135954999579*m1[11]; 
  BigAEM(20,12) = 0.31943828249997*m1[12]+0.5*m1[8]; 
  BigAEM(20,14) = 0.31943828249997*m1[14]+0.5000000000000001*m1[10]; 
  BigAEM(20,15) = 0.4472135954999579*m1[15]; 
  BigAEM(21,8) = 0.5*m1[13]; 
  BigAEM(21,9) = 0.5000000000000001*m1[15]; 
  BigAEM(21,10) = 0.4472135954999579*m1[10]; 
  BigAEM(21,11) = 0.4472135954999579*m1[11]; 
  BigAEM(21,13) = 0.31943828249997*m1[13]+0.5*m1[8]; 
  BigAEM(21,14) = 0.4472135954999579*m1[14]; 
  BigAEM(21,15) = 0.31943828249997*m1[15]+0.5000000000000001*m1[9]; 
  BigAEM(22,8) = 0.5*m1[14]; 
  BigAEM(22,9) = 0.447213595499958*m1[11]; 
  BigAEM(22,10) = 0.5000000000000001*m1[12]; 
  BigAEM(22,11) = 0.4*m1[15]+0.447213595499958*m1[9]; 
  BigAEM(22,12) = 0.31943828249997*m1[14]+0.5000000000000001*m1[10]; 
  BigAEM(22,13) = 0.4472135954999579*m1[14]; 
  BigAEM(22,14) = 0.4472135954999579*m1[13]+0.31943828249997*m1[12]+0.5*m1[8]; 
  BigAEM(22,15) = 0.4*m1[11]; 
  BigAEM(23,8) = 0.5*m1[15]; 
  BigAEM(23,9) = 0.5000000000000001*m1[13]; 
  BigAEM(23,10) = 0.447213595499958*m1[11]; 
  BigAEM(23,11) = 0.4*m1[14]+0.447213595499958*m1[10]; 
  BigAEM(23,12) = 0.4472135954999579*m1[15]; 
  BigAEM(23,13) = 0.31943828249997*m1[15]+0.5000000000000001*m1[9]; 
  BigAEM(23,14) = 0.4*m1[11]; 
  BigAEM(23,15) = 0.31943828249997*m1[13]+0.4472135954999579*m1[12]+0.5*m1[8]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(16,16) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(16,17) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(16,18) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(16,19) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(16,20) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(16,21) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(16,22) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(16,23) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(17,16) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(17,17) = 0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(17,18) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(17,19) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(17,20) = 0.4472135954999579*m0s[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(17,21) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(17,22) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(17,23) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(18,16) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(18,17) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(18,18) = 0.4472135954999579*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.5*cE[0]; 
  BigAEM(18,19) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(18,20) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(18,21) = 0.4472135954999579*m0s[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(18,22) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(18,23) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(19,16) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(19,17) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(19,18) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(19,19) = 0.4472135954999579*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(19,20) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(19,21) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(19,22) = 0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(19,23) = 0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(20,16) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(20,17) = 0.4472135954999579*m0s[1]*pVdim-0.4472135954999579*cE[1]; 
  BigAEM(20,18) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(20,19) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(20,20) = 0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(20,22) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(20,23) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(21,16) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(21,17) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(21,18) = 0.4472135954999579*m0s[2]*pVdim-0.4472135954999579*cE[2]; 
  BigAEM(21,19) = 0.4472135954999579*m0s[3]*pVdim-0.4472135954999579*cE[3]; 
  BigAEM(21,21) = 0.31943828249997*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.5*cE[0]; 
  BigAEM(21,22) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(21,23) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(22,16) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(22,17) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(22,18) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(22,19) = 0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(22,20) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(22,21) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(22,22) = 0.4472135954999579*m0s[5]*pVdim+0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(22,23) = 0.4*m0s[3]*pVdim-0.4*cE[3]; 
  BigAEM(23,16) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(23,17) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(23,18) = 0.447213595499958*m0s[3]*pVdim-0.447213595499958*cE[3]; 
  BigAEM(23,19) = 0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(23,20) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(23,21) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(23,22) = 0.4*m0s[3]*pVdim-0.4*cE[3]; 
  BigAEM(23,23) = 0.31943828249997*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<8,8>(0,8).setZero(); 
  BigAEM.block<8,8>(8,0).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m1[12],m1[13],m1[14],m1[15],m2[0],m2[1],m2[2],m2[3],m2[4],m2[5],m2[6],m2[7]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,16,1) = xEV.segment<16>(0); 
 
  Eigen::Map<VectorXd>(vtSq,8,1) = xEV.segment<8>(16); 
 
} 
 
void SelfPrimMoments2x2vSer_P3(const int pVdim, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq) 
{ 
  // m0,m1,m2: moments of the distribution function. 
  // cM, cE: vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. 
  // u:        velocity. 
  // vtSq:     squared thermal speed, sqrt(T/m). 
 
  // If a corner value is below zero, use cell average m0.
  bool m0Avg = false;
  if (2.29128784747792*m0[11]+2.29128784747792*m0[10]-1.322875655532295*m0[9]-1.322875655532295*m0[8]-1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if (2.29128784747792*m0[11]+2.29128784747792*m0[10]-1.322875655532295*m0[9]-1.322875655532295*m0[8]-1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]+1.5*m0[3]-0.8660254037844386*m0[2]-0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-2.29128784747792*m0[11])-2.29128784747792*m0[10]-1.322875655532295*m0[9]+1.322875655532295*m0[8]+1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
  if ((-2.29128784747792*m0[11])-2.29128784747792*m0[10]-1.322875655532295*m0[9]+1.322875655532295*m0[8]+1.936491673103709*m0[7]-1.936491673103709*m0[6]+1.118033988749895*m0[5]+1.118033988749895*m0[4]-1.5*m0[3]-0.8660254037844386*m0[2]+0.8660254037844386*m0[1]+0.5*m0[0] < 0) { 
    m0Avg = true;
  }
 
  double m0s[12]; 
  if (m0Avg) { 
    m0s[0] = m0[0]; 
    m0s[1] = 0.0; 
    m0s[2] = 0.0; 
    m0s[3] = 0.0; 
    m0s[4] = 0.0; 
    m0s[5] = 0.0; 
    m0s[6] = 0.0; 
    m0s[7] = 0.0; 
    m0s[8] = 0.0; 
    m0s[9] = 0.0; 
    m0s[10] = 0.0; 
    m0s[11] = 0.0; 
  } else { 
    m0s[0] = m0[0]; 
    m0s[1] = m0[1]; 
    m0s[2] = m0[2]; 
    m0s[3] = m0[3]; 
    m0s[4] = m0[4]; 
    m0s[5] = m0[5]; 
    m0s[6] = m0[6]; 
    m0s[7] = m0[7]; 
    m0s[8] = m0[8]; 
    m0s[9] = m0[9]; 
    m0s[10] = m0[10]; 
    m0s[11] = m0[11]; 
  } 
 
  // Declare Eigen matrix and vectors for weak division. 
  Eigen::MatrixXd BigAEM = Eigen::MatrixXd::Zero(36,36); 
  Eigen::VectorXd bEV = Eigen::VectorXd::Zero(36);  
  Eigen::VectorXd xEV = Eigen::VectorXd::Zero(36);  
 
  // ....... Block from weak multiply of uX and m0  .......... // 
  BigAEM(0,0) = 0.5*m0s[0]; 
  BigAEM(0,1) = 0.5*m0s[1]; 
  BigAEM(0,2) = 0.5*m0s[2]; 
  BigAEM(0,3) = 0.5*m0s[3]; 
  BigAEM(0,4) = 0.5*m0s[4]; 
  BigAEM(0,5) = 0.5*m0s[5]; 
  BigAEM(0,6) = 0.5*m0s[6]; 
  BigAEM(0,7) = 0.5*m0s[7]; 
  BigAEM(0,8) = 0.5*m0s[8]; 
  BigAEM(0,9) = 0.5*m0s[9]; 
  BigAEM(0,10) = 0.5*m0s[10]; 
  BigAEM(0,11) = 0.5*m0s[11]; 
  BigAEM(1,0) = 0.5*m0s[1]; 
  BigAEM(1,1) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(1,2) = 0.5*m0s[3]; 
  BigAEM(1,3) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(1,4) = 0.4391550328268398*m0s[8]+0.4472135954999579*m0s[1]; 
  BigAEM(1,5) = 0.5000000000000001*m0s[7]; 
  BigAEM(1,6) = 0.4391550328268399*m0s[10]+0.447213595499958*m0s[3]; 
  BigAEM(1,7) = 0.5000000000000001*m0s[5]; 
  BigAEM(1,8) = 0.4391550328268398*m0s[4]; 
  BigAEM(1,9) = 0.5*m0s[11]; 
  BigAEM(1,10) = 0.4391550328268399*m0s[6]; 
  BigAEM(1,11) = 0.5*m0s[9]; 
  BigAEM(2,0) = 0.5*m0s[2]; 
  BigAEM(2,1) = 0.5*m0s[3]; 
  BigAEM(2,2) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(2,3) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(2,4) = 0.5000000000000001*m0s[6]; 
  BigAEM(2,5) = 0.4391550328268398*m0s[9]+0.4472135954999579*m0s[2]; 
  BigAEM(2,6) = 0.5000000000000001*m0s[4]; 
  BigAEM(2,7) = 0.4391550328268399*m0s[11]+0.447213595499958*m0s[3]; 
  BigAEM(2,8) = 0.5*m0s[10]; 
  BigAEM(2,9) = 0.4391550328268398*m0s[5]; 
  BigAEM(2,10) = 0.5*m0s[8]; 
  BigAEM(2,11) = 0.4391550328268399*m0s[7]; 
  BigAEM(3,0) = 0.5*m0s[3]; 
  BigAEM(3,1) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(3,2) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(3,3) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(3,4) = 0.4391550328268399*m0s[10]+0.4472135954999579*m0s[3]; 
  BigAEM(3,5) = 0.4391550328268399*m0s[11]+0.4472135954999579*m0s[3]; 
  BigAEM(3,6) = 0.4391550328268399*m0s[8]+0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(3,7) = 0.4391550328268399*m0s[9]+0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(3,8) = 0.4391550328268399*m0s[6]; 
  BigAEM(3,9) = 0.4391550328268399*m0s[7]; 
  BigAEM(3,10) = 0.4391550328268399*m0s[4]; 
  BigAEM(3,11) = 0.4391550328268399*m0s[5]; 
  BigAEM(4,0) = 0.5*m0s[4]; 
  BigAEM(4,1) = 0.4391550328268398*m0s[8]+0.4472135954999579*m0s[1]; 
  BigAEM(4,2) = 0.5000000000000001*m0s[6]; 
  BigAEM(4,3) = 0.4391550328268399*m0s[10]+0.4472135954999579*m0s[3]; 
  BigAEM(4,4) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(4,6) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(4,7) = 0.4472135954999579*m0s[7]; 
  BigAEM(4,8) = 0.2981423969999719*m0s[8]+0.4391550328268398*m0s[1]; 
  BigAEM(4,10) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(4,11) = 0.4472135954999579*m0s[11]; 
  BigAEM(5,0) = 0.5*m0s[5]; 
  BigAEM(5,1) = 0.5000000000000001*m0s[7]; 
  BigAEM(5,2) = 0.4391550328268398*m0s[9]+0.4472135954999579*m0s[2]; 
  BigAEM(5,3) = 0.4391550328268399*m0s[11]+0.4472135954999579*m0s[3]; 
  BigAEM(5,5) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(5,6) = 0.4472135954999579*m0s[6]; 
  BigAEM(5,7) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(5,9) = 0.2981423969999719*m0s[9]+0.4391550328268398*m0s[2]; 
  BigAEM(5,10) = 0.4472135954999579*m0s[10]; 
  BigAEM(5,11) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(6,0) = 0.5*m0s[6]; 
  BigAEM(6,1) = 0.4391550328268399*m0s[10]+0.447213595499958*m0s[3]; 
  BigAEM(6,2) = 0.5000000000000001*m0s[4]; 
  BigAEM(6,3) = 0.4391550328268399*m0s[8]+0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(6,4) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(6,5) = 0.4472135954999579*m0s[6]; 
  BigAEM(6,6) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(6,7) = 0.3927922024247863*m0s[11]+0.3927922024247863*m0s[10]+0.4*m0s[3]; 
  BigAEM(6,8) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(6,10) = 0.2981423969999719*m0s[8]+0.3927922024247863*m0s[7]+0.4391550328268399*m0s[1]; 
  BigAEM(6,11) = 0.3927922024247863*m0s[7]; 
  BigAEM(7,0) = 0.5*m0s[7]; 
  BigAEM(7,1) = 0.5000000000000001*m0s[5]; 
  BigAEM(7,2) = 0.4391550328268399*m0s[11]+0.447213595499958*m0s[3]; 
  BigAEM(7,3) = 0.4391550328268399*m0s[9]+0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(7,4) = 0.4472135954999579*m0s[7]; 
  BigAEM(7,5) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(7,6) = 0.3927922024247863*m0s[11]+0.3927922024247863*m0s[10]+0.4*m0s[3]; 
  BigAEM(7,7) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(7,9) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(7,10) = 0.3927922024247863*m0s[6]; 
  BigAEM(7,11) = 0.2981423969999719*m0s[9]+0.3927922024247863*m0s[6]+0.4391550328268399*m0s[2]; 
  BigAEM(8,0) = 0.5*m0s[8]; 
  BigAEM(8,1) = 0.4391550328268398*m0s[4]; 
  BigAEM(8,2) = 0.5*m0s[10]; 
  BigAEM(8,3) = 0.4391550328268399*m0s[6]; 
  BigAEM(8,4) = 0.2981423969999719*m0s[8]+0.4391550328268398*m0s[1]; 
  BigAEM(8,6) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(8,8) = 0.2981423969999719*m0s[4]+0.5*m0s[0]; 
  BigAEM(8,10) = 0.2981423969999719*m0s[6]+0.5*m0s[2]; 
  BigAEM(9,0) = 0.5*m0s[9]; 
  BigAEM(9,1) = 0.5*m0s[11]; 
  BigAEM(9,2) = 0.4391550328268398*m0s[5]; 
  BigAEM(9,3) = 0.4391550328268399*m0s[7]; 
  BigAEM(9,5) = 0.2981423969999719*m0s[9]+0.4391550328268398*m0s[2]; 
  BigAEM(9,7) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(9,9) = 0.2981423969999719*m0s[5]+0.5*m0s[0]; 
  BigAEM(9,11) = 0.2981423969999719*m0s[7]+0.5*m0s[1]; 
  BigAEM(10,0) = 0.5*m0s[10]; 
  BigAEM(10,1) = 0.4391550328268399*m0s[6]; 
  BigAEM(10,2) = 0.5*m0s[8]; 
  BigAEM(10,3) = 0.4391550328268399*m0s[4]; 
  BigAEM(10,4) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(10,5) = 0.4472135954999579*m0s[10]; 
  BigAEM(10,6) = 0.2981423969999719*m0s[8]+0.3927922024247863*m0s[7]+0.4391550328268399*m0s[1]; 
  BigAEM(10,7) = 0.3927922024247863*m0s[6]; 
  BigAEM(10,8) = 0.2981423969999719*m0s[6]+0.5*m0s[2]; 
  BigAEM(10,10) = 0.4472135954999579*m0s[5]+0.2981423969999719*m0s[4]+0.5*m0s[0]; 
  BigAEM(11,0) = 0.5*m0s[11]; 
  BigAEM(11,1) = 0.5*m0s[9]; 
  BigAEM(11,2) = 0.4391550328268399*m0s[7]; 
  BigAEM(11,3) = 0.4391550328268399*m0s[5]; 
  BigAEM(11,4) = 0.4472135954999579*m0s[11]; 
  BigAEM(11,5) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(11,6) = 0.3927922024247863*m0s[7]; 
  BigAEM(11,7) = 0.2981423969999719*m0s[9]+0.3927922024247863*m0s[6]+0.4391550328268399*m0s[2]; 
  BigAEM(11,9) = 0.2981423969999719*m0s[7]+0.5*m0s[1]; 
  BigAEM(11,11) = 0.2981423969999719*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uX .......... // 
  BigAEM(0,24) = -0.5*cM[0]; 
  BigAEM(0,25) = -0.5*cM[1]; 
  BigAEM(0,26) = -0.5*cM[2]; 
  BigAEM(0,27) = -0.5*cM[3]; 
  BigAEM(0,28) = -0.5*cM[4]; 
  BigAEM(0,29) = -0.5*cM[5]; 
  BigAEM(0,30) = -0.5*cM[6]; 
  BigAEM(0,31) = -0.5*cM[7]; 
  BigAEM(0,32) = -0.5*cM[8]; 
  BigAEM(0,33) = -0.5*cM[9]; 
  BigAEM(0,34) = -0.5*cM[10]; 
  BigAEM(0,35) = -0.5*cM[11]; 
  BigAEM(1,24) = -0.5*cM[1]; 
  BigAEM(1,25) = (-0.4472135954999579*cM[4])-0.5*cM[0]; 
  BigAEM(1,26) = -0.5*cM[3]; 
  BigAEM(1,27) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(1,28) = (-0.4391550328268398*cM[8])-0.4472135954999579*cM[1]; 
  BigAEM(1,29) = -0.5000000000000001*cM[7]; 
  BigAEM(1,30) = (-0.4391550328268399*cM[10])-0.447213595499958*cM[3]; 
  BigAEM(1,31) = -0.5000000000000001*cM[5]; 
  BigAEM(1,32) = -0.4391550328268398*cM[4]; 
  BigAEM(1,33) = -0.5*cM[11]; 
  BigAEM(1,34) = -0.4391550328268399*cM[6]; 
  BigAEM(1,35) = -0.5*cM[9]; 
  BigAEM(2,24) = -0.5*cM[2]; 
  BigAEM(2,25) = -0.5*cM[3]; 
  BigAEM(2,26) = (-0.4472135954999579*cM[5])-0.5*cM[0]; 
  BigAEM(2,27) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(2,28) = -0.5000000000000001*cM[6]; 
  BigAEM(2,29) = (-0.4391550328268398*cM[9])-0.4472135954999579*cM[2]; 
  BigAEM(2,30) = -0.5000000000000001*cM[4]; 
  BigAEM(2,31) = (-0.4391550328268399*cM[11])-0.447213595499958*cM[3]; 
  BigAEM(2,32) = -0.5*cM[10]; 
  BigAEM(2,33) = -0.4391550328268398*cM[5]; 
  BigAEM(2,34) = -0.5*cM[8]; 
  BigAEM(2,35) = -0.4391550328268399*cM[7]; 
  BigAEM(3,24) = -0.5*cM[3]; 
  BigAEM(3,25) = (-0.447213595499958*cM[6])-0.5*cM[2]; 
  BigAEM(3,26) = (-0.447213595499958*cM[7])-0.5*cM[1]; 
  BigAEM(3,27) = (-0.4472135954999579*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(3,28) = (-0.4391550328268399*cM[10])-0.4472135954999579*cM[3]; 
  BigAEM(3,29) = (-0.4391550328268399*cM[11])-0.4472135954999579*cM[3]; 
  BigAEM(3,30) = (-0.4391550328268399*cM[8])-0.4*cM[7]-0.447213595499958*cM[1]; 
  BigAEM(3,31) = (-0.4391550328268399*cM[9])-0.4*cM[6]-0.447213595499958*cM[2]; 
  BigAEM(3,32) = -0.4391550328268399*cM[6]; 
  BigAEM(3,33) = -0.4391550328268399*cM[7]; 
  BigAEM(3,34) = -0.4391550328268399*cM[4]; 
  BigAEM(3,35) = -0.4391550328268399*cM[5]; 
  BigAEM(4,24) = -0.5*cM[4]; 
  BigAEM(4,25) = (-0.4391550328268398*cM[8])-0.4472135954999579*cM[1]; 
  BigAEM(4,26) = -0.5000000000000001*cM[6]; 
  BigAEM(4,27) = (-0.4391550328268399*cM[10])-0.4472135954999579*cM[3]; 
  BigAEM(4,28) = (-0.31943828249997*cM[4])-0.5*cM[0]; 
  BigAEM(4,30) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(4,31) = -0.4472135954999579*cM[7]; 
  BigAEM(4,32) = (-0.2981423969999719*cM[8])-0.4391550328268398*cM[1]; 
  BigAEM(4,34) = (-0.2981423969999719*cM[10])-0.4391550328268399*cM[3]; 
  BigAEM(4,35) = -0.4472135954999579*cM[11]; 
  BigAEM(5,24) = -0.5*cM[5]; 
  BigAEM(5,25) = -0.5000000000000001*cM[7]; 
  BigAEM(5,26) = (-0.4391550328268398*cM[9])-0.4472135954999579*cM[2]; 
  BigAEM(5,27) = (-0.4391550328268399*cM[11])-0.4472135954999579*cM[3]; 
  BigAEM(5,29) = (-0.31943828249997*cM[5])-0.5*cM[0]; 
  BigAEM(5,30) = -0.4472135954999579*cM[6]; 
  BigAEM(5,31) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(5,33) = (-0.2981423969999719*cM[9])-0.4391550328268398*cM[2]; 
  BigAEM(5,34) = -0.4472135954999579*cM[10]; 
  BigAEM(5,35) = (-0.2981423969999719*cM[11])-0.4391550328268399*cM[3]; 
  BigAEM(6,24) = -0.5*cM[6]; 
  BigAEM(6,25) = (-0.4391550328268399*cM[10])-0.447213595499958*cM[3]; 
  BigAEM(6,26) = -0.5000000000000001*cM[4]; 
  BigAEM(6,27) = (-0.4391550328268399*cM[8])-0.4*cM[7]-0.447213595499958*cM[1]; 
  BigAEM(6,28) = (-0.31943828249997*cM[6])-0.5000000000000001*cM[2]; 
  BigAEM(6,29) = -0.4472135954999579*cM[6]; 
  BigAEM(6,30) = (-0.4472135954999579*cM[5])-0.31943828249997*cM[4]-0.5*cM[0]; 
  BigAEM(6,31) = (-0.3927922024247863*cM[11])-0.3927922024247863*cM[10]-0.4*cM[3]; 
  BigAEM(6,32) = (-0.2981423969999719*cM[10])-0.4391550328268399*cM[3]; 
  BigAEM(6,34) = (-0.2981423969999719*cM[8])-0.3927922024247863*cM[7]-0.4391550328268399*cM[1]; 
  BigAEM(6,35) = -0.3927922024247863*cM[7]; 
  BigAEM(7,24) = -0.5*cM[7]; 
  BigAEM(7,25) = -0.5000000000000001*cM[5]; 
  BigAEM(7,26) = (-0.4391550328268399*cM[11])-0.447213595499958*cM[3]; 
  BigAEM(7,27) = (-0.4391550328268399*cM[9])-0.4*cM[6]-0.447213595499958*cM[2]; 
  BigAEM(7,28) = -0.4472135954999579*cM[7]; 
  BigAEM(7,29) = (-0.31943828249997*cM[7])-0.5000000000000001*cM[1]; 
  BigAEM(7,30) = (-0.3927922024247863*cM[11])-0.3927922024247863*cM[10]-0.4*cM[3]; 
  BigAEM(7,31) = (-0.31943828249997*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
  BigAEM(7,33) = (-0.2981423969999719*cM[11])-0.4391550328268399*cM[3]; 
  BigAEM(7,34) = -0.3927922024247863*cM[6]; 
  BigAEM(7,35) = (-0.2981423969999719*cM[9])-0.3927922024247863*cM[6]-0.4391550328268399*cM[2]; 
  BigAEM(8,24) = -0.5*cM[8]; 
  BigAEM(8,25) = -0.4391550328268398*cM[4]; 
  BigAEM(8,26) = -0.5*cM[10]; 
  BigAEM(8,27) = -0.4391550328268399*cM[6]; 
  BigAEM(8,28) = (-0.2981423969999719*cM[8])-0.4391550328268398*cM[1]; 
  BigAEM(8,30) = (-0.2981423969999719*cM[10])-0.4391550328268399*cM[3]; 
  BigAEM(8,32) = (-0.2981423969999719*cM[4])-0.5*cM[0]; 
  BigAEM(8,34) = (-0.2981423969999719*cM[6])-0.5*cM[2]; 
  BigAEM(9,24) = -0.5*cM[9]; 
  BigAEM(9,25) = -0.5*cM[11]; 
  BigAEM(9,26) = -0.4391550328268398*cM[5]; 
  BigAEM(9,27) = -0.4391550328268399*cM[7]; 
  BigAEM(9,29) = (-0.2981423969999719*cM[9])-0.4391550328268398*cM[2]; 
  BigAEM(9,31) = (-0.2981423969999719*cM[11])-0.4391550328268399*cM[3]; 
  BigAEM(9,33) = (-0.2981423969999719*cM[5])-0.5*cM[0]; 
  BigAEM(9,35) = (-0.2981423969999719*cM[7])-0.5*cM[1]; 
  BigAEM(10,24) = -0.5*cM[10]; 
  BigAEM(10,25) = -0.4391550328268399*cM[6]; 
  BigAEM(10,26) = -0.5*cM[8]; 
  BigAEM(10,27) = -0.4391550328268399*cM[4]; 
  BigAEM(10,28) = (-0.2981423969999719*cM[10])-0.4391550328268399*cM[3]; 
  BigAEM(10,29) = -0.4472135954999579*cM[10]; 
  BigAEM(10,30) = (-0.2981423969999719*cM[8])-0.3927922024247863*cM[7]-0.4391550328268399*cM[1]; 
  BigAEM(10,31) = -0.3927922024247863*cM[6]; 
  BigAEM(10,32) = (-0.2981423969999719*cM[6])-0.5*cM[2]; 
  BigAEM(10,34) = (-0.4472135954999579*cM[5])-0.2981423969999719*cM[4]-0.5*cM[0]; 
  BigAEM(11,24) = -0.5*cM[11]; 
  BigAEM(11,25) = -0.5*cM[9]; 
  BigAEM(11,26) = -0.4391550328268399*cM[7]; 
  BigAEM(11,27) = -0.4391550328268399*cM[5]; 
  BigAEM(11,28) = -0.4472135954999579*cM[11]; 
  BigAEM(11,29) = (-0.2981423969999719*cM[11])-0.4391550328268399*cM[3]; 
  BigAEM(11,30) = -0.3927922024247863*cM[7]; 
  BigAEM(11,31) = (-0.2981423969999719*cM[9])-0.3927922024247863*cM[6]-0.4391550328268399*cM[2]; 
  BigAEM(11,33) = (-0.2981423969999719*cM[7])-0.5*cM[1]; 
  BigAEM(11,35) = (-0.2981423969999719*cM[5])-0.4472135954999579*cM[4]-0.5*cM[0]; 
 
  // ....... Block from weak multiply of uX and m1X  .......... // 
  BigAEM(24,0) = 0.5*m1[0]; 
  BigAEM(24,1) = 0.5*m1[1]; 
  BigAEM(24,2) = 0.5*m1[2]; 
  BigAEM(24,3) = 0.5*m1[3]; 
  BigAEM(24,4) = 0.5*m1[4]; 
  BigAEM(24,5) = 0.5*m1[5]; 
  BigAEM(24,6) = 0.5*m1[6]; 
  BigAEM(24,7) = 0.5*m1[7]; 
  BigAEM(24,8) = 0.5*m1[8]; 
  BigAEM(24,9) = 0.5*m1[9]; 
  BigAEM(24,10) = 0.5*m1[10]; 
  BigAEM(24,11) = 0.5*m1[11]; 
  BigAEM(25,0) = 0.5*m1[1]; 
  BigAEM(25,1) = 0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(25,2) = 0.5*m1[3]; 
  BigAEM(25,3) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(25,4) = 0.4391550328268398*m1[8]+0.4472135954999579*m1[1]; 
  BigAEM(25,5) = 0.5000000000000001*m1[7]; 
  BigAEM(25,6) = 0.4391550328268399*m1[10]+0.447213595499958*m1[3]; 
  BigAEM(25,7) = 0.5000000000000001*m1[5]; 
  BigAEM(25,8) = 0.4391550328268398*m1[4]; 
  BigAEM(25,9) = 0.5*m1[11]; 
  BigAEM(25,10) = 0.4391550328268399*m1[6]; 
  BigAEM(25,11) = 0.5*m1[9]; 
  BigAEM(26,0) = 0.5*m1[2]; 
  BigAEM(26,1) = 0.5*m1[3]; 
  BigAEM(26,2) = 0.4472135954999579*m1[5]+0.5*m1[0]; 
  BigAEM(26,3) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(26,4) = 0.5000000000000001*m1[6]; 
  BigAEM(26,5) = 0.4391550328268398*m1[9]+0.4472135954999579*m1[2]; 
  BigAEM(26,6) = 0.5000000000000001*m1[4]; 
  BigAEM(26,7) = 0.4391550328268399*m1[11]+0.447213595499958*m1[3]; 
  BigAEM(26,8) = 0.5*m1[10]; 
  BigAEM(26,9) = 0.4391550328268398*m1[5]; 
  BigAEM(26,10) = 0.5*m1[8]; 
  BigAEM(26,11) = 0.4391550328268399*m1[7]; 
  BigAEM(27,0) = 0.5*m1[3]; 
  BigAEM(27,1) = 0.447213595499958*m1[6]+0.5*m1[2]; 
  BigAEM(27,2) = 0.447213595499958*m1[7]+0.5*m1[1]; 
  BigAEM(27,3) = 0.4472135954999579*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(27,4) = 0.4391550328268399*m1[10]+0.4472135954999579*m1[3]; 
  BigAEM(27,5) = 0.4391550328268399*m1[11]+0.4472135954999579*m1[3]; 
  BigAEM(27,6) = 0.4391550328268399*m1[8]+0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(27,7) = 0.4391550328268399*m1[9]+0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(27,8) = 0.4391550328268399*m1[6]; 
  BigAEM(27,9) = 0.4391550328268399*m1[7]; 
  BigAEM(27,10) = 0.4391550328268399*m1[4]; 
  BigAEM(27,11) = 0.4391550328268399*m1[5]; 
  BigAEM(28,0) = 0.5*m1[4]; 
  BigAEM(28,1) = 0.4391550328268398*m1[8]+0.4472135954999579*m1[1]; 
  BigAEM(28,2) = 0.5000000000000001*m1[6]; 
  BigAEM(28,3) = 0.4391550328268399*m1[10]+0.4472135954999579*m1[3]; 
  BigAEM(28,4) = 0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(28,6) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(28,7) = 0.4472135954999579*m1[7]; 
  BigAEM(28,8) = 0.2981423969999719*m1[8]+0.4391550328268398*m1[1]; 
  BigAEM(28,10) = 0.2981423969999719*m1[10]+0.4391550328268399*m1[3]; 
  BigAEM(28,11) = 0.4472135954999579*m1[11]; 
  BigAEM(29,0) = 0.5*m1[5]; 
  BigAEM(29,1) = 0.5000000000000001*m1[7]; 
  BigAEM(29,2) = 0.4391550328268398*m1[9]+0.4472135954999579*m1[2]; 
  BigAEM(29,3) = 0.4391550328268399*m1[11]+0.4472135954999579*m1[3]; 
  BigAEM(29,5) = 0.31943828249997*m1[5]+0.5*m1[0]; 
  BigAEM(29,6) = 0.4472135954999579*m1[6]; 
  BigAEM(29,7) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(29,9) = 0.2981423969999719*m1[9]+0.4391550328268398*m1[2]; 
  BigAEM(29,10) = 0.4472135954999579*m1[10]; 
  BigAEM(29,11) = 0.2981423969999719*m1[11]+0.4391550328268399*m1[3]; 
  BigAEM(30,0) = 0.5*m1[6]; 
  BigAEM(30,1) = 0.4391550328268399*m1[10]+0.447213595499958*m1[3]; 
  BigAEM(30,2) = 0.5000000000000001*m1[4]; 
  BigAEM(30,3) = 0.4391550328268399*m1[8]+0.4*m1[7]+0.447213595499958*m1[1]; 
  BigAEM(30,4) = 0.31943828249997*m1[6]+0.5000000000000001*m1[2]; 
  BigAEM(30,5) = 0.4472135954999579*m1[6]; 
  BigAEM(30,6) = 0.4472135954999579*m1[5]+0.31943828249997*m1[4]+0.5*m1[0]; 
  BigAEM(30,7) = 0.3927922024247863*m1[11]+0.3927922024247863*m1[10]+0.4*m1[3]; 
  BigAEM(30,8) = 0.2981423969999719*m1[10]+0.4391550328268399*m1[3]; 
  BigAEM(30,10) = 0.2981423969999719*m1[8]+0.3927922024247863*m1[7]+0.4391550328268399*m1[1]; 
  BigAEM(30,11) = 0.3927922024247863*m1[7]; 
  BigAEM(31,0) = 0.5*m1[7]; 
  BigAEM(31,1) = 0.5000000000000001*m1[5]; 
  BigAEM(31,2) = 0.4391550328268399*m1[11]+0.447213595499958*m1[3]; 
  BigAEM(31,3) = 0.4391550328268399*m1[9]+0.4*m1[6]+0.447213595499958*m1[2]; 
  BigAEM(31,4) = 0.4472135954999579*m1[7]; 
  BigAEM(31,5) = 0.31943828249997*m1[7]+0.5000000000000001*m1[1]; 
  BigAEM(31,6) = 0.3927922024247863*m1[11]+0.3927922024247863*m1[10]+0.4*m1[3]; 
  BigAEM(31,7) = 0.31943828249997*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
  BigAEM(31,9) = 0.2981423969999719*m1[11]+0.4391550328268399*m1[3]; 
  BigAEM(31,10) = 0.3927922024247863*m1[6]; 
  BigAEM(31,11) = 0.2981423969999719*m1[9]+0.3927922024247863*m1[6]+0.4391550328268399*m1[2]; 
  BigAEM(32,0) = 0.5*m1[8]; 
  BigAEM(32,1) = 0.4391550328268398*m1[4]; 
  BigAEM(32,2) = 0.5*m1[10]; 
  BigAEM(32,3) = 0.4391550328268399*m1[6]; 
  BigAEM(32,4) = 0.2981423969999719*m1[8]+0.4391550328268398*m1[1]; 
  BigAEM(32,6) = 0.2981423969999719*m1[10]+0.4391550328268399*m1[3]; 
  BigAEM(32,8) = 0.2981423969999719*m1[4]+0.5*m1[0]; 
  BigAEM(32,10) = 0.2981423969999719*m1[6]+0.5*m1[2]; 
  BigAEM(33,0) = 0.5*m1[9]; 
  BigAEM(33,1) = 0.5*m1[11]; 
  BigAEM(33,2) = 0.4391550328268398*m1[5]; 
  BigAEM(33,3) = 0.4391550328268399*m1[7]; 
  BigAEM(33,5) = 0.2981423969999719*m1[9]+0.4391550328268398*m1[2]; 
  BigAEM(33,7) = 0.2981423969999719*m1[11]+0.4391550328268399*m1[3]; 
  BigAEM(33,9) = 0.2981423969999719*m1[5]+0.5*m1[0]; 
  BigAEM(33,11) = 0.2981423969999719*m1[7]+0.5*m1[1]; 
  BigAEM(34,0) = 0.5*m1[10]; 
  BigAEM(34,1) = 0.4391550328268399*m1[6]; 
  BigAEM(34,2) = 0.5*m1[8]; 
  BigAEM(34,3) = 0.4391550328268399*m1[4]; 
  BigAEM(34,4) = 0.2981423969999719*m1[10]+0.4391550328268399*m1[3]; 
  BigAEM(34,5) = 0.4472135954999579*m1[10]; 
  BigAEM(34,6) = 0.2981423969999719*m1[8]+0.3927922024247863*m1[7]+0.4391550328268399*m1[1]; 
  BigAEM(34,7) = 0.3927922024247863*m1[6]; 
  BigAEM(34,8) = 0.2981423969999719*m1[6]+0.5*m1[2]; 
  BigAEM(34,10) = 0.4472135954999579*m1[5]+0.2981423969999719*m1[4]+0.5*m1[0]; 
  BigAEM(35,0) = 0.5*m1[11]; 
  BigAEM(35,1) = 0.5*m1[9]; 
  BigAEM(35,2) = 0.4391550328268399*m1[7]; 
  BigAEM(35,3) = 0.4391550328268399*m1[5]; 
  BigAEM(35,4) = 0.4472135954999579*m1[11]; 
  BigAEM(35,5) = 0.2981423969999719*m1[11]+0.4391550328268399*m1[3]; 
  BigAEM(35,6) = 0.3927922024247863*m1[7]; 
  BigAEM(35,7) = 0.2981423969999719*m1[9]+0.3927922024247863*m1[6]+0.4391550328268399*m1[2]; 
  BigAEM(35,9) = 0.2981423969999719*m1[7]+0.5*m1[1]; 
  BigAEM(35,11) = 0.2981423969999719*m1[5]+0.4472135954999579*m1[4]+0.5*m1[0]; 
 
  // ....... Block from weak multiply of uY and m0  .......... // 
  BigAEM(12,12) = 0.5*m0s[0]; 
  BigAEM(12,13) = 0.5*m0s[1]; 
  BigAEM(12,14) = 0.5*m0s[2]; 
  BigAEM(12,15) = 0.5*m0s[3]; 
  BigAEM(12,16) = 0.5*m0s[4]; 
  BigAEM(12,17) = 0.5*m0s[5]; 
  BigAEM(12,18) = 0.5*m0s[6]; 
  BigAEM(12,19) = 0.5*m0s[7]; 
  BigAEM(12,20) = 0.5*m0s[8]; 
  BigAEM(12,21) = 0.5*m0s[9]; 
  BigAEM(12,22) = 0.5*m0s[10]; 
  BigAEM(12,23) = 0.5*m0s[11]; 
  BigAEM(13,12) = 0.5*m0s[1]; 
  BigAEM(13,13) = 0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(13,14) = 0.5*m0s[3]; 
  BigAEM(13,15) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(13,16) = 0.4391550328268398*m0s[8]+0.4472135954999579*m0s[1]; 
  BigAEM(13,17) = 0.5000000000000001*m0s[7]; 
  BigAEM(13,18) = 0.4391550328268399*m0s[10]+0.447213595499958*m0s[3]; 
  BigAEM(13,19) = 0.5000000000000001*m0s[5]; 
  BigAEM(13,20) = 0.4391550328268398*m0s[4]; 
  BigAEM(13,21) = 0.5*m0s[11]; 
  BigAEM(13,22) = 0.4391550328268399*m0s[6]; 
  BigAEM(13,23) = 0.5*m0s[9]; 
  BigAEM(14,12) = 0.5*m0s[2]; 
  BigAEM(14,13) = 0.5*m0s[3]; 
  BigAEM(14,14) = 0.4472135954999579*m0s[5]+0.5*m0s[0]; 
  BigAEM(14,15) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(14,16) = 0.5000000000000001*m0s[6]; 
  BigAEM(14,17) = 0.4391550328268398*m0s[9]+0.4472135954999579*m0s[2]; 
  BigAEM(14,18) = 0.5000000000000001*m0s[4]; 
  BigAEM(14,19) = 0.4391550328268399*m0s[11]+0.447213595499958*m0s[3]; 
  BigAEM(14,20) = 0.5*m0s[10]; 
  BigAEM(14,21) = 0.4391550328268398*m0s[5]; 
  BigAEM(14,22) = 0.5*m0s[8]; 
  BigAEM(14,23) = 0.4391550328268399*m0s[7]; 
  BigAEM(15,12) = 0.5*m0s[3]; 
  BigAEM(15,13) = 0.447213595499958*m0s[6]+0.5*m0s[2]; 
  BigAEM(15,14) = 0.447213595499958*m0s[7]+0.5*m0s[1]; 
  BigAEM(15,15) = 0.4472135954999579*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(15,16) = 0.4391550328268399*m0s[10]+0.4472135954999579*m0s[3]; 
  BigAEM(15,17) = 0.4391550328268399*m0s[11]+0.4472135954999579*m0s[3]; 
  BigAEM(15,18) = 0.4391550328268399*m0s[8]+0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(15,19) = 0.4391550328268399*m0s[9]+0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(15,20) = 0.4391550328268399*m0s[6]; 
  BigAEM(15,21) = 0.4391550328268399*m0s[7]; 
  BigAEM(15,22) = 0.4391550328268399*m0s[4]; 
  BigAEM(15,23) = 0.4391550328268399*m0s[5]; 
  BigAEM(16,12) = 0.5*m0s[4]; 
  BigAEM(16,13) = 0.4391550328268398*m0s[8]+0.4472135954999579*m0s[1]; 
  BigAEM(16,14) = 0.5000000000000001*m0s[6]; 
  BigAEM(16,15) = 0.4391550328268399*m0s[10]+0.4472135954999579*m0s[3]; 
  BigAEM(16,16) = 0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(16,18) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(16,19) = 0.4472135954999579*m0s[7]; 
  BigAEM(16,20) = 0.2981423969999719*m0s[8]+0.4391550328268398*m0s[1]; 
  BigAEM(16,22) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(16,23) = 0.4472135954999579*m0s[11]; 
  BigAEM(17,12) = 0.5*m0s[5]; 
  BigAEM(17,13) = 0.5000000000000001*m0s[7]; 
  BigAEM(17,14) = 0.4391550328268398*m0s[9]+0.4472135954999579*m0s[2]; 
  BigAEM(17,15) = 0.4391550328268399*m0s[11]+0.4472135954999579*m0s[3]; 
  BigAEM(17,17) = 0.31943828249997*m0s[5]+0.5*m0s[0]; 
  BigAEM(17,18) = 0.4472135954999579*m0s[6]; 
  BigAEM(17,19) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(17,21) = 0.2981423969999719*m0s[9]+0.4391550328268398*m0s[2]; 
  BigAEM(17,22) = 0.4472135954999579*m0s[10]; 
  BigAEM(17,23) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(18,12) = 0.5*m0s[6]; 
  BigAEM(18,13) = 0.4391550328268399*m0s[10]+0.447213595499958*m0s[3]; 
  BigAEM(18,14) = 0.5000000000000001*m0s[4]; 
  BigAEM(18,15) = 0.4391550328268399*m0s[8]+0.4*m0s[7]+0.447213595499958*m0s[1]; 
  BigAEM(18,16) = 0.31943828249997*m0s[6]+0.5000000000000001*m0s[2]; 
  BigAEM(18,17) = 0.4472135954999579*m0s[6]; 
  BigAEM(18,18) = 0.4472135954999579*m0s[5]+0.31943828249997*m0s[4]+0.5*m0s[0]; 
  BigAEM(18,19) = 0.3927922024247863*m0s[11]+0.3927922024247863*m0s[10]+0.4*m0s[3]; 
  BigAEM(18,20) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(18,22) = 0.2981423969999719*m0s[8]+0.3927922024247863*m0s[7]+0.4391550328268399*m0s[1]; 
  BigAEM(18,23) = 0.3927922024247863*m0s[7]; 
  BigAEM(19,12) = 0.5*m0s[7]; 
  BigAEM(19,13) = 0.5000000000000001*m0s[5]; 
  BigAEM(19,14) = 0.4391550328268399*m0s[11]+0.447213595499958*m0s[3]; 
  BigAEM(19,15) = 0.4391550328268399*m0s[9]+0.4*m0s[6]+0.447213595499958*m0s[2]; 
  BigAEM(19,16) = 0.4472135954999579*m0s[7]; 
  BigAEM(19,17) = 0.31943828249997*m0s[7]+0.5000000000000001*m0s[1]; 
  BigAEM(19,18) = 0.3927922024247863*m0s[11]+0.3927922024247863*m0s[10]+0.4*m0s[3]; 
  BigAEM(19,19) = 0.31943828249997*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
  BigAEM(19,21) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(19,22) = 0.3927922024247863*m0s[6]; 
  BigAEM(19,23) = 0.2981423969999719*m0s[9]+0.3927922024247863*m0s[6]+0.4391550328268399*m0s[2]; 
  BigAEM(20,12) = 0.5*m0s[8]; 
  BigAEM(20,13) = 0.4391550328268398*m0s[4]; 
  BigAEM(20,14) = 0.5*m0s[10]; 
  BigAEM(20,15) = 0.4391550328268399*m0s[6]; 
  BigAEM(20,16) = 0.2981423969999719*m0s[8]+0.4391550328268398*m0s[1]; 
  BigAEM(20,18) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(20,20) = 0.2981423969999719*m0s[4]+0.5*m0s[0]; 
  BigAEM(20,22) = 0.2981423969999719*m0s[6]+0.5*m0s[2]; 
  BigAEM(21,12) = 0.5*m0s[9]; 
  BigAEM(21,13) = 0.5*m0s[11]; 
  BigAEM(21,14) = 0.4391550328268398*m0s[5]; 
  BigAEM(21,15) = 0.4391550328268399*m0s[7]; 
  BigAEM(21,17) = 0.2981423969999719*m0s[9]+0.4391550328268398*m0s[2]; 
  BigAEM(21,19) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(21,21) = 0.2981423969999719*m0s[5]+0.5*m0s[0]; 
  BigAEM(21,23) = 0.2981423969999719*m0s[7]+0.5*m0s[1]; 
  BigAEM(22,12) = 0.5*m0s[10]; 
  BigAEM(22,13) = 0.4391550328268399*m0s[6]; 
  BigAEM(22,14) = 0.5*m0s[8]; 
  BigAEM(22,15) = 0.4391550328268399*m0s[4]; 
  BigAEM(22,16) = 0.2981423969999719*m0s[10]+0.4391550328268399*m0s[3]; 
  BigAEM(22,17) = 0.4472135954999579*m0s[10]; 
  BigAEM(22,18) = 0.2981423969999719*m0s[8]+0.3927922024247863*m0s[7]+0.4391550328268399*m0s[1]; 
  BigAEM(22,19) = 0.3927922024247863*m0s[6]; 
  BigAEM(22,20) = 0.2981423969999719*m0s[6]+0.5*m0s[2]; 
  BigAEM(22,22) = 0.4472135954999579*m0s[5]+0.2981423969999719*m0s[4]+0.5*m0s[0]; 
  BigAEM(23,12) = 0.5*m0s[11]; 
  BigAEM(23,13) = 0.5*m0s[9]; 
  BigAEM(23,14) = 0.4391550328268399*m0s[7]; 
  BigAEM(23,15) = 0.4391550328268399*m0s[5]; 
  BigAEM(23,16) = 0.4472135954999579*m0s[11]; 
  BigAEM(23,17) = 0.2981423969999719*m0s[11]+0.4391550328268399*m0s[3]; 
  BigAEM(23,18) = 0.3927922024247863*m0s[7]; 
  BigAEM(23,19) = 0.2981423969999719*m0s[9]+0.3927922024247863*m0s[6]+0.4391550328268399*m0s[2]; 
  BigAEM(23,21) = 0.2981423969999719*m0s[7]+0.5*m0s[1]; 
  BigAEM(23,23) = 0.2981423969999719*m0s[5]+0.4472135954999579*m0s[4]+0.5*m0s[0]; 
 
  // ....... Block from correction to uY .......... // 
  BigAEM(12,24) = -0.5*cM[12]; 
  BigAEM(12,25) = -0.5*cM[13]; 
  BigAEM(12,26) = -0.5*cM[14]; 
  BigAEM(12,27) = -0.5*cM[15]; 
  BigAEM(12,28) = -0.5*cM[16]; 
  BigAEM(12,29) = -0.5*cM[17]; 
  BigAEM(12,30) = -0.5*cM[18]; 
  BigAEM(12,31) = -0.5*cM[19]; 
  BigAEM(12,32) = -0.5*cM[20]; 
  BigAEM(12,33) = -0.5*cM[21]; 
  BigAEM(12,34) = -0.5*cM[22]; 
  BigAEM(12,35) = -0.5*cM[23]; 
  BigAEM(13,24) = -0.5*cM[13]; 
  BigAEM(13,25) = (-0.4472135954999579*cM[16])-0.5*cM[12]; 
  BigAEM(13,26) = -0.5*cM[15]; 
  BigAEM(13,27) = (-0.447213595499958*cM[18])-0.5*cM[14]; 
  BigAEM(13,28) = (-0.4391550328268398*cM[20])-0.4472135954999579*cM[13]; 
  BigAEM(13,29) = -0.5000000000000001*cM[19]; 
  BigAEM(13,30) = (-0.4391550328268399*cM[22])-0.447213595499958*cM[15]; 
  BigAEM(13,31) = -0.5000000000000001*cM[17]; 
  BigAEM(13,32) = -0.4391550328268398*cM[16]; 
  BigAEM(13,33) = -0.5*cM[23]; 
  BigAEM(13,34) = -0.4391550328268399*cM[18]; 
  BigAEM(13,35) = -0.5*cM[21]; 
  BigAEM(14,24) = -0.5*cM[14]; 
  BigAEM(14,25) = -0.5*cM[15]; 
  BigAEM(14,26) = (-0.4472135954999579*cM[17])-0.5*cM[12]; 
  BigAEM(14,27) = (-0.447213595499958*cM[19])-0.5*cM[13]; 
  BigAEM(14,28) = -0.5000000000000001*cM[18]; 
  BigAEM(14,29) = (-0.4391550328268398*cM[21])-0.4472135954999579*cM[14]; 
  BigAEM(14,30) = -0.5000000000000001*cM[16]; 
  BigAEM(14,31) = (-0.4391550328268399*cM[23])-0.447213595499958*cM[15]; 
  BigAEM(14,32) = -0.5*cM[22]; 
  BigAEM(14,33) = -0.4391550328268398*cM[17]; 
  BigAEM(14,34) = -0.5*cM[20]; 
  BigAEM(14,35) = -0.4391550328268399*cM[19]; 
  BigAEM(15,24) = -0.5*cM[15]; 
  BigAEM(15,25) = (-0.447213595499958*cM[18])-0.5*cM[14]; 
  BigAEM(15,26) = (-0.447213595499958*cM[19])-0.5*cM[13]; 
  BigAEM(15,27) = (-0.4472135954999579*cM[17])-0.4472135954999579*cM[16]-0.5*cM[12]; 
  BigAEM(15,28) = (-0.4391550328268399*cM[22])-0.4472135954999579*cM[15]; 
  BigAEM(15,29) = (-0.4391550328268399*cM[23])-0.4472135954999579*cM[15]; 
  BigAEM(15,30) = (-0.4391550328268399*cM[20])-0.4*cM[19]-0.447213595499958*cM[13]; 
  BigAEM(15,31) = (-0.4391550328268399*cM[21])-0.4*cM[18]-0.447213595499958*cM[14]; 
  BigAEM(15,32) = -0.4391550328268399*cM[18]; 
  BigAEM(15,33) = -0.4391550328268399*cM[19]; 
  BigAEM(15,34) = -0.4391550328268399*cM[16]; 
  BigAEM(15,35) = -0.4391550328268399*cM[17]; 
  BigAEM(16,24) = -0.5*cM[16]; 
  BigAEM(16,25) = (-0.4391550328268398*cM[20])-0.4472135954999579*cM[13]; 
  BigAEM(16,26) = -0.5000000000000001*cM[18]; 
  BigAEM(16,27) = (-0.4391550328268399*cM[22])-0.4472135954999579*cM[15]; 
  BigAEM(16,28) = (-0.31943828249997*cM[16])-0.5*cM[12]; 
  BigAEM(16,30) = (-0.31943828249997*cM[18])-0.5000000000000001*cM[14]; 
  BigAEM(16,31) = -0.4472135954999579*cM[19]; 
  BigAEM(16,32) = (-0.2981423969999719*cM[20])-0.4391550328268398*cM[13]; 
  BigAEM(16,34) = (-0.2981423969999719*cM[22])-0.4391550328268399*cM[15]; 
  BigAEM(16,35) = -0.4472135954999579*cM[23]; 
  BigAEM(17,24) = -0.5*cM[17]; 
  BigAEM(17,25) = -0.5000000000000001*cM[19]; 
  BigAEM(17,26) = (-0.4391550328268398*cM[21])-0.4472135954999579*cM[14]; 
  BigAEM(17,27) = (-0.4391550328268399*cM[23])-0.4472135954999579*cM[15]; 
  BigAEM(17,29) = (-0.31943828249997*cM[17])-0.5*cM[12]; 
  BigAEM(17,30) = -0.4472135954999579*cM[18]; 
  BigAEM(17,31) = (-0.31943828249997*cM[19])-0.5000000000000001*cM[13]; 
  BigAEM(17,33) = (-0.2981423969999719*cM[21])-0.4391550328268398*cM[14]; 
  BigAEM(17,34) = -0.4472135954999579*cM[22]; 
  BigAEM(17,35) = (-0.2981423969999719*cM[23])-0.4391550328268399*cM[15]; 
  BigAEM(18,24) = -0.5*cM[18]; 
  BigAEM(18,25) = (-0.4391550328268399*cM[22])-0.447213595499958*cM[15]; 
  BigAEM(18,26) = -0.5000000000000001*cM[16]; 
  BigAEM(18,27) = (-0.4391550328268399*cM[20])-0.4*cM[19]-0.447213595499958*cM[13]; 
  BigAEM(18,28) = (-0.31943828249997*cM[18])-0.5000000000000001*cM[14]; 
  BigAEM(18,29) = -0.4472135954999579*cM[18]; 
  BigAEM(18,30) = (-0.4472135954999579*cM[17])-0.31943828249997*cM[16]-0.5*cM[12]; 
  BigAEM(18,31) = (-0.3927922024247863*cM[23])-0.3927922024247863*cM[22]-0.4*cM[15]; 
  BigAEM(18,32) = (-0.2981423969999719*cM[22])-0.4391550328268399*cM[15]; 
  BigAEM(18,34) = (-0.2981423969999719*cM[20])-0.3927922024247863*cM[19]-0.4391550328268399*cM[13]; 
  BigAEM(18,35) = -0.3927922024247863*cM[19]; 
  BigAEM(19,24) = -0.5*cM[19]; 
  BigAEM(19,25) = -0.5000000000000001*cM[17]; 
  BigAEM(19,26) = (-0.4391550328268399*cM[23])-0.447213595499958*cM[15]; 
  BigAEM(19,27) = (-0.4391550328268399*cM[21])-0.4*cM[18]-0.447213595499958*cM[14]; 
  BigAEM(19,28) = -0.4472135954999579*cM[19]; 
  BigAEM(19,29) = (-0.31943828249997*cM[19])-0.5000000000000001*cM[13]; 
  BigAEM(19,30) = (-0.3927922024247863*cM[23])-0.3927922024247863*cM[22]-0.4*cM[15]; 
  BigAEM(19,31) = (-0.31943828249997*cM[17])-0.4472135954999579*cM[16]-0.5*cM[12]; 
  BigAEM(19,33) = (-0.2981423969999719*cM[23])-0.4391550328268399*cM[15]; 
  BigAEM(19,34) = -0.3927922024247863*cM[18]; 
  BigAEM(19,35) = (-0.2981423969999719*cM[21])-0.3927922024247863*cM[18]-0.4391550328268399*cM[14]; 
  BigAEM(20,24) = -0.5*cM[20]; 
  BigAEM(20,25) = -0.4391550328268398*cM[16]; 
  BigAEM(20,26) = -0.5*cM[22]; 
  BigAEM(20,27) = -0.4391550328268399*cM[18]; 
  BigAEM(20,28) = (-0.2981423969999719*cM[20])-0.4391550328268398*cM[13]; 
  BigAEM(20,30) = (-0.2981423969999719*cM[22])-0.4391550328268399*cM[15]; 
  BigAEM(20,32) = (-0.2981423969999719*cM[16])-0.5*cM[12]; 
  BigAEM(20,34) = (-0.2981423969999719*cM[18])-0.5*cM[14]; 
  BigAEM(21,24) = -0.5*cM[21]; 
  BigAEM(21,25) = -0.5*cM[23]; 
  BigAEM(21,26) = -0.4391550328268398*cM[17]; 
  BigAEM(21,27) = -0.4391550328268399*cM[19]; 
  BigAEM(21,29) = (-0.2981423969999719*cM[21])-0.4391550328268398*cM[14]; 
  BigAEM(21,31) = (-0.2981423969999719*cM[23])-0.4391550328268399*cM[15]; 
  BigAEM(21,33) = (-0.2981423969999719*cM[17])-0.5*cM[12]; 
  BigAEM(21,35) = (-0.2981423969999719*cM[19])-0.5*cM[13]; 
  BigAEM(22,24) = -0.5*cM[22]; 
  BigAEM(22,25) = -0.4391550328268399*cM[18]; 
  BigAEM(22,26) = -0.5*cM[20]; 
  BigAEM(22,27) = -0.4391550328268399*cM[16]; 
  BigAEM(22,28) = (-0.2981423969999719*cM[22])-0.4391550328268399*cM[15]; 
  BigAEM(22,29) = -0.4472135954999579*cM[22]; 
  BigAEM(22,30) = (-0.2981423969999719*cM[20])-0.3927922024247863*cM[19]-0.4391550328268399*cM[13]; 
  BigAEM(22,31) = -0.3927922024247863*cM[18]; 
  BigAEM(22,32) = (-0.2981423969999719*cM[18])-0.5*cM[14]; 
  BigAEM(22,34) = (-0.4472135954999579*cM[17])-0.2981423969999719*cM[16]-0.5*cM[12]; 
  BigAEM(23,24) = -0.5*cM[23]; 
  BigAEM(23,25) = -0.5*cM[21]; 
  BigAEM(23,26) = -0.4391550328268399*cM[19]; 
  BigAEM(23,27) = -0.4391550328268399*cM[17]; 
  BigAEM(23,28) = -0.4472135954999579*cM[23]; 
  BigAEM(23,29) = (-0.2981423969999719*cM[23])-0.4391550328268399*cM[15]; 
  BigAEM(23,30) = -0.3927922024247863*cM[19]; 
  BigAEM(23,31) = (-0.2981423969999719*cM[21])-0.3927922024247863*cM[18]-0.4391550328268399*cM[14]; 
  BigAEM(23,33) = (-0.2981423969999719*cM[19])-0.5*cM[13]; 
  BigAEM(23,35) = (-0.2981423969999719*cM[17])-0.4472135954999579*cM[16]-0.5*cM[12]; 
 
  // ....... Block from weak multiply of uY and m1Y  .......... // 
  BigAEM(24,12) = 0.5*m1[12]; 
  BigAEM(24,13) = 0.5*m1[13]; 
  BigAEM(24,14) = 0.5*m1[14]; 
  BigAEM(24,15) = 0.5*m1[15]; 
  BigAEM(24,16) = 0.5*m1[16]; 
  BigAEM(24,17) = 0.5*m1[17]; 
  BigAEM(24,18) = 0.5*m1[18]; 
  BigAEM(24,19) = 0.5*m1[19]; 
  BigAEM(24,20) = 0.5*m1[20]; 
  BigAEM(24,21) = 0.5*m1[21]; 
  BigAEM(24,22) = 0.5*m1[22]; 
  BigAEM(24,23) = 0.5*m1[23]; 
  BigAEM(25,12) = 0.5*m1[13]; 
  BigAEM(25,13) = 0.4472135954999579*m1[16]+0.5*m1[12]; 
  BigAEM(25,14) = 0.5*m1[15]; 
  BigAEM(25,15) = 0.447213595499958*m1[18]+0.5*m1[14]; 
  BigAEM(25,16) = 0.4391550328268398*m1[20]+0.4472135954999579*m1[13]; 
  BigAEM(25,17) = 0.5000000000000001*m1[19]; 
  BigAEM(25,18) = 0.4391550328268399*m1[22]+0.447213595499958*m1[15]; 
  BigAEM(25,19) = 0.5000000000000001*m1[17]; 
  BigAEM(25,20) = 0.4391550328268398*m1[16]; 
  BigAEM(25,21) = 0.5*m1[23]; 
  BigAEM(25,22) = 0.4391550328268399*m1[18]; 
  BigAEM(25,23) = 0.5*m1[21]; 
  BigAEM(26,12) = 0.5*m1[14]; 
  BigAEM(26,13) = 0.5*m1[15]; 
  BigAEM(26,14) = 0.4472135954999579*m1[17]+0.5*m1[12]; 
  BigAEM(26,15) = 0.447213595499958*m1[19]+0.5*m1[13]; 
  BigAEM(26,16) = 0.5000000000000001*m1[18]; 
  BigAEM(26,17) = 0.4391550328268398*m1[21]+0.4472135954999579*m1[14]; 
  BigAEM(26,18) = 0.5000000000000001*m1[16]; 
  BigAEM(26,19) = 0.4391550328268399*m1[23]+0.447213595499958*m1[15]; 
  BigAEM(26,20) = 0.5*m1[22]; 
  BigAEM(26,21) = 0.4391550328268398*m1[17]; 
  BigAEM(26,22) = 0.5*m1[20]; 
  BigAEM(26,23) = 0.4391550328268399*m1[19]; 
  BigAEM(27,12) = 0.5*m1[15]; 
  BigAEM(27,13) = 0.447213595499958*m1[18]+0.5*m1[14]; 
  BigAEM(27,14) = 0.447213595499958*m1[19]+0.5*m1[13]; 
  BigAEM(27,15) = 0.4472135954999579*m1[17]+0.4472135954999579*m1[16]+0.5*m1[12]; 
  BigAEM(27,16) = 0.4391550328268399*m1[22]+0.4472135954999579*m1[15]; 
  BigAEM(27,17) = 0.4391550328268399*m1[23]+0.4472135954999579*m1[15]; 
  BigAEM(27,18) = 0.4391550328268399*m1[20]+0.4*m1[19]+0.447213595499958*m1[13]; 
  BigAEM(27,19) = 0.4391550328268399*m1[21]+0.4*m1[18]+0.447213595499958*m1[14]; 
  BigAEM(27,20) = 0.4391550328268399*m1[18]; 
  BigAEM(27,21) = 0.4391550328268399*m1[19]; 
  BigAEM(27,22) = 0.4391550328268399*m1[16]; 
  BigAEM(27,23) = 0.4391550328268399*m1[17]; 
  BigAEM(28,12) = 0.5*m1[16]; 
  BigAEM(28,13) = 0.4391550328268398*m1[20]+0.4472135954999579*m1[13]; 
  BigAEM(28,14) = 0.5000000000000001*m1[18]; 
  BigAEM(28,15) = 0.4391550328268399*m1[22]+0.4472135954999579*m1[15]; 
  BigAEM(28,16) = 0.31943828249997*m1[16]+0.5*m1[12]; 
  BigAEM(28,18) = 0.31943828249997*m1[18]+0.5000000000000001*m1[14]; 
  BigAEM(28,19) = 0.4472135954999579*m1[19]; 
  BigAEM(28,20) = 0.2981423969999719*m1[20]+0.4391550328268398*m1[13]; 
  BigAEM(28,22) = 0.2981423969999719*m1[22]+0.4391550328268399*m1[15]; 
  BigAEM(28,23) = 0.4472135954999579*m1[23]; 
  BigAEM(29,12) = 0.5*m1[17]; 
  BigAEM(29,13) = 0.5000000000000001*m1[19]; 
  BigAEM(29,14) = 0.4391550328268398*m1[21]+0.4472135954999579*m1[14]; 
  BigAEM(29,15) = 0.4391550328268399*m1[23]+0.4472135954999579*m1[15]; 
  BigAEM(29,17) = 0.31943828249997*m1[17]+0.5*m1[12]; 
  BigAEM(29,18) = 0.4472135954999579*m1[18]; 
  BigAEM(29,19) = 0.31943828249997*m1[19]+0.5000000000000001*m1[13]; 
  BigAEM(29,21) = 0.2981423969999719*m1[21]+0.4391550328268398*m1[14]; 
  BigAEM(29,22) = 0.4472135954999579*m1[22]; 
  BigAEM(29,23) = 0.2981423969999719*m1[23]+0.4391550328268399*m1[15]; 
  BigAEM(30,12) = 0.5*m1[18]; 
  BigAEM(30,13) = 0.4391550328268399*m1[22]+0.447213595499958*m1[15]; 
  BigAEM(30,14) = 0.5000000000000001*m1[16]; 
  BigAEM(30,15) = 0.4391550328268399*m1[20]+0.4*m1[19]+0.447213595499958*m1[13]; 
  BigAEM(30,16) = 0.31943828249997*m1[18]+0.5000000000000001*m1[14]; 
  BigAEM(30,17) = 0.4472135954999579*m1[18]; 
  BigAEM(30,18) = 0.4472135954999579*m1[17]+0.31943828249997*m1[16]+0.5*m1[12]; 
  BigAEM(30,19) = 0.3927922024247863*m1[23]+0.3927922024247863*m1[22]+0.4*m1[15]; 
  BigAEM(30,20) = 0.2981423969999719*m1[22]+0.4391550328268399*m1[15]; 
  BigAEM(30,22) = 0.2981423969999719*m1[20]+0.3927922024247863*m1[19]+0.4391550328268399*m1[13]; 
  BigAEM(30,23) = 0.3927922024247863*m1[19]; 
  BigAEM(31,12) = 0.5*m1[19]; 
  BigAEM(31,13) = 0.5000000000000001*m1[17]; 
  BigAEM(31,14) = 0.4391550328268399*m1[23]+0.447213595499958*m1[15]; 
  BigAEM(31,15) = 0.4391550328268399*m1[21]+0.4*m1[18]+0.447213595499958*m1[14]; 
  BigAEM(31,16) = 0.4472135954999579*m1[19]; 
  BigAEM(31,17) = 0.31943828249997*m1[19]+0.5000000000000001*m1[13]; 
  BigAEM(31,18) = 0.3927922024247863*m1[23]+0.3927922024247863*m1[22]+0.4*m1[15]; 
  BigAEM(31,19) = 0.31943828249997*m1[17]+0.4472135954999579*m1[16]+0.5*m1[12]; 
  BigAEM(31,21) = 0.2981423969999719*m1[23]+0.4391550328268399*m1[15]; 
  BigAEM(31,22) = 0.3927922024247863*m1[18]; 
  BigAEM(31,23) = 0.2981423969999719*m1[21]+0.3927922024247863*m1[18]+0.4391550328268399*m1[14]; 
  BigAEM(32,12) = 0.5*m1[20]; 
  BigAEM(32,13) = 0.4391550328268398*m1[16]; 
  BigAEM(32,14) = 0.5*m1[22]; 
  BigAEM(32,15) = 0.4391550328268399*m1[18]; 
  BigAEM(32,16) = 0.2981423969999719*m1[20]+0.4391550328268398*m1[13]; 
  BigAEM(32,18) = 0.2981423969999719*m1[22]+0.4391550328268399*m1[15]; 
  BigAEM(32,20) = 0.2981423969999719*m1[16]+0.5*m1[12]; 
  BigAEM(32,22) = 0.2981423969999719*m1[18]+0.5*m1[14]; 
  BigAEM(33,12) = 0.5*m1[21]; 
  BigAEM(33,13) = 0.5*m1[23]; 
  BigAEM(33,14) = 0.4391550328268398*m1[17]; 
  BigAEM(33,15) = 0.4391550328268399*m1[19]; 
  BigAEM(33,17) = 0.2981423969999719*m1[21]+0.4391550328268398*m1[14]; 
  BigAEM(33,19) = 0.2981423969999719*m1[23]+0.4391550328268399*m1[15]; 
  BigAEM(33,21) = 0.2981423969999719*m1[17]+0.5*m1[12]; 
  BigAEM(33,23) = 0.2981423969999719*m1[19]+0.5*m1[13]; 
  BigAEM(34,12) = 0.5*m1[22]; 
  BigAEM(34,13) = 0.4391550328268399*m1[18]; 
  BigAEM(34,14) = 0.5*m1[20]; 
  BigAEM(34,15) = 0.4391550328268399*m1[16]; 
  BigAEM(34,16) = 0.2981423969999719*m1[22]+0.4391550328268399*m1[15]; 
  BigAEM(34,17) = 0.4472135954999579*m1[22]; 
  BigAEM(34,18) = 0.2981423969999719*m1[20]+0.3927922024247863*m1[19]+0.4391550328268399*m1[13]; 
  BigAEM(34,19) = 0.3927922024247863*m1[18]; 
  BigAEM(34,20) = 0.2981423969999719*m1[18]+0.5*m1[14]; 
  BigAEM(34,22) = 0.4472135954999579*m1[17]+0.2981423969999719*m1[16]+0.5*m1[12]; 
  BigAEM(35,12) = 0.5*m1[23]; 
  BigAEM(35,13) = 0.5*m1[21]; 
  BigAEM(35,14) = 0.4391550328268399*m1[19]; 
  BigAEM(35,15) = 0.4391550328268399*m1[17]; 
  BigAEM(35,16) = 0.4472135954999579*m1[23]; 
  BigAEM(35,17) = 0.2981423969999719*m1[23]+0.4391550328268399*m1[15]; 
  BigAEM(35,18) = 0.3927922024247863*m1[19]; 
  BigAEM(35,19) = 0.2981423969999719*m1[21]+0.3927922024247863*m1[18]+0.4391550328268399*m1[14]; 
  BigAEM(35,21) = 0.2981423969999719*m1[19]+0.5*m1[13]; 
  BigAEM(35,23) = 0.2981423969999719*m1[17]+0.4472135954999579*m1[16]+0.5*m1[12]; 
 
  // ....... Block from correction to vtSq .......... // 
  BigAEM(24,24) = 0.5*m0s[0]*pVdim-0.5*cE[0]; 
  BigAEM(24,25) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(24,26) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(24,27) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(24,28) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(24,29) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(24,30) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(24,31) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(24,32) = 0.5*m0s[8]*pVdim-0.5*cE[8]; 
  BigAEM(24,33) = 0.5*m0s[9]*pVdim-0.5*cE[9]; 
  BigAEM(24,34) = 0.5*m0s[10]*pVdim-0.5*cE[10]; 
  BigAEM(24,35) = 0.5*m0s[11]*pVdim-0.5*cE[11]; 
  BigAEM(25,24) = 0.5*m0s[1]*pVdim-0.5*cE[1]; 
  BigAEM(25,25) = 0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(25,26) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(25,27) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(25,28) = 0.4391550328268398*m0s[8]*pVdim+0.4472135954999579*m0s[1]*pVdim-0.4391550328268398*cE[8]-0.4472135954999579*cE[1]; 
  BigAEM(25,29) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(25,30) = 0.4391550328268399*m0s[10]*pVdim+0.447213595499958*m0s[3]*pVdim-0.4391550328268399*cE[10]-0.447213595499958*cE[3]; 
  BigAEM(25,31) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(25,32) = 0.4391550328268398*m0s[4]*pVdim-0.4391550328268398*cE[4]; 
  BigAEM(25,33) = 0.5*m0s[11]*pVdim-0.5*cE[11]; 
  BigAEM(25,34) = 0.4391550328268399*m0s[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(25,35) = 0.5*m0s[9]*pVdim-0.5*cE[9]; 
  BigAEM(26,24) = 0.5*m0s[2]*pVdim-0.5*cE[2]; 
  BigAEM(26,25) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(26,26) = 0.4472135954999579*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.5*cE[0]; 
  BigAEM(26,27) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(26,28) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(26,29) = 0.4391550328268398*m0s[9]*pVdim+0.4472135954999579*m0s[2]*pVdim-0.4391550328268398*cE[9]-0.4472135954999579*cE[2]; 
  BigAEM(26,30) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(26,31) = 0.4391550328268399*m0s[11]*pVdim+0.447213595499958*m0s[3]*pVdim-0.4391550328268399*cE[11]-0.447213595499958*cE[3]; 
  BigAEM(26,32) = 0.5*m0s[10]*pVdim-0.5*cE[10]; 
  BigAEM(26,33) = 0.4391550328268398*m0s[5]*pVdim-0.4391550328268398*cE[5]; 
  BigAEM(26,34) = 0.5*m0s[8]*pVdim-0.5*cE[8]; 
  BigAEM(26,35) = 0.4391550328268399*m0s[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(27,24) = 0.5*m0s[3]*pVdim-0.5*cE[3]; 
  BigAEM(27,25) = 0.447213595499958*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.447213595499958*cE[6]-0.5*cE[2]; 
  BigAEM(27,26) = 0.447213595499958*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.447213595499958*cE[7]-0.5*cE[1]; 
  BigAEM(27,27) = 0.4472135954999579*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(27,28) = 0.4391550328268399*m0s[10]*pVdim+0.4472135954999579*m0s[3]*pVdim-0.4391550328268399*cE[10]-0.4472135954999579*cE[3]; 
  BigAEM(27,29) = 0.4391550328268399*m0s[11]*pVdim+0.4472135954999579*m0s[3]*pVdim-0.4391550328268399*cE[11]-0.4472135954999579*cE[3]; 
  BigAEM(27,30) = 0.4391550328268399*m0s[8]*pVdim+0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4391550328268399*cE[8]-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(27,31) = 0.4391550328268399*m0s[9]*pVdim+0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4391550328268399*cE[9]-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(27,32) = 0.4391550328268399*m0s[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(27,33) = 0.4391550328268399*m0s[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(27,34) = 0.4391550328268399*m0s[4]*pVdim-0.4391550328268399*cE[4]; 
  BigAEM(27,35) = 0.4391550328268399*m0s[5]*pVdim-0.4391550328268399*cE[5]; 
  BigAEM(28,24) = 0.5*m0s[4]*pVdim-0.5*cE[4]; 
  BigAEM(28,25) = 0.4391550328268398*m0s[8]*pVdim+0.4472135954999579*m0s[1]*pVdim-0.4391550328268398*cE[8]-0.4472135954999579*cE[1]; 
  BigAEM(28,26) = 0.5000000000000001*m0s[6]*pVdim-0.5000000000000001*cE[6]; 
  BigAEM(28,27) = 0.4391550328268399*m0s[10]*pVdim+0.4472135954999579*m0s[3]*pVdim-0.4391550328268399*cE[10]-0.4472135954999579*cE[3]; 
  BigAEM(28,28) = 0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(28,30) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(28,31) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(28,32) = 0.2981423969999719*m0s[8]*pVdim+0.4391550328268398*m0s[1]*pVdim-0.2981423969999719*cE[8]-0.4391550328268398*cE[1]; 
  BigAEM(28,34) = 0.2981423969999719*m0s[10]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[10]-0.4391550328268399*cE[3]; 
  BigAEM(28,35) = 0.4472135954999579*m0s[11]*pVdim-0.4472135954999579*cE[11]; 
  BigAEM(29,24) = 0.5*m0s[5]*pVdim-0.5*cE[5]; 
  BigAEM(29,25) = 0.5000000000000001*m0s[7]*pVdim-0.5000000000000001*cE[7]; 
  BigAEM(29,26) = 0.4391550328268398*m0s[9]*pVdim+0.4472135954999579*m0s[2]*pVdim-0.4391550328268398*cE[9]-0.4472135954999579*cE[2]; 
  BigAEM(29,27) = 0.4391550328268399*m0s[11]*pVdim+0.4472135954999579*m0s[3]*pVdim-0.4391550328268399*cE[11]-0.4472135954999579*cE[3]; 
  BigAEM(29,29) = 0.31943828249997*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.5*cE[0]; 
  BigAEM(29,30) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(29,31) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(29,33) = 0.2981423969999719*m0s[9]*pVdim+0.4391550328268398*m0s[2]*pVdim-0.2981423969999719*cE[9]-0.4391550328268398*cE[2]; 
  BigAEM(29,34) = 0.4472135954999579*m0s[10]*pVdim-0.4472135954999579*cE[10]; 
  BigAEM(29,35) = 0.2981423969999719*m0s[11]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[11]-0.4391550328268399*cE[3]; 
  BigAEM(30,24) = 0.5*m0s[6]*pVdim-0.5*cE[6]; 
  BigAEM(30,25) = 0.4391550328268399*m0s[10]*pVdim+0.447213595499958*m0s[3]*pVdim-0.4391550328268399*cE[10]-0.447213595499958*cE[3]; 
  BigAEM(30,26) = 0.5000000000000001*m0s[4]*pVdim-0.5000000000000001*cE[4]; 
  BigAEM(30,27) = 0.4391550328268399*m0s[8]*pVdim+0.4*m0s[7]*pVdim+0.447213595499958*m0s[1]*pVdim-0.4391550328268399*cE[8]-0.4*cE[7]-0.447213595499958*cE[1]; 
  BigAEM(30,28) = 0.31943828249997*m0s[6]*pVdim+0.5000000000000001*m0s[2]*pVdim-0.31943828249997*cE[6]-0.5000000000000001*cE[2]; 
  BigAEM(30,29) = 0.4472135954999579*m0s[6]*pVdim-0.4472135954999579*cE[6]; 
  BigAEM(30,30) = 0.4472135954999579*m0s[5]*pVdim+0.31943828249997*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.31943828249997*cE[4]-0.5*cE[0]; 
  BigAEM(30,31) = 0.3927922024247863*m0s[11]*pVdim+0.3927922024247863*m0s[10]*pVdim+0.4*m0s[3]*pVdim-0.3927922024247863*cE[11]-0.3927922024247863*cE[10]-0.4*cE[3]; 
  BigAEM(30,32) = 0.2981423969999719*m0s[10]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[10]-0.4391550328268399*cE[3]; 
  BigAEM(30,34) = 0.2981423969999719*m0s[8]*pVdim+0.3927922024247863*m0s[7]*pVdim+0.4391550328268399*m0s[1]*pVdim-0.2981423969999719*cE[8]-0.3927922024247863*cE[7]-0.4391550328268399*cE[1]; 
  BigAEM(30,35) = 0.3927922024247863*m0s[7]*pVdim-0.3927922024247863*cE[7]; 
  BigAEM(31,24) = 0.5*m0s[7]*pVdim-0.5*cE[7]; 
  BigAEM(31,25) = 0.5000000000000001*m0s[5]*pVdim-0.5000000000000001*cE[5]; 
  BigAEM(31,26) = 0.4391550328268399*m0s[11]*pVdim+0.447213595499958*m0s[3]*pVdim-0.4391550328268399*cE[11]-0.447213595499958*cE[3]; 
  BigAEM(31,27) = 0.4391550328268399*m0s[9]*pVdim+0.4*m0s[6]*pVdim+0.447213595499958*m0s[2]*pVdim-0.4391550328268399*cE[9]-0.4*cE[6]-0.447213595499958*cE[2]; 
  BigAEM(31,28) = 0.4472135954999579*m0s[7]*pVdim-0.4472135954999579*cE[7]; 
  BigAEM(31,29) = 0.31943828249997*m0s[7]*pVdim+0.5000000000000001*m0s[1]*pVdim-0.31943828249997*cE[7]-0.5000000000000001*cE[1]; 
  BigAEM(31,30) = 0.3927922024247863*m0s[11]*pVdim+0.3927922024247863*m0s[10]*pVdim+0.4*m0s[3]*pVdim-0.3927922024247863*cE[11]-0.3927922024247863*cE[10]-0.4*cE[3]; 
  BigAEM(31,31) = 0.31943828249997*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.31943828249997*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
  BigAEM(31,33) = 0.2981423969999719*m0s[11]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[11]-0.4391550328268399*cE[3]; 
  BigAEM(31,34) = 0.3927922024247863*m0s[6]*pVdim-0.3927922024247863*cE[6]; 
  BigAEM(31,35) = 0.2981423969999719*m0s[9]*pVdim+0.3927922024247863*m0s[6]*pVdim+0.4391550328268399*m0s[2]*pVdim-0.2981423969999719*cE[9]-0.3927922024247863*cE[6]-0.4391550328268399*cE[2]; 
  BigAEM(32,24) = 0.5*m0s[8]*pVdim-0.5*cE[8]; 
  BigAEM(32,25) = 0.4391550328268398*m0s[4]*pVdim-0.4391550328268398*cE[4]; 
  BigAEM(32,26) = 0.5*m0s[10]*pVdim-0.5*cE[10]; 
  BigAEM(32,27) = 0.4391550328268399*m0s[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(32,28) = 0.2981423969999719*m0s[8]*pVdim+0.4391550328268398*m0s[1]*pVdim-0.2981423969999719*cE[8]-0.4391550328268398*cE[1]; 
  BigAEM(32,30) = 0.2981423969999719*m0s[10]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[10]-0.4391550328268399*cE[3]; 
  BigAEM(32,32) = 0.2981423969999719*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.2981423969999719*cE[4]-0.5*cE[0]; 
  BigAEM(32,34) = 0.2981423969999719*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.2981423969999719*cE[6]-0.5*cE[2]; 
  BigAEM(33,24) = 0.5*m0s[9]*pVdim-0.5*cE[9]; 
  BigAEM(33,25) = 0.5*m0s[11]*pVdim-0.5*cE[11]; 
  BigAEM(33,26) = 0.4391550328268398*m0s[5]*pVdim-0.4391550328268398*cE[5]; 
  BigAEM(33,27) = 0.4391550328268399*m0s[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(33,29) = 0.2981423969999719*m0s[9]*pVdim+0.4391550328268398*m0s[2]*pVdim-0.2981423969999719*cE[9]-0.4391550328268398*cE[2]; 
  BigAEM(33,31) = 0.2981423969999719*m0s[11]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[11]-0.4391550328268399*cE[3]; 
  BigAEM(33,33) = 0.2981423969999719*m0s[5]*pVdim+0.5*m0s[0]*pVdim-0.2981423969999719*cE[5]-0.5*cE[0]; 
  BigAEM(33,35) = 0.2981423969999719*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.2981423969999719*cE[7]-0.5*cE[1]; 
  BigAEM(34,24) = 0.5*m0s[10]*pVdim-0.5*cE[10]; 
  BigAEM(34,25) = 0.4391550328268399*m0s[6]*pVdim-0.4391550328268399*cE[6]; 
  BigAEM(34,26) = 0.5*m0s[8]*pVdim-0.5*cE[8]; 
  BigAEM(34,27) = 0.4391550328268399*m0s[4]*pVdim-0.4391550328268399*cE[4]; 
  BigAEM(34,28) = 0.2981423969999719*m0s[10]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[10]-0.4391550328268399*cE[3]; 
  BigAEM(34,29) = 0.4472135954999579*m0s[10]*pVdim-0.4472135954999579*cE[10]; 
  BigAEM(34,30) = 0.2981423969999719*m0s[8]*pVdim+0.3927922024247863*m0s[7]*pVdim+0.4391550328268399*m0s[1]*pVdim-0.2981423969999719*cE[8]-0.3927922024247863*cE[7]-0.4391550328268399*cE[1]; 
  BigAEM(34,31) = 0.3927922024247863*m0s[6]*pVdim-0.3927922024247863*cE[6]; 
  BigAEM(34,32) = 0.2981423969999719*m0s[6]*pVdim+0.5*m0s[2]*pVdim-0.2981423969999719*cE[6]-0.5*cE[2]; 
  BigAEM(34,34) = 0.4472135954999579*m0s[5]*pVdim+0.2981423969999719*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.4472135954999579*cE[5]-0.2981423969999719*cE[4]-0.5*cE[0]; 
  BigAEM(35,24) = 0.5*m0s[11]*pVdim-0.5*cE[11]; 
  BigAEM(35,25) = 0.5*m0s[9]*pVdim-0.5*cE[9]; 
  BigAEM(35,26) = 0.4391550328268399*m0s[7]*pVdim-0.4391550328268399*cE[7]; 
  BigAEM(35,27) = 0.4391550328268399*m0s[5]*pVdim-0.4391550328268399*cE[5]; 
  BigAEM(35,28) = 0.4472135954999579*m0s[11]*pVdim-0.4472135954999579*cE[11]; 
  BigAEM(35,29) = 0.2981423969999719*m0s[11]*pVdim+0.4391550328268399*m0s[3]*pVdim-0.2981423969999719*cE[11]-0.4391550328268399*cE[3]; 
  BigAEM(35,30) = 0.3927922024247863*m0s[7]*pVdim-0.3927922024247863*cE[7]; 
  BigAEM(35,31) = 0.2981423969999719*m0s[9]*pVdim+0.3927922024247863*m0s[6]*pVdim+0.4391550328268399*m0s[2]*pVdim-0.2981423969999719*cE[9]-0.3927922024247863*cE[6]-0.4391550328268399*cE[2]; 
  BigAEM(35,33) = 0.2981423969999719*m0s[7]*pVdim+0.5*m0s[1]*pVdim-0.2981423969999719*cE[7]-0.5*cE[1]; 
  BigAEM(35,35) = 0.2981423969999719*m0s[5]*pVdim+0.4472135954999579*m0s[4]*pVdim+0.5*m0s[0]*pVdim-0.2981423969999719*cE[5]-0.4472135954999579*cE[4]-0.5*cE[0]; 
 
  // Set other entries to 0. // 
  BigAEM.block<12,12>(0,12).setZero(); 
  BigAEM.block<12,12>(12,0).setZero(); 
 
  // ....... RHS vector is composed of m1 and m2 .......... // 
  bEV << m1[0],m1[1],m1[2],m1[3],m1[4],m1[5],m1[6],m1[7],m1[8],m1[9],m1[10],m1[11],m1[12],m1[13],m1[14],m1[15],m1[16],m1[17],m1[18],m1[19],m1[20],m1[21],m1[22],m1[23],m2[0],m2[1],m2[2],m2[3],m2[4],m2[5],m2[6],m2[7],m2[8],m2[9],m2[10],m2[11]; 
 
  xEV = BigAEM.colPivHouseholderQr().solve(bEV); 
 
  Eigen::Map<VectorXd>(u,24,1) = xEV.segment<24>(0); 
 
  Eigen::Map<VectorXd>(vtSq,12,1) = xEV.segment<12>(24); 
 
} 
 
void BoundaryIntegral2x2vSer_F_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[16], fvmin[16]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += (1.732050807568877*fvmin[3]*dS+1.732050807568877*fvmax[3]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[1] += (1.732050807568877*fvmin[6]*dS+1.732050807568877*fvmax[6]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[2] += (1.732050807568877*fvmin[7]*dS+1.732050807568877*fvmax[7]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[3] += (1.732050807568877*fvmin[11]*dS+1.732050807568877*fvmax[11]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_F_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[48], fvmin[48]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += ((-2.23606797749979*fvmin[13]*dS)+2.23606797749979*fvmax[13]*dS+1.732050807568877*fvmin[3]*dS+1.732050807568877*fvmax[3]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[1] += ((-2.23606797749979*fvmin[23]*dS)+2.23606797749979*fvmax[23]*dS+1.732050807568877*fvmin[6]*dS+1.732050807568877*fvmax[6]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[2] += ((-2.23606797749979*fvmin[24]*dS)+2.23606797749979*fvmax[24]*dS+1.732050807568877*fvmin[7]*dS+1.732050807568877*fvmax[7]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[3] += ((-2.23606797749979*fvmin[34]*dS)+2.23606797749979*fvmax[34]*dS+1.732050807568877*fvmin[15]*dS+1.732050807568877*fvmax[15]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
  out[4] += (1.732050807568877*fvmin[21]*dS+1.732050807568877*fvmax[21]*dS-1.0*fvmin[11]*dS+fvmax[11]*dS)*intFac; 
  out[5] += (1.732050807568877*fvmin[22]*dS+1.732050807568877*fvmax[22]*dS-1.0*fvmin[12]*dS+fvmax[12]*dS)*intFac; 
  out[6] += (1.732050807568877*fvmin[32]*dS+1.732050807568877*fvmax[32]*dS-1.0*fvmin[19]*dS+fvmax[19]*dS)*intFac; 
  out[7] += (1.732050807568877*fvmin[33]*dS+1.732050807568877*fvmax[33]*dS-1.0*fvmin[20]*dS+fvmax[20]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_F_VX_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[80], fvmin[80]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += (2.645751311064591*fvmin[33]*dS+2.645751311064591*fvmax[33]*dS-2.23606797749979*fvmin[13]*dS+2.23606797749979*fvmax[13]*dS+1.732050807568877*fvmin[3]*dS+1.732050807568877*fvmax[3]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[1] += (2.645751311064591*fvmin[52]*dS+2.645751311064591*fvmax[52]*dS-2.23606797749979*fvmin[23]*dS+2.23606797749979*fvmax[23]*dS+1.732050807568877*fvmin[6]*dS+1.732050807568877*fvmax[6]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[2] += (2.645751311064591*fvmin[53]*dS+2.645751311064591*fvmax[53]*dS-2.23606797749979*fvmin[24]*dS+2.23606797749979*fvmax[24]*dS+1.732050807568877*fvmin[7]*dS+1.732050807568877*fvmax[7]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[3] += (2.645751311064591*fvmin[66]*dS+2.645751311064591*fvmax[66]*dS-2.23606797749979*fvmin[38]*dS+2.23606797749979*fvmax[38]*dS+1.732050807568877*fvmin[15]*dS+1.732050807568877*fvmax[15]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
  out[4] += (1.732050807568877*fvmin[21]*dS+1.732050807568877*fvmax[21]*dS-1.0*fvmin[11]*dS+fvmax[11]*dS)*intFac; 
  out[5] += (1.732050807568877*fvmin[22]*dS+1.732050807568877*fvmax[22]*dS-1.0*fvmin[12]*dS+fvmax[12]*dS)*intFac; 
  out[6] += (1.732050807568877*fvmin[36]*dS+1.732050807568877*fvmax[36]*dS-1.0*fvmin[19]*dS+fvmax[19]*dS)*intFac; 
  out[7] += (1.732050807568877*fvmin[37]*dS+1.732050807568877*fvmax[37]*dS-1.0*fvmin[20]*dS+fvmax[20]*dS)*intFac; 
  out[8] += (1.732050807568877*fvmin[50]*dS+1.732050807568877*fvmax[50]*dS-1.0*fvmin[31]*dS+fvmax[31]*dS)*intFac; 
  out[9] += (1.732050807568877*fvmin[51]*dS+1.732050807568877*fvmax[51]*dS-1.0*fvmin[32]*dS+fvmax[32]*dS)*intFac; 
  out[10] += (1.732050807568877*fvmin[64]*dS+1.732050807568877*fvmax[64]*dS-1.0*fvmin[48]*dS+fvmax[48]*dS)*intFac; 
  out[11] += (1.732050807568877*fvmin[65]*dS+1.732050807568877*fvmax[65]*dS-1.0*fvmin[49]*dS+fvmax[49]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VX_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[16], fvmin[16]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += intFac*(1.732050807568877*fvmin[3]*dS*vmin-1.0*fvmin[0]*dS*vmin+1.732050807568877*fvmax[3]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*(1.732050807568877*fvmin[6]*dS*vmin-1.0*fvmin[1]*dS*vmin+1.732050807568877*fvmax[6]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*(1.732050807568877*fvmin[7]*dS*vmin-1.0*fvmin[2]*dS*vmin+1.732050807568877*fvmax[7]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*(1.732050807568877*fvmin[11]*dS*vmin-1.0*fvmin[5]*dS*vmin+1.732050807568877*fvmax[11]*dS*vmax+fvmax[5]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VX_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[48], fvmin[48]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += intFac*((-2.23606797749979*fvmin[13]*dS*vmin)+1.732050807568877*fvmin[3]*dS*vmin-1.0*fvmin[0]*dS*vmin+2.23606797749979*fvmax[13]*dS*vmax+1.732050807568877*fvmax[3]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*((-2.23606797749979*fvmin[23]*dS*vmin)+1.732050807568877*fvmin[6]*dS*vmin-1.0*fvmin[1]*dS*vmin+2.23606797749979*fvmax[23]*dS*vmax+1.732050807568877*fvmax[6]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*((-2.23606797749979*fvmin[24]*dS*vmin)+1.732050807568877*fvmin[7]*dS*vmin-1.0*fvmin[2]*dS*vmin+2.23606797749979*fvmax[24]*dS*vmax+1.732050807568877*fvmax[7]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*((-2.23606797749979*fvmin[34]*dS*vmin)+1.732050807568877*fvmin[15]*dS*vmin-1.0*fvmin[5]*dS*vmin+2.23606797749979*fvmax[34]*dS*vmax+1.732050807568877*fvmax[15]*dS*vmax+fvmax[5]*dS*vmax); 
  out[4] += intFac*(1.732050807568877*fvmin[21]*dS*vmin-1.0*fvmin[11]*dS*vmin+1.732050807568877*fvmax[21]*dS*vmax+fvmax[11]*dS*vmax); 
  out[5] += intFac*(1.732050807568877*fvmin[22]*dS*vmin-1.0*fvmin[12]*dS*vmin+1.732050807568877*fvmax[22]*dS*vmax+fvmax[12]*dS*vmax); 
  out[6] += intFac*(1.732050807568877*fvmin[32]*dS*vmin-1.0*fvmin[19]*dS*vmin+1.732050807568877*fvmax[32]*dS*vmax+fvmax[19]*dS*vmax); 
  out[7] += intFac*(1.732050807568877*fvmin[33]*dS*vmin-1.0*fvmin[20]*dS*vmin+1.732050807568877*fvmax[33]*dS*vmax+fvmax[20]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VX_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[80], fvmin[80]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[3]; 
 
  out[0] += intFac*(2.645751311064591*fvmin[33]*dS*vmin-2.23606797749979*fvmin[13]*dS*vmin+1.732050807568877*fvmin[3]*dS*vmin-1.0*fvmin[0]*dS*vmin+2.645751311064591*fvmax[33]*dS*vmax+2.23606797749979*fvmax[13]*dS*vmax+1.732050807568877*fvmax[3]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.645751311064591*fvmin[52]*dS*vmin-2.23606797749979*fvmin[23]*dS*vmin+1.732050807568877*fvmin[6]*dS*vmin-1.0*fvmin[1]*dS*vmin+2.645751311064591*fvmax[52]*dS*vmax+2.23606797749979*fvmax[23]*dS*vmax+1.732050807568877*fvmax[6]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.645751311064591*fvmin[53]*dS*vmin-2.23606797749979*fvmin[24]*dS*vmin+1.732050807568877*fvmin[7]*dS*vmin-1.0*fvmin[2]*dS*vmin+2.645751311064591*fvmax[53]*dS*vmax+2.23606797749979*fvmax[24]*dS*vmax+1.732050807568877*fvmax[7]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.645751311064591*fvmin[66]*dS*vmin-2.23606797749979*fvmin[38]*dS*vmin+1.732050807568877*fvmin[15]*dS*vmin-1.0*fvmin[5]*dS*vmin+2.645751311064591*fvmax[66]*dS*vmax+2.23606797749979*fvmax[38]*dS*vmax+1.732050807568877*fvmax[15]*dS*vmax+fvmax[5]*dS*vmax); 
  out[4] += intFac*(1.732050807568877*fvmin[21]*dS*vmin-1.0*fvmin[11]*dS*vmin+1.732050807568877*fvmax[21]*dS*vmax+fvmax[11]*dS*vmax); 
  out[5] += intFac*(1.732050807568877*fvmin[22]*dS*vmin-1.0*fvmin[12]*dS*vmin+1.732050807568877*fvmax[22]*dS*vmax+fvmax[12]*dS*vmax); 
  out[6] += intFac*(1.732050807568877*fvmin[36]*dS*vmin-1.0*fvmin[19]*dS*vmin+1.732050807568877*fvmax[36]*dS*vmax+fvmax[19]*dS*vmax); 
  out[7] += intFac*(1.732050807568877*fvmin[37]*dS*vmin-1.0*fvmin[20]*dS*vmin+1.732050807568877*fvmax[37]*dS*vmax+fvmax[20]*dS*vmax); 
  out[8] += intFac*(1.732050807568877*fvmin[50]*dS*vmin-1.0*fvmin[31]*dS*vmin+1.732050807568877*fvmax[50]*dS*vmax+fvmax[31]*dS*vmax); 
  out[9] += intFac*(1.732050807568877*fvmin[51]*dS*vmin-1.0*fvmin[32]*dS*vmin+1.732050807568877*fvmax[51]*dS*vmax+fvmax[32]*dS*vmax); 
  out[10] += intFac*(1.732050807568877*fvmin[64]*dS*vmin-1.0*fvmin[48]*dS*vmin+1.732050807568877*fvmax[64]*dS*vmax+fvmax[48]*dS*vmax); 
  out[11] += intFac*(1.732050807568877*fvmin[65]*dS*vmin-1.0*fvmin[49]*dS*vmin+1.732050807568877*fvmax[65]*dS*vmax+fvmax[49]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x2vSer_F_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[16], fvmin[16]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[4] += (1.732050807568877*fvmin[4]*dS+1.732050807568877*fvmax[4]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[5] += (1.732050807568877*fvmin[8]*dS+1.732050807568877*fvmax[8]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[6] += (1.732050807568877*fvmin[9]*dS+1.732050807568877*fvmax[9]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[7] += (1.732050807568877*fvmin[12]*dS+1.732050807568877*fvmax[12]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_F_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[48], fvmin[48]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[8] += ((-2.23606797749979*fvmin[14]*dS)+2.23606797749979*fvmax[14]*dS+1.732050807568877*fvmin[4]*dS+1.732050807568877*fvmax[4]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[9] += ((-2.23606797749979*fvmin[28]*dS)+2.23606797749979*fvmax[28]*dS+1.732050807568877*fvmin[8]*dS+1.732050807568877*fvmax[8]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[10] += ((-2.23606797749979*fvmin[29]*dS)+2.23606797749979*fvmax[29]*dS+1.732050807568877*fvmin[9]*dS+1.732050807568877*fvmax[9]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[11] += ((-2.23606797749979*fvmin[41]*dS)+2.23606797749979*fvmax[41]*dS+1.732050807568877*fvmin[16]*dS+1.732050807568877*fvmax[16]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
  out[12] += (1.732050807568877*fvmin[25]*dS+1.732050807568877*fvmax[25]*dS-1.0*fvmin[11]*dS+fvmax[11]*dS)*intFac; 
  out[13] += (1.732050807568877*fvmin[26]*dS+1.732050807568877*fvmax[26]*dS-1.0*fvmin[12]*dS+fvmax[12]*dS)*intFac; 
  out[14] += (1.732050807568877*fvmin[35]*dS+1.732050807568877*fvmax[35]*dS-1.0*fvmin[19]*dS+fvmax[19]*dS)*intFac; 
  out[15] += (1.732050807568877*fvmin[36]*dS+1.732050807568877*fvmax[36]*dS-1.0*fvmin[20]*dS+fvmax[20]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_F_VY_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[80], fvmin[80]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[12] += (2.645751311064591*fvmin[34]*dS+2.645751311064591*fvmax[34]*dS-2.23606797749979*fvmin[14]*dS+2.23606797749979*fvmax[14]*dS+1.732050807568877*fvmin[4]*dS+1.732050807568877*fvmax[4]*dS-1.0*fvmin[0]*dS+fvmax[0]*dS)*intFac; 
  out[13] += (2.645751311064591*fvmin[57]*dS+2.645751311064591*fvmax[57]*dS-2.23606797749979*fvmin[28]*dS+2.23606797749979*fvmax[28]*dS+1.732050807568877*fvmin[8]*dS+1.732050807568877*fvmax[8]*dS-1.0*fvmin[1]*dS+fvmax[1]*dS)*intFac; 
  out[14] += (2.645751311064591*fvmin[58]*dS+2.645751311064591*fvmax[58]*dS-2.23606797749979*fvmin[29]*dS+2.23606797749979*fvmax[29]*dS+1.732050807568877*fvmin[9]*dS+1.732050807568877*fvmax[9]*dS-1.0*fvmin[2]*dS+fvmax[2]*dS)*intFac; 
  out[15] += (2.645751311064591*fvmin[73]*dS+2.645751311064591*fvmax[73]*dS-2.23606797749979*fvmin[45]*dS+2.23606797749979*fvmax[45]*dS+1.732050807568877*fvmin[16]*dS+1.732050807568877*fvmax[16]*dS-1.0*fvmin[5]*dS+fvmax[5]*dS)*intFac; 
  out[16] += (1.732050807568877*fvmin[25]*dS+1.732050807568877*fvmax[25]*dS-1.0*fvmin[11]*dS+fvmax[11]*dS)*intFac; 
  out[17] += (1.732050807568877*fvmin[26]*dS+1.732050807568877*fvmax[26]*dS-1.0*fvmin[12]*dS+fvmax[12]*dS)*intFac; 
  out[18] += (1.732050807568877*fvmin[39]*dS+1.732050807568877*fvmax[39]*dS-1.0*fvmin[19]*dS+fvmax[19]*dS)*intFac; 
  out[19] += (1.732050807568877*fvmin[40]*dS+1.732050807568877*fvmax[40]*dS-1.0*fvmin[20]*dS+fvmax[20]*dS)*intFac; 
  out[20] += (1.732050807568877*fvmin[54]*dS+1.732050807568877*fvmax[54]*dS-1.0*fvmin[31]*dS+fvmax[31]*dS)*intFac; 
  out[21] += (1.732050807568877*fvmin[55]*dS+1.732050807568877*fvmax[55]*dS-1.0*fvmin[32]*dS+fvmax[32]*dS)*intFac; 
  out[22] += (1.732050807568877*fvmin[67]*dS+1.732050807568877*fvmax[67]*dS-1.0*fvmin[48]*dS+fvmax[48]*dS)*intFac; 
  out[23] += (1.732050807568877*fvmin[68]*dS+1.732050807568877*fvmax[68]*dS-1.0*fvmin[49]*dS+fvmax[49]*dS)*intFac; 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VY_P1(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[16], fvmin[16]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[0] += intFac*(1.732050807568877*fvmin[4]*dS*vmin-1.0*fvmin[0]*dS*vmin+1.732050807568877*fvmax[4]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*(1.732050807568877*fvmin[8]*dS*vmin-1.0*fvmin[1]*dS*vmin+1.732050807568877*fvmax[8]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*(1.732050807568877*fvmin[9]*dS*vmin-1.0*fvmin[2]*dS*vmin+1.732050807568877*fvmax[9]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*(1.732050807568877*fvmin[12]*dS*vmin-1.0*fvmin[5]*dS*vmin+1.732050807568877*fvmax[12]*dS*vmax+fvmax[5]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VY_P2(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[48], fvmin[48]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[0] += intFac*((-2.23606797749979*fvmin[14]*dS*vmin)+1.732050807568877*fvmin[4]*dS*vmin-1.0*fvmin[0]*dS*vmin+2.23606797749979*fvmax[14]*dS*vmax+1.732050807568877*fvmax[4]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*((-2.23606797749979*fvmin[28]*dS*vmin)+1.732050807568877*fvmin[8]*dS*vmin-1.0*fvmin[1]*dS*vmin+2.23606797749979*fvmax[28]*dS*vmax+1.732050807568877*fvmax[8]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*((-2.23606797749979*fvmin[29]*dS*vmin)+1.732050807568877*fvmin[9]*dS*vmin-1.0*fvmin[2]*dS*vmin+2.23606797749979*fvmax[29]*dS*vmax+1.732050807568877*fvmax[9]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*((-2.23606797749979*fvmin[41]*dS*vmin)+1.732050807568877*fvmin[16]*dS*vmin-1.0*fvmin[5]*dS*vmin+2.23606797749979*fvmax[41]*dS*vmax+1.732050807568877*fvmax[16]*dS*vmax+fvmax[5]*dS*vmax); 
  out[4] += intFac*(1.732050807568877*fvmin[25]*dS*vmin-1.0*fvmin[11]*dS*vmin+1.732050807568877*fvmax[25]*dS*vmax+fvmax[11]*dS*vmax); 
  out[5] += intFac*(1.732050807568877*fvmin[26]*dS*vmin-1.0*fvmin[12]*dS*vmin+1.732050807568877*fvmax[26]*dS*vmax+fvmax[12]*dS*vmax); 
  out[6] += intFac*(1.732050807568877*fvmin[35]*dS*vmin-1.0*fvmin[19]*dS*vmin+1.732050807568877*fvmax[35]*dS*vmax+fvmax[19]*dS*vmax); 
  out[7] += intFac*(1.732050807568877*fvmin[36]*dS*vmin-1.0*fvmin[20]*dS*vmin+1.732050807568877*fvmax[36]*dS*vmax+fvmax[20]*dS*vmax); 
 
} 
 
void BoundaryIntegral2x2vSer_vF_VY_P3(const double intFac, const double vmin, const double vmax, const double *dxv, const double *fvmin, const double *fvmax, double *out) 
{ 
  // intFac:             =1 for VmLBO, =2pi/m or 4pi/m for GkLBO. 
  // vmax, vmin:         maximum and minimum velocity of the velocity grid. 
  // dxv[4]:             cell length in each direciton. 
  // fvmax[80], fvmin[80]: distribution function at the velocity boundaries. 
  // out:                int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). 
 
  const double dS = 0.5*dxv[2]; 
 
  out[0] += intFac*(2.645751311064591*fvmin[34]*dS*vmin-2.23606797749979*fvmin[14]*dS*vmin+1.732050807568877*fvmin[4]*dS*vmin-1.0*fvmin[0]*dS*vmin+2.645751311064591*fvmax[34]*dS*vmax+2.23606797749979*fvmax[14]*dS*vmax+1.732050807568877*fvmax[4]*dS*vmax+fvmax[0]*dS*vmax); 
  out[1] += intFac*(2.645751311064591*fvmin[57]*dS*vmin-2.23606797749979*fvmin[28]*dS*vmin+1.732050807568877*fvmin[8]*dS*vmin-1.0*fvmin[1]*dS*vmin+2.645751311064591*fvmax[57]*dS*vmax+2.23606797749979*fvmax[28]*dS*vmax+1.732050807568877*fvmax[8]*dS*vmax+fvmax[1]*dS*vmax); 
  out[2] += intFac*(2.645751311064591*fvmin[58]*dS*vmin-2.23606797749979*fvmin[29]*dS*vmin+1.732050807568877*fvmin[9]*dS*vmin-1.0*fvmin[2]*dS*vmin+2.645751311064591*fvmax[58]*dS*vmax+2.23606797749979*fvmax[29]*dS*vmax+1.732050807568877*fvmax[9]*dS*vmax+fvmax[2]*dS*vmax); 
  out[3] += intFac*(2.645751311064591*fvmin[73]*dS*vmin-2.23606797749979*fvmin[45]*dS*vmin+1.732050807568877*fvmin[16]*dS*vmin-1.0*fvmin[5]*dS*vmin+2.645751311064591*fvmax[73]*dS*vmax+2.23606797749979*fvmax[45]*dS*vmax+1.732050807568877*fvmax[16]*dS*vmax+fvmax[5]*dS*vmax); 
  out[4] += intFac*(1.732050807568877*fvmin[25]*dS*vmin-1.0*fvmin[11]*dS*vmin+1.732050807568877*fvmax[25]*dS*vmax+fvmax[11]*dS*vmax); 
  out[5] += intFac*(1.732050807568877*fvmin[26]*dS*vmin-1.0*fvmin[12]*dS*vmin+1.732050807568877*fvmax[26]*dS*vmax+fvmax[12]*dS*vmax); 
  out[6] += intFac*(1.732050807568877*fvmin[39]*dS*vmin-1.0*fvmin[19]*dS*vmin+1.732050807568877*fvmax[39]*dS*vmax+fvmax[19]*dS*vmax); 
  out[7] += intFac*(1.732050807568877*fvmin[40]*dS*vmin-1.0*fvmin[20]*dS*vmin+1.732050807568877*fvmax[40]*dS*vmax+fvmax[20]*dS*vmax); 
  out[8] += intFac*(1.732050807568877*fvmin[54]*dS*vmin-1.0*fvmin[31]*dS*vmin+1.732050807568877*fvmax[54]*dS*vmax+fvmax[31]*dS*vmax); 
  out[9] += intFac*(1.732050807568877*fvmin[55]*dS*vmin-1.0*fvmin[32]*dS*vmin+1.732050807568877*fvmax[55]*dS*vmax+fvmax[32]*dS*vmax); 
  out[10] += intFac*(1.732050807568877*fvmin[67]*dS*vmin-1.0*fvmin[48]*dS*vmin+1.732050807568877*fvmax[67]*dS*vmax+fvmax[48]*dS*vmax); 
  out[11] += intFac*(1.732050807568877*fvmin[68]*dS*vmin-1.0*fvmin[49]*dS*vmin+1.732050807568877*fvmax[68]*dS*vmax+fvmax[49]*dS*vmax); 
 
} 
 
