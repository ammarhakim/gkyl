load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$

doExpand(f, basis) := sum(f[i-1]*basis[i], i, 1, length(basis))$
calcInnerProdList(vars, w, funcList, f) := fullratsimp(makelist(innerProd(vars, w, funcList[i], f), i, 1, length(funcList)))$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovVolUpdater(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
printf(fh, "#include <VlasovModDecl.h> ~%"),
for i : 1 thru 2 do (
  bP : basisP[i],
  printf(fh, "double ~aP~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, i),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  for dir : 1 thru cdim do (
    printf(fh, "  double dv~adx~a = dxv[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  double w~adx~a = w[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir])
  ),
  fl : doExpand(f, bP),
  t : (t : 0, for dir : 1 thru cdim do (
     t : t + calcInnerProdList(varsP, 2*wdx[dir]+dvdx[dir]*varsV[dir], diff(bP,varsP[dir]), fl)
     ),
  t),
  
  if cdim = 1 then (
    clst : [w0dx0, dv0dx0],
    writeCIncrExprsCollect1(out,t,clst),
    printf(fh, "return std::abs(w0dx0); ~%")
  ),
  if cdim = 2 then (
    clst : [w0dx0, dv0dx0, w1dx1, dv1dx1],
    writeCIncrExprsCollect1(out,t,clst),
    printf(fh, "return std::abs(w0dx0)+std::abs(w1dx1); ~%")
  ),
  if cdim = 3 then (
    clst : [w0dx0, dv0dx0, w1dx1, dv1dx1, w2dx2, dv2dx2],
    writeCIncrExprsCollect1(out,t,clst),
    printf(fh, "return std::abs(w0dx0)+std::abs(w1dx1)+std::abs(w2dx2); ~%")
  ),
  printf(fh, "} ~%")
));