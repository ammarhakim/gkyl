load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
Efld : [E0, E1, E2]$
Bfld : [B0, B1, B2]$

vTransSubs : [vvx=vx*dv1/2+wx1, vvy=vy*dv2/2+wx2, vvz=vz*dv3/2+wx3]$

ax(vx, vy, vz, bc) := doExpand1(Efld[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(Efld[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(Efld[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovVolUpdater(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
printf(fh, "#include <VlasovModDecl.h> ~%"),
for i : 1 thru 2 do (
  bP : basisP[i],
  bC : basisC[i],
  numC : length(bC),
  printf(fh, "void ~aP~a(const double *w, const double *dxv, const double *EM, const double *f, double *out) ~%{ ~%", funcNm, i),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. EM/f: Input EM-field/distribution function. out: Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  for dir : 1 thru cdim do (
    printf(fh, "  double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double *E~a = &EM[~a]; ~%", dir-1, numC*(dir-1))    
  ),
  for dir : 1 thru 3 do (
    printf(fh, "  const double *B~a = &EM[~a]; ~%", dir-1, numC*(dir-1)+3*numC)
  ),
  fl : doExpand1(f, bP),
  t : (t : 0, for dir : 1 thru vdim do (
     acc : calcAccel(dir, vdim, bC),
     t : t + dv11[dir]*calcInnerProdList(varsP, acc, diff(bP,varsV[dir]), fl)
     ),
  t),
  writeCIncrExprs(t),  

  printf(fh, "} ~%")
))$
