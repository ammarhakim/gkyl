load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
abar : [abar0, abar1, abar2]$
Bfld : [B0, B1, B2]$

vTransSubs : [vvx=vx*dv1/2, vvy=vy*dv2/2, vvz=vz*dv3/2]$

ax(vx, vy, vz, bc) := doExpand1(abar[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(abar[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(abar[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovVolUpdater(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
printf(fh, "#include <VlasovModDecl.h> ~%"),
for i : 1 thru 2 do (
  bP : basisP[i],
  bC : basisC[i],
  numC : length(bC),
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),
  printf(fh, "double ~aP~a(const double *w, const double *dxv, const double *EM, const double *f, double *out) ~%{ ~%", funcNm, i),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. EM/f: Input EM-field/distribution function. out: Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  for dir : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double *E~a = &EM[~a]; ~%", dir-1, numC*(dir-1)),
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),
  for dir : 1 thru 3 do (
    printf(fh, "  const double *B~a = &EM[~a]; ~%", dir-1, numC*(dir-1)+3*numC)
  ),
  printf(fh, "~%"),   
  if vdim = 1 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "~%"),
    for c : 1 thru length(bC) do (
      printf(fh, "  abar~a[~a] = E~a[~a]; ~%", 0, c-1, 0, c-1)
    ),
    printf(fh, "~%"),
    printf(fh, "  double incr~a[~a]; ~%~%", 0, length(bP)),
    printf(fh, "  for(unsigned int i=0; i<~a; ++i){ ~%~%", length(bP)),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 0),
    printf(fh, "  }; ~%~%"),
    fl : doExpand1(f, bP),
    acc : calcAccel(1, vdim, bC),
    amid1 : float(expand(fullratsimp(subst(zr,acc)))),
    printf(fh, "  const double amid1 = ~a; ~%", amid1),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[1]), fl),
    clst : [dv1],
    clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr0, incr_r, clst1),
    printf(fh, "~%"),
    incr_s : makelist(dv11[1]*incr0[i-1], i, 1, length(bP)),
    writeCIncrExprs1(out, incr_s),
    printf(fh, "return std::abs(amid1)/dv1; ~%")
  ),
  if vdim = 2 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 1, length(bC)),
    printf(fh, "~%"),
    for c : 1 thru length(bC) do (
      printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]; ~%", 0, c-1, 0, c-1, 2, 2, c-1),
      printf(fh, "  abar~a[~a] = E~a[~a]-wv~a*B~a[~a]; ~%", 1, c-1, 1, c-1, 1, 2, c-1)
    ),
    printf(fh, "~%"),
    printf(fh, "  double incr~a[~a]; ~%~%", 0, length(bP)),
    printf(fh, "  double incr~a[~a]; ~%~%", 1, length(bP)),
    printf(fh, "  for(unsigned int i=0; i<~a; ++i){ ~%~%", length(bP)),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 0),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 1),
    printf(fh, "  }; ~%~%"),
    fl : doExpand1(f, bP),
    B2_e : doExpand1(B2,bC),
    acc : calcAccel(1, vdim, bC),
    amid1 : float(expand(fullratsimp(subst(zr,acc))))+float(expand(fullratsimp(subst(zr,dv2/2*B2_e)))),
    printf(fh, "  const double amid1 = ~a; ~%", amid1),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[1]), fl),
    clst : [dv1, dv2],
    clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr0, incr_r, clst1),
    acc : calcAccel(2, vdim, bC),
    amid2 : float(expand(fullratsimp(subst(zr,acc))))+float(expand(fullratsimp(subst(zr,-dv1/2*B2_e)))),
    printf(fh, "  const double amid2 = ~a; ~%", amid2),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[2]), fl),
    clst : [dv1, dv2],
    clst1 : append(clst, makelist(abar1[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr1, incr_r, clst1),
    printf(fh, "~%"),
    incr_s : makelist(dv11[1]*incr0[i-1]+dv11[2]*incr1[i-1], i, 1, length(bP)),
    writeCIncrExprs1(out, incr_s),
    printf(fh, "return std::abs(amid1)/dv1+std::abs(amid2)/dv2; ~%")
  ),
  if vdim = 3 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 1, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 2, length(bC)),
    printf(fh, "~%"),
    for c : 1 thru length(bC) do (
      printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", 0, c-1, 0, c-1, 2, 2, c-1, 3, 1, c-1),
      printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", 1, c-1, 1, c-1, 3, 0, c-1, 1, 2, c-1),
      printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", 2, c-1, 2, c-1, 1, 1, c-1, 2, 0, c-1)
    ),
    printf(fh, "~%"),
    printf(fh, "  double incr~a[~a]; ~%~%", 0, length(bP)),
    printf(fh, "  double incr~a[~a]; ~%~%", 1, length(bP)),
    printf(fh, "  double incr~a[~a]; ~%~%", 2, length(bP)),
    printf(fh, "  for(unsigned int i=0; i<~a; ++i){ ~%~%", length(bP)),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 0),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 1),
    printf(fh, "    incr~a[i]=0.0; ~%~%", 2),
    printf(fh, "  }; ~%~%"),
    fl : doExpand1(f, bP),
    B0_e : doExpand1(B0,bC),
    B1_e : doExpand1(B1,bC),
    B2_e : doExpand1(B2,bC),
    acc : calcAccel(1, vdim, bC),
    amid1 : float(expand(fullratsimp(subst(zr,acc))))+float(expand(fullratsimp(subst(zr,dv2/2*B2_e-dv3/2*B1_e)))),
    printf(fh, "  const double amid1 = ~a; ~%", amid1),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[1]), fl),
    clst : [dv1, dv2, dv3],
    clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr0, incr_r, clst1),
    acc : calcAccel(2, vdim, bC),
    amid2 : float(expand(fullratsimp(subst(zr,acc))))+float(expand(fullratsimp(subst(zr,dv3/2*B0_e-dv1/2*B2_e)))),
    printf(fh, "  const double amid2 = ~a; ~%", amid2),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[2]), fl),
    clst : [dv1, dv2, dv3],
    clst1 : append(clst, makelist(abar1[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr1, incr_r, clst1),
    acc : calcAccel(3, vdim, bC),
    amid3 : float(expand(fullratsimp(subst(zr,acc))))+float(expand(fullratsimp(subst(zr,dv1/2*B1_e-dv2/2*B0_e)))),
    printf(fh, "  const double amid3 = ~a; ~%", amid3),
    incr_r : calcInnerProdList(varsP, acc, diff(bP,varsV[3]), fl),
    clst : [dv1, dv2, dv3],
    clst1 : append(clst, makelist(abar2[i-1], i, 1, length(bC))),
    writeCExprsCollect1(incr2, incr_r, clst1),
    printf(fh, "~%"),
    incr_s : makelist(dv11[1]*incr0[i-1]+dv11[2]*incr1[i-1]+dv11[3]*incr2[i-1], i, 1, length(bP)),
    writeCIncrExprs1(out, incr_s),
    printf(fh, "return std::abs(amid1)/dv1+std::abs(amid2)/dv2+std::abs(amid3)/dv3; ~%")
  ),

  printf(fh, "} ~%")
))$
