load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the surface term of the E + v x B 
   advection in velocity space for the Vlasov equation (full EM) */

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$
dv11l : [dv10l, dv11l, dv12l]$
dv11r : [dv10r, dv11r, dv12r]$
Efld : [E0, E1, E2]$
Bfld : [B0, B1, B2]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

ax(vx, vy, vz, bc) := doExpand1(Efld[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(Efld[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(Efld[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for i : 1 thru pMax do (
  bP : basisP[i],
  varsC : slcn(varsP, cdim),
  bC : basisC[i],
  numC : length(bC),

  /* specify a point to evaluate alpha at for use global lax fluxes */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "double ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], i),
  printf(fh, "// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells ~%"),
  printf(fh, "// outl/outr: output distribution function in left/right cells ~%"),
  printf(fh, "// returns abs(amid) for use in determining amax in cfl and global lax flux ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  double dv1~al = 2/dxvl[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  double dv1~ar = 2/dxvr[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  const double *E~a = &EM[~a]; ~%", dir-1, numC*(dir-1)),
  printf(fh, "~%"),

  for dir : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxvr[~a], wv~a = wr[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),

  /* if vdim = 1, then no magnetic field */
  if vdim > 1 then (
      if vdim = 2 then (
          /* in 2 velocity dimensions, only Bz */
          printf(fh, "  const double *B~a = &EM[~a]; ~%", 2, numC*2+3*numC)
      ),
      if vdim = 3 then (
         for dir : 1 thru 3 do (
            printf(fh, "  const double *B~a = &EM[~a]; ~%", dir-1, numC*(dir-1)+3*numC)
         )            
      )
  ),
  printf(fh, "~%"),   

  /* surface contribution is defined as integral(phi^- Ghat) over the surface */
  printf(fh, "  double Ghat[~a]; ~%~%", length(bP)),

  /* alpha is the phase space flux at the surface */
  printf(fh, "  double alpha[~a]; ~%~%", length(bP)),

  cv : varsP[dir],
  vv : varsV[dir],

  /* since Ghat involves both the average and jump of the distribution function, */
  /* we can precompute the appropriate signs of f_left and f_right and store them in temporary variables */
  basisFlip : subst(vv=-1.0*vv, bP),
  signs : fullratsimp(basisFlip/bP),

  printf(fh, "  double favg[~a]; ~%~%", length(bP)),
  for c : 1 thru length(bP) do (
    printf(fh, "  favg[~a] = ~a*fr[~a]+fl[~a]; ~%", c-1, signs[c], c-1, c-1)
  ),

  /* since the maximum acceleration is a constant, accumulate its contribution into fjump a priori */
  printf(fh, "  double fjump[~a]; ~%~%", length(bP)),
  for c : 1 thru length(bP) do (
    printf(fh, "  fjump[~a] = amax*(~a*fr[~a]-fl[~a]); ~%", c-1, signs[c], c-1, c-1)
  ),
  
  /* surface variables to integrate over */
  surfVars : delete(vv,varsP),

  /* expand the average and jump of the distribution function in phase space basis functions */
  favg_e : doExpand1(favg, bP),
  fjump_e : doExpand1(fjump, bP),

  /* alpha_v = q/m*(E + v x B) dot d/dv(f) */
  acc : calcAccel(dir, vdim, bC),
  alpha_v : calcInnerProdList(varsP, 1, bP, acc),
  writeCExprsCollect1lhsc(alpha, radcan(alpha_v)),

  /* zero out components of alpha which are empty */
  alphaNoZero : doMakeExprLst(alpha_v, alpha),
  alpha_e : doExpandLst(alphaNoZero, bP),
  alpha_expd : subst(vv=1, alpha_e),

  /* evaluate acceleration at zr (in this case the midpoint) */
  amid : float(expand(fullratsimp(subst(zr,alpha_e)))),
  printf(fh, "  const double amid = ~a; ~%", amid),

  /* eliminate the surface variable from the average and jump expansions */
  fhat_average : subst(vv=1, favg_e),
  fhat_jump : subst(vv=1, fjump_e),

  /* compute Ghat = 1/2 alpha*(f_left + f_right) - 1/2*amax*(f_right - f_left) */
  t : 0.5*calcInnerProdList(varsP, 1.0, bP, alpha_expd*fhat_average-fhat_jump),
  incr_r : t,
  clst : makelist(alpha[i-1], i, 1, length(bP)),

  /* use both gcfac, and the fact that there are common alpha terms to simplify Ghat */
  writeCExprsDoubleCollect1lhsc(Ghat, radcan(incr_r), clst),
  printf(fh, "~%"),

  /* zero out components of Ghat which are empty */
  glst1 : doMakeExprLst(incr_r, Ghat),
  Ghat_e : doExpandLst(glst1, bP),
  Ghat_final : subst(vv=1, Ghat_e),

  /* compute surface contribution integral(phi^- Ghat) on the right */
  incr_s : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_final),
  writeCIncrExprs1(outr, dv11r[dir]*incr_s),  
  printf(fh, "~%"),

  /* compute surface contribution integral(phi^- Ghat) on the left */
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_final),

  /* left contribution is the same as the right contribution up to sign changes */
  /* can exploit this fact that reduce the number of multiplications */
  signs : fullratsimp(incr_l/incr_s),
  incr_new : makelist(signs[i]*incr_s[i], i, 1, length(bP)),
  writeCIncrExprs1(outl, dv11l[dir]*incr_new),

  /* return a local estimate of amax */
  printf(fh, "return std::abs(amid); ~%"),
  printf(fh, "} ~%")
));

calcVlasovSurfUpdater(fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
  printf(fh, "#include <VlasovModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pMax) )
)$
