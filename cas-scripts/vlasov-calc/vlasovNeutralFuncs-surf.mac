/* This script generates the kernels for the surface term of the body 
  acceleration advection in velocity space for the Vlasov equation */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodalOperations/nodalFunctions")$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dv11l : [dv10l, dv11l, dv12l]$
dv11r : [dv10r, dv11r, dv12r]$

Fo    : [Fo0, Fo1, Fo2]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

ax(vx, vy, vz, bc) := doExpand1(Fo[1],bc)$
ay(vx, vy, vz, bc) := doExpand1(Fo[2],bc)$
az(vx, vy, vz, bc) := doExpand1(Fo[3],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

basisFromVars(basisType, varsIn, pIn) := block(
  dimIn : length(varsIn),

  /* In case varsP and varsC were already loaded, save them
     and restore them at the end of this function. */
  if listp(varsC) then (oldVarsC : copylist(varsC)),
  if listp(varsP) then (oldVarsP : copylist(varsP)),

  if dimIn > 3 then (
    load(sconcat("basis-precalc/basis", basisType, dimIn-3, "x", 3, "v")),
    basis : basisP[pIn],
    vars  : varsP
  ) elseif dimIn > 0 then (
    load(sconcat("basis-precalc/basis", basisType, dimIn, "x")),
    basis : basisC[pIn],
    vars  : varsC
  ) else (
    basis : [],
    vars  : []
  ),
  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),

  /* Restore varsC and varsP. */
  if listp(oldVarsC) then (varsC : copylist(oldVarsC)),
  if listp(oldVarsP) then (varsP : copylist(oldVarsP)),

  return(basis)
)$

calcAndWrite_upwindIncr_wQuadNodeAlpha(fH,basisType,polyOrder,bP,surfDir,sideStr,alphaSurf_e) := block(
  [varsP,numP,pDim,surfIntVars,surfNodes,numNodes,fL_e,fR_e,fOrdL_n,fOrdR_n,alphaOrd_n,
   fUpOrd_n,nodToMod,fUp_c,fhatSurf_e,replaceList,tMod,incrModR_c,fhatAlpha_c],
  /* Compute the common increment to left/right cells with upwinding based on
     the quadrature-node values of the phase-space velocity alpha. Write them
     out. The actual output should be these increments scaled by some
     cell-length factor. */

  varsP       : listofvars(bP),
  numP        : length(bP),
  surfVar     : varsV[surfDir],         /* Surface variable. */
  surfIntVars : delete(surfVar,varsP),  /* Surface integral variables. */
  pDim        : length(varsP),

  surfNodes : getNodes(basisType, pDim-1, polyOrder),
  if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),
  if cdim=1 and vdim=2 and polyOrder=2 and basisType="Ser" then (
    /* We found that the 1x2v p=2 Ser LBO does not conserve energy if we used
       sqrt(3/5) nodes. But it does with sqrt(1/3) nodes, or some an arrangement
       where corner cells are sqrt(3/5) nodes, and the other four nodes are sqrt(1/3)
       nodes. We use a similar trick here for the collisionless terms. */
    p1Nodes : args(getNodes(basisType, pDim-1, 1)),
    p2Nodes : args(getNodes(basisType, pDim-1, 2)),
    extraNodeInd : [],  p1NodeInd : [],
    for i : 1 thru length(p2Nodes) do (
      idx : sublist_indices(p1Nodes,lambda([x], x=p2Nodes[i])),
      if length(idx)=0 then (
        extraNodeInd : endcons(i,extraNodeInd)
      ) else (
        p1NodeInd : endcons(i,p1NodeInd)
      )
    ),
    surfNodes : copylist(p2Nodes),
    for i : 1 thru length(p1NodeInd) do (
      surfNodes[p1NodeInd[i]] : p2Nodes[p1NodeInd[i]]*sqrt(3/5)
    ),
    for i : 1 thru length(extraNodeInd) do (
      surfNodes[extraNodeInd[i]] : p2Nodes[extraNodeInd[i]]*sqrt(1/3)
    )
  ),
  numNodes : length(surfNodes),

  /* Expand distribution function. */
  fL_e : doExpand1(fl,bP),  fR_e : doExpand1(fr,bP),

  /* Evaluate fL, fR, and alpha at surface quadrature nodes. */
  fOrdL_n : gcfac(float(evAtNodes(subst(surfVar=+1,fL_e),surfNodes,surfIntVars))),
  fOrdR_n : gcfac(float(evAtNodes(subst(surfVar=-1,fR_e),surfNodes,surfIntVars))),
  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. */
  alphaOrd_n : gcfac(float(evAtNodes(alphaSurf_e,surfNodes,surfIntVars))),
  /* Determine upwinding at each surface quadrature node. */
  fUpOrd_n : gcfac(.5*(fOrdL_n+fOrdR_n)+.5*sgn(eval_string(sconcat("alphaOrd",sideStr)))*(fOrdL_n-fOrdR_n)),
  printf(fH, "  double alphaOrd~a;~%", sideStr),
  printf(fH, "  double fUpOrd[~a];~%", numNodes),
  for i : 1 thru numNodes do (
    printf(fH, "  alphaOrd~a = ~a; ~%", sideStr, alphaOrd_n[i]),
    printf(fH, "  fUpOrd[~a] = ~a; ~%", i-1, fUpOrd_n[i])
  ),
  printf(fH, "~%"),
  flush_output(fH),

  /* Get modal surface expansion from nodal quadrature points. */
  nodToMod : calcNodToModWithNodes(basisType, pDim-1, polyOrder, surfNodes),
  fUp_c : gcfac(fullratsimp(nodToMod . makelist(fUpOrd[i-1],i,1,numNodes))),
  fUp_c : makelist(fUp_c[i][1],i,1,numNodes),
  /* Write coefficients of modal surface expansion fupwind. */
  printf(fH, "  double fUp[~a];~%", numNodes),
  writeCExprsNoExpand1(fUp, fUp_c),
  printf(fH, "~%"),
  flush_output(fH),

  bSurf : basisFromVars(basisType,surfIntVars,polyOrder),  /* Surface basis. */

  fhatSurf_e : doExpand1(fUp,bSurf),

  replaceList : [wvparL^2=wvparSqL, rdvpar2L^2=rdvpar2SqL, rdx2L^2=rdx2SqL,
                 wvparR^2=wvparSqR, rdvpar2R^2=rdvpar2SqR, rdx2R^2=rdx2SqR, m_^2=mSq, q_^2=qSq],

  fhatAlpha_c : calcInnerProdList(surfIntVars, alphaSurf_e, subst(surfVar=-1, bP), fhatSurf_e),
  incrR_c     : fullratsimp(fhatAlpha_c),

  fhatAlpha_c : calcInnerProdList(surfIntVars, alphaSurf_e, subst(surfVar=1, bP), fhatSurf_e),
  incrL_c     : -fullratsimp(fhatAlpha_c),

  writeCExprsNoExpand1(incr, subst(replaceList, incrR_c)),
  printf(fH, "~%"),
  flush_output(fH),

  return([incrL_c,incrR_c])
)$

calcVlasovBodyUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) := block(
  [modNm,bP,bC,varsC,numC,cflPt,cid,vid,vv,surfVars,bSurf,acc_e,
  alphaV_c,alphaNoZero,alpha_e,amid,incr_s],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  bP    : basisP[p],
  bC    : basisC[p],
  varsC : slcn(varsP, cdim),
  numC  : length(bC),

  /* Specify a point to evaluate alpha at for use global Lax fluxes. */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "__host__ __device__ double ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *boA, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], p),
  printf(fh, "  // w:         Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // amax:      amax in global lax flux.~%"),
  printf(fh, "  // boA:       Body acceleration.~%"),
  printf(fh, "  // fl/fr:     Distribution function in left/right cells ~%"),
  printf(fh, "  // outl/outr: output distribution function in left/right cells ~%"),
  printf(fh, "  // returns abs(amid) for use in determining amax in cfl and global lax flux ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  double dv1~al = 2/dxvl[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  double dv1~ar = 2/dxvr[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "~%"),
  for d : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxvr[~a], wv~a = wr[~a]; ~%", d, vid[d], d, vid[d])
  ),

  printf(fh, "  const double *Fo~a = &boA[~a]; ~%", dir-1, numC*(dir-1)),
  printf(fh, "~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vv^2=var2,var2=1/3,vv=0],bP)))*bP),

  /* alpha is the phase space flux at the surface. */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  printf(fh, "  double incr[~a]; ~%", length(bP)),
  printf(fh, "~%"),

  /* alpha_v = Force/m dot d/dv(f) */
  acc_e : calcAccel(dir, vdim, bC),
  /* Project alpha_v onto surface basis, and print resulting coefficients. */
  alphaV_c : calcInnerProdList(surfVars, 1, bSurf, subst(vv=1, acc_e)),
  writeCExprsCollect1lhsc(alpha, radcan(alphaV_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alphaV_c, alpha),
  alpha_e     : doExpandLst(alphaNoZero, bSurf),

  /* Evaluate acceleration at cflPt (in this case the midpoint). */
  amid : float(expand(fullratsimp(subst(cflPt,alpha_e)))),
  printf(fh, "  const double amid = ~a; ~%", amid),
  printf(fh, "~%"),
  flush_output(fh),

  /* Upwinded fluxes based on quadrature-node values of phase-velocity. */
  [incrL_c, incrR_c] : calcAndWrite_upwindIncr_wQuadNodeAlpha(fh,basisFun,polyOrder,bP,dir,"R",alpha_e),

  flush_output(fh),

  /* Write the actual increments to the left and right cells, which are
     built with incr, dxv factors and some sign changes. */
  incr_s : makelist(incr[i-1], i, 1, length(bP)),
  writeCIncrExprsNoExpand1(outr, dv11r[dir]*incr_s),
  printf(fh, "~%"),
  flush_output(fh),

  signs  : fullratsimp(incrL_c/incrR_c),
  incr_s : makelist(signs[i]*incr[i-1], i, 1, length(bP)),
  writeCIncrExprsNoExpand1(outl, dv11l[dir]*incr_s),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "~%"),
  /* Return a local estimate of amax. */
  printf(fh, "  return std::abs(amid); ~%"),
  printf(fh, "} ~%")
);

calcVlasovBodySurfUpdater(fh, funcNm, cdim, vdim, basisFun, p) := block([dir],
  printf(fh, "#include <VlasovModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcVlasovBodyUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) )
)$
