load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/modal-basis.mac");
load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/out-scripts.mac");
fpprec : 24$

varsP : [x, y, vx, vy, vz]$

doExpand(f, basis) := sum(f[i-1]*basis[i], i, 1, length(basis))$
calcInnerProdList(vars, w, funcList, f) := fullratsimp(makelist(innerProd(vars, w, funcList[i], f), i, 1, length(funcList)))$

fh : openw("~/max-out/VlasovStreamSer2x3v.cpp");
printf(fh, "#include <VlasovModDecl.h> ~%")$

for i : 1 thru 2 do (
  basisP : gsOrthoNorm(varsP, makeSerendipBasis(varsP, i)),
  printf(fh, "void VlasovVolStream2x3vSerP~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", i),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. f: Input distribution function. out: Incremented output ~%"),
  printf(fh, "  const unsigned int X=0, Y=1, VX=2, VY=3; ~%"),    
  printf(fh, "  double dv0dx0 = dxv[VX]/dxv[X]; ~%"),
  printf(fh, "  double dv1dx1 = dxv[VY]/dxv[Y]; ~%"),
  printf(fh, "  double w0dx0 = w[VX]/dxv[X]; ~%"),
  printf(fh, "  double w1dx1 = w[VY]/dxv[Y]; ~%"),
  fl : doExpand(f, basisP),
  t1x : w0dx0*calcInnerProdList(varsP, 1, diff(basisP,x), fl),
  t2x : dv0dx0*calcInnerProdList(varsP, vx, diff(basisP,x), fl),
  t1y : w1dx1*calcInnerProdList(varsP, 1, diff(basisP,y), fl),
  t2y : dv1dx1*calcInnerProdList(varsP, vy, diff(basisP,y), fl),
  writeCIncrExprs(2*(t1x+t1y)+t2x+t2y),
  printf(fh, "} ~%")
);

close(fh);
