load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$
dv1 : [dv10, dv11, dv12]$
Efld : [E0, E1, E2]$

doExpand(f, basis) := sum(f[i-1]*basis[i], i, 1, length(basis))$
slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovVolUpdater(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
printf(fh, "#include <VlasovModDecl.h> ~%"),
for i : 1 thru 4 do (
  bP : basisP[i],
  bC : basisC[i],
  numC : length(bC),
  printf(fh, "void ~aP~a(const double *w, const double *dxv, const double *E, const double *f, double *out) ~%{ ~%", funcNm, i),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. E/f: Input electric-field/distribution function. out: Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  for dir : 1 thru cdim do (
    printf(fh, "  double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double *E~a = &E[~a]; ~%", dir-1, numC*(dir-1))
  ),
  fl : doExpand(f, bP),
  t : (t : 0, for dir : 1 thru cdim do (
     El : doExpand(Efld[dir], bC),
     t : t + dv1[dir]*calcInnerProdList(varsP, El, diff(bP,varsV[dir]), fl)
     ),
  t),
  writeCIncrExprs(t),
  printf(fh, "} ~%")
));