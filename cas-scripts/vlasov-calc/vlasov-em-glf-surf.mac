load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
amax11 : [amax10, amax11, amax12]$
abar : [abar0, abar1, abar2]$
Bfld : [B0, B1, B2]$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

vTransSubs : [vvx=vx*dv1/2, vvy=vy*dv2/2, vvz=vz*dv3/2]$

ax(vx, vy, vz, bc) := doExpand1(abar[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(abar[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(abar[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for i : 1 thru 4 do (
  bP : basisP[i],
  varsC : slcn(varsP, cdim),
  bC : basisC[i],
  numC : length(bC),
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "double ~a_~a_P~a(const double *w, const double *dxv, const double amax, const double *EM, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], i),
  printf(fh, "// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. amax: amax in global lax flux. E: EM field. fl/fr: Distribution function in left/right cells ~%"),
  printf(fh, "// outl/outr: output distribution function in left/right cells ~%"),
  printf(fh, "// returns abs(amid) for use in determining amax in cfl and global lax flux ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  const double *E~a = &EM[~a]; ~%", dir-1, numC*(dir-1)),
  printf(fh, "~%"),

  for dir : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),

  for vdir : 1 thru 3 do (
    printf(fh, "  const double *B~a = &EM[~a]; ~%", vdir-1, numC*(vdir-1)+3*numC)
  ),
  printf(fh, "~%"),   
  if vdim = 1 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "~%"),
    for c : 1 thru length(bC) do (
      printf(fh, "  abar~a[~a] = E~a[~a]; ~%", dir-1, c-1, dir-1, c-1)
    ),
    clst : [amax, dv1],
    clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC)))
  ),
  if vdim = 2 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 1, length(bC)),
    printf(fh, "~%"),
    if dir = 1 then (
      for c : 1 thru length(bC) do (
        printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]; ~%", dir-1, c-1, dir-1, c-1, dir+1, dir+1, c-1)
      ),
      clst : [amax, dv1, dv2],
      clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC)))
    ),
    if dir = 2 then (
      for c : 1 thru length(bC) do (
        printf(fh, "  abar~a[~a] = E~a[~a]-wv~a*B~a[~a]; ~%", dir-1, c-1, dir-1, c-1, dir-1, dir, c-1)
      ),
      clst : [amax, dv1, dv2],
      clst1 : append(clst, makelist(abar1[i-1], i, 1, length(bC)))
    )
  ),
  if vdim = 3 then (
    printf(fh, "  double abar~a[~a]; ~%~%", 0, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 1, length(bC)),
    printf(fh, "  double abar~a[~a]; ~%~%", 2, length(bC)),
    printf(fh, "~%"),
    if dir = 1 then (
      for c : 1 thru length(bC) do (
        printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", dir-1, c-1, dir-1, c-1, dir+1, dir+1, c-1, dir+2, dir, c-1)
      ),
      clst : [dv1, dv2, dv3],
      clst1 : append(clst, makelist(abar0[i-1], i, 1, length(bC)))
    ),
    if dir = 2 then (
      for c : 1 thru length(bC) do (
        printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", dir-1, c-1, dir-1, c-1, dir+1, dir-2, c-1, dir-1, dir, c-1)
      ),
      clst : [dv1, dv2, dv3],
      clst1 : append(clst, makelist(abar1[i-1], i, 1, length(bC)))
    ),
    if dir = 3 then (
      for c : 1 thru length(bC) do (
        printf(fh, "  abar~a[~a] = E~a[~a]+wv~a*B~a[~a]-wv~a*B~a[~a]; ~%", dir-1, c-1, dir-1, c-1, dir-2, dir-2, c-1, dir-1, dir-3, c-1)
      ),
      clst : [dv1, dv2, dv3],
      clst1 : append(clst, makelist(abar2[i-1], i, 1, length(bC)))
    )
  ),
  printf(fh, "~%"), 
  printf(fh, "  double Ghat[~a]; ~%~%", length(bP)),
  printf(fh, "  for(unsigned int i=0; i<~a; ++i){ ~%~%", length(bP)),
  printf(fh, "    Ghat[i]=0.0; ~%~%", 0),
  printf(fh, "  }; ~%~%"),
  cv : varsP[dir],
  vv : varsV[dir],

  basisFlip : subst(vv=-1.0*vv, bP),
  signs : fullratsimp(basisFlip/bP),

  printf(fh, "  double favg[~a]; ~%~%", length(bP)),
  for c : 1 thru length(bP) do (
    printf(fh, "  favg[~a] = ~a*fr[~a]+fl[~a]; ~%", c-1, signs[c], c-1, c-1)
  ),

  printf(fh, "  double fjump[~a]; ~%~%", length(bP)),
  for c : 1 thru length(bP) do (
    printf(fh, "  fjump[~a] = amax*(~a*fr[~a]-fl[~a]); ~%", c-1, signs[c], c-1, c-1)
  ),
  
  surfVars : delete(vv,varsP),
  favg_e : doExpand1(favg, bP),
  fjump_e : doExpand1(fjump, bP),

  acc : calcAccel(dir, vdim, bC),
  amid : float(expand(fullratsimp(subst(zr,acc)))),
  printf(fh, "  const double amid = ~a; ~%", amid),

  fhat_average : subst(vv=1, favg_e),
  fhat_jump : subst(vv=1, fjump_e),
  t : 0.5*calcInnerProdList(varsP, 1.0, bP, acc*fhat_average-fhat_jump),
  incr_r : t,
  writeCExprsCollect1(Ghat, incr_r, clst1),
  printf(fh, "~%"),
  glst1 : doMakeExprLst(incr_r, Ghat),
  Ghat_e : doExpandLst(glst1, bP),
  Ghat_final : subst(vv=1, Ghat_e),
  incr_s : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_final),
  writeCIncrExprs1(outr, dv11[dir]*incr_s),  
  printf(fh, "~%"),
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_final),
  signs : fullratsimp(incr_l/incr_s),
  incr_new : makelist(signs[i]*incr_s[i], i, 1, length(bP)),
  writeCIncrExprs1(outl, dv11[dir]*incr_new),
  printf(fh, "return std::abs(amid); ~%"),
  printf(fh, "} ~%")
));

calcVlasovSurfUpdater(fh, funcNm, cdim, vdim, basisFun) := block([],
  printf(fh, "#include <VlasovModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun) )
)$
