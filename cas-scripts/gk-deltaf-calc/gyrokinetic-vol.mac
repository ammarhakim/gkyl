/*
  Generate the volume kernels for gyrokinetics with a simple
  helical magnetic field.

  The functions called in this file are in gk_volModule.mac.
*/
load("gk-deltaf-calc/gk_volModule")$

/* ...... USER INPUTS........ */

/* Choose to generate kernels for "ES", "EM" gyrokinetics or "both". */
ESorEM : "ES"$ 

/* Generate kernels for "simple" (helical), "general" or "both" geometries. */
geo : "general"$

/* Linear or nonlinear kernels */
LorNL : "nonlinear"$

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 3$
maxCdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
maxCdim_Max : 0$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser", "Max", "Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$

/* Is electromagnetic booleans. */
if     ESorEM="ES"   then (fieldType : [false]) 
elseif ESorEM="EM"   then (fieldType : [true]) 
elseif ESorEM="both" then (fieldType : [false,true])$

/* Is genGeo booleans. */
if     geo="simple"  then (geoType : [false])
elseif geo="general" then (geoType : [true])
elseif geo="both"    then (geoType : [false,true])$

/* Is LorNL booleans. */
if     LorNL="linear"  then (linType : [true])
elseif LorNL="nonlinear" then (linType : [false])
elseif LorNL="both"    then (linType : [true,false])$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      for polyOrder : 2 thru maxPolyOrderB do (
        for linInd : 1 thru length(linType) do (
          isLinear : linType[linInd],

          if isLinear then (linStr : "Linear") else (linStr : ""),

          for fieldInd : 1 thru length(fieldType) do (
            wApar : fieldType[fieldInd],

            if wApar then (emStr : "Em") else (emStr : ""),

            for geoInd : 1 thru length(geoType) do (
              isGenGeo : geoType[geoInd],

              if isGenGeo then (geoStr : "GenGeo") else (geoStr : "SimpleHelical"),

              fname : sconcat("~/max-out/",emStr,linStr,"DeltaFGyrokinetic", geoStr, bName[bInd], c, "x", v, "vP", polyOrder, ".cpp"),
              disp(printf(false,"Creating volume file: ~a",fname)),
  
              fh : openw(fname),
              printf(fh, "#include <DeltaFGyrokineticModDecl.h> ~%"),
              /* Possible combinations of variable dependence of background magnetic field.
                 with [] = const. Note that we assume axisymmetry, which means B cannot depend on y. */
              if isGenGeo then (
                bVarsList : [[x,z]]
              ) else (
                bVarsList : [[], [x]]
              ),
              for b : 1 thru length(bVarsList) do (
                funcName : sconcat(emStr,linStr,"DeltaFGyrokinetic",geoStr,"Vol", c, "x", v, "v", bName[bInd]),
                buildGKVolKernel(fh, funcName, c, v, bName[bInd], polyOrder, wApar, bVarsList[b],isGenGeo)
              ),
              /* Generate the kernel for the second step of GK with Apar. */
              if wApar then (
                funcName : sconcat(emStr,linStr,"DeltaFGyrokinetic",geoStr,"Step2Vol", c, "x", v, "v", bName[bInd]),
                buildGKStep2VolKernel(fh, funcName, c, v, bName[bInd], polyOrder,isGenGeo)
              ),
              close(fh)
            )
          )
        )
      )
    )
  )
)$
