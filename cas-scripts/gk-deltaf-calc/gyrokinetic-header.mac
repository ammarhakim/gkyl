/* Compute the header file for gyrokinetic kernels. */

/* ...... USER INPUTS........ */

/* Choose to generate kernels for "ES", "EM" gyrokinetics or "both". */
ESorEM : "both"$

/* Generate kernels for "simple" (helical), "general" or "both" geometries. */
geo : "general"$

/* Generate kernels positivity ("yes") or without it ("no"), or "both". */
usePositivity : "no"$

/* Linear or nonlinear kernels */
LorNL : "both"$

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
maxCdim_Max : 0$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Number of velocity dimensions allowed for each
   configuration-space dimension. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

varsC : [x, y, z]$
varsV : [vpar, mu]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser", "Max", "Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

/* Is electromagnetic booleans. */
if     ESorEM="ES"   then (fieldType : [false]) 
elseif ESorEM="EM"   then (fieldType : [true]) 
elseif ESorEM="both" then (fieldType : [false,true])$

/* Is genGeo booleans. */
if     geo="simple"  then (geoType : [false])
elseif geo="general" then (geoType : [true])
elseif geo="both"    then (geoType : [false,true])$

/* Is LorNL booleans. */
if     LorNL="linear"  then (linType : [true])
elseif LorNL="nonlinear" then (linType : [false])
elseif LorNL="both"    then (linType : [true,false])$

printPrototypes() := block([],
  for bInd : 1 thru length(bName) do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      for gkV : 1 thru length(gkVdims[c]) do (
        v : gkVdims[c][gkV],
  
        maxPolyOrderB : maxPolyOrder[bInd],
        if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
  
        for polyOrder : 1 thru maxPolyOrderB do (
          for linInd : 1 thru length(linType) do (
            isLinear : linType[linInd],

            if isLinear then (linStr : "Linear") else (linStr : ""),

            for fieldInd : 1 thru length(fieldType) do (
              wApar : fieldType[fieldInd],

              for geoInd : 1 thru length(geoType) do (
                isGenGeo : geoType[geoInd],

                if isGenGeo then (
                  bVarsList : [[], [x], [z], [x,z]]
                ) else (
                  bVarsList : [[], [x]]
                ),
  
                for b : 1 thru length(bVarsList) do (
                  BvarsLabel : "",
                  for i : 1 thru length(bVarsList[b]) do (BvarsLabel : sconcat(BvarsLabel,bVarsList[b][i])),
                
                  if wApar then (
                    printf(fh, "  double Em~aDeltaFGyrokineticGenGeoVol~ax~av~aP~a_Bvars~a(const double q_, const double m_, const double *w, const double *dxv, const double *bmag, const double *bmagInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *phi, const double *Apar, const double *dApardt, const double *f0, const double *f1, double *out); ~%", linStr, c, v, bName[bInd], polyOrder, BvarsLabel),
                    if b=1 then(
                      printf(fh, "  double Em~aDeltaFGyrokineticGenGeoStep2Vol~ax~av~aP~a(const double q_, const double m_, const double *w, const double *dxv, const double *dApardt, const double *f0, const double *f1, double *out); ~%", linStr, c, v, bName[bInd], polyOrder)
                    )
                  ) else (
                    printf(fh, "  double ~aDeltaFGyrokineticGenGeoVol~ax~av~aP~a_Bvars~a(const double q_, const double m_, const double *w, const double *dxv, const double *bmag, const double *bmagInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *phi, const double *f0, const double *f1, double *out); ~%", linStr, c, v, bName[bInd], polyOrder, BvarsLabel)
                  ),
  
                  if v=0 then (vd : 0) else (vd : 1),
  
                  for surfDir : 1 thru c+vd do (
                    if surfDir<=c then (dirlabel : varsC[surfDir]) else (dirlabel : varsV[surfDir-c]),
  
                    if wApar then (
                        printf(fh, "  double Em~aDeltaFGyrokineticGenGeoSurf~ax~av~a_~a_P~a_Bvars~a(const double q_, const double m_, const double cflL, const double cflR, const double *wL, const double *dxvL, const double *wR, const double *dxvR, const double amax_in, const double *bmag, const double *bmagInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *f0L, const double *f0R, const double *f1L, const double *f1R, double *outL, double *outR, double *emModL, double *emModR); ~%", linStr, c, v, bName[bInd], dirlabel, polyOrder, BvarsLabel),
                        printf(fh, "  double Em~aDeltaFGyrokineticGenGeoSurf~ax~av~aStep2_~a_P~a_Bvars~a(const double q_, const double m_, const double cflL, const double cflR, const double *wL, const double *dxvL, const double *wR, const double *dxvR, const double amax_in, const double *bmag, const double *bmagInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *f0L, const double *f0R, const double *f1L, const double *f1R, double *outL, double *outR, double *emModL, double *emModR); ~%", linStr, c, v, bName[bInd], dirlabel, polyOrder, BvarsLabel)
                    ) else (
                      printf(fh, "  double ~aDeltaFGyrokineticGenGeoSurf~ax~av~a_~a_P~a_Bvars~a(const double q_, const double m_, const double cflL, const double cflR, const double *wL, const double *dxvL, const double *wR, const double *dxvR, const double amax_in, const double *bmag, const double *bmagInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *phi, const double *f0L, const double *f0R, const double *f1L, const double *f1R, double *outL, double *outR); ~%", linStr, c, v, bName[bInd], dirlabel, polyOrder, BvarsLabel)
                    )
                  ),
                  printf(fh, "~%")
                ),
                printf(fh, "~%")
              )
            )
          )
        )
      )
    )
  )
)$

fh : openw("~/max-out/DeltaFGyrokineticModDecl.h")$
printf(fh, "#ifndef DELTAF_GYROKINETIC_MOD_DECL_H ~%")$
printf(fh, "#define DELTAF_GYROKINETIC_MOD_DECL_H ~%")$
printf(fh, "~%")$
printf(fh, "#include <algorithm> ~%")$
printf(fh, "#include <Positivity.h> ~%")$
printf(fh, "~%")$
printf(fh, "#define SURFAVG 1 ~%")$
printf(fh, "#define QUAD 2 ~%")$
printf(fh, "#define cflType QUAD ~%")$
printf(fh, "#define upwindType QUAD ~%")$
printf(fh, "~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "  return (T(0) < val) - (val < T(0)); ~%}~%")$
printf(fh, "~%")$
printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$
