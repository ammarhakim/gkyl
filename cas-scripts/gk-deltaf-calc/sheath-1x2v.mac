/* 
   Gyrokinetic sheath function for 1x2v kernel.
*/
load("modal-basis");
load("out-scripts");
load(stringproc)$
load("fem-calc/femMatrices")$ /* Contains node info and modal-to-nodal transformation matrices/functions. */
fpprec : 24$

gkvsub : [vx=vpar,vy=mu];

calcGkSheathFuncs1x2v(fh, cdim, vdim, basisFun, polyOrder) := block([],
  kill(varsC, varsP, basisC, basisP),
  /* Set up various bases with reduced dimension. */
  load("basis-precalc/basisSer1x"),
  basisVp : subst([x=vx],basisC),                /* 1d vpar basis. */
  basisMu : subst([x=vy],basisC),                /* 1d mu basis. */
  load("basis-precalc/basisSer2x"),  
  basisXY : basisC,                              /* 2d x,y basis. */
  basisVpMu : subst([x=vx,y=vy],basisC),         /* 2d vpar,mu basis. */ 
  basisZVp : subst([x=x,y=vx],basisC),           /* 2d z,vpar basis. */
  basisZMu : subst([x=x,y=vy],basisC),           /* 2d z,mu basis. */
  load("basis-precalc/basisSer3x"),
  basisZVpMu : psubst([x=x,y=vx,z=vy],basisC),   /* 3d z,vpar,mu basis. */
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  /* Get desired polyOrder of each basis. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  bVp : basisVp[polyOrder],
  bZVp : basisZVp[polyOrder],
  bMu : basisMu[polyOrder],
  bZMu : basisZMu[polyOrder],
  bVpMu : basisVpMu[polyOrder],
  bZVpMu : basisZVpMu[polyOrder],
  
  /* Get name of last config space dimension, which is always assumed to be
     the direction parallel to the magnetic field (z). */
  zVar : varsC[cdim],
  zmuVars : [zVar, vy],             
  
  funcNm : sconcat("calcSheathReflection", cdim, "x", vdim, "v", basisFun),
  disp(printf(false,"Working on function ~a",funcNm)),
  printf(fh, "~%"),
  printf(fh, "void ~a_P~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double zVal, const double q_, const double m_, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", funcNm, polyOrder),
  
  /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
     where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
  phiSheath_expd : subst(zVar=zVal,doExpand1(phi, bC)),
  phiWall_expd : subst(zVar=zVal,doExpand1(phiWall, bC)),
  deltaPhi_expd : phiSheath_expd - phiWall_expd,
  
  /* Set up quadrature nodes. */
  if polyOrder=1 then quad : 1/(3), /* Use control nodes instead of quadrature nodes for p=1, for positivity. */
  if polyOrder=2 then quad : sqrt(3/5),
  nodes1d : eval_string(sconcat("nodes1xp", polyOrder))*quad,   /* 1d quadrature/control nodes. */
  nodes2d : eval_string(sconcat("nodes2xp", polyOrder))*quad,   /* 2d quadrature/control nodes. */
  
  /* Substitution function to evaluate expansion f at (z,mu)=node[i] for all i. */
  nodesZMusub(f) := makelist(subst(makelist(zmuVars[j]=nodes2d[i][j],j,1,2),f),i,1,length(nodes2d)),
  
  /* Expand input distribution function f on phase-space basis using input coeffs. */
  f_expd : doExpand1(f, bP),
  
  /* Some naming conventions: 
     fZMuQ_expd = f evaluated at z,mu nodes (ZMuQ), expansion in remaining variables (_expd).
     fQ_ZVpMu_c = f projected onto (z,vpar,mu) basis resulting in coefficients (_ZVpMu_c).
  */
  
  kill(fReflZMuQ_expd),
  
  /* Variable declarations/allocations. */
  printf(fh, "  double vcutSq; long double xc, b, xbarVal, fac; ~%"),
  printf(fh, "  double fReflZMuQuad[~a][~a]; ~%", length(nodes2d), length(bZVp)),
  printf(fh, "  ~%~%"),
  
  /* Evaluate vcutSqQ = vcut^2. */
  vcutSqQ:gcfac(float(fullratsimp(-2*q_/m_*deltaPhi_expd))),
  
  /* Write vcut^2 at boundary. */
  printf(fh, "  vcutSq = ~a; ~%", vcutSqQ),
  
  /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
     so set coefficients of fRefl at this (x,y)_i node to 0 (no reflection from this node). */
  printf(fh, "  if(vcutSq <= vlowerSq) { // absorb (no reflection) ~%"),
  writeCExprsWithZerosNoExpand1(fRefl, makelist(0.,j,1,length(bP))),
  
  /* If vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection. */
  /* So set coefficients of fRefl to coefficients of f. */
  printf(fh, "  } else if(vcutSq > vupperSq) { // full reflection ~%"),
  /* Project f onto z,vpar basis (bZVp). */
  fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, f_expd))),
  /* Full reflection: set fRefl coefficients to f coefficients. */
  writeCExprsNoExpand1(fRefl, fRefl_c),
  
  /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
  printf(fh, "  } else { // partial reflection ~%"),
  
    /* Allocate empty vector for reflected distribution function also evaluated at z,mu nodes. */
    fReflZMuQ_expd : makelist(0,i,1,length(nodes2d)),
    /* f_expd is an expansion in z,vpar,mu;
       now evaluate f_expd at z,mu nodes
       so fZMuQ_expd[j] = fZQMu_expd[j](vpar) 
       is evaluated at the (z,mu)_j nodes */
    fZMuQ_expd : nodesZMusub(f_expd),
  
    /* Loop over (z,mu)_j nodes. */
    for j:1 thru length(nodes2d) do (
      /* Project f at this (z,mu)_j node onto vpar basis (bVp). */
      fZMuQ_Vp_c : gcfac(fullratsimp(innerProd([vx], 1, bVp, fZMuQ_expd[j]))),

      /* Evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis
         coefficients (recall that this is being done at every (x,y,z,mu)_i node). */
      xbar : gcfac(float(fZMuQ_Vp_c[2]/sqrt(3)/fZMuQ_Vp_c[1])),
      /* Print as xbarVal. */
      printf(fh, "  xbarVal = ~a; ~%", xbar),
      printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
      /* If abs(xbar)>=1, then f is not realizable. Use .95 as conservative threshold. */ 
      /* Also not realizable if cell_avg is negative. */
      printf(fh, "  if(~a <= 0. || std::abs(xbarVal)>=.95) { ~%", gcfac(float(fZMuQ_Vp_c[1]))),
      /* If not realizable, set reflection coeffs to zero so that no reflection from this node. */
      writeCExprsWithZerosNoExpand1(fReflZMuQuad[j-1],makelist(0.,j,1,length(bVp))),

      /* If f is realizable at this node...*/
      printf(fh, "  } else {~%"),
      /* Compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function. */
      beta:invL(xbarVal),
      printf(fh, "   b = ~a; ~%", beta),

      /* Compute partial reflection scaling factors for coefficients of f, based on exponential construction. */
      printf(fh, "   if(wv > 0) {~%"),
      printf(fh, "    xc = 2.*(std::sqrt(vcutSq)-wv)/dv; ~%"),
      fReflfacs : [ "b>500? 0. : b<-500? 1. : std::abs(b)<1e-10? (1.+xc)/2. : (std::exp(b*xc)-std::exp(-b))/(2.*std::sinh(b))", 
        	    "(b>500 || std::abs(b)<1e-8)? 0. : b<-500? 1. : ((b*xc-1)*std::exp(b*xc)+(b+1)*std::exp(-b))/2./(b*std::cosh(b)-std::sinh(b))",
            	    "(((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3-(2*(b*b+3*(b+1))*std::exp(-b))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
      for k:1 thru length(bVp) do (
      	  printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
      	  printf(fh, "    if(std::isnan(fac) || std::isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
      	  printf(fh, "    fReflZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZMuQ_Vp_c[k])))
      ),
      printf(fh, "   } else { ~%"),
      printf(fh, "    xc = 2.*(-std::sqrt(vcutSq)-wv)/dv; ~%"),
      fReflfacs : [ "b>500? 1. : b<-500? 0. : std::abs(b)<1e-10? (1.-xc)/2. : (std::exp(b)-std::exp(b*xc))/(2.*std::sinh(b))", 
      		    "b>500? 1. : (b<-500 || std::abs(b)<1e-8)? 0. : ((b-1)*std::exp(b)-(b*xc-1)*std::exp(b*xc))/2./(b*std::cosh(b)-std::sinh(b))", 
            	    "((2*(b*b+3*(1-b))*std::exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
      for k:1 thru length(bVp) do (
          printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
          printf(fh, "    if(std::isnan(fac) || std::isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
          printf(fh, "    fReflZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZMuQ_Vp_c[k])))
      ),
      printf(fh, "   } ~%"),
      printf(fh, "  } ~%"),
      /* We just printed bVp coefficients of fRefl at (z,mu)_j node. now expand in vpar using those coeffs. */
      fReflZMuQ_expd[j] : makelist(fReflZMuQuad[j-1][k-1],k,1,length(bVp)).bVp
    ), /* End of j loop over (z,mu)_j nodes. */

    /* Get modToNod matrix for transformation from (z,mu) nodes to z,mu basis coeffs. */
    modToNodZMu:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodes2d, bZMu, [x,vy])),
    /* Calculate expansion in z,vpar,mu. */
    fReflQ_ZVpMu_expd : fullratsimp(bZMu.fullratsimp(invert(transpose(float(modToNodZMu))).fReflZMuQ_expd)),
 
    /* Project fRefl onto z,vpar,mu basis (bP). */
    fReflQ_ZVpMu_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fReflQ_ZVpMu_expd))),
    /* Write coefficients. */
    writeCExprsNoExpand1(fRefl, fReflQ_ZVpMu_c),

  printf(fh, "  } ~%~%"), /* End of partial reflection else. */

  /* Expansion in z,vpar,mu of fRefl. */
  /* fReflQ_expd : makelist(fReflQuad[j-1],j,1,length(bP)).bP, */
  printf(fh, " ~%"),
  printf(fh, "}~%")

)$

