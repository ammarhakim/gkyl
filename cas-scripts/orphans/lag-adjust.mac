/* Adjust distribution function to match moments */

simpsum : true$

load("modal-basis")$
load("basis-precalc/basisSer1x1v")$

makeMomSum(bp, mom, lamb) := block([sl,t],
  sl : makelist(g[k]=kron_delta(m,k), k, 1, length(bp)),
  mom_s : subst(sl,mom),
  t : sum(lamb[k]*mom_s[k],k,1,length(mom)),
  return(t)
)$

bc : basisC[1]$
bp : basisP[1]$

gl : doExpand(g,bp)$
m0 : dv/2*calcInnerProdList(varsC, 1, bc, integrate(gl,vx,-1,1))$
m1 : dv/2*calcInnerProdList(varsC, 1, bc, integrate((dv/2*vx+w[j])*gl,vx,-1,1))$
m2 : dv/2*calcInnerProdList(varsC, 1, bc, integrate((dv/2*vx+w[j])^2*gl,vx,-1,1))$

gsubList : makelist(g[i]=kron_delta(i,k), i,1,length(bp))$

msum0 : subst(gsubList, m0)$
msum1 : subst(gsubList, m1)$
msum2 : subst(gsubList, m2)$

RHS : msum0.[L0[1],L0[2]] + msum2.[L2[1],L2[2]]$
RHSk : makelist(g[i]=subst(k=i,RHS),i,1,length(bp))$

eq0 : makelist(dn[i]=sum(subst(RHSk,m0[i]),j,1,Nv), i,1,length(bc))$
eq1 : makelist(dm[i]=sum(subst(RHSk,m1[i]),j,1,Nv), i,1,length(bc))$
eq2 : makelist(dE[i]=sum(subst(RHSk,m2[i]),j,1,Nv), i,1,length(bc))$

eqns : fullratsimp(subst(w[j]=-Nv*dv+(j-1/2)*dv, append(eq0,eq2)))$
sol : linsolve(eqns,[L0[1],L0[2],L2[1],L2[2]])$

deltaF : subst(sol,RHS)$
deltaFk : subst(dv=2*L/Nv,makelist(subst(k=i,deltaF),i,1,length(bp)))$
