/* 
  Generate kernels for IntegratedDGMoment updater for
  various basis and polynomial orders.
*/

load("moments-calc-c/int-moment")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
minVdim_Tensor : 1$
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (

  for c : minCdim[bInd] thru (maxCdim[bInd]+maxVdim[bInd]) do (
    maxPolyOrderB : maxPolyOrder[bInd],
    if(c>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

    fname : sconcat("~/max-out/IntegratedDGMoment", bName[bInd], c, "x", ".cpp"),
    fh : openw(fname),
    printf(fh, "#include <IntegratedDGMomentModDecl.h> ~%"),
    printf(fh, " ~%"),

    funcName : sconcat("IntDGMoment", c, "x", bName[bInd]),

    /* Integral of the field over all space. */
    calcOne(fh, funcName, c, bName[bInd], maxPolyOrderB),

    /* Compute the integral of x1, x2, x3, x4, x5 or x6. */
    calcSingleX(fh, funcName, c, bName[bInd], maxPolyOrderB, 1),

    /* Compute the integral of x1^2, x2^2, x3^2, x4^2, x5^2 or x6^2. */
    calcSingleX(fh, funcName, c, bName[bInd], maxPolyOrderB, 2),

    /* Compute the integral of x1, x2, etc, all at the same time. */
    xiCalc(fh, funcName, c, bName[bInd], maxPolyOrderB),

    /* Compute the integral of sum_i x_i^2. */
    xSqCalc(fh, funcName, c, bName[bInd], maxPolyOrderB),

    close(fh)

  ),

  /* Velocity moments. */
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if(c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      fname : sconcat("~/max-out/IntegratedDGMoment", bName[bInd], c, "x", v, "v", ".cpp"),
      fh : openw(fname),
      printf(fh, "#include <IntegratedDGMomentModDecl.h> ~%"),
      printf(fh, " ~%"),

      funcName : sconcat("IntDGMoment", c, "x", v, "v", bName[bInd]),

      /* Compute the integral of v1, v2 or v3. */
      calcSingleV(fh, funcName, c, v, bName[bInd], maxPolyOrderB, 1),

      /* Compute the integral of v1^2, v2^2 or v3^2. */
      calcSingleV(fh, funcName, c, v, bName[bInd], maxPolyOrderB, 2),

      /* Compute the integral of M1i. */
      viCalc(fh, funcName, c, v, bName[bInd], maxPolyOrderB),

      /* Compute the integral of M2. */
      vSqCalc(fh, funcName, c, v, bName[bInd], maxPolyOrderB),

      /* Compute the integrals of M0, M1i and M2 together. */
      calcIntM(fh, funcName, c, v, bName[bInd], maxPolyOrderB),

      close(fh)
    )
  )

)$
