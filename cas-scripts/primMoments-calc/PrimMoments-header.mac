polyOrderMax : 3$

VarsC : [X, Y, Z]$

bName   : ["Ser","Max"]$
gkVdims : [[1,2], [2], [2]]$

printPrototypes() := block([], 
for bInd : 1 thru length(bName) do (

  for pi : 1 thru polyOrderMax do (
    for ci : 1 thru 3 do (

      /* Vlasov-Maxwell. */
      for vi : ci thru 3 do (
        /* For piecewise linear compute m0Star moment. */
        if (pi=1) then (
          /* Primitive moments for self-collision terms with p=1. */
          printf(fh, "void VmSelfPrimMoments~ax~av~a_P~a(binOpData_t *data, const double *m0, const double *m1, const double *m0S, const double *m1S, const double *m2S, const double *cM, const double *cE, double *u, double *vtSq); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%"), 

          for si : 1 thru vi do (
            printf(fh, "void VmM0Star~ax~av~a_V~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *fl, const double *fr, double *out); ~%", ci, vi, bName[bInd], VarsC[si]),
            printf(fh, "~%")
          ),
          printf(fh, "void VmM1iM2Star~ax~av~a(const double *w, const double *dxv, const double *f, double *outM1i, double *outM2); ~%", ci, vi, bName[bInd]),
          printf(fh, "~%")
        ) else (
          /* Primitive moments for self-collision terms with p>1. */
          printf(fh, "void VmSelfPrimMoments~ax~av~a_P~a(binOpData_t *data, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%")
        ),
  
        /* Corrections to primitive moments from finite velocity grids. */
        for si : 1 thru vi do (
          printf(fh, "void VmBoundaryIntegral~ax~av~a_F_V~a_P~a(const bool atLower, const double vBoundary, const double *dxv, const double *fIn, double *out); ~%", ci, vi, bName[bInd], VarsC[si], pi),
          printf(fh, "~%"),
  
          printf(fh, "void VmBoundaryIntegral~ax~av~a_vF_V~a_P~a(const bool atLower, const double vBoundary, const double *dxv, const double *fIn, double *out); ~%", ci, vi, bName[bInd], VarsC[si], pi),
          printf(fh, "~%")
        ),
  
        /* Primitive moments for cross-collision Vlasov LBO terms. */
        printf(fh, "void VmCrossPrimMomentsGreene~ax~av~a_P~a(const double mRat, const double beta, const double *uSelf, const double *vtSqSelf, const double *uOther, const double *vtSqOther, double *uCross, double *vtSqCross); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%"), 
 
        printf(fh, "void VmCrossPrimMomentsHeavyIons~ax~av~a_P~a(const double mRat, const double beta, const double *uSelf, const double *vtSqSelf, const double *uOther, const double *vtSqOther, double *uCross, double *vtSqCross); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%") 
 
      ),

      /* Gyrokinetics needs 1x1v, 1x2v, 2x2v and 3x2v.
         For now assume that gyrokinetics is never run in 2x1v or 3x1v. */
      for gkV : 1 thru length(gkVdims[ci]) do (

        vi : gkVdims[ci][gkV],

        /* For piecewise linear compute m0Star moment. */
        if (pi=1 and bInd=2) then (
          /* Primitive moments for self-collision terms with p=1. */
          printf(fh, "void GkSelfPrimMoments~ax~av~a_P~a(binOpData_t *data, const double *m0, const double *m1, const double *m0S, const double *m1S, const double *m2S, const double *cM, const double *cE, double *u, double *vtSq); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%"), 

          printf(fh, "void GkM0Star~ax~av~a_V~a(const double intFac, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *fl, const double *fr, double *out); ~%", ci, vi, bName[bInd], VarsC[1]),
          printf(fh, "~%"),

          printf(fh, "void GkM1iM2Star~ax~av~a(const double *w, const double *dxv, const double intFac, const double m_, const double *Bmag, const double *f, double *outM1i, double *outM2); ~%", ci, vi, bName[bInd]),
          printf(fh, "~%")
        ) else (
          /* Primitive moments for self-collision terms with p>1. */
          printf(fh, "void GkSelfPrimMoments~ax~av~a_P~a(binOpData_t *data, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE, double *u, double *vtSq); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%")
        ),

        /* Corrections to primitive moments from finite velocity grids. */
        printf(fh, "void GkBoundaryIntegral~ax~av~a_F_V~a_P~a(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out); ~%", ci, vi, bName[bInd], VarsC[1], pi),
        printf(fh, "~%"),

        for si : 1 thru vi do (
          printf(fh, "void GkBoundaryIntegral~ax~av~a_vF_V~a_P~a(const bool atLower, const double intFac, const double vBoundary, const double *dxv, const double *fIn, double *out); ~%", ci, vi, bName[bInd], VarsC[si], pi),
          printf(fh, "~%")
        ),

        /* Primitive moments for cross-collisions. */
        printf(fh, "void GkCrossPrimMomentsGreene~ax~av~a_P~a(const double mRat, const double beta, const double *uSelf, const double *vtSqSelf, const double *uOther, const double *vtSqOther, double *uCross, double *vtSqCross); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%"),
  
        printf(fh, "void GkCrossPrimMomentsHeavyIons~ax~av~a_P~a(const double mRat, const double beta, const double *uSelf, const double *vtSqSelf, const double *uOther, const double *vtSqOther, double *uCross, double *vtSqCross); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%")
  
      )


    ),
    printf(fh, "~%")
  )

)
)$

fh : openw("~/max-out/PrimMomentsModDecl.h")$
printf(fh, "#ifndef PRIM_MOMENTS_MOD_DECL_H ~%")$
printf(fh, "#define PRIM_MOMENTS_MOD_DECL_H ~%")$
printf(fh, " ~%")$
printf(fh, "// Eigen include statements. ~%")$
printf(fh, "#include <Eigen/Dense> ~%")$
printf(fh, "#include <CartFieldBinOpModDecl.h> ~%")$
printf(fh, " ~%")$
printf(fh, "extern \"C\" { ~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$

fh : openw("~/max-out/_PrimMomentsCdef.lua")$
printf(fh, "local ffi = require \"ffi\" ~%~%")$
printf(fh, "ffi.cdef [[~%")$
printPrototypes()$
printf(fh, "]]~%")$
close(fh)$
