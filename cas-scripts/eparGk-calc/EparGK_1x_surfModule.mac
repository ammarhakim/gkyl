/* 
   Create kernels for the surface term of the gyrokinetic equation.
   To be used in simplified helical geometry (or slab?).
*/
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("eparGk-calc/EparGkUtil")$
fpprec : 24$

calcUpdateInDir(surfDir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [i,d,v,step2,pDim,varsC,bC,varsP,bP,vSub,vSubInv,numC,numP,surfVar,varLabel,dirLabel,
   BvarsLabel,rdx2vecL,rdx2vecR,rdv2vecL,rdv2vecR,rdSurfVar2L,rdSurfVar2R,bmagBasis,ignoreVars,
   bmag_e,bmagInv_e,Epar_e,Apar_e,dAdt_e,dAdtPrev_e,hamilNoPhiL_e,hamilNoPhiR_e,BstardBmagL_e,BstardBmagR_e,
   alphaUpL_e,alphaSurfL_e,alphaUpSurfL_e,alphaUpR_e,alphaSurfR_e,alphaUpSurfR_e,alphaSurfAvgR_s,
   incrL_c,incrR_c,incr_s,signs,incrEmMod_s],

  kill(varsC, varsP, basisC, basisP),

  pDim : cdim+vdim,

  [varsC,bC,varsP,bP,vSub,vSubInv] : loadBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC), numP : length(bP), 

  surfVar  : varsP[surfDir],             /* Surface variable. */
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  print("Working on ", funcNm, "_", dirLabel, "_P", polyOrder),
  printf(fh, "double ~a_~a_P~a(const double q_, const double m_, const double cflL, const double cflR, const double *wL, const double *dxvL, const double *wR, const double *dxvR, const double amax_in, const double *bmag, const double *jacobTotInv, const double *cmag, const double *b_x, const double *b_y, const double *b_z, const double *Epar, const double *fL, const double *fR, double *outL, double *outR) ~%{ ~%", funcNm, dirLabel, polyOrder),
  printf(fh, "  // jacobTotInv: reciprocal of the conf-space jacobian time the guiding center coordinate Jacobian.~%"),
  printf(fh, "  // b_x,b_y,b_z: covariant components of the field aligned unit vector.~%"),
  printf(fh, "  // q_,m_: species charge and mass.~%"),
  printf(fh, "  // cflL,cflR: CFL rate in left and right cells.~%"),
  printf(fh, "  // wL[NDIM],wR[NDIM]: cell-center in left and right cells.~%"),
  printf(fh, "  // dxvL[NDIM],dxvR[NDIM]: Cell length in left and right cells.~%"),
  printf(fh, "  // amax_in: maximum phase-space speed.~%"),
  printf(fh, "  // bmag: magnetic field amplitude.~%"),
  printf(fh, "  // cmag: coefficient multiplying parallel gradient.~%"),
  printf(fh, "  // Epar: parallel electric field, d(phi)/dz.~%"),
  printf(fh, "  // fL,fR: Distribution function in left and right cells.~%"),
  printf(fh, "  // outL/outR: Output increment in left and right cells.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~aL = wL[~a];~%", varLabel[d], d-1),
    printf(fh, "  double w~aR = wR[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2L = 2.0/dxvL[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2R = 2.0/dxvR[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vecL : makelist(eval_string(sconcat("rd",varLabel[i],"2L")),i,1,cdim),
  rdx2vecR : makelist(eval_string(sconcat("rd",varLabel[i],"2R")),i,1,cdim),
  rdv2vecL : makelist(eval_string(sconcat("rd",varLabel[i],"2L")),i,cdim+1,pDim),
  rdv2vecR : makelist(eval_string(sconcat("rd",varLabel[i],"2R")),i,cdim+1,pDim),

  rdSurfVar2L : eval_string(sconcat("rd",dirLabel,"2L")),
  rdSurfVar2R : eval_string(sconcat("rd",dirLabel,"2R")),

  /* Declare variables with squared of cell centers and rdx2 variables. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~aSqL = wL[~a]*wL[~a];~%", varLabel[d], d-1, d-1),
    printf(fh, "  double w~aSqR = wR[~a]*wR[~a];~%", varLabel[d], d-1, d-1),
    printf(fh, "  double rd~a2SqL = rd~a2L*rd~a2L;~%", varLabel[d], varLabel[d], varLabel[d]),
    printf(fh, "  double rd~a2SqR = rd~a2R*rd~a2R;~%", varLabel[d], varLabel[d], varLabel[d])
  ),
  printf(fh, "~%"),

  /* Load a basis that only has the variables B depends on, but has the right
     normalization and dimensionality for the dimensionality of interest. */
  bmagBasis  : copylist(bC),
  varsInB    : [x],
  ignoreVars : listify(setdifference(setify(varsC),setify(varsInB))),
  for i : 1 thru numC do (
    for v : 1 thru length(ignoreVars) do (
      if not freeof(ignoreVars[v],bC[i]) then (
        bmagBasis[i] : 0
  ))),

  inFlds_e : expandInputFields(bC,bmagBasis,wApar),

  /* Compute Hamiltonian (w/o the q*phi term) and write it out. Since alpha.n is
     continuous we need only deal with the left or right alpha. */
  /*
  hamilNoPhiL_e : calcAndWrite_HamilNoPhi(fh,q_,m_,[wvparL,wmuL],rdv2vecL,bP,inFlds_e,"L"),
  */
  hamilNoPhiR_e : calcAndWrite_HamilNoPhi(fh,q_,m_,[wvparR,wmuR],rdv2vecR,bP,inFlds_e,"R"),

  /* Compute B* divided by B and write it out. */
  /*
  [BstardBmagL_e, BstardBmagR_e] : calcAndWrite_BstardBmag(fh,cdim,bP,bmagBasis,surfDir,m_,q_,
                                                 wvparR,rdx2vecL,rdv2vecL,inFlds_e,"L"),
  */
  [BstardBmagR_e, BstardBmagL_e] : calcAndWrite_BstardBmag(fh,cdim,bP,bmagBasis,surfDir,m_,q_,
                                                           wvparR,rdx2vecR,rdv2vecR,inFlds_e,"R"),


  /* Calculate phase space velocity alpha in direction of surfVar. */
  /* We assume alpha.n is continuous across boundary, although H may not be. */
  /* Distinguish between alpha and alphaUp, where alphaUp is the one used to
     determine upwind direction. */
  /*
  [alphaUpL_e,alphaSurfL_e,alphaUpSurfL_e] = calcAndWrite_alpha(fh,surfDir,bP,polyOrder,basisType,
    m_,q_,rdx2vecL,rdv2vecL,inFlds_e,hamilNoPhiL_e,BstardBmagL_e,BstardBmagR_e,"L",false),
  */
  [alphaUpR_e,alphaSurfR_e,alphaUpSurfR_e] : calcAndWrite_alpha(fh,surfDir,bP,polyOrder,basisFun,
    m_,q_,rdx2vecR,rdv2vecR,inFlds_e,hamilNoPhiR_e,BstardBmagR_e,BstardBmagL_e,"R",false),

  /* Calculate and write out the surface-averaged alpha. */
  alphaSurfAvgR_s : calcAndWrite_surfAvgAlpha(fh,bP,surfDir,alphaUpR_e,"R"),

  printf(fh, "  double incr[~a]; ~%", numP),

  /* Always pure upwind in z direction. */
  if (surfDir=cdim and cdim#2) then (pureUpwind : true) else (pureUpwind : false),

  /* Note: always use pureUpwind for p=1. */
  if (alphaSurfR_e = 0) then (
    printf(fh, "  // alpha == 0, so nothing to do.~%"),
    printf(fh, "  return std::abs(alphaSurfAvgR);~%"),
    printf(fh, "}~%"),
    flush_output(fh)
  ) else if pureUpwind or polyOrder=1 then (

    printf(fh, "#if upwindType == SURFAVG ~%"),

    /* Upwinded fluxes based on surface-averaged phase-velocity. */
    [incrL_c, incrR_c] : calcAndWrite_upwindIncr_wSurfAvgAlpha(fh,bP,polyOrder,surfDir,"R",alphaSurfR_e,wApar,false),

    printf(fh, "#elif upwindType == QUAD ~%"),

    /* Upwinded fluxes based on quadrature-node values of phase-velocity. */
    [incrL_c, incrR_c] : calcAndWrite_upwindIncr_wQuadNodeAlpha(fh,basisFun,polyOrder,bP,surfDir,"R",
                                                                alphaSurfR_e,alphaUpSurfR_e,wApar,false),

    printf(fh, "#endif ~%"),
    flush_output(fh),

    /* Write the actual increments to the left and right cells, which are
       built with incr, dxv factors and some sign changes. */
    incr_s : makelist(incr[i-1], i, 1, numP),
    writeCIncrExprsNoExpand1(outR, rdSurfVar2R*incr_s),
    printf(fh, "~%"),
    flush_output(fh),

    signs  : fullratsimp(incrL_c/incrR_c),
    incr_s : makelist(signs[i]*incr[i-1], i, 1, numP),
    writeCIncrExprsNoExpand1(outL, rdSurfVar2L*incr_s),
    printf(fh, "~%"),
    flush_output(fh),

    printf(fh, "  return std::abs(alphaSurfAvgR); ~%"),
    printf(fh, "} ~%"),
    flush_output(fh)

  ) else (

    /* Compute the common increments to left/right cell using Lax-Friedrichs
       fluxes. The actual output of the kernel should be these increments times
       some cell-length factor. */
    [incrL_c, incrR_c] : calcAndWrite_upwindIncr_wLFfluxes(fh,basisFun,polyOrder,bP,surfDir,alphaSurfR_e),
    
    incr_s : rdSurfVar2R*makelist(incr[i-1], i, 1, numP),
    writeCIncrExprsNoExpand1(outR, incr_s),
    printf(fh, "~%"),
    flush_output(fh),

    /* Contribution to left cell (surfVar=1) is same except for signs. */
    signs  : fullratsimp(incrL_c/incrR_c),
    incr_s : rdSurfVar2L*makelist(signs[i]*incr[i-1], i, 1, numP),
    writeCIncrExprsNoExpand1(outL, incr_s),

    /* Return alphaSurfAvgR so that we can find global value. */
    printf(fh, "return std::abs(alphaSurfAvgR); ~%"),

    printf(fh, "} ~%"),
    flush_output(fh)
  )

)$


calcGKSurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([vd,dir,pureUpwind],
  if vdim = 0 then (vd : 0) else (vd : 1),

  for dir : 1 thru cdim+vd do (

    calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder)

  )
)$


