/*
  Generate the surface kernels for 1x gyrokinetics with a
  centrifugal term and Epar instead of d(phi)/dz.

  The functions called in this file are in EparGK_1x_surfModule.mac.
*/
load("eparGk-calc/EparGK_1x_surfModule")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 1$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 1$

/* Vdim possibilities. */
gkVdims : [[2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser", "Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      for polyOrder : 1 thru maxPolyOrderB do (
        fname : sconcat("~/max-out/EparGyrokineticSurf", bName[bInd], c, "x", v, "vP", polyOrder, ".cpp"),
        disp(printf(false,"Creating surface file: ~a",fname)),
  
        fh : openw(fname),
        printf(fh, "#include <EparGyrokineticModDecl.h>~%"),

        funcName : sconcat("EparGyrokineticSurf", c, "x", v, "v", bName[bInd]),
        calcGKSurfUpdater(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
)$
