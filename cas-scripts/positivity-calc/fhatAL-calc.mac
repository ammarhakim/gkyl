load("modal-basis")$
load("fem-calc/femMatrices")$
load("scifac")$

/* returns anti-limited expansion of f evaluated at surfVar=surfVal */
fhatAL(fhat_expd,surfVar,surfVal,cfl,cdim,vdim,p):=block([limTheta,modNm,basis,vars,varsP,nodes,modToNod,avgAndSlope,nodesub,r,fq,fhatAL_k,fhatAL_expd, surfIntVars],
  if vdim=0 then modNm : sconcat("basis-precalc/basisSer", cdim, "x")
  else modNm : sconcat("basis-precalc/basisSer", cdim, "x", vdim, "v"),
  load(modNm),
  if vdim=0 then basis : basisC[p]
  else basis : basisP[p],
  if vdim=0 then vars : varsC else vars : varsP,
  surfIntVars : delete(surfVar, vars),
  nodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p))/3,
  /* function to evaluate f at control nodes in all dimensions other than surfVar */
  nodesub(f):=makelist(subst(makelist(surfIntVars[j]=nodes[i][j],j,1,length(surfIntVars)),f),i,1,length(nodes)),
  /* evaluate r=f1/f0 at control nodes */
  avgAndSlope:fullratsimp(innerProd([surfVar],1,[1/2,3/2*surfVar],fhat_expd)),
  r:fullratsimp(nodesub(fullratsimp(avgAndSlope[2]/(EPSILON + avgAndSlope[1])))),
  /* print r */
  printf(fh,"  double rVal[~a];  // rVal=f1/f0 at each control node in dimensions other than ~a ~%",length(r),surfVar),
  writeCExprsNoExpand1(rVal,gcfac(r)),
  flush_output(fh),
  fq:fullratsimp(nodesub(avgAndSlope[1])*makelist(limTheta(rVal[i-1],surfVal,cfl),i,1,length(r))),
  /* print fq */
  printf(fh,"  double fqVal[~a];  // fqVal = anti-limited f evaluated at each control node on ~a surface ~%",length(fq),surfVar),
  writeCExprsNoExpand1(fqVal,gcfac(fq)),
  flush_output(fh),
  if cdim+vdim-1<=3 then modToNod:calcModToNodPhase(cdim+vdim-1,0,p)
  else modToNod:calcModToNodPhase(cdim-1,vdim,p),
  fhatAL_k:fullratsimp(invert(transpose(modToNod)).makelist(fqVal[i-1],i,1,length(fq))),
  fhatAL_k:gcfac(makelist(fhatAL_k[i][1],i,1,length(fhatAL_k))),
  printf(fh,"  double fhatALVal[~a];  // fhatALVal = mode coefficients of anti-limited f ~%",length(fq)),
  writeCExprsNoExpand1(fhatALVal, fhatAL_k),
  flush_output(fh),
  surfBasis:sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(surfVar=0,basis)))*basis),
  fhatAL_expd:subst(surfVar=surfVal,fullratsimp(surfBasis.makelist(fhatALVal[i-1],i,1,length(fhatAL_k)))),

  flush_output(fh),
  return(fhatAL_expd)
)$

fhatALgenUpwind(fL_expd, fR_expd, alphaSurf_expd,surfVar,cflL,cflR,cdim,vdim,p):=block([limTheta,modNm,basis,vars,varsP,nodes,modToNod,avgAndSlope,nodesub,r,fq,fhatAL_k,fhatAL_expd, surfIntVars],
  if vdim=0 then modNm : sconcat("basis-precalc/basisSer", cdim, "x")
  else modNm : sconcat("basis-precalc/basisSer", cdim, "x", vdim, "v"),
  load(modNm),
  if vdim=0 then basis : basisC[p]
  else basis : basisP[p],
  if vdim=0 then vars : varsC else vars : varsP,
  surfIntVars : delete(surfVar, vars),
  /* surface control nodes */
  nodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p))/3,
  nodesub(f):=makelist(subst(makelist(surfIntVars[j]=nodes[i][j],j,1,length(surfIntVars)),f),i,1,length(nodes)),
  /* evaluate fl, fr, and alpha at surface control nodes */
  /* note flQ and frQ will still have surfVar dependence, so that we can evaluate integrals in that direction below */
  alphaq:nodesub(alphaSurf_expd),
  frQ:nodesub(fR_expd),
  flQ:nodesub(fL_expd), 
  
  printf(fh, "  double rVal;  // rVal=f1/f0 at each control node in dimensions other than ~a ~%",surfVar),
  printf(fh, "  double fqVal[~a];  // fqVal = anti-limited f evaluated at each control node on ~a surface ~%",length(nodes),surfVar),

  printf(fh, "  // determine upwinding at each surface control node ~%"),
  for i:1 thru length(alphaq) do (
  printf(fh, "  if(~a > 0) {~%", gcfac(float(alphaq[i]))),
  /* integrate in surfVar to find avg and slope */
  avgAndSlope:fullratsimp(innerProd([surfVar],1,[1/2,3/2*surfVar],flQ[i])),
  r:fullratsimp(avgAndSlope[2]/(EPSILON + avgAndSlope[1])),
  printf(fh, "  rVal = ~a; ~%", gcfac(float(r))),
  fq:fullratsimp(avgAndSlope[1]*limTheta(rVal,1,cflL)),
  printf(fh, "  fqVal[~a] = std::min(~a, fl[0]*~a); ~%", i-1, gcfac(float(fq)), cflL),
  printf(fh, "  } else {~%"),
  /* integrate in surfVar to find avg and slope */
  avgAndSlope:fullratsimp(innerProd([surfVar],1,[1/2,3/2*surfVar],frQ[i])),
  r:fullratsimp(avgAndSlope[2]/(EPSILON + avgAndSlope[1])),
  printf(fh, "  rVal = ~a; ~%", gcfac(float(r))),
  fq:fullratsimp(avgAndSlope[1]*limTheta(rVal,-1,cflR)),
  printf(fh, "  fqVal[~a] = std::min(~a, fr[0]*~a); ~%", i-1, gcfac(float(fq)), cflR),
  printf(fh, "  }~%")
  ),
  if cdim+vdim-1<=3 then modToNod:calcModToNodPhaseWithNodes(cdim+vdim-1,0,p,nodes)
  else modToNod:calcModToNodPhaseWithNodes(cdim-1,vdim,p,nodes),
  fhatAL_k:fullratsimp(invert(transpose(modToNod)).makelist(fqVal[i-1],i,1,length(nodes))),
  fhatAL_k:gcfac(makelist(fhatAL_k[i][1],i,1,length(fhatAL_k))),
  printf(fh,"  double fhatALVal[~a];  // fhatALVal = mode coefficients of anti-limited f ~%",length(nodes)),
  writeCExprsNoExpand1(fhatALVal, fhatAL_k),
  flush_output(fh),
  surfBasis:sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(surfVar=0,basis)))*basis),
  fhatAL_expd:subst(surfVar=surfVal,fullratsimp(surfBasis.makelist(fhatALVal[i-1],i,1,length(fhatAL_k)))),
  flush_output(fh),
  return(fhatAL_expd)
)$

fhatALgenUpwind2(fL_expd, fR_expd, alphaSurf_expd,surfVar,cflL,cflR,cdim,vdim,p):=block([limTheta,modNm,basis,vars,varsP,nodes,modToNod,avgAndSlope,nodesub,r,fq,fhatAL_k,fhatAL_expd, surfIntVars],
  load("basis-precalc/basisSer1x"),
  basis1d:subst(x=surfVar,basisC[1]),
  if vdim=0 then modNm : sconcat("basis-precalc/basisSer", cdim, "x")
  else modNm : sconcat("basis-precalc/basisSer", cdim, "x", vdim, "v"),
  load(modNm),
  if vdim=0 then basis : basisC[p]
  else basis : basisP[p],
  if vdim=0 then vars : varsC else vars : varsP,
  surfIntVars : delete(surfVar, vars),
  surfBasis:sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(surfVar=0,basis)))*basis),
  nodesub(f,nodes):=makelist(subst(makelist(surfIntVars[j]=nodes[i][j],j,1,length(surfIntVars)),f),i,1,length(nodes)),
  /* surface quadrature nodes */
  qSurfNodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p))/sqrt(3),
  /* evaluate fl, fr, and alpha at surface quadrature nodes */
  /* note flSurfQ and frSurfQ will still have surfVar dependence, so that we can evaluate integrals in that direction below */
  alphaSurfQ:nodesub(alphaSurf_expd,qSurfNodes),
  frSurfQ:nodesub(fR_expd,qSurfNodes),
  /* note: mirror fL in surfVar direction so that we only have to worry about calculations in cell to right of boundary */
  flSurfQ:nodesub(subst(surfVar=-surfVar,fL_expd),qSurfNodes), 
  surfVal:-1,
  
  printf(fh, "  double f0Quad[~a]; ~%", length(alphaSurfQ)),
  printf(fh, "  double f1Quad[~a]; ~%", length(alphaSurfQ)),
  printf(fh, "  double limQuad[~a]; ~%", length(alphaSurfQ)),
  printf(fh, "  double alphaQuad; ~%"),
  printf(fh, "  // determine upwinding at each surface quadrature node ~%"),
  for i:1 thru length(alphaSurfQ) do (
  /* project in surfVar at each surface quadrature node */
  printf(fh, "  alphaQuad = ~a; ~%", gcfac(float(alphaSurfQ[i]))),
  fl1d_k:innerProd([surfVar],1,basis1d,flSurfQ[i]),
  fr1d_k:innerProd([surfVar],1,basis1d,frSurfQ[i]),
  f0Q:gcfac(float(fullratsimp((fl1d_k[1]+fr1d_k[1] + sgn(alphaQuad)*(fl1d_k[1]-fr1d_k[1]))/2))),
  f1Q:gcfac(float(fullratsimp((fl1d_k[2]+fr1d_k[2] + sgn(alphaQuad)*(fl1d_k[2]-fr1d_k[2]))/2))),
  
  printf(fh, "  f0Quad[~a] = ~a; ~%", i-1, f0Q),
  printf(fh, "  f1Quad[~a] = ~a; ~%", i-1, f1Q),
  printf(fh, "  limQuad[~a] = .5*(fl[0]/~a+fr[0]/~a + sgn(alphaQuad)*(fl[0]/~a-fr[0]/~a))*~a; ~%", i-1, cflL, cflR, cflL, cflR, float(1/sqrt(2)^(cdim+vdim)))
  ),
  /* get 1d expansion in surfVar for each surface quadrature node */
  fhatSurfQ : makelist([f0Quad[i-1], f1Quad[i-1]].basis1d,i,1,length(alphaSurfQ)),
  /* calculate volume expansion of fhat from quadrature nodal expansions */
  if cdim+vdim-1<=3 then modToNodQ:calcModToNodPhaseWithNodes(cdim+vdim-1,0,p,qSurfNodes)
  else modToNodQ:calcModToNodPhaseWithNodes(cdim-1,vdim,p,qSurfNodes),
  fhatSurf_k : expand(invert(transpose(modToNodQ)).fhatSurfQ),
  fhat_expd : expand(surfBasis.fhatSurf_k),
  /* project fhat onto volume basis and print coefficients */
  printf(fh, "  double fhat[~a]; // (volume) mode coefficients of fhat ~%", length(basis)),
  fhat_k : fullratsimp(innerProd(vars, 1, basis, fhat_expd)),
  writeCExprsNoExpand1(fhat, gcfac(fhat_k)),
  fhat_k : makelist(fhat[i-1],i,1,length(fhat_k)),
  fhat_expd : fhat_k.basis,
  
  /* positivity evaluation at control nodes */
  cSurfNodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p))/3,
  avgAndSlope:fullratsimp(innerProd([surfVar],1,[1/2,3/2*surfVar],fhat_expd)),
  rSurfC:fullratsimp(nodesub(fullratsimp(avgAndSlope[2]/(EPSILON + avgAndSlope[1])),cSurfNodes)),
  /* print rSurfC */
  printf(fh,"  double rCtrl[~a];  // rCtrl=f1/f0 at each control node in dimensions other than ~a ~%",length(rSurfC),surfVar),
  writeCExprsNoExpand1(rCtrl,gcfac(rSurfC)),
  flush_output(fh),
  fhatSurfC:fullratsimp(nodesub(avgAndSlope[1],cSurfNodes)*makelist(limTheta(rCtrl[i-1],surfVal),i,1,length(rSurfC))),
  /* print fhatSurfC */
  printf(fh,"  double fhatCtrl[~a];  // fhatCtrl = anti-limited fhat evaluated at each control node on ~a surface ~%",length(fhatSurfC),surfVar),
  writeCExprsNoExpand1(fhatCtrl,gcfac(fhatSurfC)),
  flush_output(fh),
  if cdim+vdim-1<=3 then modToNodC:calcModToNodPhaseWithNodes(cdim+vdim-1,0,p,cSurfNodes)
  else modToNodC:calcModToNodPhaseWithNodes(cdim-1,vdim,p,cSurfNodes),
  /* get mode coefficients of fhat from control nodal values */
  fhatAL_k:fullratsimp(invert(transpose(modToNodC)).makelist(fhatCtrl[i-1],i,1,length(fhatSurfC))),
  fhatAL_k:gcfac(makelist(fhatAL_k[i][1],i,1,length(fhatAL_k))),
  printf(fh,"  double fhatAL[~a];  // fhatAL = mode coefficients of anti-limited f on surface ~%",length(fhatSurfC)),
  writeCExprsNoExpand1(fhatAL, fhatAL_k),
  flush_output(fh),
  surfBasis:sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(surfVar=0,basis)))*basis),
  fhatAL_expd:fullratsimp(surfBasis.makelist(fhatAL[i-1],i,1,length(fhatAL_k))),

  /* evaluate at surface quadrature nodes and enforce limiters */
  printf(fh, "  // enforce limiters at surface quadrature nodes ~%"),
  printf(fh, "  double fhatALQuad[~a]; ~%", length(qSurfNodes)),
  fhatALSurfQ:nodesub(fhatAL_expd,qSurfNodes),
  for i:1 thru length(qSurfNodes) do (
    printf(fh, "  fhatALQuad[~a] = std::max(0.0, std::min(~a, limQuad[~a])); ~%", i-1, gcfac(float(fhatALSurfQ[i])), i-1)
  ),
  /* get mode coefficients of fhat from quadrature nodal values */
  fhatAL_k:fullratsimp(invert(transpose(modToNodQ)).makelist(fhatALQuad[i-1],i,1,length(qSurfNodes))),
  fhatAL_k:gcfac(makelist(fhatAL_k[i][1],i,1,length(fhatAL_k))),
  writeCExprsNoExpand1(fhatAL, fhatAL_k),
  flush_output(fh),
  fhatAL_expd:fullratsimp(surfBasis.makelist(fhatAL[i-1],i,1,length(fhatAL_k))),
  printf(fh, "~%  // begin surface update ~% ~%"),
  
  flush_output(fh),
  return(fhatAL_expd)
)$
