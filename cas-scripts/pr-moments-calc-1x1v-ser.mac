load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/modal-basis.mac");
load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/out-scripts.mac");
fpprec : 24$

varsC : [x]$
varsP : [x, vx]$

fh : openw("~/max-out/SerendipPressureMom1x1v.lua");
printf(fh, "local _M = { pressureTensor = {}, energy = {} } ~% ~%");

basisC : makelist(gsOrthoNorm(varsC, makeSerendipBasis(varsC, i)), i, 1, 4)$
basisP : makelist(gsOrthoNorm(varsP, makeSerendipBasis(varsP, i)), i, 1, 4)$

dv : [dv1, dv2, dv3]$
w : [w1, w2, w3]$

prMom(M1,Mv,Mvv,i,j) := dv[i]*dv[j]/4*Mvv[i,j] + w[i]*dv[j]/2*Mv[j] + w[j]*dv[i]/2*Mv[i] + w[i]*w[j]*M1;

for i : 1 thru 4 do (
  fl : transpose(makelist(f[i], i, 1, length(basisP[i]))),
  M1 : calcCrossMassMatrix(varsC, basisC[i], varsP, basisP[i], 1),
  Mv[1] : calcCrossMassMatrix(varsC, basisC[i], varsP, basisP[i], vx),
  Mvv[1,1] : calcCrossMassMatrix(varsC, basisC[i], varsP, basisP[i], vx*vx),
  mom : prMom(M1,Mv,Mvv,1,1) . fl,
  printf(fh, "_M.pressureTensor[~a] = function (f, out, dv, w) ~%", i),
  printf(fh, "   local dv1 = dv[1] ~%"),
  printf(fh, "   local w1 = w[1] ~%"),
  writeExprs(colVecToList(mom)),
  printf(fh, "end ~%"),
  erMom : 1/2*mom,
  printf(fh, "_M.energy[~a] = function (f, out, dv, w) ~%", i),
  printf(fh, "   local dv1 = dv[1] ~%"),
  printf(fh, "   local w1 = w[1] ~%"),
  writeExprs(colVecToList(erMom)),
  printf(fh, "end ~%")
);

printf(fh, "return _M ~%");
close(fh);