load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("fem-calc/femMatrices")$
fpprec : 24$

wc        : [wx, wy, wz]$
wc2       : [wx2, wy2, wz2]$
derivfac  : [dfac_x, dfac_y, dfac_z]$
derivfac2 : [dfac_x2, dfac_y2, dfac_z2]$

clabel    : ["x", "y", "z"]$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* Set up some vector calculus functions. */
load("vect")$

poissonBracket(f,g) := (1/q_)*dfac_x*dfac_y*(diff(f,x)*diff(g,y)-diff(f,y)*diff(g,x))$

calcIncompEulerVolUpdater(fh, funcNm, cdim, basisFun, i) := block([],

  kill(varsC, varsP, basisC, basisP),

  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x"),
  load(modNm),

  bC   : basisC[i],
  numC : length(bC),

  printf(fh, "double ~aP~a(const double q_, const double m_, const double *w, const double *dxv, const double *Phi, const double *f, double *out) ~%{ ~%", funcNm, i),

  printf(fh, "  // w[NDIM]: Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // H/f: Input Hamiltonian/distribution function.~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  volfac : 1,
  cellCenter : makelist(varsC[d]=0, d, 1, length(varsC)),
  /* For Grad and curl expressions. */
  scalefactors(varsC),
  derivfacsC : makelist(derivfac[d], d, 1, length(varsC)),
  wC         : makelist(wc[d], d, 1, length(varsC)),

  for dir : 1 thru cdim do (
    printf(fh, "  double dfac_~a = 2.0/dxv[~a]; ~%", clabel[dir], dir-1)
  ),

  for dir : 1 thru cdim do (
    printf(fh, "  double w~a = w[~a]; ~%", clabel[dir], dir-1)
  ),
  printf(fh, "  double q2 = q_*q_; ~%"),
  printf(fh, "  double m2 = m_*m_; ~%"),
  flush_output(fh),

  /* Expand Phi. */
  Phi_expd : doExpand1(Phi,bC),

  /* Calculate full expansion expression for Hamiltonian. */
  H_full: q_*Phi_expd,

  /* Project Hamiltonian onto basis functions */
  H_k : fullratsimp(innerProd(varsC, 1, bC, H_full)),
  /* Expand projected Hamiltonian on basis. */
  H_expd : H_k.bC,

  /* Expand distribution function on basis. */
  f_expd : doExpand1(f,bC),

  /* Calculate cflFreq = sum_d alpha_d / dxv[d] */
  printf(fh, "  double cflFreq = 0.0;~%"), 
  printf(fh, "  double alphaL  = 0.0;~%"), 
  printf(fh, "  double alphaR  = 0.0;~%"), 
  
  /* Note: no contribution from mu. */
  alphaSum_expd : 0,
  vd : 0,
  for d : 1 thru cdim do (
    wD : wC[d],
    derivfacsD : derivfacsC[d],
    /* Calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt. */
    alpha_expd : poissonBracket(wD + varsC[d]/derivfacsD, H_expd),

    /* Project alpha on basis and write to array. */
    printf(fh, "  double alpha~a[~a]; ~%", clabel[d], length(bC)),
    alpha_k    : fullratsimp(innerProd(varsC, 1, bC, alpha_expd)*derivfacsD),
    alphalabel : eval_string(sconcat(alpha, clabel[d])),
    writeCExprsNoExpand1(alphalabel, gcfac(expand(facsum(subst([m_^2=m2, q_^2=q2], alpha_k),derivfac)))),
    flush_output(fh),
    
    alphaNoZero_k : doMakeExprLst(alpha_k, alphalabel),
    alpha_expd    : doExpandLst(alphaNoZero_k, bC),

    /* Note: factor of derivfacsD already included in alpha_expd. */
    alphaDotGradBasis_expd : alpha_expd*diff(bC, varsC[d]),

    /* Accumulate alpha.grad(w) in this direction to the direction-summed alpha.grad(w) */
    alphaSum_expd : alphaSum_expd + alphaDotGradBasis_expd,

    /* CFL calculation. */
    /* Get quadrature nodes on surface. */
    surfIntVars : delete(varsC[d], varsC),
    if i=1 then quad:1/sqrt(3),
    if i=2 then quad:sqrt(3/5),
    nodes      : eval_string(sconcat("nodes", cdim-1, "xp", p)),
    nodesub(f) := makelist(subst(makelist(surfIntVars[j]=nodes[i][j]*quad,j,1,length(surfIntVars)),f),i,1,length(nodes)),

    /* Evaluate alpha at left and right edge. */
    alphaL : subst(varsC[d]=-1, alpha_expd),
    alphaR : subst(varsC[d]=1, alpha_expd),

    /* Evaluate cfl by surface averaging. */
    printf(fh, "#if cflType == SURFAVG ~%"),
    /* Note: factor of derivfacsD already included in alpha_expd. */
    alphaL0 : fullratsimp(innerProd(delete(varsC[d],varsC), 1, alphaL, subst(varsC[d]=-1, bC[1]))*bC[1]),
    printf(fh, "  // Evaluate surface-averaged alpha on left. ~%"),
    printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaL0))),
    printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%"),
    /* Note: factor of derivfacsD already included in alpha_expd */
    alphaR0 : fullratsimp(innerProd(delete(varsC[d],varsC), 1, alphaR, subst(varsC[d]=1, bC[1]))*bC[1]),
    printf(fh, "  // Evaluate surface-averaged alpha on right. ~%"),
    printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaR0))),
    printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%"),
    flush_output(fh),

    /* Evaluate cfl by evaluating at all surface quadrature points. */
    printf(fh, "#elif cflType == QUAD ~%"),
    alphaLquad : nodesub(alphaL*subst(varsC[d]=-1,bC[1]))*bC[1],
    alphaRquad : nodesub(alphaR*subst(varsC[d]=1,bC[1]))*bC[1],
    printf(fh, "  // Evaluate alpha at left surface quadrature points. ~%"),
    for i:1 thru length(alphaLquad) do (
      printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaLquad[i]))),
      printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%")
    ),
    printf(fh, "  // Evaluate alpha at right surface quadrature points. ~%"),
    for i:1 thru length(alphaRquad) do (
      printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaRquad[i]))),
      printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%")
    ),
    printf(fh, "#endif ~%"),

    printf(fh, "~%")
    
  ),
  volTerm_k : fullratsimp(innerProd(varsC, 1, f_expd, alphaSum_expd)),
  writeCIncrExprsNoExpand(gcfac(float(subst([m_^2=m2, q_^2=q2], facsum(volTerm_k,derivfac))))),
  flush_output(fh),

  printf(fh, "  return cflFreq; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$

pmax:2$
c:2$
for p : 1 thru pmax do (
  fname : sconcat("~/max-out/IncompEulerSer", c, "x", "P", p, ".cpp"),
  fh    : openw(fname),
  printf(fh, "#include <IncompEulerModDecl.h> ~%"),
  funcName : sconcat("IncompEulerVol", c, "x", "Ser"),
  calcIncompEulerVolUpdater(fh, funcName, c, "Ser", p),
  close(fh)
)$

