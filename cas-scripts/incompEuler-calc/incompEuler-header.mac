cvars : [X, Y, Z]$

printPrototypes() := block([], 
  pmax:1,
  for ci : 1 thru 2 do (
    for pi : 1 thru pmax do (
      printf(fh, "double IncompEulerVol~axSerP~a(const double q_, const double m_, const double *w, const double *dxv, double *positivityWeightByDir, const double *phi, const double *f, double *out); ~%", ci, pi),
      for si : 1 thru ci do (
        dirlabel : cvars[si],
        printf(fh, "double IncompEulerSurf~axSer_~a_P~a(const double q_, const double m_, const double *w, const double *dxv, const double *phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, dirlabel, pi),
        printf(fh, "double IncompEulerSurfPositivity~axSer_~a_P~a(const double q_, const double m_, const double *w, const double *dxv, const double dtApprox, const double *positivityWeightByDirL, const double *positivityWeightByDirR, const double *phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, dirlabel, pi)
      ),
      printf(fh, "~%")
    )
  )
)$

fh : openw("~/max-out/IncompEulerModDecl.h")$
printf(fh, "#ifndef INCOMPEULER_MOD_DECL_H ~%")$
printf(fh, "#define INCOMPEULER_MOD_DECL_H ~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "#include <algorithm> ~%")$
printf(fh, "#include <Positivity.h> ~%")$
printf(fh, "#define SURFAVG 1 ~%")$
printf(fh, "#define QUAD 2 ~%")$
printf(fh, "#define cflType QUAD ~%")$
printf(fh, "#define upwindType QUAD ~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "    return (T(0) < val) - (val < T(0)); ~%}~%")$
printf(fh, "extern \"C\" { ~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$

fh : openw("~/max-out/_IncompEulerCdef.lua")$
printf(fh, "local ffi = require \"ffi\" ~%~%")$
printf(fh, "ffi.cdef [[~%")$
printPrototypes()$
printf(fh, "]]~%")$
close(fh)$
