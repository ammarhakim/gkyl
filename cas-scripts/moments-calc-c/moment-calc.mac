load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

let(wx1^3, wx1_cu)$
let(wx2^3, wx2_cu)$
let(wx3^3, wx3_cu)$
let(dv1^3, dv1_cu)$
let(dv2^3, dv2_cu)$
let(dv3^3, dv3_cu)$

let(wx1^2, wx1_sq)$
let(wx2^2, wx2_sq)$
let(wx3^2, wx3_sq)$
let(dv1^2, dv1_sq)$
let(dv2^2, dv2_sq)$
let(dv3^2, dv3_sq)$

volExpr(cdim, vdim) := prod(dxv[cdim+i-1], i, 1, vdim)$
vTrans : [vx*dv1/2+wx1, vy*dv2/2+wx2, vz*dv3/2+wx3]$
wTrans : [wx1, wx2, wx3]$
dvTrans : [vx*dv1/2, vy*dv2/2, vz*dv3/2]$
pmax : 1$
doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* Number density */
calcM0(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_M0_P~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  fl : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bC, fl),
  writeCIncrExprs1(out, volFact*M),

  printf(fh, "} ~%")
))$


/* Momentum */
calcM1i(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_M1i_P~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1)
  ),

  fl : doExpand1(f, bP),

  M : (M : [],
       for dir : 1 thru vdim do (
         M : append(M, calcInnerProdList(varsP, vTrans[dir], bC, fl))
       ),
  M),

  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),

  printf(fh, "} ~%")
))$

/* Pressure tensor */
calcM2ij(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_M2ij_P~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),

  if p = 1 then (
     ctr : 1,
     M : (M : [],
          for d1 : 1 thru vdim do (
             for d2 : d1 thru vdim do (
               zetaprod : calcInnerProdList(varsP, 1, bP, vTrans[d1]*vTrans[d2]),
               zetaprod : map(letsimp, zetaprod),
               printf(fh, "  double zeta~a[~a]; ~%~%", ctr, length(bP)),
               if ctr = 1 then (
                  writeCExprsCollect1(zeta1, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta1),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               if ctr = 2 then (
                  writeCExprsCollect1(zeta2, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta2),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               if ctr = 3 then (
                  writeCExprsCollect1(zeta3, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta3),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               if ctr = 4 then (
                  writeCExprsCollect1(zeta4, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta4),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               if ctr = 5 then (
                  writeCExprsCollect1(zeta5, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta5),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               if ctr = 6 then (
                  writeCExprsCollect1(zeta6, zetaprod, []),
                  zetaNoZero : doMakeExprLst(zetaprod, zeta6),
                  zeta_expd : doExpandLst(zetaNoZero, bP),
                  M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
               ),
               ctr : ctr + 1
          )),
     M)
  )
  else (
     M : (M : [],
          for d1 : 1 thru vdim do (
             for d2 : d1 thru vdim do (
               M : append(M, calcInnerProdList(varsP, vTrans[d1]*vTrans[d2], bC, fl))
          )),
     M),

     M : map(letsimp, M)
  ),

  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),

  printf(fh, "} ~%")
))$

/* Energy */
calcM2(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_M2_P~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),

  if p = 1 then (
     zetaprod : sum(calcInnerProdList(varsP, 1, bP, vTrans[d]*vTrans[d]), d, 1, vdim),
     zetaprod : map(letsimp, zetaprod),
     printf(fh, "  double zeta[~a]; ~%~%", length(bP)),
     writeCExprsCollect1(zeta, zetaprod, []),
     zetaNoZero : doMakeExprLst(zetaprod, zeta),
     zeta_expd : doExpandLst(zetaNoZero, bP),
     M : calcInnerProdList(varsP, 1, bC, zeta_expd*fl)
  )
  else (
     M : sum(calcInnerProdList(varsP, vTrans[d]*vTrans[d], bC, fl), d, 1, vdim),
     M : map(letsimp, M)
  ),

  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),

  printf(fh, "} ~%")
))$

/* Heat-flux vector */
calcM3i(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_M3i_P~a(const double *w, const double *dxv, const double *f, double *out) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i),
    printf(fh, "  const double wx~a_cu = wx~a*wx~a*wx~a, dv~a_cu = dv~a*dv~a*dv~a; ~%", i, i, i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),

  if p = 1 or p = 2 then (
     ctr : 1,
     M : (M : [],
          for i : 1 thru vdim do (
            zetaprod : sum(calcInnerProdList(varsP, 1, bP, vTrans[i]*vTrans[d]*vTrans[d]), d, 1, vdim),
            zetaprod : map(letsimp, zetaprod),
            printf(fh, "  double zeta~a[~a]; ~%~%", ctr, length(bP)),
            if ctr = 1 then (
               writeCExprsCollect1(zeta1, zetaprod, []),
               zetaNoZero : doMakeExprLst(zetaprod, zeta1),
               zeta_expd : doExpandLst(zetaNoZero, bP),
               M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
            ),
            if ctr = 2 then (
               writeCExprsCollect1(zeta2, zetaprod, []),
               zetaNoZero : doMakeExprLst(zetaprod, zeta2),
               zeta_expd : doExpandLst(zetaNoZero, bP),
               M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
            ),
            if ctr = 3 then (
               writeCExprsCollect1(zeta3, zetaprod, []),
               zetaNoZero : doMakeExprLst(zetaprod, zeta3),
               zeta_expd : doExpandLst(zetaNoZero, bP),
               M : append(M, calcInnerProdList(varsP, 1, bC, zeta_expd*fl))
            ),
            ctr : ctr + 1
          ),
     M)
  )
  else (
     M : (M : [],
          for i : 1 thru vdim do (
            M : append(M, sum(calcInnerProdList(varsP, vTrans[i]*vTrans[d]*vTrans[d], bC, fl), d, 1, vdim))
          ),
     M),

     M : map(letsimp, M)
  ),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),

  printf(fh, "} ~%")
))$

/* Calculate M0, M1i, and M2 (Five moments) sequentially */
calcFiveMoments(fh, funcNm, cdim, vdim, basisFun) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],

  printf(fh, "void ~a_FiveMoments_P~a(const double *w, const double *dxv, const double *f, double *outM0, double *outM1i, double *outM2) ~%{ ~%", funcNm, p),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),
  printf(fh, "  double tempM0[~a], tempM1i[~a]; ~%", length(bC), length(bC)*vdim),
  printf(fh, "~%"),
  fl : doExpand1(f, bP),

  M0 : calcInnerProdList(varsP, 1, bC, fl),
  M1i : (M1i : [],
       for dir : 1 thru vdim do (
         M1i : append(M1i, calcInnerProdList(varsP, dvTrans[dir], bC, fl))
       ),
  M1i),
  if p = 1 then (
     zetaprod : sum(calcInnerProdList(varsP, 1, bP, vTrans[d]*vTrans[d]), d, 1, vdim),
     zetaprod : map(letsimp, zetaprod),
     printf(fh, "  double zeta[~a]; ~%~%", length(bP)),
     writeCExprsCollect1(zeta, zetaprod, []),
     zetaNoZero : doMakeExprLst(zetaprod, zeta),
     zeta_expd : doExpandLst(zetaNoZero, bP),
     M2 : calcInnerProdList(varsP, 1, bC, zeta_expd*fl)
  )
  else (
     M2 : sum(calcInnerProdList(varsP, dvTrans[d]*dvTrans[d], bC, fl), d, 1, vdim)
  ),
  writeCExprs1(tempM0, volFact*M0),

  printf(fh, "~%"),
  M0M1i : (M0M1i : [],
       for dir : 1 thru vdim do (
         M0M1i : append(M0M1i, makelist(tempM0[i-1]*wTrans[dir], i, 1, length(bC)))
       ),
  M0M1i),
  writeCExprs1(tempM1i, M0M1i+volFact*M1i),
  printf(fh, "~%"),
  if vdim = 1 then (
     M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]-tempM0[i-1]*wTrans[1]*wTrans[1], i, 1, length(bC))
  ),
  if vdim = 2 then (
     M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]+2*tempM1i[i-1+length(bC)]*wTrans[2]-tempM0[i-1]*(wTrans[1]*wTrans[1]+wTrans[2]*wTrans[2]), i, 1, length(bC))
  ),
  if vdim = 3 then (
     M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]+2*tempM1i[i-1+length(bC)]*wTrans[2]+2*tempM1i[i-1+2*length(bC)]*wTrans[3]-tempM0[i-1]*(wTrans[1]*wTrans[1]+wTrans[2]*wTrans[2]+wTrans[3]*wTrans[3]), i, 1, length(bC))
  ),
  M2 : map(letsimp, M2),
  M0M2 : map(letsimp, M0M2),
  incr_tempM0 : makelist(tempM0[i-1], i, 1, length(bC)),
  incr_tempM1i : makelist(tempM1i[i-1], i, 1, vdim*length(bC)),
  writeCIncrExprs1(outM0, incr_tempM0),
  writeCIncrExprs1(outM1i, incr_tempM1i),
  clst : [volFact],
  clst : append(clst, makelist(tempM0[i-1], i, 1, length(bC))),
  if p = 1 then (
     writeCIncrExprsCollect1(outM2, volFact*M2, clst)
  )
  else (
     writeCIncrExprsCollect1(outM2, M0M2+volFact*M2, clst)
  ),
  printf(fh, "} ~%")
))$

calcMoments(fh, funcNm, cdim, vdim, basisFun) := block([],
  printf(fh, "#include <DistFuncMomentCalcModDecl.h> ~%"),
  calcM0(fh, funcNm, cdim, vdim, basisFun),
  calcM1i(fh, funcNm, cdim, vdim, basisFun),
  calcM2ij(fh, funcNm, cdim, vdim, basisFun),
  calcM2(fh, funcNm, cdim, vdim, basisFun),
  calcM3i(fh, funcNm, cdim, vdim, basisFun),
  calcFiveMoments(fh, funcNm, cdim, vdim, basisFun)
)$