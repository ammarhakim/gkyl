load("scifac")$
writeBasis(fh, basisIn) := block([basis],
  print(basisIn[1]),
  basis : float(expand(basisIn)),
  for i : 1 thru length(basis) do (
    printf(fh, "   ~a = ~a ~%", b[i], basis[i])
  )
)$

writeCBasis(basisIn) := block([basis],
  basis : float(expand(basisIn)),
  for i : 1 thru length(basis) do (
    printf(fh, "   ~a = ~a; ~%", b[i-1], basis[i])
  )
)$

writeExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a = ~a ~%", out[i], expr[i])
  )
)$

writePlainExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a ~%", expr[i])
  )
)$

writeIncrExprs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i], expr[i])
  )
)$

writeCIncrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], expr[i])
  )
)$

writeCIncrExprsNoExpand(rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], expr[i])
  )
)$

writeCIncrExprs1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCIncrExprsNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i], expr[i])
  )
)$

writeCExprs1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsWithZeros1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsWithZerosNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(expr[i]))
  )
)$

writeCIncrExprsCollect1(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a += ~a; ~%", lhs[i-1], e)
    )
  )
)$

writeCExprsCollect1(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], e)
    )
  )
)$

writeLuaIncrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a + ~a; ~%", out[i], out[i], expr[i])
  )
)$

writeLuaDecrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a - ~a; ~%", outl[i], outl[i], expr[i])
  )
)$

writeEigenMatrix(mat) := block([],
  matsize(A):=[length(A),length(transpose(A))],
  size : matsize(mat),
  printf(fh, "mat << "),
  for i : 1 thru size[1] do (
    for j : 1 thru size[2] do (
      printf(fh, "~a", mat[i][j]),
      if(i=size[1] and j=size[2]) then printf(fh, ";~%")
      else printf(fh, ",")
    )
  )
)$

writeCExprsCollect1c(rhs) := block([expr],
   expr : float(expand(rhs)),
   for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], gcfac(expr[i]))
   )
)$
writeCExprsCollect1lhsc(lhs, rhs) := block([expr],
   expr : float(expand(rhs)),
   for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(expr[i]))
   )
)$
writeCIncrExprsCollect1lhsc(lhs, rhs) := block([expr],
   expr : float(expand(rhs)),
   for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i-1], gcfac(expr[i]))
   )
)$
writeCExprsDoubleCollect1lhsc(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

findReplacePowers(rhs,qPow,alreadyDecl) := block(
  /* Search for powers of the quantities in qPow. If one of them is found
     then define a temporary variable for it before writing out the increment.
       qPow: list of quantities whose powers to search for.
       numElemMax: maximum number of elements in each quantity of qPow.
       writeDecl: indicate whether to write out the declaration of temporary variables.
     We return the list of declared temporary variables, to be used in avoiding
     redefining the same variables.
  */
  [numElemMax, d,f,k,exprN,subList,maxExponent,eI,doSub,newTempVar,idx,lhsS,rhsS],

  /* Maximum number of elements of qPow (e.g. qPow[0], qPow[1], ...) whose
     powers to search for. */
  numElemMax : 256,

  exprN : length(rhs),

  /* Eliminate the exponents as needed. */
  subList     : [],
  maxExponent : 8,
  for eI : 1 thru length(qPow) do (
    if numElemMax > 0 then (
      for d : 0 thru numElemMax-1 do (
        for f : 2 thru maxExponent do (
          doSub : false,
          for k : 1 thru exprN do (
            if (not freeof(qPow[eI][d]^f,rhs[k])) then ( doSub : true )
          ),
          if (doSub) then (
            /* Define a separate variable. */
            newTempVar : sconcat(string(qPow[eI]),d,"R",f),
            /* Check that the new variable hasn't already been declared. */
            idx : sublist_indices(alreadyDecl,lambda([x], x=newTempVar)),
            if length(idx)=0 then (
              lhsS : sconcat("  const double ",newTempVar),
              rhsS : sconcat("pow(",string(qPow[eI][d]),",",f,");~%"),
              printf(fh, sconcat(lhsS," = ",rhsS)),
              alreadyDecl : endcons(newTempVar,alreadyDecl)
            ),
            /* Add to the string substitution list, used in writing file. */
            subList : append(subList,[[sconcat(string(qPow[eI][d]), "^",f), newTempVar]])
          )
        )
      )
    ) else (
      for f : 2 thru maxExponent do (
        doSub : false,
        for k : 1 thru exprN do (
          if (not freeof(qPow[eI]^f,rhs[k])) then ( doSub : true )
        ),
        if (doSub) then (
          /* Define a separate variable. */
          newTempVar : sconcat(string(op(qPow[eI])),args(qPow[eI])[1],"R",f),
          /* Check that the new variable hasn't already been declared. */
          idx : sublist_indices(alreadyDecl,lambda([x], x=newTempVar)),
          if length(idx)=0 then (
            lhsS : sconcat("  const double ",newTempVar),
            rhsS : sconcat("pow(",string(qPow[eI]),",",f,");~%"),
            printf(fh, sconcat(lhsS," = ",rhsS)),
            alreadyDecl : endcons(newTempVar,alreadyDecl)
          ),
          /* Add to the string substitution list, used in writing file. */
          subList : append(subList,[[sconcat(string(qPow[eI]), "^",f), sconcat(sconcat(string(op(qPow[eI])),args(qPow[eI])[1]),"R",f)]])
        )
      )
    )
  ),
  printf(fh, "~%"),
  return([subList,alreadyDecl])
)$

writeCExprs1noPowers(lhs, rhs, qPow, alreadyDecl) := block(
  [i,subList,expr,ep,outStr],
  /* Search for powers of the quantities in qPow. If one of them is found
     then define a temporary variable for it before writing out the increment.
       qPow: list of quantities whose powers to search for.
       numElemMax: maximum number of elements in each quantity of qPow.
       writeDecl: indicate whether to write out the declaration of temporary variables.
     We return the list of declared temporary variables, to be used in avoiding
     redefining the same variables.
  */

  [subList,alreadyDecl] : findReplacePowers(rhs, qPow, alreadyDecl), 

  expr : float(rhs),
  for i : 1 thru length(rhs) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      if (length(subList) > 0) then (
        outStr : ssubst(subList[1][2],subList[1][1],ep),
        for s : 2 thru length(subList) do (
          outStr : ssubst(subList[s][2],subList[s][1],outStr)
        )
      ) else (
        outStr : ep
      ),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], outStr)
    )
  ),
  return(alreadyDecl)
)$

writeCIncrExprsCollect1noPowers(lhs, rhs, clst, qPow, alreadyDecl) := block(
  [i,subList,expr,ep,outStr],

  [subList,alreadyDecl] : findReplacePowers(rhs, qPow, alreadyDecl), 

  expr : float(expand(rhs)),
  for i : 1 thru length(rhs) do (
    if expr[i] # 0.0 then (
      expr[i] : apply(collectterms, cons(expr[i], clst)),
      ep : string(expr[i]),
      if (length(subList) > 0) then (
        outStr : ssubst(subList[1][2],subList[1][1],ep),
        for s : 2 thru length(subList) do (
          outStr : ssubst(subList[s][2],subList[s][1],outStr)
        )
      ) else (
        outStr : ep
      ),
      printf(fh, "  ~a += ~a; ~%", lhs[i-1], outStr)
    )
  ),
  return(alreadyDecl)
)$

