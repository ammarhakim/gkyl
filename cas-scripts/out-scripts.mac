load("scifac")$
writeBasis(fh, basisIn) := block([basis],
  print(basisIn[1]),
  basis : float(expand(basisIn)),
  for i : 1 thru length(basis) do (
    printf(fh, "   ~a = ~a ~%", b[i], basis[i])
  )
)$

writeExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a = ~a ~%", out[i], expr[i])
  )
)$

writePlainExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a ~%", expr[i])
  )
)$

writeIncrExprs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i], expr[i])
  )
)$

writeCIncrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], expr[i])
  )
)$

writeCIncrExprsNoExpand(rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], expr[i])
  )
)$

writeCIncrExprs1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCIncrExprsNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i], expr[i])
  )
)$

writeCExprs1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsWithZeros1(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsWithZerosNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    printf(fh, "  ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprsNoExpand1(lhs, rhs) := block([expr],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(expr[i]))
  )
)$

writeCIncrExprsCollect1(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a += ~a; ~%", lhs[i-1], e)
    )
  )
)$

writeCExprsCollect1(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], e)
    )
  )
)$

writeLuaIncrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a + ~a; ~%", out[i], out[i], expr[i])
  )
)$

writeLuaDecrExprs(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a - ~a; ~%", outl[i], outl[i], expr[i])
  )
)$

writeEigenMatrix(mat) := block([],
  matsize(A):=[length(A),length(transpose(A))],
  size : matsize(mat),
  printf(fh, "mat << "),
  for i : 1 thru size[1] do (
    for j : 1 thru size[2] do (
      printf(fh, "~a", mat[i][j]),
      if(i=size[1] and j=size[2]) then printf(fh, ";~%")
      else printf(fh, ",")
    )
  )
)$

 writeCExprsCollect1c(rhs) := block([expr],
   expr : float(expand(rhs)),
   for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], gcfac(expr[i]))
   )
 )$
 writeCExprsCollect1lhsc(lhs, rhs) := block([expr],
   expr : float(expand(rhs)),
   for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(expr[i]))
   )
)$
writeCExprsDoubleCollect1lhsc(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$
