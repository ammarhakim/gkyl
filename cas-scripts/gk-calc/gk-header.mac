cvars : [X, Y, Z]$
vvars : [Vpar, Mu]$

printPrototypes() := block([], 
pmax:2,
for ci : 1 thru 3 do (
for vi: 0 thru 2 do (
if ci=1 or (ci>1 and vi=2) or (ci=2 and vi=0) then (
  if ci=1 then bvarslist : [[0], [1]],
  if ci=2 then bvarslist : [[0], [1]],
  if ci=3 then bvarslist : [[0], [1], [3], [1,3]],
  for pi : 1 thru pmax do (
    printf(fh, "double EmGyrokineticStep2Vol~ax~avSerP~a(const double q_, const double m_, const double *w, const double *dxv, const double *dApardt, const double *f, double *out); ~%", ci, vi, pi),
    printf(fh, "double calcSheathDeltaPhi~axSer_P~a(const double *phi, const double *phiWall, const double zVal);~%", ci, pi),
    printf(fh, "void calcSheathPartialReflectionWeakEquiv~ax~avSer_P~a(const double wv, const double dv, const double zVal, const double vcut, const double *f, double *fhat);~%", ci, vi, pi),
    printf(fh, "void calcSheathPartialReflectionScaled~ax~avSer_P~a(const double wv, const double dv, const double zVal, const double vcut, const double *f, double *fhat);~%", ci, vi, pi),
    for b : 1 thru length(bvarslist) do (
      printf(fh, "double GyrokineticVol~ax~avSerP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *f, double *out); ~%", ci, vi, pi, simplode(bvarslist[b],"_")),
      printf(fh, "double EmGyrokineticVol~ax~avSerP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *Apar, const double *dApardt, const double *f, double *out); ~%", ci, vi, pi, simplode(bvarslist[b],"_")),
      if vi = 0 then vd : 0
      else vd : 1,
      for si : 1 thru ci+vd do (
        if si <= ci then dirlabel : cvars[si]
        else dirlabel : vvars[si-ci],
        printf(fh, "double GyrokineticSurf~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
        printf(fh, "double EmGyrokineticSurf~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *Apar, const double *dApardt, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
        printf(fh, "double GyrokineticSurfPositivity~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
        printf(fh, "double EmGyrokineticSurfPositivity~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *BdriftX, const double *BdriftY, const double *Phi, const double *Apar, const double *dApardt, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_"))
      ),
      printf(fh, "~%")      
    ),
    printf(fh, "~%")
))))
)$

fh : openw("~/max-out/GyrokineticModDecl.h")$
printf(fh, "#ifndef GYROKINETIC_MOD_DECL_H ~%")$
printf(fh, "#define GYROKINETIC_MOD_DECL_H ~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "#include <Positivity.h> ~%")$
printf(fh, "#define SURFAVG 1 ~%")$
printf(fh, "#define QUAD 2 ~%")$
printf(fh, "#define cflType QUAD ~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "    return (T(0) < val) - (val < T(0)); ~%}~%")$
printf(fh, "extern \"C\" { ~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$

fh : openw("~/max-out/_GyrokineticCdef.lua")$
printf(fh, "local ffi = require \"ffi\" ~%~%")$
printf(fh, "ffi.cdef [[~%")$
printPrototypes()$
printf(fh, "]]~%")$
close(fh)$
