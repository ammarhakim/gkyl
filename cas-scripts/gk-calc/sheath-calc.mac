/* 
   Generate sheath kernels used in gyrokinetics.

   Code called in this script is in files loaded below.
*/

/* Configuration space dimensions to generate kernels for,
   and velocity space dimensions for each configuration space
   dimension. */
cDims : [1,3]$
vDims : [[1,2],[2]]$

/* Serendipity basis. */
maxPolyOrder_Ser : 2$

/* Maximal order basis. */
maxPolyOrder_Max : 0$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$

bName        : ["Ser", "Max", "Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$

load("gk-calc/sheath-1x1v");
load("gk-calc/sheath-1x2v");
load("gk-calc/sheath-3x2v");

/* Create the sheath kernels. */
for bInd : 1 thru length(bName) do (
  maxPolyOrderB : maxPolyOrder[bInd],
  for polyOrder : 1 thru maxPolyOrderB do (
    fname : sconcat("~/max-out/GkSheathFuncs",bName[bInd],"P",polyOrder,".cpp"),
    fh : openw(fname),
  
    printf(fh, "#include <GkSheathModDecl.h> ~%"),
    printf(fh, "~%"),
  
    printf(fh, "// approximation for inverse Langevin function ~%"),
    printf(fh, "long double invL(long double x) { ~%"),
    printf(fh, "  // from Kroger ~%"),
    printf(fh, "  return (3.*x-x*x*x*(6. + x*x - 2.*x*x*x*x)/5.)/(1.-x*x); ~%"),
    printf(fh, "}~%"),
    printf(fh, "~%"),
  
    for cI : 1 thru length(cDims) do (
      for vI : 1 thru length(vDims[cI]) do (
        if cDims[cI]=1 and vDims[cI][vI]=1 then (
          calcGkSheathFuncs1x1v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        ) else if cDims[cI]=1 and vDims[cI][vI]=2 then (
          calcGkSheathFuncs1x2v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        ) else if cDims[cI]=3 and vDims[cI][vI]=2 then (
          calcGkSheathFuncs3x2v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        )
      )
    ),
    close(fh)
  )
)$


/* Create a header file for sheath kernels. */
fh : openw("~/max-out/GkSheathModDecl.h")$
printf(fh, "#ifndef GKSHEATH_MOD_DECL_H ~%")$
printf(fh, "#define GKSHEATH_MOD_DECL_H ~%")$
printf(fh, "~%")$
printf(fh, "#include <cmath>~%")$
printf(fh, "#include <algorithm>~%")$
printf(fh, "#include <CartFieldBinOpModDecl.h>~%")$
printf(fh, "~%")$

printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (
  maxPolyOrderB : maxPolyOrder[bInd],
  for polyOrder : 1 thru maxPolyOrderB do (
    for cI : 1 thru length(cDims) do (
      for vI : 1 thru length(vDims[cI]) do (
        printf(fh, "  double calcSheathDeltaPhi~ax~a_P~a(const double *phi, const double *phiWall, const double zVal);~%", cDims[cI], bName[bInd], polyOrder),
        printf(fh, "  void calcSheathPartialReflectionWeakEquiv~ax~av~a_P~a(binOpData_t* data, const double wv, const double dv, const double zVal, const double vcut, const double *f, double *fhat);~%", cDims[cI], vDims[cI][vI], bName[bInd], polyOrder),
        printf(fh, "  void calcSheathPartialReflectionScaled~ax~av~a_P~a(binOpData_t* data, const double wv, const double dv, const double zVal, const double vcut, const double *f, double *fhat);~%", cDims[cI], vDims[cI][vI], bName[bInd], polyOrder),
        printf(fh, "  void calcSheathReflection~ax~av~a_P~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double zVal, const double q_, const double m_, const double *phi, const double *phiWall, const double *f, double *fRefl); ~%", cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
      )
    )
  )
)$

printf(fh, "~%")$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$
