load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("fem-calc/femMatrices")$
load("gk-calc/gk-stuff")$
fpprec : 24$

calcGKVolUpdater(fh, funcNm, cdim, vdim, basisFun, i, emflag, bvarslist) := block([],
kill(varsC, varsP, basisC, basisP),

  loadGKbasis(cdim, vdim, i),

  if emflag then printf(fh, "double ~aP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *jacobTotInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double* dApardt, const double *f, double *out) ~%{ ~%", funcNm, i, simplode(bvarslist,"_"))
  else printf(fh, "double ~aP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *jacobTotInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *f, double *out) ~%{ ~%", funcNm, i, simplode(bvarslist,"_")),

  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. H/f: Input Hamiltonian/distribution function. out: Incremented output ~%"),
  volfac : 1,
  /* set up ignorable variables for Bmag */
  Bignorevars: flatten(makelist([varsC[d]^2=var2,var2=1/3,varsC[d]=0], d, 1, length(varsC))),
  if bvarslist # [0] then (
    for i : 1 thru length(bvarslist) do (
      Bignorevars : delete( varsC[bvarslist[i]]=0, Bignorevars ),
      Bignorevars : delete( varsC[bvarslist[i]]^2=var2, Bignorevars )
  )),
  /* for grad and curl expressions */
  scalefactors(varsC),
  derivfacsC : makelist(derivfac[d], d, 1, length(varsC)),

  for dir : 1 thru cdim+vdim do (
    printf(fh, "  double dfac_~a = 2.0/dxv[~a]; ~%", label[dir], dir-1)
  ),

  for dir : 1 thru cdim+vdim do (
    printf(fh, "  double w~a = w[~a]; ~%", label[dir], dir-1)
  ),
  /*printf(fh, "  double dfac_x2 = dfac_x*dfac_x; ~%"),*/
  if vdim>0 then (
    printf(fh, "  double wv2 = wv*wv; ~%"),
    printf(fh, "  double dfac_v2 = dfac_v*dfac_v; ~%")
  ),
  printf(fh, "  double q2 = q_*q_; ~%"),
  printf(fh, "  double m2 = m_*m_; ~%"),
  flush_output(fh),

  calcAndWriteHamil(),

  calcAndWriteBstar_by_Bmag(),

  /* expand distribution function on basis */
  f_expd:doExpand1(f,bP),

  /* calculate cflFeq = sum_d alpha_d / dxv[d] */
  printf(fh, "  double cflFreq = 0.0; ~%"), 
  printf(fh, "  double alphaL = 0.0; ~%"), 
  printf(fh, "  double alphaR = 0.0; ~%"), 
  
  /* note: no contribution from mu */
  alphaSum_expd : 0,
  if vdim = 0 then vd : 0
  else vd : 1,
  for d : 1 thru cdim+vd do (
    wD : wc[d],
    dfac_d : derivfac[d],

    /* calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt*/
    alpha_expd : calcAlpha(d, true),

    /* project alpha on basis and write to array */
    printf(fh, "  double alpha~a[~a]; ~%", label[d], length(bP)),
    alpha_k : fullratsimp(innerProd(varsP, 1, bP, alpha_expd)*dfac_d),
    alphalabel : eval_string(sconcat(alpha, label[d])),
    writeCExprsNoExpand1(alphalabel, gcfac(expand(facsum(subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2,dfac_x^2=dfac_x2], alpha_k),derivfac)))),
    flush_output(fh),
    
    alphaNoZero_k : doMakeExprLst(alpha_k, alphalabel),
    alpha_expd : doExpandLst(alphaNoZero_k, bP),

    /* note: factor of dfac_d already included in alpha_expd */
    alphaDotGradBasis_expd : alpha_expd*diff(bP, varsP[d]),

    /* accumulate alpha.grad(w) in this direction to the direction-summed alpha.grad(w) */
    alphaSum_expd : alphaSum_expd + alphaDotGradBasis_expd,

    /* cfl calculation */
    /* get quadrature nodes on surface */
    surfIntVars : delete(varsP[d], varsP),
    if i=1 then quad:1/sqrt(3),
    if i=2 then quad:sqrt(3/5),
    nodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p)),
    nodesub(f):=makelist(subst(makelist(surfIntVars[j]=nodes[i][j]*quad,j,1,length(surfIntVars)),f),i,1,length(nodes)),

    /* evaluate alpha at left and right edge */
    alphaL : subst(varsP[d]=-1, alpha_expd),
    alphaR : subst(varsP[d]=1, alpha_expd),

    /* evaluate cfl by surface averaging */
    printf(fh, "#if cflType == SURFAVG ~%"),
    /* note: factor of dfac_d already included in alpha_expd */
    alphaL0 : fullratsimp(innerProd(delete(varsP[d],varsP), 1, alphaL, subst(varsP[d]=-1, bP[1]))*bP[1]),
    printf(fh, "  // evaluate surface-averaged alpha on left ~%"),
    printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaL0))),
    printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%"),
    /* note: factor of dfac_d already included in alpha_expd */
    alphaR0 : fullratsimp(innerProd(delete(varsP[d],varsP), 1, alphaR, subst(varsP[d]=1, bP[1]))*bP[1]),
    printf(fh, "  // evaluate surface-averaged alpha on right ~%"),
    printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaR0))),
    printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%"),
    flush_output(fh),

    /* evaluate cfl by evaluating at all surface quadrature points */
    printf(fh, "#elif cflType == QUAD ~%"),
    alphaLquad : nodesub(alphaL*subst(varsP[d]=-1,bP[1]))*bP[1],
    alphaRquad : nodesub(alphaR*subst(varsP[d]=1,bP[1]))*bP[1],
    printf(fh, "  // evaluate alpha at left surface quadrature points ~%"),
    for i:1 thru length(alphaLquad) do (
      printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaLquad[i]))),
      printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%")
    ),
    printf(fh, "  // evaluate alpha at right surface quadrature points ~%"),
    for i:1 thru length(alphaRquad) do (
      printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaRquad[i]))),
      printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%")
    ),
    printf(fh, "#endif ~%"),

    flush_output(fh),

    printf(fh, "~%")
    
  ),
  gkVolTerm_k : fullratsimp(innerProd(varsP, 1, f_expd, alphaSum_expd)),
  writeCIncrExprsNoExpand(gcfac(float(subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2], facsum(gkVolTerm_k,derivfac))))),
  flush_output(fh),

  printf(fh, "  return cflFreq; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$

calcGKStep2VolUpdater(fh, funcNm, cdim, vdim, basisFun, i) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
  if cdim = 1 then (
    label:["x", "v", "m"]
  ),
  if cdim = 2 then (
    label:["x", "y", "v", "m"]
  ),
  if cdim = 3 then (
    label:["x", "y", "z", "v", "m"]
  ),
  bP : subst(gkvsub, basisP[i]),
  bC : basisC[i],
  varsP : subst(gkvsub, varsP),
  numC : length(bC),

  printf(fh, "double ~aP~a(const double q_, const double m_, const double *w, const double *dxv, const double *dApardt, const double *f, double *out) ~%{ ~%", funcNm, i),

  printf(fh, "  double dvInv = 1.0/dxv[~a]; ~%", cdim),
  printf(fh, "  double dfac_v = 2.0/dxv[~a]; ~%", cdim),

  /* expand dApar/dt */
  dAdt_expd:doExpand1(dApardt,bC),

  /* calculate volume term, which is inner product
     < - f q/m dApar/dt d/dvpar(bP) > */
  gkVolTerm_k : fullratsimp(innerProd(varsP, 1, f_expd, -q_/m_*dAdt_expd*diff(bP,vpar)*dfac_v)),

  /* write C increment expressions for volume term */
  writeCIncrExprsNoExpand(float(subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2], facsum(gkVolTerm_k,derivfac)))),

  /* cfl calculation */
    alpha_expd : - q_/m_*dAdt_expd*dfac_v,
    d : cdim + 1,
    printf(fh, "  double cflFreq = 0.0; ~%"), 
    printf(fh, "  double alphaL = 0.0; ~%"), 
    printf(fh, "  double alphaR = 0.0; ~%"), 
    /* get quadrature nodes on surface */
    surfIntVars : delete(varsP[d], varsP),
    if i=1 then quad:1/sqrt(3),
    if i=2 then quad:sqrt(3/5),
    nodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", p)),
    nodesub(f):=makelist(subst(makelist(surfIntVars[j]=nodes[i][j]*quad,j,1,length(surfIntVars)),f),i,1,length(nodes)),

    /* evaluate alpha at left and right edge */
    alphaL : subst(varsP[d]=-1, alpha_expd),
    alphaR : subst(varsP[d]=1, alpha_expd),

    /* evaluate cfl by surface averaging */
    printf(fh, "#if cflType == SURFAVG ~%"),
    /* note: factor of derivfacsD already included in alpha_expd */
    alphaL0 : fullratsimp(innerProd(delete(varsP[d],varsP), 1, alphaL, subst(varsP[d]=-1, bP[1]))*bP[1]),
    printf(fh, "  // evaluate surface-averaged alpha on left ~%"),
    printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaL0))),
    printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%"),
    /* note: factor of derivfacsD already included in alpha_expd */
    alphaR0 : fullratsimp(innerProd(delete(varsP[d],varsP), 1, alphaR, subst(varsP[d]=1, bP[1]))*bP[1]),
    printf(fh, "  // evaluate surface-averaged alpha on right ~%"),
    printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaR0))),
    printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%"),
    flush_output(fh),

    /* evaluate cfl by evaluating at all surface quadrature points */
    printf(fh, "#elif cflType == QUAD ~%"),
    alphaLquad : nodesub(alphaL*subst(varsP[d]=-1,bP[1]))*bP[1],
    alphaRquad : nodesub(alphaR*subst(varsP[d]=1,bP[1]))*bP[1],
    printf(fh, "  // evaluate alpha at left surface quadrature points ~%"),
    for i:1 thru length(alphaLquad) do (
      printf(fh, "  alphaL = ~a; ~%", gcfac(float(alphaLquad[i]))),
      printf(fh, "  cflFreq += -0.5*(alphaL-std::abs(alphaL)); ~%")
    ),
    printf(fh, "  // evaluate alpha at right surface quadrature points ~%"),
    for i:1 thru length(alphaRquad) do (
      printf(fh, "  alphaR = ~a; ~%", gcfac(float(alphaRquad[i]))),
      printf(fh, "  cflFreq += 0.5*(alphaR+std::abs(alphaR)); ~%")
    ),
    printf(fh, "#endif ~%"),

    printf(fh, "return cflFreq; ~%"),
  /* cfl contribution from this term handled in first step, so just return 0 */
  /*printf(fh, "  return 0.0; ~%"),*/
  printf(fh, "} ~%")
)$

pmax:1$
em:false$

for c : 1 thru 3 do (
for v: 1 thru 2 do (
if c=1 or (c>1 and v=2) then (
for p : 1 thru pmax do (
if em then fname : sconcat("~/max-out/EmGyrokineticSer", c, "x", v, "vP", p, ".cpp")
else fname : sconcat("~/max-out/GyrokineticSer", c, "x", v, "vP", p, ".cpp"),
fh : openw(fname),
printf(fh, "#include <GyrokineticModDecl.h> ~%"),
/* possible combinations of variable dependence of background magnetic field,
   with 0 = const, 1 = x, 2 = y, 3 = z.
   note that we assume axisymmetry, which means B cannot depend on y */
if c=1 then bvarslist : [[0], [1]],
if c=2 then bvarslist : [[0], [1]],
if c=3 then bvarslist : [[0], [1], [3], [1,3]],
for b : 1 thru length(bvarslist) do (
if em then (
funcName : sconcat("EmGyrokineticVol", c, "x", v, "v", "Ser"),
calcGKVolUpdater(fh, funcName, c, v, "Ser", p, true, bvarslist[b]),
funcName : sconcat("EmGyrokineticStep2Vol", c, "x", v, "v", "Ser"),
if b=1 then calcGKStep2VolUpdater(fh, funcName, c, v, "Ser", p)
) 
else (
funcName : sconcat("GyrokineticVol", c, "x", v, "v", "Ser"),
calcGKVolUpdater(fh, funcName, c, v, "Ser", p, false, bvarslist[b])
)),
close(fh)
))))$

if em=false then (
c:2,
v:0,
for p : 1 thru pmax do (
fname : sconcat("~/max-out/GyrokineticSer", c, "x", v, "vP", p, ".cpp"),
fh : openw(fname),
printf(fh, "#include <GyrokineticModDecl.h> ~%"),
bvarslist : [[0]],
funcName : sconcat("GyrokineticVol", c, "x", v, "v", "Ser"),
calcGKVolUpdater(fh, funcName, c, v, "Ser", p, false, [0]),
close(fh)
)
)$
