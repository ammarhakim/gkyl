load("modal-basis");
load("out-scripts");
load(stringproc)$
load("fem-calc/femMatrices")$
fpprec : 24$

gkvsub:[vx=vpar,vy=mu];


calcGkSheathFuncs(fh, cdim, vdim, basisFun, pmax) := block([],
kill(varsC, varsP, basisC, basisP),
load("basis-precalc/basisSer1x"),
basisVp : subst([x=vx],basisC),
basisMu : subst([x=vy],basisC),
load("basis-precalc/basisSer2x"),
basisXY : basisC,
basisVpMu : subst([x=vx,y=vy],basisC),
basisZVp : subst([x=z,y=vx],basisC),
load("basis-precalc/basisSer3x"),
basisZVpMu : psubst([x=z,y=vx,z=vy],basisC),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  bP : basisP[p],
  bC : basisC[p],
  bXY : basisXY[p],
  bVp : basisVp[p],
  bZVp : basisZVp[p],
  bMu : basisMu[p],
  bVpMu : basisVpMu[p],
  bZVpMu : basisZVpMu[p],

  /* get name of last config space dimension, which is assumed to be z */
  zVar : varsC[cdim],
  surfVars : delete(zVar, varsP),
  surfVarsC : delete(zVar, varsC),
  surfVarsP : delete(vx, surfVars),

  funcNm : sconcat("calcSheathReflection", cdim, "x", vdim, "v", basisFun),
  printf(fh, "void ~a_P~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double zVal, const double q_, const double m_, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", funcNm, p),

  /* calculate expansion for deltaPhi */
  phiSheath_expd : subst(zVar=zVal,doExpand1(phi, bC)),
  phiWall_expd : subst(zVar=zVal,doExpand1(phiWall, bC)),

  deltaPhi_expd : phiSheath_expd - phiWall_expd,

  /* set up quadrature nodes */
  if p=1 then quad:1/(3), /* use control nodes instead of quadrature nodes for p=1, for positivity */
  if p=2 then quad:sqrt(3/5),
  nodesXY : eval_string(sconcat("nodes2xp", p))*quad,
  nodesXYsub(f) := makelist(subst(makelist(surfVarsC[j]=nodesXY[i][j],j,1,length(surfVarsC)),f),i,1,length(nodesXY)),
  nodesMu : eval_string(sconcat("nodes1xp", p))*quad,
  nodesMusub(f) := makelist(subst(makelist(vy=nodesMu[i][j],j,1,1),f),i,1,length(nodesMu)),

  /* evaluate deltaPhi at x,y quadrature nodes */
  deltaPhiQ : nodesXYsub(deltaPhi_expd),

  /* evaluate f at z surface, and x,y quadrature nodes */
  /*fSurf_expd : subst(zVar=zVal, doExpand1(f, bP)),*/
  fSurf_expd : doExpand1(f, bP),
  fXYQ_expd : nodesXYsub(fSurf_expd),
  
  kill(fReflXYQ_expd),
  kill(fReflXYMuQ_expd),
  fReflXYQ_expd : makelist(0, i,1,length(nodesXY)),
  fReflXYMuQ_expd : makelist(0, i,1,length(nodesMu)),
  /* evaluate and write vcut^2 at x,y quadrature nodes */
  vcutSqQ:gcfac(float(fullratsimp(-2*q_/m_*deltaPhiQ))),
  printf(fh, "  double vcutSq_i; long double xc, b, rVal, fac; ~%"),
  printf(fh, "  double fReflXYQuad[~a][~a]; ~%", length(nodesXY), length(bZVpMu)),
  printf(fh, "  double fReflXYMuQuad[~a][~a]; ~%", length(nodesMu), length(bZVp)),
  printf(fh, "  feclearexcept(FE_ALL_EXCEPT); ~%"),
  printf(fh, "  ~%~%"),
  /* for each x,y quadrature node, determine and write coefficients fReflXYQuad for z,vpar,mu modal basis (bZVpMu) */
  for i:1 thru length(nodesXY) do (
    printf(fh, "// quadrature node (x,y)_i=~a ~%", i),
    printf(fh, "  vcutSq_i = ~a; ~%", vcutSqQ[i]),
    printf(fh, "  if(vcutSq_i <= vlowerSq) { // absorb (no reflection) ~%"),
    writeCExprsWithZerosNoExpand1(fReflXYQuad[i-1], makelist(0.,j,1,length(bZVpMu))),
    printf(fh, "  } else if(vcutSq_i > vupperSq) { // full reflection ~%"),
    /* project f at this (x,y)_i quad node onto z,vpar,mu basis (bZVpMu) */
    fXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vx,vy], 1, bZVpMu, fXYQ_expd[i]))),
    /* set fRefl bZVpMu coefficients to f bZVpMu coefficients */
    writeCExprsNoExpand1(fReflXYQuad[i-1], fXYQ_ZVpMu_c),
    printf(fh, "  } else { // partial reflection ~%"),
      /* also evaluate at mu quad nodes */
      fXYMuQ_expd : nodesMusub(fXYQ_expd[i]),
      for j:1 thru length(nodesMu) do (
        /* project f at this (x,y)_i,mu_j quad node onto vpar basis (bVp) */
        fXYMuQ_ZVp_c : gcfac(fullratsimp(innerProd([z,vx], 1, bZVp, fXYMuQ_expd[j]))),
        r: gcfac(float(fXYMuQ_ZVp_c[2]/sqrt(3)/fXYMuQ_ZVp_c[1])),
        printf(fh, "  rVal = ~a; ~%", r),
        printf(fh, "  // if f is not realizable, no reflection ~%"),
        printf(fh, "  if(std::abs(rVal)>=.99 || ~a < 0.) { ~%", gcfac(float(fXYMuQ_ZVp_c[1]))),
        writeCExprsWithZerosNoExpand1(fReflXYMuQuad[j-1],makelist(0.,j,1,length(bZVp))),
        printf(fh, "  } else {~%"),
        beta:invL(rVal),
        printf(fh, "   b = ~a; ~%", beta),
        printf(fh, "   if(wv > 0) {~%"),
        printf(fh, "    xc = ~a; ~%", 2*(sqrt(vcutSq_i)-wv)/dv),
        fReflfacs : [ "b>500? 0. : b<-500? 1. : abs(b)<1e-10? (1.+xc)/2. : (exp(b*xc)-exp(-b))/(2.*sinh(b))", 
            "(b>500 || abs(b)<1e-10)? 0. : b<-500? 1. : ((b*xc-1)*exp(b*xc)+(b+1)*exp(-b))/2./(b*cosh(b)-sinh(b))",
            "(((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3-(2*(b*b+3*(b+1))*exp(-b))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
        for k:1 thru length(bVp) do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(fetestexcept(FE_OVERFLOW | FE_DIVBYZERO)) {printf(\"~a,~a,1: b = \%Le, sinh(b) = \%Le\\n\", b, sinh(b)); throw \"Overflow!\";}~%",j,k),
        printf(fh, "    fReflXYMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYMuQ_ZVp_c[k])))
        ),
        printf(fh, "   } else { ~%"),
        printf(fh, "    xc = ~a; ~%", 2*(-sqrt(vcutSq_i)-wv)/dv),
        fReflfacs : [ "b>500? 1. : b<-500? 0. : abs(b)<1e-10? (1.-xc)/2. : (exp(b)-exp(b*xc))/(2.*sinh(b))", 
            "b>500? 1. : (b<-500 || abs(b)<1e-10)? 0. : ((b-1)*exp(b)-(b*xc-1)*exp(b*xc))/2./(b*cosh(b)-sinh(b))", 
            "((2*(b*b+3*(1-b))*exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
        for k:1 thru length(bVp) do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(fetestexcept(FE_OVERFLOW | FE_DIVBYZERO)) {printf(\"~a,~a,2: b = \%Le, sinh(b) = \%Le\\n\", b, sinh(b)); throw \"Overflow!\";}~%",j,k),
        printf(fh, "    fReflXYMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYMuQ_ZVp_c[k])))
        ),
        printf(fh, "   } ~%"),
        printf(fh, "  } ~%"),
        fReflXYMuQ_expd[j] : makelist(fReflXYMuQuad[j-1][k-1],k,1,length(bZVp)).bZVp
      ),
      modToNodMu:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodesMu, bMu, [vy])),
      fReflXYQ_ZVpMu_expd : fullratsimp(bMu.fullratsimp(invert(transpose(float(modToNodMu))).fReflXYMuQ_expd)),
      /* project fRefl at this (x,y)_i quad node onto z,vpar,mu basis (bZVpMu) */
      fReflXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vx,vy], 1, bZVpMu, fReflXYQ_ZVpMu_expd))),
      writeCExprsNoExpand1(fReflXYQuad[i-1], fReflXYQ_ZVpMu_c),
    printf(fh, "  } ~%~%"),
    /* expansion of fRefl at each x,y quad node */
    fReflXYQ_expd[i] : makelist(fReflXYQuad[i-1][j-1],j,1,length(bZVpMu)).bZVpMu,
    printf(fh, " ~%")
  ),

  modToNodXY:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodesXY,bXY,[x,y])),
  fRefl_expd : fullratsimp(bXY . fullratsimp(invert(transpose(float(modToNodXY))).fReflXYQ_expd)),
  fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fRefl_expd))),
  writeCExprsWithZerosNoExpand1(fRefl, fRefl_c),
  printf(fh, "}~%")
)
)$

fname : "~/max-out/GkSheathFuncsSer.cpp";
fh : openw(fname);
printf(fh, "#include <cmath> ~%");
printf(fh, "#include <fenv.h> ~%");
printf(fh, "#include <GyrokineticModDecl.h> ~%");
printf(fh, "// approximation for inverse Langevin function ~%");
printf(fh, "long double invL(long double x) { ~%");
printf(fh, "  // from Kroger ~%");
printf(fh, "  return (3.*x-x*x*x*(6. + x*x - 2.*x*x*x*x)/5.)/(1.-x*x); ~%");
printf(fh, "}~%~%");
calcGkSheathFuncs(fh, 3, 2, "Ser", 1);
close(fh);

