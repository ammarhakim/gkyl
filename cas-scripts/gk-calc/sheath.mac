load("modal-basis");
load("out-scripts");
load(stringproc)$
load("fem-calc/femMatrices")$ /* contains node info and modal-to-nodal transformation matrices/functions */
fpprec : 24$

gkvsub:[vx=vpar,vy=mu];


calcGkSheathFuncs(fh, cdim, vdim, basisFun, pmax) := block([],
kill(varsC, varsP, basisC, basisP),
/* set up various bases with reduced dimension */
load("basis-precalc/basisSer1x"),
basisVp : subst([x=vx],basisC),                /* 1d vpar basis */
basisMu : subst([x=vy],basisC),                /* 1d mu basis */
load("basis-precalc/basisSer2x"),  
basisXY : basisC,                              /* 2d x,y basis */
basisVpMu : subst([x=vx,y=vy],basisC),         /* 2d vpar,mu basis */ 
basisZVp : subst([x=z,y=vx],basisC),           /* 2d z,vpar basis */
basisZMu : subst([x=z,y=vy],basisC),           /* 2d z,mu basis */
load("basis-precalc/basisSer3x"),
basisZVpMu : psubst([x=z,y=vx,z=vy],basisC),   /* 3d z,vpar,mu basis */
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for p : 1 thru pmax do (
  /* get desired polyOrder of each basis */
  bP : basisP[p],
  bC : basisC[p],
  bXY : basisXY[p],
  bVp : basisVp[p],
  bZVp : basisZVp[p],
  bMu : basisMu[p],
  bZMu : basisZMu[p],
  bVpMu : basisVpMu[p],
  bZVpMu : basisZVpMu[p],

  /* get name of last config space dimension, which is always assumed to be the direction parallel to the magnetic field (z) */
  zVar : varsC[cdim],
  surfVars : delete(zVar, varsP),   /* = x,y,vpar,mu */
  surfVarsC : delete(zVar, varsC),  /* = x,y */
  zmuVars : [zVar, vy],             

  funcNm : sconcat("calcSheathReflection", cdim, "x", vdim, "v", basisFun),
  printf(fh, "void ~a_P~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double zVal, const double q_, const double m_, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", funcNm, p),

  /* calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
    where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively */
  phiSheath_expd : subst(zVar=zVal,doExpand1(phi, bC)),
  phiWall_expd : subst(zVar=zVal,doExpand1(phiWall, bC)),
  deltaPhi_expd : phiSheath_expd - phiWall_expd,

  /* set up quadrature nodes */
  if p=1 then quad:1/(3), /* use control nodes instead of quadrature nodes for p=1, for positivity */
  if p=2 then quad:sqrt(3/5),
  nodes1d : eval_string(sconcat("nodes1xp", p))*quad,   /* 1d quadrature/control nodes */
  nodes2d : eval_string(sconcat("nodes2xp", p))*quad,   /* 2d quadrature/control nodes */

  /* substitution function to evaluate expansion f at (x,y)=node[i] for all i */
  nodesXYsub(f) := makelist(subst(makelist(surfVarsC[j]=nodes2d[i][j],j,1,length(surfVarsC)),f),i,1,length(nodes2d)),

  /* substitution function to evaluate expansion f at mu=node[i] for all i */
  nodesMusub(f) := makelist(subst(makelist(vy=nodes1d[i][j],j,1,1),f),i,1,length(nodes1d)),

  /* substitution function to evaluate expansion f at (z,mu)=node[i] for all i */
  nodesZMusub(f) := makelist(subst(makelist(zmuVars[j]=nodes2d[i][j],j,1,2),f),i,1,length(nodes2d)),

  /* evaluate deltaPhi at x,y nodes */
  deltaPhiQ : nodesXYsub(deltaPhi_expd),

  /* expand input distribution function f on phase-space basis using input coeffs */
  f_expd : doExpand1(f, bP),
  /* evaluate f at x,y nodes, so that fXYQ_expd[i] = fXYQ_expd[i](z,vpar,mu) for each (x,y)=node[i] */
  fXYQ_expd : nodesXYsub(f_expd),

  /* some naming conventions: 
     fXYQ_expd = f evaluated at x,y nodes (XYQ), expansion in remaining variables (_expd)
     fXYZMuQ_expd = f evaluated at x,y,z,mu nodes (XYZMuQ), expansion in remaining variables (_expd)
     fXYQ_ZVpMu_c = f evaluated at x,y nodes (XYQ), then projected onto (z,vpar,mu) basis resulting in coefficients (_ZVpMu_c)
  */
  
  kill(fReflXYQ_expd),
  kill(fReflXYMuQ_expd),
  /* allocate empty vector for reflected distribution function evaluated at x,y nodes */
  fReflXYQ_expd : makelist(0, i,1,length(nodes2d)),

  /* variable declarations/allocations */
  printf(fh, "  double vcutSq_i; long double xc, b, xbarVal, fac; ~%"),
  printf(fh, "  double fReflXYQuad[~a][~a]; ~%", length(nodes2d), length(bZVpMu)),
  printf(fh, "  double fReflXYZMuQuad[~a][~a]; ~%", length(nodes2d), length(bZVp)),
  printf(fh, "  feclearexcept(FE_ALL_EXCEPT); ~%"),
  printf(fh, "  ~%~%"),

  /* evaluate vcutSqQ = vcut^2 at x,y nodes (deltaPhiQ is evaluated at x,y nodes) */
  vcutSqQ:gcfac(float(fullratsimp(-2*q_/m_*deltaPhiQ))),

  /* for each (x,y)_i node, determine and write coefficients fReflXYQuad for z,vpar,mu modal basis (bZVpMu) */
  /* loop over (x,y)_i nodes */
  for i:1 thru length(nodes2d) do (
    printf(fh, "// node (x,y)_~a ~%", i),

    /* write vcut^2 at this node */
    printf(fh, "  vcutSq_i = ~a; ~%", vcutSqQ[i]),

    /* if vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
       so set coefficients of fRefl at this (x,y)_i node to 0 (no reflection from this node) */
    printf(fh, "  if(vcutSq_i <= vlowerSq) { // absorb (no reflection) ~%"),
    writeCExprsWithZerosNoExpand1(fReflXYQuad[i-1], makelist(0.,j,1,length(bZVpMu))),

    /* if vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection */
    /* so set coefficients of fRefl at this (x,y)_i node to coefficients of f */
    printf(fh, "  } else if(vcutSq_i > vupperSq) { // full reflection ~%"),
    /* project f at this (x,y)_i node onto z,vpar,mu basis (bZVpMu) */
    fXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vx,vy], 1, bZVpMu, fXYQ_expd[i]))),
    /* full reflection: set fRefl bZVpMu coefficients to f bZVpMu coefficients at this (x,y)_i node */
    writeCExprsNoExpand1(fReflXYQuad[i-1], fXYQ_ZVpMu_c),

    /* if vcut^2 at this node is in this cell, BC at this node is partial reflection */
    printf(fh, "  } else { // partial reflection ~%"),

      /* allocate empty vector for reflected distribution function also evaluated at z,mu nodes */
      fReflXYZMuQ_expd : makelist(0, i,1,length(nodes2d)),
      /* recall that fXYQ_expd[i]=fXYQ_expd[i](z,vpar,mu) is an expansion in z,vpar,mu evaluated at the current (x,y)_i node
         now evaluate fXYQ_expd[i] at z,mu nodes, so that fXYZMuQ_expd[j]=fXYZMuQ_expd[j](vpar) 
         is evaluated a (z,mu)_j nodes (for the current (x,y)_i node) */
      fXYZMuQ_expd : nodesZMusub(fXYQ_expd[i]),

      /* loop over (z,mu)_j nodes */
      for j:1 thru length(nodes2d) do (
        /* project f at this (x,y)_i,(z,mu)_j node onto vpar basis (bVp) */
        fXYZMuQ_Vp_c : gcfac(fullratsimp(innerProd([vx], 1, bVp, fXYZMuQ_expd[j]))),

        /* evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis coefficients (recall that this is being done at every (x,y,z,mu)_i node) */
        xbar : gcfac(float(fXYZMuQ_Vp_c[2]/sqrt(3)/fXYZMuQ_Vp_c[1])),
        /* print as xbarVal */
        printf(fh, "  xbarVal = ~a; ~%", xbar),
        printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
        /* if abs(xbar)>=1, then f is not realizable. use .99 as conservative threshold */ 
        /* also not realizable if cell_avg is negative */
        printf(fh, "  if(std::abs(xbarVal)>=.99 || ~a < 0.) { ~%", gcfac(float(fXYZMuQ_Vp_c[1]))),
        /* if not realizable, set reflection coeffs to zero so that no reflection from this node */
        writeCExprsWithZerosNoExpand1(fReflXYZMuQuad[j-1],makelist(0.,j,1,length(bVp))),

        /* if f is realizable at this node...*/
        printf(fh, "  } else {~%"),
        /* compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function */
        beta:invL(xbarVal),
        printf(fh, "   b = ~a; ~%", beta),

        /* compute partial reflection scaling factors for coefficients of f, based on exponential construction */
        printf(fh, "   if(wv > 0) {~%"),
        printf(fh, "    xc = 2.*(std::sqrt(vcutSq_i)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 0. : b<-500? 1. : std::abs(b)<1e-10? (1.+xc)/2. : (std::exp(b*xc)-std::exp(-b))/(2.*std::sinh(b))", 
            "(b>500 || std::abs(b)<1e-10)? 0. : b<-500? 1. : ((b*xc-1)*std::exp(b*xc)+(b+1)*std::exp(-b))/2./(b*std::cosh(b)-std::sinh(b))",
            "(((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3-(2*(b*b+3*(b+1))*std::exp(-b))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
        for k:1 thru length(bVp) do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(fetestexcept(FE_OVERFLOW | FE_DIVBYZERO)) {printf(\"~a,~a,1: b = \%Le, std::sinh(b) = \%Le\\n\", b, std::sinh(b)); throw \"Overflow!\";}~%",j,k),
        printf(fh, "    fReflXYZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYZMuQ_Vp_c[k])))
        ),
        printf(fh, "   } else { ~%"),
        printf(fh, "    xc = 2.*(-std::sqrt(vcutSq_i)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 1. : b<-500? 0. : std::abs(b)<1e-10? (1.-xc)/2. : (std::exp(b)-std::exp(b*xc))/(2.*std::sinh(b))", 
            "b>500? 1. : (b<-500 || std::abs(b)<1e-10)? 0. : ((b-1)*std::exp(b)-(b*xc-1)*std::exp(b*xc))/2./(b*std::cosh(b)-std::sinh(b))", 
            "((2*(b*b+3*(1-b))*std::exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
        for k:1 thru length(bVp) do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(fetestexcept(FE_OVERFLOW | FE_DIVBYZERO)) {printf(\"~a,~a,2: b = \%Le, std::sinh(b) = \%Le\\n\", b, std::sinh(b)); throw \"Overflow!\";}~%",j,k),
        printf(fh, "    fReflXYZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYZMuQ_Vp_c[k])))
        ),
        printf(fh, "   } ~%"),
        printf(fh, "  } ~%"),
        /* we just printed bVp coefficients of fRefl at (x,y)_i (z,mu)_j node. now expand in vpar using those coeffs. */
        fReflXYZMuQ_expd[j] : makelist(fReflXYZMuQuad[j-1][k-1],k,1,length(bVp)).bVp
      ), /* end of j loop over (z,mu)_j nodes */

      /* get modToNod matrix for transformation from (z,mu) nodes to z,mu basis coeffs */
      modToNodZMu:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodes2d, bZMu, [z,vy])),
      /* calculate expansion in z,vpar,mu */
      fReflXYQ_ZVpMu_expd : fullratsimp(bZMu.fullratsimp(invert(transpose(float(modToNodZMu))).fReflXYZMuQ_expd)),
 
      /* project fRefl at this (x,y)_i node onto z,vpar,mu basis (bZVpMu) */
      fReflXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vx,vy], 1, bZVpMu, fReflXYQ_ZVpMu_expd))),
      /* write coefficients at this (x,y)_i node */
      writeCExprsNoExpand1(fReflXYQuad[i-1], fReflXYQ_ZVpMu_c),

    printf(fh, "  } ~%~%"), /* end of partial reflection else */

    /* expansion in z,vpar,mu of fRefl[i] at each (x,y)_i node */
    fReflXYQ_expd[i] : makelist(fReflXYQuad[i-1][j-1],j,1,length(bZVpMu)).bZVpMu,
    printf(fh, " ~%")
  ),

  /* get modToNod matrix for transformation from (x,y) nodes to x,y basis coeffs */
  modToNodXY:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodes2d,bXY,[x,y])),
  /* calculate expansion (now in all vars) */
  fRefl_expd : fullratsimp(bXY . fullratsimp(invert(transpose(float(modToNodXY))).fReflXYQ_expd)),
  /* project expansion onto phase-space basis bP */
  fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fRefl_expd))),
  /* write coefficients */
  writeCExprsWithZerosNoExpand1(fRefl, fRefl_c),
  printf(fh, "}~%")
)
)$

fname : "~/max-out/GkSheathFuncsSer.cpp";
fh : openw(fname);
printf(fh, "#include <cmath> ~%");
printf(fh, "#include <fenv.h> ~%");
printf(fh, "#include <GyrokineticModDecl.h> ~%");
printf(fh, "// approximation for inverse Langevin function ~%");
printf(fh, "long double invL(long double x) { ~%");
printf(fh, "  // from Kroger ~%");
printf(fh, "  return (3.*x-x*x*x*(6. + x*x - 2.*x*x*x*x)/5.)/(1.-x*x); ~%");
printf(fh, "}~%~%");
calcGkSheathFuncs(fh, 3, 2, "Ser", 1);
close(fh);

