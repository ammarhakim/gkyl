kill(all) $
load("modal-basis") $
load("recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $

createInputLists(ln) := block(
  fListC : makelist(fIn[i-1], i, 1, ln),
  fListLC : makelist(fLC[i-1], i, 1, ln),
  fListUC : makelist(fUC[i-1], i, 1, ln),
  fListL1L : makelist(fL1L[i-1], i, 1, ln),
  fListU1L : makelist(fU1L[i-1], i, 1, ln),
  fListL1U : makelist(fL1U[i-1], i, 1, ln),
  fListU1U : makelist(fU1U[i-1], i, 1, ln),
  fListL2L : makelist(fL2L[i-1], i, 1, ln),
  fListU2L : makelist(fU2L[i-1], i, 1, ln),
  fListL2U : makelist(fL2U[i-1], i, 1, ln),
  fListU2U : makelist(fU2U[i-1], i, 1, ln),
  gListC : makelist(gIn[i-1], i, 1, ln),
  gListLC : makelist(gLC[i-1], i, 1, ln),
  gListUC : makelist(gUC[i-1], i, 1, ln),
  gListL1L : makelist(gL1L[i-1], i, 1, ln),
  gListU1L : makelist(gU1L[i-1], i, 1, ln),
  gListL1U : makelist(gL1U[i-1], i, 1, ln),
  gListU1U : makelist(gU1U[i-1], i, 1, ln),
  gListL2L : makelist(gL2L[i-1], i, 1, ln),
  gListU2L : makelist(gU2L[i-1], i, 1, ln),
  gListL2U : makelist(gL2U[i-1], i, 1, ln),
  gListU2U : makelist(gU2U[i-1], i, 1, ln)
) $

fgConvolution(basisNm, dir, der, polyOrder, fL, fU, gL, gU) := block(
  [gRec, gDer, ba, baL, baU, perpDirs, outL, outU],
  gRec : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gL), dg(gU)),
  gDer : diff(diff(gRec, der[1]), der[2]),
  
  ba : getBasis(basisNm, 3, polyOrder),
  baL : etaDir(dir, -1, 2, ba),
  baU : etaDir(dir, 1, 2, ba),
  perpDirs : delete(dir, [x,y,z]),
  outL : calcInnerProdListGen([dir, perpDirs[1], perpDirs[2]],
    [[-2,0], [-1,1], [-1,1]], 1, baL, gDer*doExpand(fL, baL)),
  outU : calcInnerProdListGen([dir, perpDirs[1], perpDirs[2]],
    [ [0,2], [-1,1], [-1,1]], 1, baU, gDer*doExpand(fU, baU)),
  return([outL, outU])
) $

getSurfTerm(basisNm, dir, edge, polyOrder,
            fC, f1L, f1U, f2L, f2U,
            gC, g1L, g1U, g2L, g2U,
            isBoundary) := block(
  [C, perpDirs, edgeNm, ba,
  giifC, gijfL, gijfC, gijfU, gikfL, gikfC, gikfU,
  rec2, rec6,
  giif, giifi, gijf, gikf, gikfk, gijfj,
  Jii, Jij, Jik,
  t1, t2, t3, t4, t5, t6],
  
  perpDirs : delete(dir, [x,y,z]),
  ba : getBasis(basisNm, 3, polyOrder),

  Jii : eval_string(sconcat("J", dir, dir)),
  Jij : eval_string(sconcat("J", dir, perpDirs[1])),
  Jik : eval_string(sconcat("J", dir, perpDirs[2])),

  if isBoundary then (
    t1 : 0,
    t2 : 0,
    t3 : 0,
    if edge = 1 then (
      giif : subst(dir=1, diff(doExpand(gC[1], ba), dir, 2) * doExpand(fC[1], ba)),
      gijf : subst(dir=1, diff(diff(doExpand(gC[1], ba), dir), perpDirs[1]) * doExpand(fC[1], ba)),
      gikf : subst(dir=1, diff(diff(doExpand(gC[1], ba), dir), perpDirs[2]) * doExpand(fC[1], ba))
    ) else (
      giif : subst(dir=-1, diff(doExpand(gC[2], ba), dir, 2) * doExpand(fC[2], ba)),
      gijf : subst(dir=-1, diff(diff(doExpand(gC[2], ba), dir), perpDirs[1]) * doExpand(fC[2], ba)),
      gikf : subst(dir=-1, diff(diff(doExpand(gC[2], ba), dir), perpDirs[2]) * doExpand(fC[2], ba))
    )
  ) else (
    giifC : fgConvolution(basisNm, dir, [dir, dir], polyOrder,
      fC[1], fC[2], gC[1], gC[2]),

    gijfL : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
      f1L[1], f1L[2], g1L[1], g1L[2]),
    gijfC : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
      fC[1], fC[2], gC[1], gC[2]),
    gijfU : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
      f1U[1], f1U[2], g1U[1], g1U[2]),

    gikfL : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
      f2L[1], f2L[2], g2L[1], g2L[2]),
    gikfC : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
      fC[1], fC[2], gC[1], gC[2]),
    gikfU : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
      f2U[1], f2U[2], g2U[1], g2U[2]),

    rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(giifC[1]), dg(giifC[2])),
    giif : subst(dir=0, rec2),
    giifi : subst(dir=0, diff(rec2, dir)),
  
    rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gijfC[1]), dg(gijfC[2])),
    gijf : subst(dir=0, rec2),
    /*gijfj : subst(dir=0, diff(rec2, perpDirs[1])),*/
  
    rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gikfC[1]), dg(gikfC[2])),
    gikf : subst(dir=0, rec2),
    /*gikfk : subst(dir=0, diff(rec2, perpDirs[2])),*/

    C : 1,
    rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[1]], [x,y,z], 0, 0, polyOrder, C,
      dg(dg(gijfL[1]), dg(gijfL[2])),
      dg(dg(gijfC[1]), dg(gijfC[2])),
      dg(dg(gijfU[1]), dg(gijfU[2]))),
    gijfj : diff(rec6, perpDirs[1]),
    rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[2]], [x,y,z], 0, 0, polyOrder, C,
      dg(dg(gikfL[1]), dg(gikfL[2])),
      dg(dg(gikfC[1]), dg(gikfC[2])),
      dg(dg(gikfU[1]), dg(gikfU[2]))),
    gikfk : diff(rec6, perpDirs[2]),
  
    t1 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, ba), giifi),
    t2 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, ba), gijfj),
    t3 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, ba), gikfk)
  ),
  t4 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, diff(ba, dir)), giif),
  t5 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, diff(ba, perpDirs[1])), gijf),
  t6 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, diff(ba, perpDirs[2])), gikf),
  return(t1 + t2 + t3 - t4 - t5 - t6)
) $

writeSurfKernel(dir, polyOrder) := block(
  [fListC, fListLC, fListUC, fListL1L, fListU1L, fListL1U, fListU1U, fListL2L, fListU2L, fListL2U, fListU2U,
  gListC, gListLC, gListUC, gListL1L, gListU1L, gListL1U, gListU1U, gListL2L, gListU2L, gListL2U, gListU2U,
  fname, fh, ba, surf, out,
  edges, edgeNm, basisNm],

  edges : [-1, 1],
  edgeNm : ["L", "U"],

  basisNm : "Ser",
  ba : getBasis(basisNm, 3, polyOrder),
  /*createIndexShiftList(ba),*/
  createInputLists(length(ba)),

  fname : sconcat("~/max-out/vlasov_fpo_diff_surf", dir, "_3x_ser_p", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <vlasov_fpo.h>~%~%"),
  
  for n : 1 thru 2 do (
    printf(fh, "void vlasov_fpo_diff_surf~a~a_3x_ser_p~a(const double dt, const double* dv,~%", dir, edgeNm[n], polyOrder),
    printf(fh, "                                      const double* fLC,~%"),
    printf(fh, "                                      const double* fL1L, const double* fL1U,~%"),
    printf(fh, "                                      const double* fL2L, const double* fL2U,~%"),
    printf(fh, "                                      const double* fUC,~%"),
    printf(fh, "                                      const double* fU1L, const double* fU1U,~%"),
    printf(fh, "                                      const double* fU2L, const double* fU2U,~%"),
    printf(fh, "                                      const double* gLC,~%"),
    printf(fh, "                                      const double* gL1L, const double* gL1U,~%"),
    printf(fh, "                                      const double* gL2L, const double* gL2U,~%"),
    printf(fh, "                                      const double* gUC,~%"),
    printf(fh, "                                      const double* gU1L, const double* gU1U,~%"),
    printf(fh, "                                      const double* gU2L, const double* gU2U,~%"),
    printf(fh, "                                      const int isBoundary,~%"),
    printf(fh, "                                      double* fOut) {~%"),

    printf(fh, "  const double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
    printf(fh, "  const double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
    printf(fh, "  const double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
    printf(fh, "  const double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
    printf(fh, "  const double Jyx = Jxy;~%"),
    printf(fh, "  const double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
    printf(fh, "  const double Jzx = Jxz;~%"),
    printf(fh, "  const double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
    printf(fh, "  const double Jzy = Jxz;~%~%"),

    printf(fh, "  if (isBoundary) {~%"),
    surf : getSurfTerm(basisNm, dir, edges[n], polyOrder,
      [fListLC, fListUC],
      [fListL1L, fListU1L], [fListL1U, fListU1U],
      [fListL2L, fListU2L], [fListL2U, fListU2U],
      [gListLC, gListUC],
      [gListL1L, gListU1L], [gListL1U, gListU1U],
      [gListL2L, gListU2L], [gListL2U, gListU2U],
      true),
    out : expand(edges[n]*surf/2),
    for i : 1 thru length(ba) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
    
    printf(fh, "  } else {~%"),
    surf : getSurfTerm(basisNm, dir, edges[n], polyOrder,
      [fListLC, fListUC],
      [fListL1L, fListU1L], [fListL1U, fListU1U],
      [fListL2L, fListU2L], [fListL2U, fListU2U],
      [gListLC, gListUC],
      [gListL1L, gListU1L], [gListL1U, gListU1U],
      [gListL2L, gListU2L], [gListL2U, gListU2U],
      false),
    out : expand(edges[n]*surf/2),
    for i : 1 thru length(ba) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
    printf(fh, "  }~%"),
    printf(fh, "}~%~%")
  ),
  close(fh)
) $


createVolKernel(polyOrder) := block(
  [fListC, fListLC, fListUC, fListL1L, fListU1L, fListL1U, fListU1U, fListL2L, fListU2L, fListL2U, fListU2U,
  gListC, gListLC, gListUC, gListL1L, gListU1L, gListL1U, gListU1U, gListL2L, gListU2L, gListL2U, gListU2U,
  fname, fh, ba, gxxfpxxVol, gyyfpyyVol, gzzfpzzVol, gxyfpxyVol, gxzfpxzVol, gyzfpyzVol, tmp, out,
  vxx, vyy, vzz, vxy, vxz, vyz, cflFreq, basisNm],

  fname : sconcat("~/max-out/vlasov_fpo_diff_vol_3x_ser_p", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <vlasov_fpo.h>~%~%"),
  
  printf(fh, "double vlasov_fpo_diff_vol_3x_ser_p~a(const double dt, const double* dv,~%", polyOrder),
  printf(fh, "                                     const double* fIn,~%"),
  printf(fh, "                                     const double* gIn,~%"),
  printf(fh, "                                     double *fOut) {~%"),
  
  basisNm : "Ser",
  ba : getBasis(basisNm, 3, polyOrder),
  /*createIndexShiftList(ba),*/
  createInputLists(length(ba)),
  
  printf(fh, "  const double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  const double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  const double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  const double Jyx = Jxy;~%"),
  printf(fh, "  const double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jzx = Jxz;~%"),
  printf(fh, "  const double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jzy = Jyz;~%~%"),
  
  /* Putting together the volume terms */
  gxxfpxxVol : calcInnerProdList([x,y,z], Jxx, diff(ba, x, 2),
    diff(doExpand(gListC, ba), x, 2)*doExpand(fListC, ba)),
  gyyfpyyVol : calcInnerProdList([x,y,z], Jyy, diff(ba, y, 2),
    diff(doExpand(gListC, ba), y, 2)*doExpand(fListC, ba)),
  gzzfpzzVol : calcInnerProdList([x,y,z], Jzz, diff(ba, z, 2),
    diff(doExpand(gListC, ba), z, 2)*doExpand(fListC, ba)),
  gxyfpxyVol : calcInnerProdList([x,y,z], Jxy, diff(diff(ba, x), y),
    diff(diff(doExpand(gListC, ba), x), y)*doExpand(fListC, ba)),
  gxzfpxzVol : calcInnerProdList([x,y,z], Jxz, diff(diff(ba, x), z),
    diff(diff(doExpand(gListC, ba), x), z)*doExpand(fListC, ba)),
  gyzfpyzVol : calcInnerProdList([x,y,z], Jyz, diff(diff(ba, y), z),
    diff(diff(doExpand(gListC, ba), y), z)*doExpand(fListC, ba)),
 
  /* Writting the volume term */
  tmp : (gxxfpxxVol + gyyfpyyVol + gzzfpzzVol +
    2*gxyfpxyVol + 2*gxzfpxzVol + 2*gyzfpyzVol)/2,
  out : expand(tmp),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),

  /* Calculating the time step */
  vxx : diff(doExpand(gListC, ba), x, 2)*Jxx/4,
  vyy : diff(doExpand(gListC, ba), y, 2)*Jyy/4,
  vzz : diff(doExpand(gListC, ba), z, 2)*Jzz/4,
  vxy : diff(diff(doExpand(gListC, ba), x), y)*Jxy/4,
  vxz : diff(diff(doExpand(gListC, ba), x), z)*Jxz/4,
  vyz : diff(diff(doExpand(gListC, ba), y), z)*Jyz/4,

  cflFreq : (2*polyOrder+1)*(subst([x=0,y=0,z=0], vxx+vxy+vyy+vzz+vxz+vyz)),
  out : float(expand(cflFreq)),
  printf(fh, "~%"),
  printf(fh, "  return ~a;~%", out),

  printf(fh, "}"),
  close(fh) 
) $