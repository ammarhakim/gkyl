kill(all) $
load("modal-basis") $
load("recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $

createInputLists(ln) := block(
  fListC : makelist(fIn[i-1], i, 1, ln),
  gListC : makelist(gIn[i-1], i, 1, ln)
) $



getVolTermI(basisNm, polyOrder, fC, gC) := block(
  [ba, gxxfpxx, gyyfpyy, gzzfpzz, gxyfpxy, gxzfpxz, gyzfpyz, vol],

  ba : getBasis(basisNm, 3, polyOrder),

  /* Putting together the volume terms */
  gxxfpxx : calcInnerProdList([x,y,z], Jxx, diff(ba, x, 2),
    diff(doExpand(gListC, ba), x, 2)*doExpand(fListC, ba)),
  gyyfpyy : calcInnerProdList([x,y,z], Jyy, diff(ba, y, 2),
    diff(doExpand(gListC, ba), y, 2)*doExpand(fListC, ba)),
  gzzfpzz : calcInnerProdList([x,y,z], Jzz, diff(ba, z, 2),
    diff(doExpand(gListC, ba), z, 2)*doExpand(fListC, ba)),
  gxyfpxy : calcInnerProdList([x,y,z], Jxy, diff(diff(ba, x), y),
    diff(diff(doExpand(gListC, ba), x), y)*doExpand(fListC, ba)),
  gxzfpxz : calcInnerProdList([x,y,z], Jxz, diff(diff(ba, x), z),
    diff(diff(doExpand(gListC, ba), x), z)*doExpand(fListC, ba)),
  gyzfpyz : calcInnerProdList([x,y,z], Jyz, diff(diff(ba, y), z),
    diff(diff(doExpand(gListC, ba), y), z)*doExpand(fListC, ba)),
 
  /* Writting the volume term */
  vol : (gxxfpxx + gyyfpyy + gzzfpzz +
    2*gxyfpxy + 2*gxzfpxz + 2*gyzfpyz)/2,
  return(vol)
) $



getVolTermII(basisNm, polyOrder, fC, gC) := block(
  [ba, gxxfxpx, gyyfypy, gzzfzpz, gxyfxpy, gxzfxpz, gyxfypx, gyzfypz, gzxfzpx, gzyfzpy, vol],

  ba : getBasis(basisNm, 3, polyOrder),

  /* Putting together the volume terms */
  gxxfxpx : calcInnerProdList([x,y,z], Jxx, diff(ba, x),
    diff(doExpand(gListC, ba), x, 2)*diff(doExpand(fListC, ba), x)),
  gyyfypy : calcInnerProdList([x,y,z], Jyy, diff(ba, y),
    diff(doExpand(gListC, ba), y, 2)*diff(doExpand(fListC, ba), y)),
  gzzfzpz : calcInnerProdList([x,y,z], Jzz, diff(ba, z),
    diff(doExpand(gListC, ba), z, 2)*diff(doExpand(fListC, ba), z)),

  gxyfxpy : calcInnerProdList([x,y,z], Jxy, diff(ba, y),
    diff(diff(doExpand(gListC, ba), x), y)*diff(doExpand(fListC, ba), x)),
  gxzfxpz : calcInnerProdList([x,y,z], Jxz, diff(ba, z),
    diff(diff(doExpand(gListC, ba), x), z)*diff(doExpand(fListC, ba), x)),

  gyxfypx : calcInnerProdList([x,y,z], Jyx, diff(ba, x),
    diff(diff(doExpand(gListC, ba), y), x)*diff(doExpand(fListC, ba), y)),
  gyzfypz : calcInnerProdList([x,y,z], Jyz, diff(ba, z),
    diff(diff(doExpand(gListC, ba), y), z)*diff(doExpand(fListC, ba), y)),

  gzxfzpx : calcInnerProdList([x,y,z], Jzx, diff(ba, x),
    diff(diff(doExpand(gListC, ba), z), x)*diff(doExpand(fListC, ba), z)),
  gzyfzpy : calcInnerProdList([x,y,z], Jzy, diff(ba, y),
    diff(diff(doExpand(gListC, ba), z), y)*diff(doExpand(fListC, ba), z)),
 
  /* Writting the volume term */
  vol : -(gxxfxpx + gyyfypy + gzzfzpz + gxyfxpy + gxzfxpz + gyxfypx + gyzfypz + gzxfzpx + gzyfzpy)/2,
  return(vol)
) $



createVolKernel(type, polyOrder) := block(
  [fListC, gListC, 
  fname, fh, ba, tmp, out,
  vxx, vyy, vzz, vxy, vxz, vyz, cflFreq, basisNm],

  fname : sconcat("~/max-out/vlasov_fpo_diff", type, "_vol_3x_ser_p", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <vlasov_fpo.h>~%~%"),
  
  printf(fh, "double vlasov_fpo_diff~a_vol_3x_ser_p~a(const double dt, const double* dv,~%", type, polyOrder),
  printf(fh, "                                      const double* fIn,~%"),
  printf(fh, "                                      const double* gIn,~%"),
  printf(fh, "                                      double *fOut) {~%"),
  
  basisNm : "Ser",
  ba : getBasis(basisNm, 3, polyOrder),
  createInputLists(length(ba)),
  
  printf(fh, "  const double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  const double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  const double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  const double Jyx = Jxy;~%"),
  printf(fh, "  const double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jzx = Jxz;~%"),
  printf(fh, "  const double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  const double Jzy = Jyz;~%~%"),
  
  vol : eval_string(sconcat("getVolTerm", type))(basisNm, polyOrder, fListC, gListC),
  out : expand(vol),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),

  /* Calculating the time step */
  vxx : diff(doExpand(gListC, ba), x, 2)*Jxx/4,
  vyy : diff(doExpand(gListC, ba), y, 2)*Jyy/4,
  vzz : diff(doExpand(gListC, ba), z, 2)*Jzz/4,
  vxy : diff(diff(doExpand(gListC, ba), x), y)*Jxy/4,
  vxz : diff(diff(doExpand(gListC, ba), x), z)*Jxz/4,
  vyz : diff(diff(doExpand(gListC, ba), y), z)*Jyz/4,

  cflFreq : (2*polyOrder+1)*(subst([x=0,y=0,z=0], vxx+vxy+vyy+vzz+vxz+vyz)),
  out : float(expand(cflFreq)),
  printf(fh, "~%"),
  printf(fh, "  return ~a;~%", out),

  printf(fh, "}"),
  close(fh) 
) $