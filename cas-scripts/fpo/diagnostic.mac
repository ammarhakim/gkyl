kill(all) $
load("modal-basis") $
load("basis-precalc/basisSer3x") $
assume(dv[1]>0, dv[2]>0, dv[3]>0) $
numDims : 3 $

int3(arg) := integrate(integrate(integrate(arg, x, -1, 1), y, -1, 1), z, -1, 1) $

for polyOrder : 1 thru 1 do (
  fExp : doExpand(f, basisC[polyOrder]),
  hExp : doExpand(h, basisC[polyOrder]),

  J : dv[1]*dv[2]*dv[3]/8,
  M0 : int3(fExp) * J,
  M1x : int3((x*dv[1]/2+vc[1])*fExp) * J,
  M1y : int3((y*dv[2]/2+vc[2])*fExp) * J,
  M1z : int3((z*dv[3]/2+vc[3])*fExp) * J,
  M2 : int3(((x*dv[1]/2+vc[1])^2+(y*dv[2]/2+vc[2])^2+(z*dv[3]/2+vc[3])^2)*fExp) * J,
  
  diagM1x : int3(diff(hExp, x)*2/dv[1]*fExp) * J,
  diagM1y : int3(diff(hExp, y)*2/dv[2]*fExp) * J,
  diagM1z : int3(diff(hExp, y)*2/dv[2]*fExp) * J,
  diagM2 : int3(((x*dv[1]/2+vc[1])*diff(hExp, x)*2/dv[1] + (y*dv[2]/2+vc[2])*diff(hExp, y)*2/dv[2] + (z*dv[3]/2+vc[3])*diff(hExp, z)*2/dv[3] + hExp/2)*fExp) * J,
  
  /* 1-index to 0-index substitution */
  indexSubList : append(
    makelist(dv[i]=dv[i-1], i, 1, numDims),
    makelist(vc[i]=vc[i-1], i, 1, numDims),
    makelist(f[i]=f[i-1], i, 1, length(basisC[polyOrder])),
    makelist(h[i]=h[i-1], i, 1, length(basisC[polyOrder]))
  ),

  fname : sconcat("~/max-out/vlasov_fpo_moms_3x_ser_p", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <vlasov_fpo.h>~%~%"),

  printf(fh, "void vlasov_fpo_moms_3xser__p~a(const double* dv, const double* vc, const double* f, double* out) {~%", polyOrder),
  
  printf(fh, "  out[0] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(M0))))),
  printf(fh, "  out[1] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(M1x))))),
  printf(fh, "  out[2] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(M1y))))),
  printf(fh, "  out[3] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(M1z))))),
  printf(fh, "  out[4] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(M2))))),
  printf(fh, "}"),
  close(fh),
  
  fname : sconcat("~/max-out/vlasov_fpo_diag_3x_ser_p", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <vlasov_fpo>~%~%"),
  
  printf(fh, "void vlasov_fpo_diag_3x_ser_p~a(const double* dv, const double* vc, const double* f, const double* h, double* out) {~%", polyOrder),
  
  printf(fh, "  out[0] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(diagM1x))))),
  printf(fh, "  out[1] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(diagM1y))))),
  printf(fh, "  out[2] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(diagM1z))))),
  printf(fh, "  out[3] += ~a;~%", subst(pow, "^", float(subst(indexSubList, expand(diagM2))))),
  printf(fh, "}"),
  close(fh)
  )

/* ------------------------------ */

kill(all) $
load("modal-basis") $
load("basis-precalc/basisSer3x") $
assume(dv[1]>0, dv[2]>0, dv[3]>0) $
numDims : 3 $
polyOrder : 1 $
indexSubList : append(
  makelist(dv[i]=dv[i-1], i, 1, numDims),
  makelist(vc[i]=vc[i-1], i, 1, numDims),
  makelist(f[i]=f[i-1], i, 1, length(basisC[polyOrder])),
  makelist(h[i]=h[i-1], i, 1, length(basisC[polyOrder]))
  ) $
fExp : doExpand(f, basisC[polyOrder]) $
intXlo : integrate(integrate((-dv[1]/2+vc[1])*subst(x=-1, fExp), y, -1, 1), z, -1, 1) * dv[2]*dv[3]/4 ;
intXup : -integrate(integrate((dv[1]/2+vc[1])*subst(x=1, fExp), y, -1, 1), z, -1, 1) * dv[2]*dv[3]/4 $
intYlo : integrate(integrate((-dv[2]/2+vc[2])*subst(y=-1, fExp), x, -1, 1), z, -1, 1) * dv[1]*dv[3]/4 $
intYup : -integrate(integrate((dv[2]/2+vc[2])*subst(y=1, fExp), x, -1, 1), z, -1, 1) * dv[1]*dv[3]/4 $
intZlo : integrate(integrate((-dv[3]/2+vc[3])*subst(z=-1, fExp), x, -1, 1), y, -1, 1) * dv[1]*dv[2]/4 $
intZup : -integrate(integrate((dv[3]/2+vc[3])*subst(z=1, fExp), x, -1, 1), y, -1, 1) * dv[1]*dv[2]/4 $
fh : openw("~/max-out/intKernel") $
printf(fh, "if (isXloEdge) {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intXlo)))) $
printf(fh, "} else if (isXupEdge) {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intXup)))) $
printf(fh, "} else if (isYloEdge) {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intYlo)))) $
printf(fh, "} else if (isYupEdge) {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intYup)))) $
printf(fh, "} else if (isZloEdge) {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intZlo)))) $
printf(fh, "} else {~%") $
printf(fh, "  out += ~a;~%", float(subst(indexSubList, expand(intZup)))) $
printf(fh, "}") $
close(fh) $