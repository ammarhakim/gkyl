kill(all) $
load("modal-basis") $
load("recovery-calc/recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $
numDims : 2 $

for polyOrder : 1 thru 2 do (
  fname : sconcat("~/max-out/fpoDiffKernelP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),

  printf(fh, "void fpoDiffKernelP~a(const double dt, const double *dv, const double *fC, const double *fL, const double *fR, const double *fT, const double *fB, const double *gC, const double *gL, const double *gR, const double *gT, const double *gB, const int isTopEdge, const int isBotEdge, const int isLeftEdge, const int isRightEdge, int cross, double *fOut) {~%", polyOrder),
  
  load("basis-precalc/basisSer2x"),
  baC : basisC[polyOrder],
  baL : eta([-1,0], [2,2], baC),
  baR : eta([1,0], [2,2], baC),
  baT : eta([0,1], [2,2], baC),
  baB : eta([0,-1], [2,2], baC),

  indexSubList : append(
    /* diff potential */
    makelist(gC[i]=gC[i-1], i, 1, length(baC)),
    makelist(gL[i]=gL[i-1], i, 1, length(baC)),
    makelist(gR[i]=gR[i-1], i, 1, length(baC)),
    makelist(gB[i]=gB[i-1], i, 1, length(baC)),
    makelist(gT[i]=gT[i-1], i, 1, length(baC)),
    /* distribution functions */
    makelist(fC[i]=fC[i-1], i, 1, length(baC)),
    makelist(fL[i]=fL[i-1], i, 1, length(baC)),
    makelist(fR[i]=fR[i-1], i, 1, length(baC)),
    makelist(fB[i]=fB[i-1], i, 1, length(baC)),
    makelist(fT[i]=fT[i-1], i, 1, length(baC)),
    /* convolutions */
    makelist(gxxfLm[i]=gxxfLm[i-1], i, 1, length(baC)),
    makelist(gxxfLp[i]=gxxfLp[i-1], i, 1, length(baC)),
    makelist(gxxfRm[i]=gxxfRm[i-1], i, 1, length(baC)),
    makelist(gxxfRp[i]=gxxfRp[i-1], i, 1, length(baC)),
    makelist(gyyfBm[i]=gyyfBm[i-1], i, 1, length(baC)),
    makelist(gyyfBp[i]=gyyfBp[i-1], i, 1, length(baC)),
    makelist(gyyfTm[i]=gyyfTm[i-1], i, 1, length(baC)),
    makelist(gyyfTp[i]=gyyfTp[i-1], i, 1, length(baC)),
    /* cell size */
    makelist(dv[i]=dv[i-1], i, 1, 3)
    ),

  /* Setting up recoveries of g */
  gRecL : getRecov2CellGen(x, [2,2], polyOrder, gL, gC),
  gRecR : getRecov2CellGen(x, [2,2], polyOrder, gC, gR),
  gRecB : getRecov2CellGen(y, [2,2], polyOrder, gB, gC),
  gRecT : getRecov2CellGen(y, [2,2], polyOrder, gC, gT),
  

  tmp : calcInnerProdListGen([x, y], [[-2,0], [-1,1]], 1, baL,
    diff(gRecL, x, 2)*doExpand(fL, baL)),
  printf(fh, "  double gxxfLp[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gxxfLp[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y], [[0,2], [-1,1]], 1, baR,
    diff(gRecL, x, 2)*doExpand(fC, baR)),
  printf(fh, "  double gxxfLm[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gxxfLm[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y], [[-2,0], [-1,1]], 1, baL,
    diff(gRecR, x, 2)*doExpand(fC, baL)),
  printf(fh, "  double gxxfRm[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gxxfRm[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y], [[0,2], [-1,1]], 1, baR,
    diff(gRecR, x, 2)*doExpand(fR, baR)),
  printf(fh, "  double gxxfRp[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gxxfRp[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),


  tmp : calcInnerProdListGen([x, y], [[-1,1], [-2,0]], 1, baB,
    diff(gRecB, y, 2)*doExpand(fB, baB)),
  printf(fh, "  double gyyfBp[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gyyfBp[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y], [[-1,1], [0,2]], 1, baT,
    diff(gRecB, y, 2)*doExpand(fC, baT)),
  printf(fh, "  double gyyfBm[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gyyfBm[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  
  tmp : calcInnerProdListGen([x, y], [[-1,1], [-2,0]], 1, baB,
    diff(gRecT, y, 2)*doExpand(fC, baB)),
  printf(fh, "  double gyyfTm[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gyyfTm[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y], [[-1,1], [0,2]], 1, baT,
    diff(gRecT, y, 2)*doExpand(fT, baT)),
  printf(fh, "  double gyyfTp[~a];~%", length(baC)),
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  gyyfTp[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),


  gxxfRecL : getRecov2CellGen(x, [2,2], polyOrder, gxxfLp, gxxfLm),
  gxxfRecR : getRecov2CellGen(x, [2,2], polyOrder, gxxfRm, gxxfRp),
  gyyfRecB : getRecov2CellGen(y, [2,2], polyOrder, gyyfBp, gyyfBm),
  gyyfRecT : getRecov2CellGen(y, [2,2], polyOrder, gyyfTm, gyyfTp),
  

  Jxx : (2/dv[1])^4,
  Jyy : (2/dv[2])^4,
  Jxy : (2/dv[1])^2*(2/dv[2])^2,
  /* Putting together the surface terms at x */
  gxxfxPhiSurL : calcInnerProdListGen([y], [[-1,1]], 1, subst(x=-1, baC),
    subst(x=0, diff(gxxfRecL, x))) * Jxx,
  gxxfPhixSurL : calcInnerProdListGen([y], [[-1,1]], 1, subst(x=-1, diff(baC, x)),
    subst(x=0, gxxfRecL)) * Jxx,
  gxxfxPhiSurR : calcInnerProdListGen([y], [[-1,1]], 1, subst(x=1, baC),
    subst(x=0, diff(gxxfRecR, x))) * Jxx,
  gxxfPhixSurR : calcInnerProdListGen([y], [[-1,1]], 1, subst(x=1, diff(baC, x)),
    subst(x=0, gxxfRecR)) * Jxx,
  /* Putting together the surface terms at y */
  gyyfyPhiSurB : calcInnerProdListGen([x], [[-1,1]], 1, subst(y=-1, baC),
    subst(y=0, diff(gyyfRecB, y))) * Jyy,
  gyyfPhiySurB : calcInnerProdListGen([x], [[-1,1]], 1, subst(y=-1, diff(baC, y)),
    subst(y=0, gyyfRecB)) * Jyy,
  gyyfyPhiSurT : calcInnerProdListGen([x], [[-1,1]], 1, subst(y=1, baC),
    subst(y=0, diff(gyyfRecT, y))) * Jyy,
  gyyfPhiySurT : calcInnerProdListGen([x], [[-1,1]], 1, subst(y=1, diff(baC, y)),
    subst(y=0, gyyfRecT)) * Jyy,
  /* Putting together the volume terms */
  gxxfPhixxVol : calcInnerProdListGen([x,y], [[-1,1], [-1,1]], 1, diff(baC, x, 2),
    diff(doExpand(gC, baC), x, 2)*doExpand(fC, baC)) * Jxx,
  gyyfPhiyyVol : calcInnerProdListGen([x,y], [[-1,1], [-1,1]], 1, diff(baC, y, 2),
    diff(doExpand(gC, baC), y, 2)*doExpand(fC, baC)) * Jyy,


  printf(fh, "  if (isLeftEdge) {~%"),
  tmp : (gxxfxPhiSurR-gxxfPhixSurR)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),

  printf(fh, "  } else if (isRightEdge) {~%"),
  tmp : (-gxxfxPhiSurL+gxxfPhixSurL)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),

  printf(fh, "  } else {~%"),
  tmp : (gxxfxPhiSurR-gxxfPhixSurR - gxxfxPhiSurL+gxxfPhixSurL)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  printf(fh, "  }~%~%"),

  printf(fh, "  if (isBotEdge) {~%"),
  tmp : (gyyfyPhiSurT-gyyfPhiySurT)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),

  printf(fh, "  } else if (isTopEdge) {~%"),
  tmp : (-gyyfyPhiSurB+gyyfPhiySurB)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  
  printf(fh, "  } else {~%"),
  tmp : (gyyfyPhiSurT-gyyfPhiySurT - gyyfyPhiSurB+gyyfPhiySurB)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  printf(fh, "  }~%~%"),
  
  /* Writting the volume term */
  tmp : (gxxfPhixxVol + gyyfPhiyyVol)/2,
  out : subst(indexSubList, subst(gkyl_ipow, "^", float(expand(fullratsimp(tmp))))),
  for i : 1 thru length(baC) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*out[i]),


  printf(fh, "}"),
  close(fh)
  )