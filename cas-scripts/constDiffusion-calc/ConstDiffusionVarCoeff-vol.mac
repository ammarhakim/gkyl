load("modal-basis")$
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* This script generates the kernels needed for adding the
   volume contributions from second order diffusion in all
   directions using two integrations by parts and assuming that
   the diffusion coefficient is a constant-in-time vector 
   whose components only depend on the coordinate along that direction
      D = D(X) hat{x} + D(y) hat{y} + ... */

/* Functions loadBasisX and getDirCombos ought to match those in the
   header-generating script. */

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

getDirCombos(varsIn) := block([dirCombosSet,dirCombos,d],
  dirCombosSet : setify([]),
  for d : 1 thru length(varsIn) do (
    dirCombosSet : union(dirCombosSet,powerset(setify(varsIn),d))
  ),
  dirCombos : full_listify(dirCombosSet),
  dirCombos : makelist(sort(dirCombos[i],lambda([a,b],slength(string(a)) < slength(string(b)))),i,1,length(dirCombos)),
  return(dirCombos)
)$

buildConstDiffusionVarCoeffVol(fh, funcNm, dim, basisFun, polyOrder, diffOrder) := block(
  [tmpLst,basis,vars,numB,diffDirCombos,diffDirs],
  /* Generate the volume kernels for adding constant-in-time, variable
     in space diffusion in all or a subset of dimensions. */

  tmpLst : loadBasisX(dim, basisFun, polyOrder),
  basis  : tmpLst[1], 
  vars   : tmpLst[2], 

  numB : length(basis),

  f_e : doExpand1(f, basis),	/* Function expanded in basis. */
    
  /* For a given dimensionality get the combinations of
     directions in which to apply diffusion. */
  diffDirCombos : getDirCombos(vars),

  for diffDirs in diffDirCombos do (

    diffDirNum : length(diffDirs),
    diffDirInP : makelist(sublist_indices(vars,lambda([x], x=diffDirs[i]))[1],i,1,diffDirNum),

    diffDirsStr :"",
    for dI in diffDirInP do (diffDirsStr : sconcat(diffDirsStr,string(dI))),

    printf(fh,"double ~aP~a_diffDirs~a(const double *w, const double *dx, const double *nu, const double *f, double *out) ~%{ ~%", funcNm, polyOrder, diffDirsStr),
    printf(fh,"  // w[~a]:   Cell-center coordinates.~%",dim),
    printf(fh,"  // dx[~a]:  Cell spacing.~%",dim),
    printf(fh,"  // nu[~a]:  diffusion coefficient.~%",dim*numB),
    printf(fh,"  // f:      Input distribution function.~%"),
    printf(fh,"  // out:    Incremented output ~%"),
    printf(fh,"  double rdxF[~a]; ~%", diffDirNum),
    nuSign : (-1)^(diffOrder/2+1),
    numFac : 2.0^diffOrder,
    for d : 1 thru diffDirNum do (
      denFac : sconcat("dx[", diffDirInP[d]-1,"]*dx[", diffDirInP[d]-1,"]"),
      for ef : 2 thru diffOrder/2 do (
        denFac : sconcat(denFac,"*dx[", diffDirInP[d]-1,"]*dx[", diffDirInP[d]-1,"]")
      ),
      printf(fh,"  rdxF[~a] = ~a/(~a); ~%", d-1, numFac, denFac)
    ),
    printf(fh,"~%"),

    /* Volume matrix (convolution of derivatives). */
    incr : (
      incr : 0,
      for d : 1 thru diffDirNum do (
        cv   : vars[diffDirInP[d]],

        /* Assume that nu only depends on the variable along that direction. */ 
        nu_c : makelist(nu[(diffDirInP[d]-1)*numB+i-1],i,1,numB),
        otherVars : delete(cv, vars),
        for k : 1 thru numB do (
          keep : true,
          for l : 1 thru length(otherVars) do (
            keep : keep and freeof(otherVars[l], basis[k]) 
          ),
          if not keep then ( nu_c[k] : 0 )
        ),
        nu_e : doExpand(nu_c,basis),

        incr : incr+calcInnerProdList(vars,nuSign*rdxF[d-1],diff(nu_e*diff(basis,cv),cv,diffOrder-1),f_e)
      ),
      incr
    ),

    writeCIncrExprs1(out, incr),
    printf(fh,"~%"),

    /* Return the value used in the CFL calculation. */
    nu_e  : doExpand(makelist(nu[(diffDirInP[1]-1)*numB+i-1],i,1,numB),basis),
    nuMid : subst(makelist(vars[d]=0,d,1,dim),nu_e), 
    pstr : sconcat("  return (rdxF[0]*",string(float(nuMid))),
    for d : 2 thru diffDirNum do (
      nu_e  : doExpand(makelist(nu[(diffDirInP[d]-1)*numB+i-1],i,1,numB),basis),
      nuMid : subst(makelist(vars[d]=0,d,1,dim),nu_e), 
      pstr  : sconcat(pstr,"+rdxF[",d-1,"]*",string(float(nuMid)))
    ),
    pstr : sconcat(pstr,")*~a;~%"),
    printf(fh, pstr, 0.5*float(((polyOrder+1)**2)/(2*polyOrder+1))),
    printf(fh,"~%"),
  
    printf(fh,"} ~%")
  )
);

