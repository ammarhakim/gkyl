/* Compute surface kernels for constant diffusion
   Supports grad^2, grad^4, and grad^6 (p>=2)
   Computes the surface kernel by integrating by parts repeatedly
   until all derivatives are moved onto test function (e.g. two IPB for grad^2) */
load("constDiffusion-calc/ConstDiffusionFuncs-surf-C")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Indicate the mininimum and maximum dimensinality for which
   you wish to generate kernels. The smallest possible is 1 and
   the largest 6. This will generate a multitude of kernels
   to allow the user to add diffusion in any subset of directions. */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 4$

/* Maximal order basis. */
maxPolyOrder_Max : 1$
minDim_Max : 1$
maxDim_Max : 0$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 4$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","max","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Max, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cD : 1 thru maxDim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      /* Second order diffusion. */
      diffOrder : 2,
      disp(printf(false,sconcat("Creating surface ConstDiffusion2", bName[bInd]," ~axp~a"),cD,polyOrder)),
      fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh       : openw(fname),
      printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
      funcName : sconcat("const_diffusion", diffOrder, "_surf"),
      calcConstDiffusionSurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      close(fh),

      /* Hyper (grad^4) diffusion. */
      diffOrder : 4,
      disp(printf(false,sconcat("Creating surface ConstDiffusion4", bName[bInd]," ~axp~a"),cD,polyOrder)),
      fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh       : openw(fname),
      printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
      funcName : sconcat("const_diffusion", diffOrder, "_surf"),
      calcConstDiffusionSurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      close(fh),

      /* Hyper (grad^6) diffusion. */
      if (polyOrder > 1) then (
        diffOrder : 6,
        disp(printf(false,sconcat("Creating surface ConstDiffusion6", bName[bInd]," ~axp~a"),cD,polyOrder)),
        fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh       : openw(fname),
        printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
        funcName : sconcat("const_diffusion", diffOrder, "_surf"),
        calcConstDiffusionSurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
        close(fh)
      ),
  
      /* boundarySurf kernels compute surface contribution that we
         do not want to zero-out at the boundary. */
      /* Second order diffusion. */
      diffOrder : 2,
      disp(printf(false,sconcat("Creating boundary surface ConstDiffusion2", bName[bInd]," ~axp~a"),cD,polyOrder)),
      fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_boundary_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh       : openw(fname),
      printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
      funcName : sconcat("const_diffusion", diffOrder, "_boundary_surf"),
      calcConstDiffusionBoundarySurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      close(fh),

      /* Hyper (grad^4) diffusion. */
      diffOrder : 4,
      disp(printf(false,sconcat("Creating boundary surface ConstDiffusion4", bName[bInd]," ~axp~a"),cD,polyOrder)),
      fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_boundary_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh       : openw(fname),
      printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
      funcName : sconcat("const_diffusion", diffOrder, "_boundary_surf"),
      calcConstDiffusionBoundarySurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      close(fh),

      /* Hyper (grad^6) diffusion. */
      if (polyOrder > 1) then (
        diffOrder : 6,
        disp(printf(false,sconcat("Creating boundary surface ConstDiffusion6", bName[bInd]," ~axp~a"),cD,polyOrder)),
        fname    : sconcat("~/max-out/const_diffusion", diffOrder, "_boundary_surf_", cD, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh       : openw(fname),
        printf(fh, "#include <gkyl_const_diffusion_kernels.h> ~%"),
        funcName : sconcat("const_diffusion", diffOrder, "_boundary_surf"),
        calcConstDiffusionBoundarySurfUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
        close(fh)
      )
    )
  )
);