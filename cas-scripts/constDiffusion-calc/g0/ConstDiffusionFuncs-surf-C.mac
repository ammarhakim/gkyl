load("modal-basis")$
load("out-scripts");
load(stringproc)$
load("recovery")$
fpprec : 24$

/* This script generates the kernels needed for adding the
   contributions from diffusion (grad^2, grad^4, & grad^6)
  in all directions using two integrations by parts. */

surfLabels : [x1, x2, x3, x4, x5, x6]$

/* Functions loadBasisX and getDirCombos ought to match those in the
   header-generating script. */

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

getDirCombos(varsIn) := block([dirCombosSet,dirCombos,d],
  dirCombosSet : setify([]),
  for d : 1 thru length(varsIn) do (
    dirCombosSet : union(dirCombosSet,powerset(setify(varsIn),d))
  ),
  dirCombos : full_listify(dirCombosSet),
  dirCombos : makelist(sort(dirCombos[i],lambda([a,b],slength(string(a)) < slength(string(b)))),i,1,length(dirCombos)),
  return(dirCombos)
)$


/* Given the value of the recovery polynomial (fRec) and its derivative
   (frecP) at the interface, this function computes the increments and
   writes them to the kernel file. */
compWriteIncr(varsIn, basisIn, dirIn, fRecOrd, isBoundSurf) := block([cv,surfVars,incr_s1,incr_s2,clst,i,numB,diffOrder],

  cv       : varsIn[dirIn],
  surfVars : delete(cv,varsIn),
  numB     : length(basisIn),

  diffOrder : fRecOrd[1],
  nuSign    : (-1)^(diffOrder/2+1),

  /* Contribution to vector to the left and right of the boundary. */
  /* incr_r2 has 3 minus signs. One comes from the second integration
     by parts, another from evaluating at upper surface Minus lower
     surface, and the last one from evaluating at cv=-1. */
  if (diffOrder=2) then (
    fRec0  : fRecOrd[2],
    fRecP0 : fRecOrd[3],

    incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),fRecP0),
              calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),fRec0)],
  
    incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),fRecP0),
              -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),fRec0)]
  ) elseif (diffOrder=4) then (
    if isBoundSurf then (
      /* NOTE: THE RIGHT UPDATE INVOLVES THE LEFT BC, AND THE LEFT UPDATE INVOLVES THE RIGHT BC */
      fRecR : fRecOrd[3],
      fRecL : fRecOrd[4],

      incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRecL,cv,3))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRecL,cv,2))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRecL,cv))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,fRecL))],
  
      incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRecR,cv,3))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRecR,cv,2))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRecR,cv))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,fRecR))]
    )
    else (
      fRec : fRecOrd[2],

      incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRec,cv,3))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,2))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,fRec))],
  
      incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRec,cv,3))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,2))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,fRec))]
    )
  ) elseif (diffOrder=6) then (
    if isBoundSurf then (
      /* NOTE: THE RIGHT UPDATE INVOLVES THE LEFT BC, AND THE LEFT UPDATE INVOLVES THE RIGHT BC */
      fRecR : fRecOrd[3],
      fRecL : fRecOrd[4],

      incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRecL,cv,5))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRecL,cv,4))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRecL,cv,3))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,diff(fRecL,cv,2))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,4)),subst(cv=0,diff(fRecL,cv))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,5)),subst(cv=0,fRecL))],
  
      incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRecR,cv,5))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRecR,cv,4))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRecR,cv,3))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,diff(fRecR,cv,2))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,4)),subst(cv=0,diff(fRecR,cv))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,5)),subst(cv=0,fRecR))]
    )
    else (
      fRec : fRecOrd[2],

      incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRec,cv,5))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,4))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv,3))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,diff(fRec,cv,2))),
        calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,4)),subst(cv=0,diff(fRec,cv))),
        calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,5)),subst(cv=0,fRec))],
  
      incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRec,cv,5))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,4))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv,3))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,diff(fRec,cv,2))),
        -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,4)),subst(cv=0,diff(fRec,cv))),
        -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,5)),subst(cv=0,fRec))]
    )
  ),
  
  writeIncr(incr_l,incr_r,subList,incrList) := block([clst,ilI,oI,incrVar,incr_s,i,incr_rOut,incr_lOut],
    /* Perform a last minute substitution (subList) and write the
       increments in incrl_l,incr_r that are listed in incrList. */
    clst      : [wxr, dvxr],
    incr_rOut : makelist(0,i,1,numB),
    incr_lOut : makelist(0,i,1,numB),
    /* Here we will loop over the increments we wish to apply since, for example, in the
       boundarySurf terms we may wish to not apply the flux term (for zero-flux BCs). */
    for ilI : 1 thru length(incrList) do (
      oI : incrList[ilI],

      incrVar : eval_string(sconcat("incr",oI)),
      writeCExprsCollect1(incrVar, subst(subList,incr_r[oI]), clst),
      printf(fh,"~%"),
  
      incr_s : makelist(incrVar[i-1], i, 1, numB),
      /* Don't do coefficients where the increment is zero */
      for i : 1 thru numB do (
        if (incr_r[oI][i] = 0) then incr_s[i] : 0
      ), 
      incr_rOut : incr_rOut+incr_s,
  
      signs : makelist(1,i,1,numB),
      for i : 1 thru numB do (
        if (incr_r[oI][i] = 0) then
          false
        else
          signs[i] : fullratsimp(incr_l[oI][i]/incr_r[oI][i])
      ),
      incr_s : makelist(signs[i]*incrVar[i-1], i, 1, numB),
      /* Don't do coefficients where the increment is zero */
      for i : 1 thru numB do (
        if (incr_r[oI][i] = 0) then
          incr_s[i] : 0
      ), 
      incr_lOut : incr_lOut+incr_s
    ),
    return([incr_rOut,incr_lOut])
  ),

  if isBoundSurf then (
    if (diffOrder = 2) then (
      addIncrs : makelist(i,i,2,diffOrder),
      printf(fh, "  if (idxr[~a] == 1) {~%", dir-1),

      subList    : cons(pmOne=-1,makelist(fSkin[i]=fr[i],i,0,numB-1)),
      incrOutLst : writeIncr(incr_l,incr_r,subList,addIncrs),
      writeCIncrExprs1(outr, nuSign*rdxFnur*incrOutLst[1]),

      printf(fh, "~%  } else {~%"),

      subList    : cons(pmOne=1,makelist(fSkin[i]=fl[i],i,0,numB-1)),
      incrOutLst : writeIncr(incr_l,incr_r,subList,addIncrs),
      writeCIncrExprs1(outl, nuSign*rdxFnul*incrOutLst[2]),

      printf(fh, "~%  }~%")
    ) else (
      addIncrs : makelist(i,i,1,diffOrder),
      printf(fh, "  if (idxr[~a] == 1) {~%", dir-1),

      subList    : [],
      incrOutLst : writeIncr(incr_r,incr_r,subList,addIncrs),
      writeCIncrExprs1(outr, nuSign*rdxFnur*incrOutLst[1]),

      printf(fh, "~%  } else {~%"),

      subList    : [],
      incrOutLst : writeIncr(incr_l,incr_l,subList,addIncrs),
      writeCIncrExprs1(outl, nuSign*rdxFnul*incrOutLst[2]),

      printf(fh, "~%  }~%")
    )
  ) else (
    addIncrs   : makelist(i,i,1,diffOrder),
    subList    : [],
    incrOutLst : writeIncr(incr_l,incr_r,subList,addIncrs),
    writeCIncrExprs1(outr, nuSign*rdxFnur*incrOutLst[1]),
    printf(fh, "~%"),
    writeCIncrExprs1(outl, nuSign*rdxFnul*incrOutLst[2])
  )
)$

calcUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder) := block([hsolOrder],

  tmpLst : loadBasisX(dim, basisFun, polyOrder),
  basis  : tmpLst[1],
  vars   : tmpLst[2],

  numB : length(basis),

  /* Variables. */
  cv       : vars[dir],
  surfVars : delete(cv,vars),

  /* Recovery polynomial and its coefficients. */
  hOrder : 2*polyOrder+1,
  h_e    : calcRecov2CellGen(basisFun,cv,vars,polyOrder,dg(makelist(fl[i],i,0,numB)), dg(makelist(fr[i],i,0,numB))),
  hsol   : cons(subst(cv=0,h_e),makelist(subst(cv=0,diff(h_e,cv,ord)/(ord!)),ord,1,hOrder)),

  printf(fh,"void ~a~a_~ax_~a_p~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double* restrict outl, double* restrict outr) ~%{ ~%", funcNm, surfLabels[dir], dim, basisFun, polyOrder),
  printf(fh,"  // w[~a]:     Cell-center coordinates.~%",dim),
  printf(fh,"  // dx[~a]:    Cell spacing.~%",dim),
  printf(fh,"  // nu[~a]:    Diffusion coefficient (collisionality).~%",dim),
  printf(fh,"  // fl/fr:     Input function in left/right cells.~%"),
  printf(fh,"  // outl/outr: Output function (right-hand-side of DG update) in left/right cells ~%"),
  numFac : 2.0^diffOrder,
  side : ["l","r"],
  for sI : 1 thru 2 do (
    denFac : sconcat("dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]"),
    for ef : 2 thru diffOrder/2 do (
      denFac : sconcat(denFac,"*dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]")
    ),
    printf(fh,sconcat("  double rdxFnu",side[sI]," = ~a*nu[~a]/(~a); ~%"), numFac, dir-1, denFac)
  ),
  printf(fh,"~%"),
  
  for oI : 1 thru diffOrder do (
    printf(fh,sconcat("  double incr",oI,"[~a]; ~%"), numB)
  ),
  printf(fh,"~%"),

  if (diffOrder = 2) then (
    hsolOrder : [diffOrder, hsol[1], hsol[2]]
  ) else (
    hsolOrder : [diffOrder, h_e]
  ),
  compWriteIncr(vars, basis, dir, hsolOrder, false),
  
  printf(fh, "} ~%")
);

calcBoundaryUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder) := block([hsolOrder],

  tmpLst : loadBasisX(dim, basisFun, polyOrder),
  basis  : tmpLst[1],
  vars   : tmpLst[2],

  numB : length(basis),

  /* Variables. */
  cv       : vars[dir],
  surfVars : delete(cv,vars),

  /* Recovery polynomial and its coefficients. */
  hOrder : polyOrder,
  h_e    : doExpand1(fSkin,basis),
  if (diffOrder = 4) then ( 
    h_e_bcl    : calcRecov2CellGen(basisFun,cv,vars,polyOrder, bcg([val=0, der=1], [val=0, der=3]), dg(makelist(fr[i],i,0,numB))),
    h_e_bcr    : calcRecov2CellGen(basisFun,cv,vars,polyOrder,dg(makelist(fl[i],i,0,numB)), bcg([val=0, der=1], [val=0, der=3]))
  ) elseif (diffOrder=6) then (
    h_e_bcl    : calcRecov2CellGen(basisFun,cv,vars,polyOrder, bcg([val=0, der=1], [val=0, der=3], [val=0, der=5]), dg(makelist(fr[i],i,0,numB))),
    h_e_bcr    : calcRecov2CellGen(basisFun,cv,vars,polyOrder,dg(makelist(fl[i],i,0,numB)), bcg([val=0, der=1], [val=0, der=3], [val=0, der=5]))
  ),
  /* Make the following substitution so that at the boundaries
     evaluation at cv=0 is equivalent to evaluating at cv=+1,-1. */
  h_e    : subst(cv=cv+pmOne,h_e),
  hsol   : cons(subst(cv=0,h_e),makelist(subst(cv=0,diff(h_e,cv,ord)/(ord!)),ord,1,hOrder)),

  printf(fh,"void ~a~a_~ax_~a_p~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nu, const double *fl, const double *fr, double* restrict outl, double* restrict outr) ~%{ ~%", funcNm, surfLabels[dir], dim, basisFun, polyOrder),
  printf(fh,"  // w[~a]:     Cell-center coordinates.~%",dim),
  printf(fh,"  // dx[~a]:    Cell spacing.~%",dim),
  printf(fh,"  // idx[~a]:   Current grid index.~%",dim),
  printf(fh,"  // nu[~a]:    Diffusion coefficient (collisionality).~%",dim),
  printf(fh,"  // fl/fr:     Input function in left/right cells.~%"),
  printf(fh,"  // outl/outr: Output function (right-hand-side of DG update) in left/right cells ~%"),
  numFac : 2.0^diffOrder,
  side : ["l","r"],
  for sI : 1 thru 2 do (
    denFac : sconcat("dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]"),
    for ef : 2 thru diffOrder/2 do (
      denFac : sconcat(denFac,"*dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]")
    ),
    printf(fh,sconcat("  double rdxFnu",side[sI]," = ~a*nu[~a]/(~a); ~%"), numFac, dir-1, denFac)
  ),
  printf(fh,"~%"),
  
  for oI : 1 thru diffOrder do (
    printf(fh,sconcat("  double incr",oI,"[~a]; ~%"), numB)
  ),
  printf(fh,"~%"),

  if (diffOrder = 2) then (
    hsolOrder : [diffOrder, hsol[1], hsol[2]]
  ) else (
    hsolOrder : [diffOrder, h_e, h_e_bcl, h_e_bcr]
  ),
  compWriteIncr(vars, basis, dir, hsolOrder, true),

  printf(fh, "} ~%")
);

calcConstDiffusionSurfUpdater(fh, funcNm, dim, basisFun, polyOrder, diffOrder) := block([dir],
  for dir : 1 thru dim do (
    calcUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder)
  )
)$

calcConstDiffusionBoundarySurfUpdater(fh, funcNm, dim, basisFun, polyOrder, diffOrder) := block([dir],
  for dir : 1 thru dim do (
    calcBoundaryUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder)
  )
)$