/* For single integration by parts use ConstDiffusionSIBP-vol,
   for double integration by parts use ConstDiffusion-vol */
load("constDiffusion-calc/ConstDiffusion-vol")$
load("constDiffusion-calc/ConstDiffusionVarCoeff-vol")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Indicate the mininimum and maximum dimensinality for which
   you wish to generate kernels. The smalles possible is 1 and
   the largest 6. This will generate a multitude of kernels
   to allow the user to add diffusion in any subset of directions. */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 2$

/* Maximal order basis. */
maxPolyOrder_Max : 1$
minDim_Max : 1$
maxDim_Max : 0$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$


for bInd : 1 thru length(bName) do (
  for cD : minDim[bInd] thru maxDim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : 1 thru maxPolyOrderB do (

      disp(printf(false,sconcat(" Creating volume ConstDiffusion", bName[bInd], " ~axP~a"),cD,polyOrder)),
      fname    : sconcat("~/max-out/ConstDiffusion", bName[bInd], cD, "xP", polyOrder, ".cpp"),
      fh       : openw(fname),
      printf(fh, "#include <ConstDiffusionModDecl.h> ~%"),

      /* Second order diffusion. */
      diffOrder : 2,
      funcName  : sconcat("ConstDiffusionVol", cD, "x", bName[bInd]),
      calcConstDiffusionVolUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      /* Fourth order hyperdiffusion. */
      diffOrder : 4,
      funcName  : sconcat("ConstHyperDiffusion",diffOrder,"Vol", cD, "x", bName[bInd]),
      calcConstDiffusionVolUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),
      if (polyOrder > 1) then (
        diffOrder : 6,
        funcName  : sconcat("ConstHyperDiffusion",diffOrder,"Vol", cD, "x", bName[bInd]),
        calcConstDiffusionVolUpdater(fh, funcName, cD, bName[bInd], polyOrder, diffOrder)
      ),
      
      /* Second order diffusion with spatially varying coefficient. */
      diffOrder : 2,
      funcName  : sconcat("ConstDiffusionVarCoeffVol", cD, "x", bName[bInd]),
      buildConstDiffusionVarCoeffVol(fh, funcName, cD, bName[bInd], polyOrder, diffOrder),

      close(fh)

    )
  )
);
