/* Generate the header file for the ConsDiffusion kernels. */

/* ...... USER INPUTS........ */

/* Indicate the mininimum and maximum dimensionality for which
   you wish to generate kernels. The smallest possible is 1 and
   the largest 6. This will generate a multitude of kernels
   to allow the user to add diffusion in any subset of directions. */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minDim_Ser : 1$
maxDim_Ser : 6$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minDim_Max : 1$
maxDim_Max : 6$

/* Tensor basis. */
maxPolyOrder_Tensor : 3$
minDim_Tensor : 1$
maxDim_Tensor : 4$

/* ...... END OF USER INPUTS (maybe)........ */

surfLabels : [X1, X2, X3, X4, X5, X6]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$

/* Functions loadBasisX and getDirCombos ought to match those in the
   kernel-generating scripts. */

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

getDirCombos(varsIn) := block([dirCombosSet,dirCombos,d],
  dirCombosSet : setify([]),
  for d : 1 thru length(varsIn) do (
    dirCombosSet : union(dirCombosSet,powerset(setify(varsIn),d))
  ),
  dirCombos : full_listify(dirCombosSet),
  dirCombos : makelist(sort(dirCombos[i],lambda([a,b],slength(string(a)) < slength(string(b)))),i,1,length(dirCombos)),
  return(dirCombos)
)$

/* Open new header file. */
fh : openw("~/max-out/ConstDiffusionModDecl.h")$

printf(fh, "#ifndef CONSTDIFFUSION_MOD_DECL_H ~%")$
printf(fh, "#define CONSTDIFFUSION_MOD_DECL_H ~%")$
printf(fh, "~%"),
printf(fh, "#include <cmath> ~%")$
printf(fh, "~%"),
printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%"),

for bInd : 1 thru length(bName) do (
  for cD : 1 thru maxDim[bInd] do (

    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>3 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : 1 thru maxPolyOrderB do (

      tmpLst : loadBasisX(cD,  bName[bInd], polyOrder),
      vars   : tmpLst[2],
      /* For a given dimensionality get the combinations of
         directions in which to apply diffusion. */
      diffDirCombos : getDirCombos(vars),

      for diffDirs in diffDirCombos do (

        diffDirNum : length(diffDirs),
        diffDirInP : makelist(sublist_indices(vars,lambda([x], x=diffDirs[i]))[1],i,1,diffDirNum),
    
        diffDirsStr :"",
        for dI in diffDirInP do (diffDirsStr : sconcat(diffDirsStr,string(dI))),

        printf(fh, "double ConstDiffusionVol~ax~aP~a_diffDirs~a(const double *w, const double *dx, const double *nu, const double *f, double *out); ~%", cD, bName[bInd], polyOrder, diffDirsStr),
        printf(fh, "double ConstHyperDiffusion4Vol~ax~aP~a_diffDirs~a(const double *w, const double *dx, const double *nu, const double *f, double *out); ~%", cD, bName[bInd], polyOrder, diffDirsStr),
        if (polyOrder>1) then (
          printf(fh, "double ConstHyperDiffusion6Vol~ax~aP~a_diffDirs~a(const double *w, const double *dx, const double *nu, const double *f, double *out); ~%", cD, bName[bInd], polyOrder, diffDirsStr)
        ),
        printf(fh, "double ConstDiffusionVarCoeffVol~ax~aP~a_diffDirs~a(const double *w, const double *dx, const double *nu, const double *f, double *out); ~%", cD, bName[bInd], polyOrder, diffDirsStr)
      ),

      for dir : 1 thru cD do (
        printf(fh, "void ConstDiffusionSurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstDiffusionBoundarySurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstHyperDiffusion4Surf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstHyperDiffusion4BoundarySurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        if (polyOrder>1) then (
          printf(fh, "void ConstHyperDiffusion6Surf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
          printf(fh, "void ConstHyperDiffusion6BoundarySurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir])
        ),
        printf(fh, "void ConstDiffusionVarCoeffSurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nul, const double *nur, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstDiffusionVarCoeffBoundarySurf~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nul, const double *nur, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        if polyOrder=1 then (
          /* Add kernels for positivity preserving algorithm. */
          printf(fh, "void ConstDiffusionSurfPositivity~ax~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr); ~%", cD, bName[bInd], polyOrder, surfLabels[dir])
        ),
        /* Kernels that implement BCs for constDiffusion term. */
        printf(fh, "void ConstDiffusionBC~ax~aP~a_Dirichlet_~alower(const double dx, const double *fSkin, const double fBC, double *fGhost);~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstDiffusionBC~ax~aP~a_Dirichlet_~aupper(const double dx, const double *fSkin, const double fBC, double *fGhost);~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstDiffusionBC~ax~aP~a_Neumann_~alower(const double dx, const double *fSkin, const double fpBC, double *fGhost);~%", cD, bName[bInd], polyOrder, surfLabels[dir]),
        printf(fh, "void ConstDiffusionBC~ax~aP~a_Neumann_~aupper(const double dx, const double *fSkin, const double fpBC, double *fGhost);~%", cD, bName[bInd], polyOrder, surfLabels[dir])
      ),
      printf(fh, "~%")
    ),
    printf(fh, "~%")
  ),
  printf(fh, "~%")
)$

printf(fh, "} ~%")$
printf(fh, "~%"),

printf(fh, "#endif ~%")$

close(fh)$
