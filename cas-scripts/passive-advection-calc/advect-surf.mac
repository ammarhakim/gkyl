load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("positivity-calc/fhatAL-calc")$
load("scifac")$
fpprec : 24$

wc : [w1, w2, w3]$
derivfac : [dfac1, dfac2, dfac3]$

cvars : [X1, X2, X3]$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* set up some vector calculus functions */
load("vect")$
fgrad(f):= ev(express(grad(f)),diff)*derivfacsC$

positivityFluxLimiter(outl_c, outr_c, vars, basis, polyOrder, surfDir, fl_e, fr_e) := block(
  /* local variables for this function */
  [outl_e, outr_e, ndim, nodes, surfNodes, posProjBasis, posSurfProjBasis, indP, indM],

  /* Expand outl and outr on volume basis */
  outl_e : outl_c.basis,
  outr_e : outr_c.basis,

  ndim : length(vars),
 
  /* Get positivity surface projection basis */
  nodes : eval_string(sconcat("nodes", ndim, "xp", polyOrder)),
  posProjBasis : fullratsimp(getNodalBasis(nodes, basis, vars)),
  if ndim>1 then surfNodes : eval_string(sconcat("nodes", ndim-1, "xp", polyOrder))
  else surfNodes : [[1]],

  indP : sublist_indices(args(nodes), lambda([x],x[surfDir]=1)),
  indM : sublist_indices(args(nodes), lambda([x],x[surfDir]=-1)),

  /* Project outl and fl onto positivity basis */
  fl_pos : gcfac(float(calcInnerProdList(vars, 1, posProjBasis, fl_e))),
  fl_posP : makelist(fl_pos[indP[i]],i,1,length(indP)),

  outl_pos : gcfac(float(calcInnerProdList(vars, 1, posProjBasis, outl_e))),
  outl_posP : makelist(outl_pos[indP[i]],i,1,length(indP)),
  outl_posM : makelist(outl_pos[indM[i]],i,1,length(indM)),

  /* Project outr and fr onto positivity basis */
  fr_pos : gcfac(float(calcInnerProdList(vars, 1, posProjBasis, fr_e))),
  fr_posM : makelist(fr_pos[indM[i]],i,1,length(indM)),

  outr_pos : gcfac(float(calcInnerProdList(vars, 1, posProjBasis, outr_e))),
  outr_posP : makelist(outr_pos[indP[i]],i,1,length(indP)),
  outr_posM : makelist(outr_pos[indM[i]],i,1,length(indM)),

  /* Set up positivity weights */
  printf(fh, "  double fluxFracL, fluxFracR, limFac=1.0;~%"),
  printf(fh, "  double outlPos[~a], outrPos[~a]; ~%", length(posProjBasis), length(posProjBasis)),
  printf(fh, "  fluxFracL = positivityWeightByDirL[0] == 0. ? ~a : positivityWeightByDirL[~a]/positivityWeightByDirL[0]; ~%", float(1/(ndim)), surfDir),
  printf(fh, "  fluxFracR = positivityWeightByDirR[0] == 0. ? ~a : positivityWeightByDirR[~a]/positivityWeightByDirR[0]; ~%", float(1/(ndim)), surfDir),

  /* Write coefficients of outl and outr on positivity basis */
  writeCExprsNoExpand1(outlPos, outl_pos),
  writeCExprsNoExpand1(outrPos, outr_pos),
  flush_output(fh),

  /* Loop over positivity surface basis, and calculate limiters */
  for i : 1 thru length(surfNodes) do (
     printf(fh, "  if(outlPos[~a] < EPSILON) limFac = std::min(1.0, -fluxFracL*(~a)/dtApprox/outlPos[~a]); ~%", indP[i]-1, fl_posP[i], indP[i]-1),
     printf(fh, "  else limFac = 1.0; ~%"),
     printf(fh, "  if(outrPos[~a] < EPSILON) limFac = std::min(limFac, -fluxFracR*(~a)/dtApprox/outrPos[~a]); ~%", indM[i]-1, fr_posM[i], indM[i]-1),
     printf(fh, "  if(limFac < 0.) limFac = 0.; ~%"),
     
     printf(fh, "  outlPos[~a] *= limFac; ~%", indP[i]-1),
     printf(fh, "  outlPos[~a] *= limFac; ~%", indM[i]-1),
     printf(fh, "  outrPos[~a] *= limFac; ~%", indP[i]-1),
     printf(fh, "  outrPos[~a] *= limFac; ~%", indM[i]-1),
     flush_output(fh)
  ),

  /* Get positivity surface expansion basis */
  posExpdBasis:makelist(nodesub(basis, vars, nodes)[i].basis,i,1,length(basis)),

  /* Expand on positivity surface expansion basis, and then project back onto modal basis */
  outl_pos_e : doExpand1(outlPos,posExpdBasis),
  outr_pos_e : doExpand1(outrPos,posExpdBasis),

  outl_c : gcfac(float(fullratsimp(calcInnerProdList(vars, 1, basis, outl_pos_e)))),
  outr_c : gcfac(float(fullratsimp(calcInnerProdList(vars, 1, basis, outr_pos_e)))),
  [outl_c, outr_c]
)$

calcUpdateInDir(surfDir, fh, funcNm, cdim, basisFun, polyOrder) := block([],
kill(varsC, varsC, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x"),
load(modNm),
  bC : basisC[polyOrder],
  numC : length(bC),
  volfac : 1,
  /* get surface variable */
  surfVar : varsC[surfDir],
  /* remove surface variable from integrand of surface integrals */
  surfIntVars : delete(surfVar,varsC),
  dirlabel : cvars[surfDir],
  dfacSurf : derivfac[surfDir], 
  wSurf : wc[surfDir],

  /* remove volume contribution from surface variable, which is not integrated */
  surfac : fullratsimp(volfac*dfacSurf),

  print("Working on ", funcNm, "_", dirlabel, "_P", polyOrder),
  if positivity then (
     printf(fh, "double ~a_~a_P~a(const double *w, const double *dxv, const double dtApprox, const double *positivityWeightByDirL, const double *positivityWeightByDirR, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, dirlabel, polyOrder)
  ) else (
     printf(fh, "double ~a_~a_P~a(const double *w, const double *dxv, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, dirlabel, polyOrder)
  ),
  
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. ~%"),

  for dir : 1 thru cdim do (
    printf(fh, "  double dfac~a = 2.0/dxv[~a]; ~%", dir, dir-1),
    printf(fh, "  double w~a = w[~a]; ~%", dir, dir-1)
  ),

  for dir : 1 thru cdim do (
    printf(fh, "  const double *v~a = &fr[~a]; ~%", dir, numC*(dir))
  ),
  flush_output(fh),

  printf(fh, "  double incr[~a]; ~%", length(bC)),
  flush_output(fh),

  /* expand distribution function on basis */
  fL_expd:doExpand1(fl,bC),
  fR_expd:doExpand1(fr,bC),
  v_expd:[],
  for dir : 1 thru cdim do (
    vd : verbify(sconcat("v",dir)),
    v_expd:append(v_expd, [doExpand1(vd,bC)])
  ),

  /* calculate phase space velocity alpha in direction of surfVar */
  /* we assume alpha.n is continuous across boundary */
  alpha_expd : v_expd[surfDir],
  /* calculate expression for surface-averaged alpha, and print to c variable alpha0 */
  alpha0expr : gcfac(fullratsimp(innerProd(surfIntVars, 1, subst(surfVar=-1,alpha_expd), subst(surfVar=-1, bC[1]))*bC[1])),
  printf(fh, "  // surface-averaged phase velocity in this direction ~%"),
  printf(fh, "  double alpha0 = ~a; ~%~%", float(alpha0expr)),
  flush_output(fh),

  /* generate surface basis */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsC,1,bC,subst([surfVar^2=var2,var2=1/3,surfVar=0],bC)))*bC),

  /* project full alpha expression evaluatated at interior surface onto surface basis and print to c variable alpha */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  alpha_k : fullratsimp(innerProd(surfIntVars, 1, bSurf, subst(surfVar=-1,alpha_expd))),
  flush_output(fh),
  writeCExprsNoExpand1(alpha, subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2],alpha_k)),
  alphaNoZero_k : doMakeExprLst(alpha_k, alpha),
  alphaSurf_expd : doExpandLst(alphaNoZero_k, bSurf),
  flush_output(fh),

  if (alphaSurf_expd = 0) then (
    printf(fh, "  // alpha == 0, so nothing to do ~%"),
    printf(fh, "  return std::abs(alpha0); ~%"),
    printf(fh, "} ~%"),
    flush_output(fh)
  )
  else (
    if cdim>1 then (
      printf(fh, "#if upwindType == SURFAVG ~%")
    ),
    printf(fh, "  if (alpha0>0) { ~%"),
    fhatSurf_expd : subst(surfVar=1, fL_expd),

    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
    incr_r : facsum(fullratsimp(t),dxv),
    writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
    flush_output(fh),

    printf(fh, "  } else { ~%"),
    fhatSurf_expd : subst(surfVar=-1, fR_expd),

    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
    incr_r : facsum(fullratsimp(t),dxv),
    writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
    printf(fh, "  }~%"),
    flush_output(fh),

    if cdim>1 then (
      printf(fh, "#elif upwindType == QUAD ~%"),
      printf(fh, "double fupwind[~a];~%", length(bSurf)),
      printf(fh, "double fupwindQuad[~a];~%", length(bSurf)),
      printf(fh, "double alphaQuad;~%"),
      if polyOrder=1 then quad:1/sqrt(3),
      if polyOrder=2 then quad:sqrt(3/5),
      nodes : eval_string(sconcat("nodes", cdim-1, "xp", polyOrder)),
      /* function to evaluate expansion g at surface quadrature nodes */
      /* evaluate fl, fr, and alpha at surface quadrature nodes */
      frQ:gcfac(float(nodesub(subst(surfVar=-1,fR_expd), surfIntVars, nodes))),
      flQ:gcfac(float(nodesub(subst(surfVar=1,fL_expd), surfIntVars, nodes))), 
      /* note: alphaSurf_expd is already a surface expansion */
      alphaq:gcfac(float(nodesub(alphaSurf_expd, surfIntVars, nodes))),
      /* determine upwinding at each surface quadrature node */
      fupQ : gcfac(.5*(flQ+frQ)+.5*sgn(alphaQuad)*(flQ-frQ)),
      for i:1 thru length(alphaq) do (
      printf(fh, "  alphaQuad = ~a; ~%", alphaq[i]),
      printf(fh, "  fupwindQuad[~a] = ~a; ~%", i-1, fupQ[i])
      ),
      flush_output(fh),
      /* use modToNod transformation to get modal surface expansion from nodal quadrature points */
      modToNod:fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodes,bSurf,surfIntVars)),
      fupwind_k:invert(transpose(float(modToNod))).makelist(fupwindQuad[i-1],i,1,length(nodes)),
      fupwind_k:gcfac(makelist(fupwind_k[i][1],i,1,length(fupwind_k))),
      /* write coefficients of modal surface expansion fupwind */
      writeCExprsNoExpand1(fupwind, fupwind_k),
      fhatSurf_expd:doExpand1(fupwind,bSurf),
      flush_output(fh),

      t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
      incr_r : facsum(fullratsimp(t),dxv),
      writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
      printf(fh, "~%"),
      flush_output(fh),
      printf(fh, "#endif ~%")
    ),

    incr_s : makelist(incr[i-1], i, 1, length(bC)),
    for i : 1 thru length(bC) do (
      if (incr_r[i] = 0) then incr_s[i] : 0
    ),
    outr_c : incr_s,
    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=1, bC), fhatSurf_expd),
    incr_l : -t,
    signs : fullratsimp(incr_l/incr_r),
    incr_s : makelist(signs[i]*incr[i-1], i, 1, length(bC)),
    for i : 1 thru length(bC) do (
      if (incr_r[i] = 0) then incr_s[i] : 0
    ),
    outl_c : incr_s,

    if (positivity) then (
      [outl_c, outr_c] : positivityFluxLimiter(outl_c, outr_c, varsC, bC, polyOrder, surfDir, fL_expd, fR_expd)
    ) 
  ),

  writeCIncrExprsNoExpand1(outr, outr_c),  
  printf(fh, "~%"),
  flush_output(fh),
  writeCIncrExprsNoExpand1(outl, outl_c),
  flush_output(fh),

  printf(fh, "  return std::abs(alpha0); ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$

calcAdvectionSurfUpdater(fh, funcNm, cdim, basisFun,p) := block([],
  for dir : 1 thru cdim do (
    calcUpdateInDir(dir, fh, funcNm, cdim, basisFun,p)
  )
)$

for pos: 0 thru 1 do (
if pos=0 then positivity:false
else positivity:true,
if positivity then (posString : "Positivity", cmin:1)
else (posString : "", cmin:1),

for c : cmin thru 3 do (
pmax:2,
for p:2 thru pmax do (
/* separate file for positivity implementation */
fname : sconcat("~/max-out/PassiveAdvectionSurf", posString, "Ser", c, "xP", p, ".cpp"),
fh : openw(fname),
printf(fh, "#include <PassiveAdvectionModDecl.h> ~%"),
funcName : sconcat("PassiveAdvectionSurf", posString, c, "xSer"),
calcAdvectionSurfUpdater(fh, funcName, c, "Ser", p),
close(fh)
)))$

