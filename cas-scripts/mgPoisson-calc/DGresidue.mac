/* Kernels for computing the residue of the DG Poisson equation
         res = rho + L(phi)
   where L is the Laplacian. */

load("modal-basis");
load("out-scripts");
load("recovery-calc/recovery");
fpprec : 24$

/* This variable obviates some if-statements. */
boundStrKey : [[-1,"L"],[0,""],[1,"U"]]$

/* Iterate (phi) in lower and upper cells along each direction. */
phiL : [phiLx, phiLy, phiLz]$
phiU : [phiUx, phiUy, phiUz]$

/* Cell length factors along each direction. */
rdxL   : [rdxLx, rdxLy, rdxLz]$
rdxU   : [rdxUx, rdxUy, rdxUz]$
rdxLSq : [rdxLxSq, rdxLySq, rdxLzSq]$
rdxUSq : [rdxUxSq, rdxUySq, rdxUzSq]$

/* Types of boundary conditions for which to generate kernels.
     =0 periodic
     =3 Robin (also used for Dirichlet and Neumann)
   For periodic we'll assume ghost cells are filled accordingly
   and use an interior stencil. */
bcTypes  : [0, 3]$
bcStrs   : ["", "Robin"]$
bcKey    : [[bcTypes[1],bcStrs[1]],[bcTypes[2],bcStrs[2]]]$

writeCExprs1sub(lhs, rhs, sublist) := block([expr],
  /* Perform some substitutions before printing. No expand. */
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep     : string(expr[i]),
      outStr : ssubst(sublist[1][2],sublist[1][1],ep),
      for s : 2 thru length(sublist) do (
        outStr : ssubst(sublist[s][2],sublist[s][1],outStr)
      ),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], outStr)
    )
  )
)$

calcDGResidue(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Residue computation for the Poisson equation using an RDG
     discretization. Other options involve LDG and interior
     penalty methods. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  twos : makelist(2,i,1,dim),

  stencilWidth : 3,
  stencilSize  : (stencilWidth-1)*dim+1,

  for polyOrder : 1 thru pMax do (

    bC  : basisC[polyOrder],
    N   : length(bC),

    /* Expansion and coefficients of phi in this (center) cell. */
    phiC_e : doExpand1(phiC,bC),
    phiC_c : makelist(phiC[i],i,0,N-1),

    surfTerms : 0,
    volTerms  : 0,
    for dir : 1 thru dim do (

      /* Expand the iterate (phi) in this (center) cell and
         lower/upper cells along dir dimension. */
      phiL_e : doExpand1(phiL[dir],bC),
      phiU_e : doExpand1(phiU[dir],bC),

      phiL_c : makelist(phiL[dir][i],i,0,N-1),
      phiU_c : makelist(phiU[dir][i],i,0,N-1),

      /* Compute recovery coefficients across boundaries. */
      surfDir           : dir,
      surfVar           : varsC[surfDir],
      remainingSurfVars : delete(surfVar,varsC),
      bCp               : diff(bC,surfVar),

      phiRecL  : getRecov2CellGen(surfVar,twos,polyOrder,phiL_c, phiC_c),
      phiRecU  : getRecov2CellGen(surfVar,twos,polyOrder,phiC_c, phiU_c),
      /* Recovery and its derivative evaluated at the boundary. */
      phiRecL0  : subst(surfVar=0,phiRecL),
      phiRecU0  : subst(surfVar=0,phiRecU),
      phiRecLp0 : subst(surfVar=0,diff(phiRecL,surfVar)),
      phiRecUp0 : subst(surfVar=0,diff(phiRecU,surfVar)),

      /* Surface terms. The rdx and 2 factors account for physical cell length. */
      surfTerms : surfTerms + rdx2SqVol[surfDir-1]*( calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=1,bC),phiRecUp0)
                                                    -calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=1,bCp),phiRecU0) )
                            - rdx2SqVol[surfDir-1]*( calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=-1,bC),phiRecLp0)
                                                    -calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=-1,bCp),phiRecL0) ),

      /* Volume terms. */
      volTerms : volTerms + rdx2SqVol[dir-1]*calcInnerProdList(varsC,1,diff(bC,varsC[dir],2),phiC_e)

    ),

    /* Left-hand-side of the Poisson equation.*/
    poissonLHS : fullratsimp(- ( surfTerms + volTerms )),

    /* The right-hand-side of the Poisson equation is
       just a projection of the source on the basis. */
    rho_e     : doExpand1(rho,bC),
    sourceRHS : volFac*calcInnerProdList(varsC,1,bC,rho_e),

    /* Subtract the LHS from the right-side source to obtain residue. */
    residue_c : fullratsimp(sourceRHS - poissonLHS),

    /* Write kernel. */
    printf(fh, "void ~a_P~a(double **dx, const double *bcVals, const double *rho, double **phi, double *resOut) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // dx:     cell lengths of cells pointed to by the stencil.~%"),
    printf(fh, "  // rho:    right-side source in the current cell.~%"),
    printf(fh, "  // bcVals: values to impose as BCs.~%"),
    printf(fh, "  // phi:    iterate cells pointed to by the stencil.~%"),
    printf(fh, "  // resOut: residue in current cell.~%"),
    printf(fh, "~%"),

    /* Pointers to the cell lengths in cells pointed to by the stencil. */
    printf(fh, "  double *dxC  = dx[0]; ~%"),
    printf(fh, "~%"),

    /* This volume factors appears in front of the right-side source term. */
    volumeFac : (1/2)^dim,
    for dir : 1 thru dim do (
      volumeFac : volumeFac*dxC[dir-1]
    ),
    printf(fh, "  double volFac = ~a; ~%", float(volumeFac)),
    printf(fh, "~%"),

    /* Some factors based on cell lengths. */
    printf(fh, "  double rdx2SqVol[~a]; ~%", dim),
    if (dim=2) then (
      printf(fh, "  double rdx2SqVolSq[~a]; ~%", dim)
    ),

    for dir : 1 thru dim do (
      printf(fh, "  rdx2SqVol[~a]   = volFac*4.0/(dxC[~a]*dxC[~a]); ~%", dir-1, dir-1, dir-1),
      if (dim=2) then (
        printf(fh, "  rdx2SqVolSq[~a] = rdx2SqVol[~a]*rdx2SqVol[~a]; ~%", dir-1, dir-1, dir-1)
      )
    ),
    printf(fh, "~%"),

    /* Pointers to the data in cells pointed to by the stencil. */
    printf(fh, "  double *phiC = phi[0]; ~%"),
    i : 1,
    for d : 1 thru dim do (
      printf(fh, "  double *phiL~a = phi[~a]; ~%", varsC[d], i),
      printf(fh, "  double *phiU~a = phi[~a]; ~%", varsC[d], i+1),
      i : i + 2
    ),
    printf(fh, "~%"),

    /* Write the relaxation stencil. */
    subNum  : 1,    /* Number of lines in for loop below. */
    sublist : makelist(0,i,1,subNum*dim),
    for s : 1 thru dim do (
      sublist[s] : [sconcat("rdx2SqVol[",string(s-1),"]^2"), sconcat("rdx2SqVolSq[",string(s-1),"]")]
    ),
    writeCExprs1sub(resOut,residue_c,sublist),
    printf(fh, "~%"),

    printf(fh, "}~%"),
    printf(fh, "~%")

  )
)$


calcDGResidueBoundary(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Kernels for computing the residual near the boundaries. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  twos : makelist(2,i,1,dim),

  /* This will well with (string) variable selection
   depending on stencil location. */
  sVarsC : copylist(varsC),
  for d : 1 thru dim do (
    sVarsC[d] : string(varsC[d])
  ),
  condVarsC : [[-1,sVarsC],[0,makelist("",i,1,dim)],[1,sVarsC]],

  /* Create a list with 3^dim elements. Each element is itself an dim-long
     list indicating whether the cell has a lower (=-1) or upper (=1)
     boundary, or no boundary (=0) in that direction. */
  cD : 1,
  stencilLoc  : [makelist(0,i,1,dim)],  /* Center stencil, all zeros. */

  for dir : 1 thru dim do (
    /* Loop through cells already added to stencilLoc. */
    for acI : 1 thru 3^(dir-1) do (
      /* Loop over lower and upper. */
      for bI : -1 thru 1 step 2 do (
        stencilLoc : append(stencilLoc, copylist([stencilLoc[acI]])),
        stencilLoc[length(stencilLoc)][dir] : bI
      )
    )
  ),

  for sI : 2 thru length(stencilLoc) do (

    /* Count the number of non-periodic boundaries. */
    npBCs : 0,
    for d : 1 thru dim do (
      if (stencilLoc[sI][d] # 0) then (
        npBCs : npBCs + 1
      )
    ),

    /* Given npBCs non-periodic BCs there are bcN^npBCs possible combinations of 
       of that cell's stencil, assuming there are bcN types of BCs. For now
       only Robin BCs are supported (also used for Dirichlet/Neumann). */
    npBCcombos : makelist([bcTypes[i]],i,2,length(bcTypes)),
    for l : 2 thru npBCs do (
      tmp : copylist(npBCcombos),
      npBCcombos : [],
      for cI : 1 thru length(tmp) do (
        for bI : 2 thru length(bcTypes) do (
          npBCcombos : append(npBCcombos,[ append(tmp[cI],[bcTypes[bI]]) ])
        )
      )
    ),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(npBCcombos) do (

      currBCs : copylist(npBCcombos[bcI]),
      /* It's easier to work with a list of dim elements indicating the BC
         in each direction (rather than npBCcombos), even if it's periodic. */
      nInc : 0,
      for d : 1 thru dim do (
        if (stencilLoc[sI][d] = 0) then (
          currBCs :Â append(firstn(currBCs,d+nInc-1),[0],lastn(currBCs,length(currBCs)-(d+nInc-1))),
          nInc    : nInc+1
        )
      ),

      boundaryStr : "",
      for d : 1 thru dim do (
        boundaryStr : sconcat(boundaryStr,assoc(stencilLoc[sI][d],boundStrKey),
                              assoc(stencilLoc[sI][d],condVarsC)[d],assoc(currBCs[d],bcKey))
      ),
      boundaryStr : sconcat(boundaryStr,"_"),

      /* Don't forget to loop over polynomial order. */
      for polyOrder : 1 thru pMax do (

        printf(fh, "void ~a_~aP~a(double **dx, const double *bcVals, const double *rho, double **phi, double *resOut) ~%{ ~%", funcNm, boundaryStr, polyOrder),
        printf(fh, "  // dx:     cell lengths of cells pointed to by the stencil.~%"),
        printf(fh, "  // rho:    right-side source in the current cell.~%"),
        printf(fh, "  // bcVals: values to impose as BCs.~%"),
        printf(fh, "  // phi:    iterate cells pointed to by the stencil.~%"),
        printf(fh, "  // resOut: residue in current cell.~%"),
        printf(fh, "~%"),

        surfTerms : 0,
        volTerms  : 0,
        for dir : 1 thru dim do (
  
          /* Expand the iterate (phi) in this (center) cell and
             lower/upper cells along dir dimension. Will be replaced by
             boundary condition values below. */
          phiL_e : doExpand1(phiL[dir],bC),
          phiU_e : doExpand1(phiU[dir],bC),
  
          phiL_c : makelist(phiL[dir][i],i,0,N-1),
          phiU_c : makelist(phiU[dir][i],i,0,N-1),
  
          /* Compute recovery coefficients across boundaries. */
          surfDir           : dir,
          surfVar           : varsC[surfDir],
          remainingSurfVars : delete(surfVar,varsC),
          bCp               : diff(bC,surfVar),

          /* Boundary conditions in this direction. Currently just
             Robin (also used for Dirichlet/Neumann), constant along the boundary. */
          if (stencilLoc[sI][dir] = -1) then (
            dirBC    : [bcVals[6*(dir-1)], bcVals[6*(dir-1)+1], bcVals[6*(dir-1)+2]],
            phiRecL  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiC_c, phiU_c, dirBC, [0,0]),
            phiRecU  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiC_c, phiU_c), 

            /* Recovery value and derivative at the boundary. */
            phiRecL0  : subst(surfVar=-2,phiRecL),
            phiRecLp0 : subst(surfVar=-2,diff(phiRecL,surfVar)),
            phiRecU0  : subst(surfVar=0,phiRecU),
            phiRecUp0 : subst(surfVar=0,diff(phiRecU,surfVar))
          ) elseif (stencilLoc[sI][dir] = 1) then (
            dirBC    : [bcVals[6*(dir-1)+3], bcVals[6*(dir-1)+4], bcVals[6*(dir-1)+5]],
            phiRecL  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiL_c, phiC_c),
            phiRecU  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiL_c, phiC_c, [0,0], dirBC),

            /* Recovery value and derivative at the boundary. */
            phiRecL0  : subst(surfVar=0,phiRecL),
            phiRecLp0 : subst(surfVar=0,diff(phiRecL,surfVar)),
            phiRecU0  : subst(surfVar=2,phiRecU),
            phiRecUp0 : subst(surfVar=2,diff(phiRecU,surfVar))
          ) else (
            phiRecL  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiL_c, phiC_c),
            phiRecU  : calcRecov2CellGen(basisFun,surfVar,twos,polyOrder,phiC_c, phiU_c),

            /* Recovery value and derivative at the boundary. */
            phiRecL0  : subst(surfVar=0,phiRecL),
            phiRecU0  : subst(surfVar=0,phiRecU),
            phiRecLp0 : subst(surfVar=0,diff(phiRecL,surfVar)),
            phiRecUp0 : subst(surfVar=0,diff(phiRecU,surfVar))
          ),
  
          /* Surface terms. The rdx and 2 factors account for physical cell length. */
          surfTerms : surfTerms + rdx2SqVol[surfDir-1]*( calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=1,bC),phiRecUp0)
                                                        -calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=1,bCp),phiRecU0) )
                                - rdx2SqVol[surfDir-1]*( calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=-1,bC),phiRecLp0)
                                                        -calcInnerProdList(remainingSurfVars,1.0,subst(surfVar=-1,bCp),phiRecL0) ),
          /* Volume terms. */
          volTerms : volTerms + rdx2SqVol[dir-1]*calcInnerProdList(varsC,1,diff(bC,varsC[dir],2),phiC_e)
  
        ),
  
        /* Left-hand-side of the Poisson equation.*/
        poissonLHS : fullratsimp(- ( surfTerms + volTerms )),
  
        /* The right-hand-side of the Poisson equation is
           just a projection of the source on the basis. */
        rho_e     : doExpand1(rho,bC),
        sourceRHS : volFac*calcInnerProdList(varsC,1,bC,rho_e),
  
        /* Subtract the LHS from the right-side source to obtain residue. */
        residue_c : fullratsimp(sourceRHS - poissonLHS),

        /* Pointers to the cell lengths in cells pointed to by the stencil. */
        printf(fh, "  double *dxC  = dx[0]; ~%"),
        printf(fh, "~%"),

        /* This volume factors appears in front of the right-side source term. */
        volumeFac : (1/2)^dim,
        for dir : 1 thru dim do (
          volumeFac : volumeFac*dxC[dir-1]
        ),
        printf(fh, "  double volFac = ~a; ~%", float(volumeFac)),
        printf(fh, "~%"),

        /* Some factors based on cell lengths. */
        printf(fh, "  double rdx2SqVol[~a]; ~%", dim),
        if (dim=2) then (
          printf(fh, "  double rdx2SqVolSq[~a]; ~%", dim)
        ),

        for dir : 1 thru dim do (
          printf(fh, "  rdx2SqVol[~a]   = volFac*4.0/(dxC[~a]*dxC[~a]); ~%", dir-1, dir-1, dir-1),
          if (dim=2) then (
            printf(fh, "  rdx2SqVolSq[~a] = rdx2SqVol[~a]*rdx2SqVol[~a]; ~%", dir-1, dir-1, dir-1)
          )
        ),
        printf(fh, "~%"),

        /* Pointers to the data in cells pointed to by the stencil. */
        printf(fh, "  double *phiC = phi[0]; ~%"),
        i : 1,
        for d : 1 thru dim do (
          printf(fh, "  double *phiL~a = phi[~a]; ~%", varsC[d], i),
          printf(fh, "  double *phiU~a = phi[~a]; ~%", varsC[d], i+1),
          i : i + 2
        ),
        printf(fh, "~%"),
    
        /* Write the relaxation stencil. */
        subNum  : 2,    /* Number of lines in for loop below. */
        sublist : makelist(0,i,1,subNum*dim),
        for s : 1 thru dim do (
          sublist[subNum*s-1] : [sconcat("rdx2SqVol[",string(s-1),"]^2"), sconcat("rdx2SqVolSq[",string(s-1),"]")],
          sublist[subNum*s]   : [sconcat("rdx2SqVol[",string(s-1),"]^3"), sconcat("rdx2SqVolCu[",string(s-1),"]")]
        ),
        writeCExprs1sub(resOut,residue_c,sublist),
        printf(fh, "~%"),

        printf(fh, "}~%"),
        printf(fh, "~%")

      )
    )

  )

)$


