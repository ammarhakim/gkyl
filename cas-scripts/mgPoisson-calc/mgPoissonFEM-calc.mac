/* Generate kernels for the various elements of a multigrid
   solve of the simple Poisson equation
       - L(phi) = rho
   where L is the Laplacian, using the (continuous Galerkin)
   finite element method (FEM). */

load(stringproc)$
load("mgPoisson-calc/FEMinterBasisOperators")$
load("mgPoisson-calc/FEMproject")$
load("mgPoisson-calc/FEMsmoothers")$
load("mgPoisson-calc/FEMinterGridOperators")$
load("mgPoisson-calc/FEMresidual")$
load("mgPoisson-calc/FEMnorm")$
load("mgPoisson-calc/FEMdataMethods")$
load("mgPoisson-calc/esEnergyFuncs")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Maximal order basis. */
maxPolyOrder_Max : 1$
minCdim_Max : 1$
maxCdim_Max : 0$

/* Tensor product basis. */
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
     
  for c : minCdim[bInd] thru maxCdim[bInd] do (
  /**
    fname : sconcat("~/max-out/MGpoissonFEM", bName[bInd], c, "x", ".cpp"),
    fh : openw(fname),
  
    disp(printf(false,sconcat("Creating ~ax ", bName[bInd]),c)),
  
    printf(fh, "#include <MGpoissonModDecl.h> ~%"),
    printf(fh, " ~%"),
    
    /* Inter-grid operators. */
    funcName : sconcat("MGpoissonFEMprolong", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMprolong", c, "x", bName[bInd]))),
    calcFEMprolongationOp(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    funcName : sconcat("MGpoissonFEMrestrict", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMrestrict", c, "x", bName[bInd]))),
    calcFEMrestrictionOp(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Kernels to translate a DG field into a CG (FEM) field, and viceversa. */
    funcName : sconcat("MGpoissonFEM_DGtoFEM_", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEM_DGtoFEM_", c, "x", bName[bInd]))),
    calcDGtoFEM(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),
    funcName : sconcat("MGpoissonFEM_FEMtoDG_", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEM_FEMtoDG_", c, "x", bName[bInd]))),
    calcFEMtoDG(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Projection of an FEM field onto FEM (nodal) basis. */
    funcName : sconcat("MGpoissonFEMproject", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMproject", c, "x", bName[bInd]))),
    calcFEMproject(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),
    
    /* Jacobi FEM smoothers, */
    funcName : sconcat("MGpoissonFEMDampedJacobi", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMDampedJacobi", c, "x", bName[bInd]))),
    calcJacobiGaussSeidelOp(fh, funcName, c, bName[bInd], maxPolyOrder[bInd],true),

    /* Gaus-Seidel FEM smoothers, */
    funcName : sconcat("MGpoissonFEMDampedGaussSeidel", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMDampedGaussSeidel", c, "x", bName[bInd]))),
    calcJacobiGaussSeidelOp(fh, funcName, c, bName[bInd], maxPolyOrder[bInd],false),

    /* Kernel for computing the residual. */
    funcName : sconcat("MGpoissonFEMresidual", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMresidual", c, "x", bName[bInd]))),
    calcFEMresidual(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* L2 norm of an FEM field. */
    funcName : sconcat("MGpoissonFEML2norm", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEML2norm", c, "x", bName[bInd]))),
    calcL2norm(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Zeroth moment (integral) of an FEM field. */
    funcName : sconcat("MGpoissonFEMM0norm", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMM0norm", c, "x", bName[bInd]))),
    calcM0norm(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Other field data methods. */
    funcName : sconcat("MGpoissonFEMaccuConst", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonFEMaccuConst", c, "x", bName[bInd]))),
    calcAccumulateConst(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    close(fh),
    **/
    
    /* Electrostatic energy kernels. */
    fname : sconcat("~/max-out/MGpoissonESenergy", bName[bInd], c, "x", ".cpp"),
    fh : openw(fname),
    disp(printf(false,sconcat("Creating ~ax ", bName[bInd]),c)),
    printf(fh, "#include <MGpoissonModDecl.h> ~%"),
    printf(fh, " ~%"),

    funcName : sconcat("MGpoissonESenergyDG", c, "x", bName[bInd]),
    disp(printf(false,sconcat("Working on MGpoissonESenergyDG", c, "x", bName[bInd]))),
    esEnergyDGCalc(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),
    close(fh)
    
  )
  
  
)$

