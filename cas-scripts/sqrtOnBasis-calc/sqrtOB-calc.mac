/* Create kernels to compute sqrt(f)^q where f is a DG field via quadrature. */
load("sqrtOnBasis-calc/sqrtOBGaussQuad.mac")$
load(stringproc)$


/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minDim_Ser : 1$
maxDim_Ser : 6$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minDim_Max : 1$
maxDim_Max : 4$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 4$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","max","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$


for bInd : 1 thru length(bName) do (
  for cD : minDim[bInd] thru maxDim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : 1 thru maxPolyOrderB do (

      disp(printf(false,sconcat("Creating sqrt_on_basis ~ax p~a ",bName[bInd]),cD,polyOrder)),

      fname : sconcat("~/max-out/sqrt_on_basis_", cD, "x_p", polyOrder, "_", bName[bInd], ".cpp"),
      fh : openw(fname),
      printf(fh, "#include <sqrt_on_basis_mod_decl.h>~%~%"),

      funcName : sconcat("sqrt_on_basis_gauss_", cD, "x_p", polyOrder, "_", bName[bInd]),
      calcSqrtProjGauss(fh, funcName, cD, bName[bInd], polyOrder),

      close(fh)
    )
  )
);
