/* Generate kernels for performing interpolations needed in twist-shift BCs. */

load("modal-basis");
load("out-scripts");
fpprec : 24$

writeCIncrExprs1sub(lhs, rhs, sublist) := block([expr, i, ep, outStr, s],
  /* Perform some substitutions before printing. No expand. */
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep     : string(expr[i]),
      outStr : ssubst(sublist[1][2],sublist[1][1],ep),
      for s : 2 thru length(sublist) do (
        outStr : ssubst(sublist[s][2],sublist[s][1],outStr)
      ),
      printf(fh, "  ~a += ~a; ~%", lhs[i-1], outStr)
    )
  )
)$

writeCEigenMatIncrsSub(lhs, rhs, sublist) := block([expr, i, ep, outStr, s],
  expr : float(rhs),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep     : string(expr[i]),
      if length(sublist) # 0 then (
        outStr : ssubst(sublist[1][2],sublist[1][1],ep),
        for s : 2 thru length(sublist) do (
          outStr : ssubst(sublist[s][2],sublist[s][1],outStr)
        )
      ) else (
        outStr : ep
      ),
      printf(fh, "  ~a += ~a; ~%", sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), outStr)
    )
  )
)$

/* General product of functions f1 and f2 with weight w over arbitrary extents,
   in reverse order: integral along the first dimension is done last. */
innerProdGenRev(vars, lims, w, f1, f2) := block([n, r],
  n : length(vars),
  if n = 0 then return (w*f1*f2),
  r : integrate(w*f1*f2, vars[n], lims[n][1], lims[n][2]),
  for i: n-1 thru 1 step -1 do r : integrate(r, vars[i], lims[i][1], lims[i][2]),
  return (r)
  )$

/* Compute inner product with specified function list, in reverse order:
   integral along the first dimension is done last. */
calcInnerProdListGenRev(vars, lims, w, funcList, f) := fullratsimp(makelist(
    innerProdGenRev(vars, lims, w, funcList[i], f), i, 1, length(funcList)))$

calcTwistShiftOp_xLimDG(fh, funcNm, cdim, vdim, basisFun, polyOrder, polyOrder1D) := block(
  [basisC1D,i,vars1D,vars,basis1D,numB1D,xLimLo_e,xLimUp_e,dyCell,ycCell,yMap,
   basis,numB,intLims,fldDo_e,fldDo_c,ySh_e,fldTar_c,subList,maxExponent,expQ,
   eI,f,doSub,k,lhsS,rhsS,expR,j],
  /* Perform integrals (for weak equality/interpolation) of subregions of a
     cell using fixed y-limits and variable x-limits (functions of y). The
     x-limits are given by a DG (polynomial expansion), defined in a [-1,1]
     logical space that is a sub-region of the source cell. */
  kill(varsC, varsP, basisC, basisP),

  /* Will need 1D basis for the y-shift. */
  load(sconcat("basis-precalc/basis", basisFun, 1, "x")),
  basisC1D : makelist(0,i,1,length(basisC)),
  for i : 1 thru length(basisC) do (basisC1D[i] : copylist(basisC[i])),
  vars1D  : varsC,
  basis1D : basisC1D[polyOrder1D],  /* This need not use the same polyOrder as fldDo/fldTar. */
  numB1D  : length(basis1D),

  /* Assume cdim=2 or cdim=3, and vdim=0 or vdim=2. */
  kill(varsC, varsP, basisC, basisP),
  if vdim=0 then (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisC[polyOrder]),
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisP[polyOrder]),
    vars  : varsP
  ),
  numB : length(basis),

  /* Function declaration with input/output variables. */
  printf(fh, "void ~aP~a(const double sFac, const double *xLimLo, const double *xLimUp, const double yLimLo, const double yLimUp, const double dyDo, const double yOff, const double *ySh, tsStruct *tsData, const int xIdx, const bool pushNew) ~%{ ~%", funcNm, polyOrder, polyOrder1D),
  printf(fh, "  // sFac:   scale factor, typically +/- 1.0.~%"),
  printf(fh, "  // xLimUp: 1D DG expansion of the function xLimLo(y) giving the lower limit of the x integral.~%"),
  printf(fh, "  // xLimLo: 1D DG expansion of the function xLimUp(y) giving the upper limit of the x integral.~%"),
  printf(fh, "  // yLimLo: lower limit of the y integral in [-1,1] logical space.~%"),
  printf(fh, "  // yLimUp: upper limit of the y integral in [-1,1] logical space.~%"),
  printf(fh, "  // dyDo:   y cell length of the donor cell.~%"),
  printf(fh, "  // yOff:   yOffset between the donor and target cells (in the direction of the shift).~%"),
  printf(fh, "  // ySh:    yShift translated to [-1,1] logical space.~%"),
  printf(fh, "  // tsData: twist-shift matrices and vectors.~%"),
  printf(fh, "  // xIdx:   x-index of the cell.~%"),
  printf(fh, "  // pushNew: push_back a new matrix (true) or add contribution to the last matrix (false).~%"),
  printf(fh, "~%"),

  printf(fh, "  // Length of the subregion in which the DG expansion of the yLimLo/yLimUp functions are defined.~%"),
  printf(fh, "  double dyLim = ~a;~%", yLimUp-yLimLo),
  printf(fh, "~%"),

  printf(fh, "  // Logical center of the subregion in which the DG expansion of the yLimLo/yLimUp functions are defined.~%"),
  printf(fh, "  double ycLim = ~a;~%", 0.5*(yLimUp+yLimLo)),
  printf(fh, "~%"),

  xLimLo_e : doExpand1(xLimLo,subst(x=y,basis1D)),
  xLimUp_e : doExpand1(xLimUp,subst(x=y,basis1D)),
  /* The y-variable used in the inner product below is different to the
     y-variable in xLimLo/xLimUp because the former corresponds to the logical space of the source cell,
     while the latter to a sub-region of that logical (y) space. They a related by a shift and a scaling. */
  dyCell : 2,
  ycCell : 0,
  yMap : (2/dyLim)*(ycCell-ycLim+(dyCell/2)*y),

  xLimLo_e : subst(y=yMap,xLimLo_e),
  xLimUp_e : subst(y=yMap,xLimUp_e),

  /* The x-integral limits will depend on the yShift. */
  intLims : [ [xLimLo_e, xLimUp_e], [yLimLo, yLimUp] ],
  if (cdim+vdim > 2) then (
    for d : 1 thru (cdim+vdim-2) do (
      intLims : endcons([-1,1],intLims)
    )
  ),

  /* Field expansion and list of coefficients. */
  fldDo_e :Â doExpand1(fldDo,basis),
  fldDo_c : makelist(fldDo[i],i,0,numB-1),

  /* Apply the y-shift (in the logical [-1,1] space of this cell) to the
     origin field. */ 
  ySh_e   : doExpand1(ySh, basis1D),
  shiftedBasis : subst(y=y+(ySh_e-yOff)*(2/dyDo),copylist(basis)),
/*
  fldDo_e : subst(y=y+(ySh_e-yOff)*(2/dyDo),fldDo_e),
*/
  
  /* Compute the inner product, on target grid of current cell,
     of the source field times the target-grid basis functions (in this case donor and target basis are the same). */
  fldTar_c : fullratsimp(sFac*calcInnerProdListGen(vars,intLims,1.0,shiftedBasis,fldDo_e)),

  printf(fh, "  tsData->mat.setZero();~%"),

  fldTar_cm   : list_matrix_entries(fullratsimp(coefmatrix(fldTar_c,fldDo_c))),
  tarIdo[i,j] := "tsData->mat"[i,j],
  tarIdo_c    : list_matrix_entries(genmatrix(tarIdo,numB-1,numB-1,0,0)),
  
  /* In general these expressions are very complex. It would be beneficial to
     perform some kind of common subexpression elimination. For now we'll just eliminate the exponents. */
  subList : [],
  maxExponent : 48,
  expQ        : [yLimLo, yLimUp, dyLim, ycLim, dyDo, yOff],
  for eI : 1 thru length(expQ) do (
    for f : 2 thru maxExponent do (
      doSub : false,
      for k : 1 thru numB do (
        if (not freeof(expQ[eI]^f,fldTar_c[k])) then ( doSub : true )
      ),
      if (doSub) then (
        /* Define a separate variable. */
        lhsS : sconcat("  double ",string(expQ[eI]),"R",f),
        rhsS : sconcat("std::pow(",string(expQ[eI]),",",f,");~%"),
        printf(fh, sconcat(lhsS," = ",rhsS)),
        /* Add to the string substitution list, used in writing file. */
        subList : append(subList,[[sconcat(string(expQ[eI]), "^",f), sconcat(string(expQ[eI]),"R",f)]])
      )
    )
  ),
  expR : [xLimLo, xLimUp, ySh],
  for eI : 1 thru length(expR) do (
    for f : 2 thru maxExponent do (
      for j : 0 thru numB1D-1 do (
        doSub : false,
        for k : 1 thru numB do (
          if (not freeof(expR[eI][j]^f,fldTar_c[k])) then ( doSub : true )
        ),
        if (doSub) then (
          /* Define a separate variable. */
          lhsS : sconcat("  double ",string(expR[eI]),j,"R",f),
          rhsS : sconcat("std::pow(",string(expR[eI][j]),",",f,");~%"),
          printf(fh, sconcat(lhsS," = ",rhsS)),
          /* Add to the string substitution list, used in writing file. */
          subList : append(subList,[[sconcat(string(expR[eI][j]), "^",f), sconcat(string(expR[eI]),j,"R",f)]])
        )
      )
    )
  ),
  printf(fh, "~%"),
  
  writeCEigenMatIncrsSub(tarIdo_c,fldTar_cm,subList),
  printf(fh, "~%"),

  printf(fh, "  if (pushNew) {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].push_back(tsData->mat);~%"),
  printf(fh, "  } else {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].back() += tsData->mat;~%"),
  printf(fh, "  };~%"),
  printf(fh, "~%"),
  
  printf(fh, "}~%"),
  printf(fh, "~%")

)$

calcTwistShiftOp_yLimDG(fh, funcNm, cdim, vdim, basisFun, polyOrder, polyOrder1D) := block(
  [basisC1D,i,vars1D,vars,basis1D,numB1D,yLimLo_e,yLimUp_e,dxCell,xcCell,
   xMap,basis,numB,intLims,fldDo_e,fldDo_c,ySh_e,fldTar_c,subList,maxExponent,
   expQ,eI,f,doSub,k,lhsS,rhsS,expR,j],
  /* Perform integrals (for weak equality/interpolation) of subregions of a
     cell using fixed x-limits and variable y-limits (functions of x). The
     y-limits are given by a DG polynomial expansion, defined in a [-1,1]
     logical space that is a sub-region of the source cell. */
  kill(varsC, varsP, basisC, basisP),

  /* Will need 1D basis for the y-shift. */
  load(sconcat("basis-precalc/basis", basisFun, 1, "x")),
  basisC1D : makelist(0,i,1,length(basisC)),
  for i : 1 thru length(basisC) do (basisC1D[i] : copylist(basisC[i])),
  vars1D  : varsC,
  basis1D : basisC1D[polyOrder1D],  /* This need not use the same polyOrder as fldDo/fldTar. */
  numB1D  : length(basis1D),

  /* Assume cdim=2 or cdim=3, and vdim=0 or vdim=2. */
  kill(varsC, varsP, basisC, basisP),
  if vdim=0 then (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisC[polyOrder]),
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisP[polyOrder]),
    vars  : varsP
  ),
  numB : length(basis),

  /* Function declaration with input/output variables. */
  printf(fh, "void ~aP~a(const double sFac, const double xLimLo, const double xLimUp, const double *yLimLo, const double *yLimUp, const double dyDo, const double yOff, const double *ySh, tsStruct *tsData, const int xIdx, const bool pushNew) ~%{ ~%", funcNm, polyOrder, polyOrder1D),
  printf(fh, "  // sFac:    scale factor, typically +/- 1.0.~%"),
  printf(fh, "  // xLimUp:  lower limit of the x integral in [-1,1] logical space.~%"),
  printf(fh, "  // xLimLo:  upper limit of the x integral in [-1,1] logical space.~%"),
  printf(fh, "  // yLimUp:  1D DG expansion of the function yLimLo(x) giving the lower limit of the y integral.~%"),
  printf(fh, "  // yLimLo:  1D DG expansion of the function yLimUp(x) giving the upper limit of the y integral.~%"),
  printf(fh, "  // dyDo:    y cell length of the donor cell.~%"),
  printf(fh, "  // yOff:    yOffset between the donor and target cells (in the direction of the shift).~%"),
  printf(fh, "  // ySh:     yShift translated to [-1,1] logical space.~%"),
  printf(fh, "  // tsData:  twist-shift matrices and vectors.~%"),
  printf(fh, "  // xIdx:    x-index of the cell.~%"),
  printf(fh, "  // pushNew: push_back a new matrix (true) or add contribution to the last matrix (false).~%"),
  printf(fh, "~%"),

  printf(fh, "  // Length of the subregion in which the DG expansion of the yLimLo/yLimUp functions are defined.~%"),
  printf(fh, "  double dxLim = ~a;~%", xLimUp-xLimLo),
  printf(fh, "~%"),

  printf(fh, "  // Logical center of the subregion in which the DG expansion of the yLimLo/yLimUp functions are defined.~%"),
  printf(fh, "  double xcLim = ~a;~%", 0.5*(xLimUp+xLimLo)),
  printf(fh, "~%"),

  yLimLo_e : doExpand1(yLimLo,basis1D),
  yLimUp_e : doExpand1(yLimUp,basis1D),
  /* The x-variable used in the inner product below may be different to the
     x-variable in yLimLo/yLimUp because the former corresponds to the logical space of the donor cell,
     while the latter to a sub-region of that logical (x) space. They a related by a shift and a scaling. */
  dxCell : 2,
  xcCell : 0,
  xMap   : (2/dxLim)*(xcCell-xcLim+(dxCell/2)*x),

  yLimLo_e : subst(x=xMap,yLimLo_e),
  yLimUp_e : subst(x=xMap,yLimUp_e),

  /* The y-integral limits will depend on the yShift. */
  intLims : [ [xLimLo, xLimUp], [yLimLo_e, yLimUp_e] ],
  if (cdim+vdim > 2) then (
    for d : 1 thru (cdim+vdim-2) do (
      intLims : endcons([-1,1],intLims)
    )
  ),

  /* Field expansion and list of coefficients. */
  fldDo_e :Â doExpand1(fldDo,basis),
  fldDo_c : makelist(fldDo[i],i,0,numB-1),
  
  /* Apply the y-shift (in the logical [-1,1] space of this cell) to the
     donor field. */ 
  ySh_e   : doExpand1(ySh, basis1D),
/*  fldDo_e : subst(y=y+(ySh_e-yOff)*(2/dyDo),fldDo_e), */
  shiftedBasis : subst(y=y+(ySh_e-yOff)*(2/dyDo),copylist(basis)),
  
  /* Compute the inner product, on donor grid of current cell,
     of the source field times the donor-grid basis functions (in this case donor and target basis are the same). */
  fldTar_c : fullratsimp(sFac*calcInnerProdListGenRev(vars,intLims,1.0,shiftedBasis,fldDo_e)),
  
  printf(fh, "  tsData->mat.setZero();~%"),

  fldTar_cm   : list_matrix_entries(fullratsimp(coefmatrix(fldTar_c,fldDo_c))),
  tarIdo[i,j] := "tsData->mat"[i,j],
  tarIdo_c    : list_matrix_entries(genmatrix(tarIdo,numB-1,numB-1,0,0)),
  
  /* In general these expressions are very complex. It would be beneficial to
     perform some kind of common subexpression elimination. For now we'll just eliminate the exponents. */
  subList : [],
  maxExponent : 48,
  expQ        : [xLimLo, xLimUp, dxLim, xcLim, dyDo, yOff, sFac],
  for eI : 1 thru length(expQ) do (
    for f : 2 thru maxExponent do (
      doSub : false,
      for k : 1 thru numB do (
        if (not freeof(expQ[eI]^f,fldTar_c[k])) then ( doSub : true )
      ),
      if (doSub) then (
        /* Define a separate variable. */
        lhsS : sconcat("  double ",string(expQ[eI]),"R",f),
        rhsS : sconcat("std::pow(",string(expQ[eI]),",",f,");~%"),
        printf(fh, sconcat(lhsS," = ",rhsS)),
        /* Add to the string substitution list, used in writing file. */
        subList : append(subList,[[sconcat(string(expQ[eI]), "^",f), sconcat(string(expQ[eI]),"R",f)]])
      )
    )
  ),
  expR : [yLimLo, yLimUp, ySh],
  for eI : 1 thru length(expR) do (
    for f : 2 thru maxExponent do (
      for j : 0 thru numB1D-1 do (
        doSub : false,
        for k : 1 thru numB do (
          if (not freeof(expR[eI][j]^f,fldTar_c[k])) then ( doSub : true )
        ),
        if (doSub) then (
          /* Define a separate variable. */
          lhsS : sconcat("  double ",string(expR[eI]),j,"R",f),
          rhsS : sconcat("std::pow(",string(expR[eI][j]),",",f,");~%"),
          printf(fh, sconcat(lhsS," = ",rhsS)),
          /* Add to the string substitution list, used in writing file. */
          subList : append(subList,[[sconcat(string(expR[eI][j]), "^",f), sconcat(string(expR[eI]),j,"R",f)]])
        )
      )
    )
  ),
  printf(fh, "~%"),
  
  writeCEigenMatIncrsSub(tarIdo_c,fldTar_cm,subList),
  printf(fh, "~%"),

  printf(fh, "  if (pushNew) {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].push_back(tsData->mat);~%"),
  printf(fh, "  } else {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].back() += tsData->mat;~%"),
  printf(fh, "  };~%"),
  printf(fh, "~%"),
  
  printf(fh, "}~%"),
  printf(fh, "~%")

)$

calcTwistShiftOp_fullCell(fh, funcNm, cdim, vdim, basisFun, polyOrder, polyOrder1D) := block(
  [basisC1D,i,vars1D,vars,basis1D,numB1D,basis,numB,fldDo_e,fldDo_c,
   ySh_e,fldTar_c,sideSuffix,sI,xLimLo_e,xLimUp_e,dyCell,ycCell,dyLim,ycLim,yMap,yLimLo,yLimUp,
   intLims,subList,maxExponent,expQ,eI,f,doSUb,k,lhsS,rhsS,expR,j],
  /* Project the shifted function onto the DG basis over the whole cell. */ 
  kill(varsC, varsP, basisC, basisP),

  /* Will need 1D basis for the y-shift. */
  load(sconcat("basis-precalc/basis", basisFun, 1, "x")),
  basisC1D : makelist(0,i,1,length(basisC)),
  for i : 1 thru length(basisC) do (basisC1D[i] : copylist(basisC[i])),
  vars1D  : varsC,
  basis1D : basisC1D[polyOrder1D],  /* This need not use the same polyOrder as fldDo/fldTar. */
  numB1D  : length(basis1D),

  /* Assume cdim=2 or cdim=3, and vdim=0 or vdim=2. */
  kill(varsC, varsP, basisC, basisP),
  if vdim=0 then (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisC[polyOrder]),
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisP[polyOrder]),
    vars  : varsP
  ),
  numB : length(basis),

  /* Function declaration with input/output variables. */
  printf(fh, "void ~aP~a(const double dyDo, const double yOff, const double *ySh, tsStruct *tsData, const int xIdx, const bool pushNew) ~%{ ~%", funcNm, polyOrder, polyOrder1D),
  printf(fh, "  // dyDo:   y cell length of the donor cell.~%"),
  printf(fh, "  // yOff:   yOffset between the donor and target cells (in the direction of the shift).~%"),
  printf(fh, "  // ySh:    yShift translated to [-1,1] logical space.~%"),
  printf(fh, "  // tsData: twist-shift matrices and vectors.~%"),
  printf(fh, "  // xIdx:   x-index of the cell.~%"),
  printf(fh, "  // pushNew: push_back a new matrix (true) or add contribution to the last matrix (false).~%"),
  printf(fh, "~%"),

  /* Field expansion and list of coefficients. */
  fldDo_e  :Â doExpand1(fldDo,basis),
  fldDo_c  : makelist(fldDo[i],i,0,numB-1),

  /* Apply the y-shift (in the logical [-1,1] space of this cell) to the
     origin field. */ 
  ySh_e   : doExpand1(ySh, basis1D),
  shiftedBasis : subst(y=y+(ySh_e-yOff)*(2/dyDo),copylist(basis)),
/*  fldDo_e : subst(y=y+(ySh_e-yOff)*(2/dyDo),fldDo_e), */
  
  /* First add the integral over the whole cell. */
  fldTar_c : fullratsimp(calcInnerProdList(vars,1.0,shiftedBasis,fldDo_e)),

  printf(fh, "  tsData->mat.setZero();~%"),

  fldTar_cm   : list_matrix_entries(fullratsimp(coefmatrix(fldTar_c,fldDo_c))),
  tarIdo[i,j] := "tsData->mat"[i,j],
  tarIdo_c    : list_matrix_entries(genmatrix(tarIdo,numB-1,numB-1,0,0)),
  
  /* In general these expressions are very complex. It would be beneficial to
     perform some kind of common subexpression elimination. For now we'll just eliminate the exponents. */
  subList : [],
  maxExponent : 48,
  expQ        : [dyDo, yOff],
  for eI : 1 thru length(expQ) do (
    for f : 2 thru maxExponent do (
      doSub : false,
      for k : 1 thru numB do (
        if (not freeof(expQ[eI]^f,fldTar_c[k])) then ( doSub : true )
      ),
      if (doSub) then (
        /* Define a separate variable. */
        lhsS : sconcat("  double ",string(expQ[eI]),"R",f),
        rhsS : sconcat("std::pow(",string(expQ[eI]),",",f,");~%"),
        printf(fh, sconcat(lhsS," = ",rhsS)),
        /* Add to the string substitution list, used in writing file. */
        subList : append(subList,[[sconcat(string(expQ[eI]), "^",f), sconcat(string(expQ[eI]),"R",f)]])
      )
    )
  ),
  expR : [ySh],
  for eI : 1 thru length(expR) do (
    for f : 2 thru maxExponent do (
      for j : 0 thru numB1D-1 do (
        doSub : false,
        for k : 1 thru numB do (
          if (not freeof(expR[eI][j]^f,fldTar_c[k])) then ( doSub : true )
        ),
        if (doSub) then (
          /* Define a separate variable. */
          lhsS : sconcat("  double ",string(expR[eI]),j,"R",f),
          rhsS : sconcat("std::pow(",string(expR[eI][j]),",",f,");~%"),
          printf(fh, sconcat(lhsS," = ",rhsS)),
          /* Add to the string substitution list, used in writing file. */
          subList : append(subList,[[sconcat(string(expR[eI][j]), "^",f), sconcat(string(expR[eI]),j,"R",f)]])
        )
      )
    )
  ),
  printf(fh, "~%"),
  
  writeCEigenMatIncrsSub(tarIdo_c,fldTar_cm,subList),
  printf(fh, "~%"),

  printf(fh, "  if (pushNew) {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].push_back(tsData->mat);~%"),
  printf(fh, "  } else {~%"),
  printf(fh, "    tsData->cellMat[xIdx-1].back() += tsData->mat;~%"),
  printf(fh, "  };~%"),
  printf(fh, "~%"),
  
  printf(fh, "}~%~%")

)$


calcTwistShiftOp_matVecMult(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [polyOrder1D,vars,basis,numB,fldDo_c],
  /* Write the function that performs a mat-vec multiply to compute the
     contribution from a donor cell to the taget cell. */
  kill(varsC, varsP, basisC, basisP),

  kill(varsC, varsP, basisC, basisP),
  if vdim=0 then (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisC[polyOrder]),
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
    if (polyOrder=0) then (basis:basisConstant) else (basis : basisP[polyOrder]),
    vars  : varsP
  ),
  numB : length(basis),

  /* Function declaration with input/output variables. */
  printf(fh, "void ~aP~a(tsStruct *tsData, const int xIdx, const int matIdx, const double *fldDo, double *fldTar) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // tsData: twist-shift matrices and vectors.~%"),
  printf(fh, "  // xIdx:   x-index of the cell.~%"),
  printf(fh, "  // matIdx: index of the matrix to be assigned.~%"),
  printf(fh, "  // fldDo:  donor field.~%"),
  printf(fh, "  // fldTar: target field.~%"),
  printf(fh, "~%"),

  fldDo_c : makelist(fldDo[i],i,0,numB-1),

  printf(fh, "  tsData->vecDo << ~a;~%~%",sreverse(sremovefirst("]",sreverse(sremovefirst("[",string(fldDo_c)))))),

  printf(fh, "  tsData->vecTar = tsData->cellMat[xIdx-1][matIdx-1] * tsData->vecDo;~%~%"),

  printf(fh, "  Eigen::Map<Eigen::VectorXd>(fldTar,~a,1) += tsData->vecTar;~%~%", numB),

  printf(fh, "}~%~%")

)$
