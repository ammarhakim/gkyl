load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/modal-basis.mac");
fpprec : 24$

writeExprs(fh, rhs) := block([expr],
  expr : float(expand(radcan(rhs))),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a = ~a ~%", out[i], expr[i])
  )
)$

writeExprs2(fh, lhs, rhs) := block([expr],
  expr : float(expand(radcan(rhs))),
  for i : 1 thru length(expr) do (
    printf(fh, "   ~a = ~a ~%", lhs[i], expr[i])
  )  
)$

var : [z1, z2, z3]$

fh : openw("~/max-out/ModalSerendipBasisSurf3d.lua");
printf(fh, "local _M = {} ~%")$

for i : 1 thru 4 do (
  basis : gsOrthoNorm(var, makeSerendipBasis(var, i)),
  in : transpose( makelist(volIn[i], i, 1, length(basis)) ),
  printf(fh, "-- polyOrder ~d ~%", i),
  printf(fh, "_M[~d] = {} ~%", i),
  for d : 1 thru length(var) do (
    printf(fh, "--    dir ~d ~%", d),
    printf(fh, "_M[~d][~d] = {} ~%", i, d),
    varSurf : delete(var[d], var),
    basisSurf : gsOrthoNorm(varSurf, makeSerendipBasis(varSurf, i)),
    out : makelist(surfOut[i], i, 1, length(basisSurf)),
    surfProjMat : calcSurfExpansionMatrix(varSurf, var[d], 1, basisSurf, basis),
    printf(fh, "_M[~d][~d].upper = function (volIn, surfOut) ~%", i, d),
    writeExprs2(fh, out, colVecToList(surfProjMat . in)),
    printf(fh, "end ~%"),
    surfProjMat : calcSurfExpansionMatrix(varSurf, var[d], -1, basisSurf, basis),
    printf(fh, "_M[~d][~d].lower = function (volIn, surfOut) ~%", i, d),
    writeExprs2(fh, out, colVecToList(surfProjMat . in)),
    printf(fh, "end ~%"),
    printf(fh, "~%")
  ),
  printf(fh, "~%")
)$

printf(fh, "return _M ~%")$
close(fh)$
