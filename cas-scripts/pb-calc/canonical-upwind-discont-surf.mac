load("modal-basis");
load("out-scripts");
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dxv : [dxv0, dxv1, dxv2, dxv3, dxv4, dxv5]$

PB(f,g,x,y) := diff(f,x)*diff(g,y) - diff(g,x)*diff(f,y)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun,pmax) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for i : 1 thru pmax do (
  bP : basisP[i],
  bC : basisC[i],
  numC : length(bC),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  if dir <= cdim then dirlabel : cvars[dir]
  else dirlabel : vvars[dir-cdim],

  printf(fh, "void ~a_~a_P~a(const double *w, const double *dxv, const double amax, const double *Hl, const double* Hr, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, dirlabel, i),
  printf(fh, "// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. H: Hamiltonian, fl/fr: Distribution function in left/right cells ~%"),
  printf(fh, "// outl/outr: output distribution function in left/right cells ~%"),

  for d : 1 thru cdim+vdim do (
    printf(fh, "  double dxv~a = dxv[~a]; ~%", d-1, d-1)
  ),
  printf(fh, "  double wd = w[~a]; ~%", dir-1),
  printf(fh, "  double incr[~a]; ~%~%", length(bP)),

  /* get surface variable */
  sv : varsP[dir],
  /* remove surface variable from phase space */
  surfIntVars : delete(sv,varsP),
  /* make expansions */
  fl_L : doExpand1(fl, bP),
  fl_R : doExpand1(fr, bP),
  Hl_L : doExpand1(Hl, bP),
  Hl_R : doExpand1(Hr, bP),

  volfac : 1,
  for d : 1 thru cdim do (
    pbfac[d] : 4/dxv[cid[d]+1]/dxv[vid[d]+1]
  ),
  /*
  for d : 1 thru cdim+vdim do (
    volfac : volfac * dxv[d]/2
  ),*/
  surfac : fullratsimp(volfac*2/dxv[dir]),

  printf(fh, "  // check if hamiltonian is continuous in this direction, and if so exit ~%"),
  printf(fh, "  double tol = 1e-10; ~%"),
  /* calculate difference of hamiltonian at boundary */
  delta : fullratsimp(subst(sv=1, Hl_L)-subst(sv=-1,Hl_R)),
  /* project difference onto basis */
  delta_k : float(fullratsimp(innerProd(varsP, 1, bP, delta))),
  printf(fh, "  if (~%"),
  for i : 1 thru length(delta_k) do (
    if delta_k[i] # 0.0 then printf(fh, "       std::abs(~a) < tol && ~%", delta_k[i])
  ),
  printf(fh, "       true ~%     ) ~%  { ~%"),
  printf(fh, "    return; ~%  } ~%"),

  /* calculate alpha in direction of sv at boundary from interior */
  /* we assume alpha.n is continuous across boundary, although H may not be */
  alpha_sv : (alpha : 0, for d : 1 thru cdim do (
     pb : (pbfac[d]*PB(wd + dxv[dir]/2*sv,Hl_R,varsC[d],varsV[d])),
     alpha : alpha + pb
     ),
  subst(sv=-1,alpha)),
  /* get cell-average value to use for upwinding */
  alpha0 : fullratsimp(innerProd(surfIntVars, 1, alpha_sv, subst(sv=-1, bP[1]))),
  printf(fh, "  // surface-averaged phase velocity in this direction ~%"),
  printf(fh, "  double alpha0 = ~a; ~%~%", float(alpha0)),

  /* evaluate {z[d], basisfunction} */
  alphaBasis_k : (alpha : 0, for d : 1 thru cdim do (
     pb : (pbfac[d]*PB(wd + dxv[dir]/2*sv,bP,varsC[d],varsV[d])),
     alpha : alpha + pb
     ),
  alpha),

  printf(fh, "  if (alpha0>0) { ~%"),
  fhat : subst(sv=1, fl_L),
  t : surfac*calcInnerProdList(surfIntVars, subst(sv=1, Hl_L), subst(sv=-1, alphaBasis_k), fhat),
  incr_r : facsum(fullratsimp(t),dxv),
  writeCIncrExprsNoExpand1(outr, incr_r),  
  printf(fh, "~%"),
  t : surfac*calcInnerProdList(surfIntVars, subst(sv=-1,Hl_R), subst(sv=1, alphaBasis_k), fhat),
  incr_l : -t,
  writeCIncrExprsNoExpand1(outl, incr_l),
  
  printf(fh, "  } else { ~%"),
  fhat : subst(sv=-1, fl_R),
  t : surfac*calcInnerProdList(surfIntVars, subst(sv=1, Hl_L), subst(sv=-1, alphaBasis_k), fhat),
  incr_r : facsum(fullratsimp(t),dxv),
  writeCIncrExprsNoExpand1(outr, incr_r),  
  printf(fh, "~%"),
  t : surfac*calcInnerProdList(surfIntVars, subst(sv=-1, Hl_R), subst(sv=1, alphaBasis_k), fhat),
  incr_l : -t,
  writeCIncrExprsNoExpand1(outl, incr_l),
  printf(fh, "  } ~%"),
  printf(fh, "} ~%")
));

calcCanonicalPBDisContSurfUpdater(fh, funcNm, cdim, vdim, basisFun,pmax) := block([],
  printf(fh, "#include <CanonicalModDecl.h> ~%"),
  for dir : 1 thru cdim+vdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun,pmax) )
)$
