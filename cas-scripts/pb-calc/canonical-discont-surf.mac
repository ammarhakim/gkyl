load("modal-basis");
load("out-scripts");
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dxv : [dxv0, dxv1, dxv2, dxv3, dxv4, dxv5]$

PB(f,g,x,y) := diff(f,x)*diff(g,y) - diff(g,x)*diff(f,y)$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun,pmax) := block([],
kill(varsC, varsP, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
load(modNm),
for i : 1 thru pmax do (
  bP : basisP[i],
  bC : basisC[i],
  numC : length(bC),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  if dir <= cdim then dirlabel : cvars[dir]
  else dirlabel : vvars[dir-cdim],
  zeros : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "void ~a_~a_P~a(const double *w, const double *dxv, const double amax_in, const double *Hl, const double *Hr, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, dirlabel, i),
  printf(fh, "// w: Cell-center coordinates. dxv[NDIM]: Cell spacing. H: Hamiltonian, fl/fr: Distribution function in left/right cells ~%"),
  printf(fh, "// outl/outr: output distribution function in left/right cells ~%"),

  for d : 1 thru cdim+vdim do (
    printf(fh, "  double dxv~a = dxv[~a]; ~%", d-1, d-1)
  ),
  printf(fh, "  double fhat[~a]; ~%~%", length(bP)),

  /* get surface variable */
  surfVar : varsP[dir],
  /* remove surface variable from integrand of surface integrals */
  surfIntVars : delete(surfVar,varsP),
  /* make expansions */
  fL_expd : doExpand1(fl, bP),
  fR_expd : doExpand1(fr, bP),
  HL_expd : doExpand1(Hl, bP),
  HR_expd : doExpand1(Hr, bP),

  /* volfac = 1 because volume factors on both sides of equation cancel */
  volfac : 1,
  /* pbfac arises from converting derivatives in physical coordinates to derivatives in local cell coordinates */
  for d : 1 thru cdim do (
    pbfac[d] : 4/dxv[cid[d]+1]/dxv[vid[d]+1]
  ),
  /* remove volume contribution from surface variable, which is not integrated */
  surfac : fullratsimp(volfac*2/dxv[dir]),

  /* calculate alpha in direction of surfVar */
  /* we assume alpha.n is continuous across boundary, although H may not be */
  alpha_expd : (alpha : 0, for d : 1 thru cdim do (
     pb : (pbfac[d]*PB(wd + dxv[dir]/2*surfVar,HR_expd,varsC[d],varsV[d])),
     alpha : alpha + pb
     ),
  alpha),
  /* evaluate at boundary from interior (surfVar=-1) */
  alphaSurf_expd : subst(surfVar=-1,alpha_expd),
  /* calculate expression for surface-averaged alpha, and print to c variable alpha0 */
  alpha0 : subst(zeros, alphaSurf_expd),
  printf(fh, "  // surface-averaged phase velocity in this direction ~%"),
  printf(fh, "  double alpha0 = ~a; ~%~%", float(alpha0)),

  /* determine whether to use local or global value for penalty amax */
  printf(fh, "  // compute amaxNorm ~~ amax/alpha0 ~%"),
  printf(fh, "  double amaxNorm = 0.0; ~%"),
  printf(fh, "  bool upwind = false; ~%"), 
  printf(fh, "  if(upwind) ~%"),
  printf(fh, "    amaxNorm = (alpha0 > 0) - (alpha0 < 0); // this gives sign(alpha0) ~%"),
  printf(fh, "  else ~%"),
  printf(fh, "    amaxNorm = amax_in/alpha0; ~%~%"),

  /* calculate lax penalty flux expression */
  /* we evaluate at the boundary by evaluating the f_L (left) value at surfVar=1 and the f_R (right) value at surfVar=-1 */
  fhat_expd : facsum(fullratsimp((subst(surfVar=1, fL_expd)+subst(surfVar=-1, fR_expd))/2-amaxNorm/2*(subst(surfVar=-1, fR_expd)-subst(surfVar=1, fL_expd))),amaxNorm),
  /* project flux expression onto basis functions */
  fhat_k : facsum(fullratsimp(innerProd(varsP, 1, bP, fhat_expd)),amaxNorm),
  /* print fhat_k list to c array fhat */
  writeCExprsNoExpand1(fhat, fhat_k),
  /* new expansion for fhat using unspecified coefficients fhat, for which the C fhat expressions will be used */
  /* first drop components of fhat that are zero from list fhat_k */
  fhat_drop0_k : doMakeExprLst(fhat_k, fhat),
  /* then expand fhat for the arbitrary nonzero coefficients */
  fhat_expd : fhat_drop0_k.bP,
  printf(fh, "~%"),

  /* evaluate {z[d], basisfunction} */
  alphaBasis_k : (alpha : 0, for d : 1 thru cdim do (
     pb : (pbfac[d]*PB(wd + dxv[dir]/2*surfVar,bP,varsC[d],varsV[d])),
     alpha : alpha + pb
     ),
  alpha),

  /* evaluate boundary contribution from right (surfVar=-1) */
  t_k : surfac*innerProd(surfIntVars, subst(surfVar=-1,alphaBasis_k), subst(surfVar=1,HL_expd), subst(surfVar=-1,fhat_expd)),
  incr_r : facsum(fullratsimp(t_k),dxv),
  writeCIncrExprsNoExpand1(outr, incr_r),
  printf(fh, "~%"),
  /* evaluate boundary contribution from left (surfVar=1) */
  t_k : surfac*innerProd(surfIntVars, subst(surfVar=1,alphaBasis_k), subst(surfVar=-1,HR_expd), subst(surfVar=1,fhat_expd)),
  incr_l : facsum(fullratsimp(-t_k),dxv),
  writeCIncrExprsNoExpand1(outl, incr_l),
  
  printf(fh, "} ~%")
));

calcCanonicalPBDisContSurfUpdater(fh, funcNm, cdim, vdim, basisFun,pmax) := block([],
  printf(fh, "#include <CanonicalModDecl.h> ~%"),
  for dir : 1 thru cdim+vdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun,pmax) )
)$
