/* Functions to work with nodes and nodal expansions,
   and to interface modal algorithms with nodal ones. */
load("nodalOperations/nodeLocations")$
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
fpprec : 24$
load("eigen")$
load("scifac")$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* ....................................................................................................
   The following functuons calculate nodal-to-modal transformation   
   matrix, A, which transforms the nodal basis.                      
   The matrix that transforms the nodal coefficients is V=(A^T)^{-1}.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars) := block([numNodes, dim, basisNodToMod],
  numNodes : length(nodes),
  dim      : length(vars),
  basisNodToMod : (
    for i : 1 thru numNodes do (
      col : copylist(modalBasis),
      for d : 1 thru dim do (
        col : subst(nodes[i][d],vars[d],col)
      ),
      col : columnvector(col),
      if i = 1 then basisNodToMod:col else basisNodToMod:addcol(basisNodToMod, col)
    ),
    basisNodToMod
  ),
  return(basisNodToMod)
)$

/* Given a set of nodes. */
calcBasisNodToModWithNodes(basisType, dim, p, nodes) := block([basis, vars, numNodes, basisNodToMod, varsC, varsP, basisC, basisP],
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dim, "x")),
    basis : basisC[p],
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dim-3, "x3v")),
    basis : basisP[p],
    vars  : varsP
  ),
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, basis, vars),
  return(basisNodToMod)
)$

/* Given a set of nodes. */
/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcBasisNodToMod(basisType, dim, p) := block([basis, vars, nodes, numNodes, basisNodToMod, varsC, varsP, basisC, basisP],
  nodes         : getNodes(basisType, dim, p),
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(basisNodToMod)
)$

/* ....................................................................................................
   The following functions calculate nodal-to-modal transformation
   matrix, V=(A^T)^{-1}, which transforms the nodal coefficients.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcNodToModWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : calcNodToModWithNodesAndBasis(nodes, modalBasis, vars),
  return(invert(transpose(basisNodToMod)))
)$

/* Given a set of nodes. */
calcNodToModWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(invert(transpose(basisNodToMod)))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcNodToMod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(invert(transpose(basisNodToMod)))
)$

/* ....................................................................................................
   The following functions calculate modal-to-nodal transformation
   matrix, A^{-1}, which transforms the modal basis.
   The matrix that transforms the modal coefficients is U=(A^T).
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcBasisModToNodWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars),
  return(invert(basisNodToMod))
)$

/* Given a set of nodes. */
calcBasisModToNodWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(invert(basisNodToMod))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcBasisModToNod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(invert(basisNodToMod))
)$

/* ....................................................................................................
   The following functions calculate modal-to-nodal transformation
   matrix, U=A^T, which transforms the modal coefficients.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcModToNodWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars),
  return(transpose(basisNodToMod))
)$

/* Given a set of nodes. */
calcModToNodWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(transpose(basisNodToMod))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcModToNod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(transpose(basisNodToMod))
)$

/* ....................................................................................................
   The following functions obtain a nodal basis.
   .................................................................................................... */

/* Given a modal basis and a set of nodes. */
getNodalBasisWithNodesAndBasis(nodes, modalBasis, vars) := block([basisModToNod],
  basisModToNod : calcBasisModToNodWithNodesAndBasis(nodes, modalBasis, vars),
  return(fullratsimp(list_matrix_entries(basisModToNod . modalBasis)))
)$

/* Given a set of nodes. */
getNodalBasisWithNodes(basisType, dim, p, nodes) := block([basisModToNod],
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dim, "x")),
    basis : basisC[p],
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dim-3, "x3v")),
    basis : basisP[p],
    vars  : varsP
  ),
  nodalBasis : getNodalBasisWithNodesAndBasis(nodes, basis, vars),
  return(nodalBasis)
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
getNodalBasis(basisType, dim, p) := block([basisModToNod],
  nodes      : getNodes(basisType, dim, p),
  nodalBasis : getNodalBasisWithNodes(basisType, dim, p, nodes),
  return(nodalBasis)
)$

