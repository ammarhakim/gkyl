/* Create header file for updater computing the sheath potential
   and the potential everywhere via quadrature assuming ambipolar
   sheath fluxes and electron adiabaticity. */

polyOrderMax : 2$
bName        : ["ser","tensor"]$
boundaryStr  : ["lower","upper"]$

fh : openw("~/max-out/asheath_potential_mod_decl.h")$

printf(fh, "#ifndef ASHEATHPOTENTIAL_MOD_DELC_H~%")$
printf(fh, "#define ASHEATHPOTENTIAL_MOD_DELC_H~%~%")$
printf(fh, "#include <cmath>~%~%")$
printf(fh, "extern \"C\" { ~%~%")$

for bInd : 1 thru length(bName) do (

   for pi : 1 thru polyOrderMax do (
     for ci : 1 thru 3 do (

       for bS : 1 thru 2 do ( /* One kernel for each of lower and upper boundaries. */
         printf(fh, "  void asheath_potential_gauss_phi_sheath_~a_~ax_p~a_~a(const double sheathDirDx, const double q_e, const double m_e, const double T_e, const int dirSign, const double *jacInv, const double *GammaJac_i, const double *m0JacIon, double *m0IonS, double *phiS); ~%", boundaryStr[bS], ci, pi, bName[bInd])
       ),
       printf(fh, "  void asheath_potential_gauss_phi_~ax_p~a_~a(const double q_e, const double T_e, const double *jacInv, const double *m0Ion, const double *m0IonS, const double *phiS, double *phi); ~%", ci, pi, bName[bInd]),
       printf(fh, "~%")      

     ),
     printf(fh, "~%")
   )

)$

printf(fh, "~% ~%")$

printf(fh, "}~%~%")$

printf(fh, "#endif ~%")$

close(fh)$
