/* Generate kernels that perform weak division of two
   fields, say if Au .= B, (where .= means weak equality)
   then this kernel computes u .= A\B. */

/* To avoid the expensive algebraic matrix inversion in
   Maxima we use Eigen to solve the system. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

writeCExprsB(lhs, rhs, nSpaces) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), expr[i])
  )
)$

writeEVExprs(lhs, rhs, nSpaces) := block([expr],
  len   : length(rhs),
  digs  : slength(string(len)),
/*  start : len+(len-1)+5+len*digs+6*(len-1)+digs*(len-1)+1, */
/*  start : len+(len-1)+4+5*(len-1)+1, */
  start : 2*len+(len-1)+4+5*(len-1)+1,
  for k : 1 thru (len-1) do (
    start : start+slength(string(k))
  ),
  printf(fh,sconcat(smake(nSpaces," "),"    ~a << ~a; ~%"), lhs, sremove("]",sremovefirst("[",string(rhs)),sequal,start))
)$

writeEVExprsS(lhs, rhs) := block([expr],
  len   : length(rhs),
  digs  : slength(string(len)),
/*  start : len+(len-1)+5+len*digs+6*(len-1)+digs*(len-1)+1, */
/*  start : len+(len-1)+2*len+1, */
  start : 2*len+(len-1)+2*len+1,
  for k : 1 thru len do (
    start : start+slength(string(k-1))
  ),
  printf(fh, "  ~a << ~a; ~%", lhs, sremove("]",sremovefirst("[",string(rhs)),sequal,start))
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

writeCExprs1d(lhs,rhs,dir,Npoints,nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      for iC : (dir-1)*Npoints thru dir*Npoints-1 do (
        ep : ssubst(sconcat("xBar[",string(iC),"]*xBar[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep),
        ep : ssubst(sconcat("xBar[",string(iC),"]*xBar[",string(iC),"]*xBar[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^3"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[(dir-1)*Npoints+i-1], ep)
    )
  )
)$

/* Convert exponentials into hyperbolic function. */
toHyper(expr,vars) := block([],
  for iv : 1 thru length(vars) do (
    expr : subst(vars[iv]=vars[iv]/%i,demoivre(subst(vars[iv]=%i*vars[iv],expr)))
  )
)$

calcBinOpDivideS(fh, funcNm, cdim, basisFun, pMax, applyPos) := block([Elhs,Eflat,Ef,eq,E],

  kill(varsC, varsP, basisC, basisP),

  if applyPos then (
    pOrderMax : 1,
    load(sconcat("basis-precalc/basis", basisFun, 1, "x")),
    bC1 : basisC[1]    /* Save 1D basis for later use. */
  ) else (
    pOrderMax : pMax
  ),

  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x"),
  load(modNm),
  for polyOrder : 1 thru pOrderMax do (
    bC : basisC[polyOrder],
    N  : length(bC),
  
    /* Function declaration with input/output variables. */
    printf(fh, "void ~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // A:       denominator field (must be a scalar field). ~%"),
    printf(fh, "  // B:       numerator field (can be scalar or vector). ~%"),
    printf(fh, "  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). ~%"),
    printf(fh, "  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. ~%"),
    printf(fh, "  // out:     output field (same number of components as B). ~%"),
    printf(fh, " ~%"),

    /* This function evaluates the denominator (fIn, expanded in
        variables evalVars) at all combinations of (+/- evalPoint)
        points, and places it in the list fEvOut. */
    pointEval(fEvOut,fIn,evalVars,evalPoint) := block([v1,otherVars,fSub],
      v1        : evalVars[1],
      otherVars : delete(v1,evalVars),
      for iQ : -1 step 2 thru 1 do (
        fSub : subst(v1=iQ*evalPoint,fIn),
        if length(otherVars)>0 then (
          pointEval(fEvOut,fSub,otherVars,evalPoint)
        ) else (
          fEvOut[iHe] : fSub,
          iHe : iHe + 1
        )
      )
    ),

    /* List of A evaluated at the corners. */
    cornerAs : makelist(0,i,1,2^cdim),
    iHe : 1,
    pointEval(cornerAs,doExpand1(A,bC),varsC,1),

    /* List of A evaluated close to positivity control points. */
    controlAs : makelist(0,i,1,2^cdim),
    iHe : 1,
    pointEval(controlAs,doExpand1(A,bC),varsC,2/5),

    if (not applyPos) then (
      /* In order to avoid dividing by very small, negative or zero numbers
         use the cell average of A when A<0 at one of the corners. */
      printf(fh, "  // If a corner value is below zero, use cell average A.~%"),
      printf(fh, "  bool avgA = false;~%"),
      for i : 1 thru 2^cdim do (
        printf(fh, "  if (~a < 0.0) { ~%",float(expand(cornerAs[i]))),
        printf(fh, "    avgA = true;~%"),
        printf(fh, "  }~%")
      )
    ) else (
      /* If A<0.0 at one of the corners we will switch to exponential
         representation of A. If A<0 close to the control points, we will
         switch to cell-average division. */
      printf(fh, "  // If A<0 at corners, but A>0 near positivity control points, use cell average A.~%"),
      printf(fh, "  bool expA = false;~%"),
      printf(fh, "  bool avgA = false;~%"),
      for i : 1 thru 2^cdim do (
        printf(fh, "  if ((~a < 0.0) && (~a > 0.0)) { ~%",float(expand(cornerAs[i])),float(expand(controlAs[i]))),
        printf(fh, "    expA = true;~%"),
        printf(fh, "  }~%")
      ),
      printf(fh, "  // If A is zero near positivity control points, use cell average A.~%"),
      for i : 1 thru 2^cdim do (
        printf(fh, "  if (~a < 0.0) { ~%",float(expand(controlAs[i]))),
        printf(fh, "    avgA = true;~%"),
        printf(fh, "  }~%")
      )
    ),
    printf(fh, " ~%"),

    printf(fh, "  unsigned short int b0; ~%"),
    printf(fh, "  double As[~a]; ~%", N),
    printf(fh, "  double Bs[~a]; ~%", N*Ncomp),
    printf(fh, "  if (avgA) { ~%"),
    writeCExprs1s(As,append([A[0]],makelist(0.0,i,1,N-1))),
    printf(fh, "    for(unsigned short int vd=0; vd<Ncomp; vd++) ~%"),
    printf(fh, "    { ~%"),
    printf(fh, "      b0 = ~a*vd; ~%", N),
    expr : float(expand(append([B[b0]],makelist(0.0,i,1,N-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "      ~a = ~a; ~%", Bs[b0+i-1], expr[i])
    ),
    printf(fh, "    } ~%"),
    printf(fh, "  } else { ~%"),
    writeCExprs1s(As,makelist(A[i],i,0,N-1)),
    printf(fh, "    for(unsigned short int vd=0; vd<Ncomp; vd++) ~%"),
    printf(fh, "    { ~%"),
    printf(fh, "      b0 = ~a*vd; ~%", N),
    for i : 1 thru N do (
      printf(fh, "      ~a = ~a; ~%", Bs[b0+i-1], B[b0+i-1])
    ),
    printf(fh, "    } ~%"),
    printf(fh, "  } ~%"),
    printf(fh, " ~%"),

    /* Expand fields A and B in configuration space basis. */
    Ae : doExpand1(As, bC),
    Be : doExpand1(Bs, bC),
    /* Expand u function and create a list of expansion coefficients. */ 
    ue : doExpand1(u,bC),
    un : makelist(u[i],i,0,N-1),

    kill(eq,E,Eflat,Ef,Elhs),

    eigenMassMatrix(Amat,nSpaces) := block([],
      /* Flatten E for WriteCExprsB. */
      Eflat : list_matrix_entries(Amat),

      /* Make a list of the LHS matrix assignments. */
      /* Note: Eigen defaults to Column-major order. */
      Ef[i,j] := "data->AEM_S"[i,j],
      Elhs : list_matrix_entries(genmatrix(Ef,N-1,N-1,0,0)),

      printf(fh,sconcat(smake(nSpaces," "),"  // Fill AEM matrix. ~%")),
      printf(fh,sconcat(smake(nSpaces," "),"  data->AEM_S = Eigen::MatrixXd::Zero(~a,~a); ~%"), N, N),
      writeCExprsB(Elhs,Eflat,nSpaces),
      printf(fh,"~%")
    ),

    eigenDiv(nSpaces) := block([],

      printf(fh,sconcat(smake(nSpaces," "),"  for(unsigned short int vd=0; vd<Ncomp; vd++) ~%")),
      printf(fh,sconcat(smake(nSpaces," "),"  { ~%")),

      printf(fh,sconcat(smake(nSpaces," "),"    b0 = ~a*vd; ~%"), N),
      printf(fh,sconcat(smake(nSpaces," "),"    // Fill BEV. ~%")),
/*      printf(fh, "    Eigen::Map<const VectorXd> BEV(B+0,~a); ~%", N), */
/*    Something like this is only needed if the BEV vector is pre-initialized during init. */
/*      printf(fh, "    ::new (&BEV) Eigen::Map<const VectorXd>(B,~a); ~%", N), */
      writeEVExprs("data->BEV_S",makelist(Bs[i],i,b0+0,b0+N-1),nSpaces),
      printf(fh,"~%"),

      printf(fh,sconcat(smake(nSpaces," "),"    // Solve the system of equations. ~%")),
      printf(fh,sconcat(smake(nSpaces," "),"    data->u_S = data->AEM_S.colPivHouseholderQr().solve(data->BEV_S); ~%")),
      printf(fh," ~%"),

      printf(fh,sconcat(smake(nSpaces," "),"    // Copy data from Eigen vector. ~%")),
      printf(fh,sconcat(smake(nSpaces," "),"    Eigen::Map<VectorXd>(out+vd*~a,~a,1) = data->u_S; ~%"), N, N),
      printf(fh,sconcat(smake(nSpaces," "),"  } ~%"))
    ),

    if (not applyPos) then (

      eq : calcInnerProdList(varsC,ue,bC,Ae),
      E  : fullratsimp(coefmatrix(eq,un)),

      eigenMassMatrix(E,0),
      eigenDiv(0)

    ) else (

      printf(fh, "  if ((avgA) || (!expA)) {~%"),

      eq : calcInnerProdList(varsC,ue,bC,Ae),
      E  : fullratsimp(coefmatrix(eq,un)),

      eigenMassMatrix(E,2),
      eigenDiv(2),

      printf(fh, "  } else {~%"),

      Aexp : 0,
      E    : zeromatrix(N,N),
      Ncp  : 2^(cdim-1),  /* Number of control points. */
      printf(fh,"    double xBar[~a];~%",Ncp*cdim),
      printf(fh,"    double g1[~a];~%",Ncp*cdim),
      for iDir : 1 thru cdim do (
        cv : varsC[iDir],
        surfVars : delete(cv,varsC),

        /* Evaluate A at all control points on surface perp to iDir. */
        cpA : makelist(0,j,1,Ncp),
        iHe : 1,
        if (length(surfVars)>0) then (
          pointEval(cpA,Ae,surfVars,1/3)
        ) else (
          cpA[iHe] : Ae
        ),

        /* At each control point, need to reconstruct an exponential,
           for which we need xBar, xBarSq and g1. */
        xBars : makelist(0,i,1,Ncp),
        for iCP : 1 thru Ncp do (
          f0exp : fullratsimp(innerProd([cv],1,subst(x=cv,bC1[1]),cpA[iCP])),
          f1exp : fullratsimp(innerProd([cv],1,subst(x=cv,bC1[2]),cpA[iCP])),
          xBars[iCP] : f1exp/(sqrt(3)*f0exp)
        ),

        g1s : makelist(xBar[i]*(3-xBar[i]*xBar[i])/(1-xBar[i]*xBar[i]),i,(iDir-1)*Ncp,iDir*Ncp-1),

        /* Write xBars and g1s. */
        writeCExprs1d(xBar,xBars,iDir,Ncp,2),
        printf(fh,"~%"),
        writeCExprs1d(g1,g1s,iDir,Ncp,2),
        printf(fh,"~%"),

        /* Construct the symbolic exponential A. */

        if (cdim=1) then (
          Aexp : expg0[0]*exp(g1[0]*cv)
        ) else (
          /*........... Create nodal to modal transform matrix .......... */
          /* Surface basis: basis of one lower dimensionality w/o surf variable. */
          bSurf  : sqrt(2)*delete(0,fullratsimp(innerProd(varsC,1,bC,subst(cv=0,bC)))*bC),
          gFsurf : doExpand(gF,bSurf),
          /* Evaluate the g-Function at various combinations of control points. */
          gFsurfCP : makelist(0,i,1,Ncp),
          iHe      : 1,
          pointEval(gFsurfCP,gFsurf,surfVars,1/3),
          /* Construct the nodal-to-modal matrix. */
          /*n2m : invert(coefmatrix(gFsurfCP,makelist(gF[i],i,1,length(bSurf)))),*/
          /*........... Built nodal to modal transform matrix .......... */
          /*
          modalV : n2m . makelist(expg0[(iDir-1)*Ncp+i-1]*exp(g1[(iDir-1)*Ncp+i-1]*cv),i,1,Ncp), 
          */
          /* Computing the inverse takes too much memory. Try linsolve. */
          rhs : makelist(expg0[(iDir-1)*Ncp+i-1]*exp(g1[(iDir-1)*Ncp+i-1]*cv),i,1,Ncp),
          eqList : [ gFsurfCP[1] = rhs[1] ], 
          for iCP : 2 thru Ncp do (
            eqList : append(eqList, [ gFsurfCP[iCP] = rhs[iCP] ]) 
          ),
          modalV : linsolve(eqList, makelist(gF[i],i,1,length(bSurf))),

          Aexp : (1/cdim)*doExpand(makelist(rhs(modalV[i]),i,1,length(bSurf)),bSurf)

        ),
      
        eq   : calcInnerProdList(varsC,ue,bC,Aexp),
        Emat : fullratsimp(coefmatrix(eq,un)),

        /* We will simply the expressions in Emat in order
           to remove exponentials of g1. */
        for iCP : 1 thru Ncp do (

          /* This is the corresponding 'zeroth' and 'first' coefficient. */
          f0exp : fullratsimp(innerProd([cv],1,subst(x=cv,bC1[1]),cpA[iCP])),
          f1exp : fullratsimp(innerProd([cv],1,subst(x=cv,bC1[2]),cpA[iCP])),

          i : (iDir-1)*Ncp+iCP-1,

          /* These three relations arise from the weak equivalence of the
             exponential and polynomial representations (assume Ser basis). */
          expWeak1 : exp(2*g1[i])-1 = sqrt(2)*f0exp*g1[i]*exp(g1[i])/expg0[i],
          expWeak2 : (1/g1[i])*(exp(-g1[i])*(1+g1[i])-exp(g1[i])*(1-g1[i])) = sqrt(2/3)*(g1[i]/expg0[i])*f1exp,
          expWeak3 : -(3*exp(g1[i])*expg0[i])/(g1[i]^2)-(3*exp(-g1[i])*expg0[i])/(g1[i]^2) = -(3*sqrt(2)/(g1[i]^2))*(f1exp*g1[i]/sqrt(3)+f0exp),
          
          Emat : scsimp(Emat,expWeak2,expWeak1,expWeak3),

          /* The above scsimp doesn't always remove all exponentials, so use a
             direct substitution to remove left over exponentials of g1. */
          expMg1 : exp(-g1[i]) = (1/(sqrt(2)*expg0[i]))*(g1[i]*f1exp/sqrt(3)+f0exp-f0exp*g1[i]),
          expg1  : exp(g1[i])  = (1/(sqrt(2)*expg0[i]))*(g1[i]*f1exp/sqrt(3)+f0exp+f0exp*g1[i]),
          Emat : fullratsimp(subst([expMg1,expg1],Emat))

        ),
        print(Emat[1][1]),

        E : E+Emat

      ),


      eigenMassMatrix(E,2),
      eigenDiv(2),

      printf(fh, "  };~%")
    ),
    printf(fh, "}~%"),
    printf(fh, "~%")
  )
)$

calcBinOpDivideD(fh, funcNm, cdim, vdim, basisFun, pMax) := block([Elhs,Eflat,Ef,eq,E],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  for polyOrder : 1 thru pMax do (
    bC : basisC[polyOrder],
    bP : basisP[polyOrder],
    NC : length(bC),
    NP : length(bP),
  
    /* Function declaration with input/output variables. */
    printf(fh, "void ~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // A:       configuration space denominator field (must be a scalar field). ~%"),
    printf(fh, "  // B:       phase space numerator field (must be a scalar field). ~%"),
    printf(fh, "  // Ncomp:   number of components of B (=1 here). ~%"),
    printf(fh, "  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). ~%"),
    printf(fh, "  // out:     output field (same number of components as B). ~%"),
    printf(fh, " ~%"),

    /* In order to avoid dividing by very small, negative or zero numbers
       use the cell average of A when A<0 at one of the corners. */
    printf(fh, "  // If a corner value is below zero, use cell average A.~%"),
    printf(fh, "  bool avgA = false;~%"),
    for v1 : -1 step 2 thru 1 do (
      cornerA : subst(varsC[1]=v1,doExpand1(A,bC)),
      if cdim > 1 then (
        for v2 : -1 step 2 thru 1 do (
          cornerA : subst(varsC[2]=v2,cornerA),
          if cdim > 2 then (
            for v3 : -1 step 2 thru 1 do (
              cornerA : subst(varsC[3]=v3,cornerA),
              printf(fh, "  if (~a < 0) { ~%",float(expand(cornerA))),
              printf(fh, "    avgA = true;~%"),
              printf(fh, "  }~%")
            )
          ) else (
            printf(fh, "  if (~a < 0) { ~%",float(expand(cornerA))),
            printf(fh, "    avgA = true;~%"),
            printf(fh, "  }~%")
          )
        )
      ) else (
        printf(fh, "  if (~a < 0) { ~%",float(expand(cornerA))),
        printf(fh, "    avgA = true;~%"),
        printf(fh, "  }~%")
      )
    ),
    printf(fh, " ~%"),

    printf(fh, "  double As[~a]; ~%", NC),
    printf(fh, "  double Bs[~a]; ~%", NP),
    printf(fh, "  if (avgA) { ~%"),
    writeCExprs1s(As,append([A[0]],makelist(0.0,i,1,NC-1))),
    BconfAvg_e : innerProd(varsC,1,doExpand1(B, bP),1)/innerProd(varsC,1,1,1),
    BconfAvg_c : calcInnerProdList(varsP,1,bP,BconfAvg_e),
    writeCExprs1s(Bs,BconfAvg_c),
    printf(fh, "  } else { ~%"),
    writeCExprs1s(As,makelist(A[i],i,0,NC-1)),
    writeCExprs1s(Bs,makelist(B[i],i,0,NP-1)),
    printf(fh, "  } ~%"),
    printf(fh, " ~%"),

    /* Expand fields A and B in configuration space basis. */
    Ae : doExpand1(As, bC),
    Be : doExpand1(Bs, bP),
    /* Expand u function and create a list of expansion coefficients. */ 
    ue : doExpand1(u,bP),
    un : makelist(u[i],i,0,NC-1),

    kill(eq,E,Eflat,Ef,Elhs),
    eq : calcInnerProdList(varsP,ue,bP,Ae),
  
    E : fullratsimp(coefmatrix(eq,un)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),

    /* Make a list of the LHS matrix assignments. */
    /* Note: Eigen defaults to Column-major order. */
    Ef [i,j] := "data->AEM_D"[i,j],
    Elhs : list_matrix_entries(genmatrix(Ef,NP-1,NP-1,0,0)),

    printf(fh, "  // Fill AEM matrix. ~%"),
    printf(fh, "  data->AEM_D = Eigen::MatrixXd::Zero(~a,~a); ~%", NP, NP),
    writeCExprsB(Elhs,Eflat,0),
    printf(fh, " ~%"),

    printf(fh, "  // Fill BEV. ~%"),
/*    printf(fh, "  Eigen::Map<const VectorXd> BEV(B+0,~a); ~%", NP), */
/*  Something like this is only needed if the BEV vector is pre-initialized during init. */
/*    printf(fh, "  ::new (&BEV) Eigen::Map<const VectorXd>(B,~a); ~%", NP), */
    writeEVExprsS("data->BEV_D",makelist(Bs[i],i,0,NP-1)),
    printf(fh, " ~%"),

    printf(fh, "  // Solve the system of equations. ~%"),
    printf(fh, "  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); ~%"),
    printf(fh, " ~%"),

    printf(fh, "  // Copy data from Eigen vector. ~%"),
    printf(fh, "  Eigen::Map<VectorXd>(out,~a,1) = data->u_D; ~%", NP),
    printf(fh, " ~%"),
    printf(fh, "} ~%"),
    printf(fh, " ~%")
  )
)$

