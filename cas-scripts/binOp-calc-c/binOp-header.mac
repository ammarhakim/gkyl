/* Generate the header file for BinOp kernels. */

cvars : [X, Y, Z]$
polyOrderMax : 3$
bName        : ["Ser","Max","Tensor"]$

printKernelSignatures() := block([], 

  for bInd : 1 thru length(bName) do (
    for ci : 1 thru 3 do (
      for pi : 1 thru polyOrderMax do (
        printf(fh, "void CartFieldBinOpMultiply~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
        printf(fh, "void CartFieldBinOpDotProduct~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
        printf(fh, "void CartFieldBinOpDivide~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
        printf(fh, "~%") 
      ),
      printf(fh, "void CartFieldBinOpDividePositivity~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], 1),
      printf(fh, "~%"),

      for vi : ci thru 3 do (
        for pi : 1 thru polyOrderMax do (
          printf(fh, "void CartFieldBinOpMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void CartFieldBinOpConfPhaseMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void CartFieldBinOpConfPhaseDivide~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%") 
        )
      )
    ),
    printf(fh, "~%"),
    
    
    /* For gyrokinetics. */
    ci : 3,
    vi : 2,
    for pi : 1 thru polyOrderMax do (
      printf(fh, "void CartFieldBinOpMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
      printf(fh, "void CartFieldBinOpConfPhaseMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
      printf(fh, "void CartFieldBinOpConfPhaseDivide~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
      printf(fh, "~%")
    )
    
  )
)$

/* Write out the C++ header file. */
fh : openw("~/max-out/CartFieldBinOpModDecl.h")$
printf(fh, "#ifndef CART_FIELD_BINOP_MOD_DECL_H ~%")$
printf(fh, "#define CART_FIELD_BINOP_MOD_DECL_H ~%")$
printf(fh, " ~%")$
printf(fh, "// Eigen include statements. ~%")$
printf(fh, "#include <Eigen/Dense> ~%")$
printf(fh, " ~%")$
printf(fh, "class binOpData_t;~%")$
printf(fh, "~%")$
printf(fh, "class binOpData_t~%")$
printf(fh, "{~%")$
printf(fh, " public:~%")$
printf(fh, "  binOpData_t(int nbasis_S, int nbasis_D);~%")$
printf(fh, "  ~~binOpData_t();~%")$
printf(fh, "  Eigen::MatrixXd AEM_S;~%")$
printf(fh, "  Eigen::VectorXd BEV_S;~%")$
printf(fh, "  Eigen::VectorXd u_S;~%")$
printf(fh, "  Eigen::MatrixXd AEM_D;~%")$
printf(fh, "  Eigen::VectorXd BEV_D;~%")$
printf(fh, "  Eigen::VectorXd u_D;~%")$
printf(fh, "};~%")$
printf(fh, " ~%")$
printf(fh, "extern \"C\" { ~%")$
printf(fh, "void* new_binOpData_t(int nbasis_S, int nbasis_D);~%")$
printf(fh, "~%")$
printKernelSignatures()$
printf(fh, "} ~%")$
printf(fh, "~%")$
printf(fh, "#endif ~%")$
close(fh)$

