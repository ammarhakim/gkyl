cvars : [X, Y, Z]$
polyOrderMax : 3$
bName        : ["Ser","Max","Tensor"]$

printPrototypes() := block([], 
printf(fh, "void* new_binOpData_t(int nbasis_S, int nbasis_D); ~%~%"),

for bInd : 1 thru length(bName) do (
  for ci : 1 thru 3 do (
    for pi : 1 thru polyOrderMax do (
         printf(fh, "void CartFieldBinOpMultiply~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
      printf(fh, "~%") 
    ),
    printf(fh, "~%")
  ),
  
  for ci : 1 thru 3 do (
    for pi : 1 thru polyOrderMax do (
         printf(fh, "void CartFieldBinOpDivide~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
      printf(fh, "~%") 
    ),
    printf(fh, "~%")
  ),
  
  for ci : 1 thru 3 do (
    for pi : 1 thru polyOrderMax do (
         printf(fh, "void CartFieldBinOpDotProduct~ax~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, bName[bInd], pi),
      printf(fh, "~%") 
    ),
    printf(fh, "~%")
  ),
  
  for ci : 1 thru 3 do (
    for vi : ci thru 3 do (
      for pi : 1 thru polyOrderMax do (
        printf(fh, "void CartFieldBinOpMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
        if pi=1 then printf(fh, "void CartFieldBinOpMultiply~ax~av~aInclVx2_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%") 
      )
    ),
    printf(fh, "~%")
  ),
  
  for ci : 1 thru 3 do (
    for vi : ci thru 3 do (
      for pi : 1 thru polyOrderMax do (
        printf(fh, "void CartFieldBinOpDivide~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
        if pi=1 then printf(fh, "void CartFieldBinOpDivide~ax~av~aInclVx2_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
        printf(fh, "~%") 
      )
    ),
    printf(fh, "~%")
  ),
  
  ci : 3,
  vi : 2,
  for pi : 1 thru polyOrderMax do (
    printf(fh, "void CartFieldBinOpMultiply~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
    if pi=1 then printf(fh, "void CartFieldBinOpMultiply~ax~av~aInclVx2_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
    printf(fh, "~%")
  ),
  
  for pi : 1 thru polyOrderMax do (
    printf(fh, "void CartFieldBinOpDivide~ax~av~a_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
    if pi=1 then printf(fh, "void CartFieldBinOpDivide~ax~av~aInclVx2_P~a(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out); ~%", ci, vi, bName[bInd], pi),
    printf(fh, "~%")
  )

)
)$

fh : openw("~/max-out/CartFieldBinOpModDecl.h")$
printf(fh, "#ifndef CART_FIELD_BINOP_MOD_DECL_H ~%")$
printf(fh, "#define CART_FIELD_BINOP_MOD_DECL_H ~%")$
printf(fh, " ~%")$
printf(fh, "// Eigen include statements. ~%")$
printf(fh, "#include <Eigen/Dense> ~%")$
printf(fh, " ~%")$
printf(fh, "class binOpData_t; ~%~%")$
printf(fh, "extern \"C\" { ~%")$
printPrototypes()$
printf(fh, "} ~%~%")$
printf(fh, "class binOpData_t ~%")$
printf(fh, "{ ~%")$
printf(fh, " public: ~%")$
printf(fh, "  binOpData_t(int nbasis_S, int nbasis_D); ~%")$
printf(fh, "  ~~binOpData_t(); ~%")$
printf(fh, "  Eigen::MatrixXd AEM_S; ~%")$
printf(fh, "  Eigen::VectorXd BEV_S; ~%")$
printf(fh, "  Eigen::VectorXd u_S; ~%")$
printf(fh, "  Eigen::MatrixXd AEM_D; ~%")$
printf(fh, "  Eigen::VectorXd BEV_D; ~%")$
printf(fh, "  Eigen::VectorXd u_D; ~%")$
printf(fh, "}; ~%~%")$
printf(fh, "#endif ~%")$
close(fh)$

fh : openw("~/max-out/_CartFieldBinOpCdef.lua")$
printf(fh, "local ffi = require \"ffi\" ~%~%")$
printf(fh, "ffi.cdef [[~%")$
printf(fh, "typedef struct binOpData_t binOpData_t; ~%")$
printPrototypes()$
printf(fh, "]]~%")$
close(fh)$
