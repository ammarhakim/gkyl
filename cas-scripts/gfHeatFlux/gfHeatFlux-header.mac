/*
  Generate the header file for gyrofluid kernels.
*/

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 1$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
maxCdim_Max : 0$

/* Tensor product basis. */
maxPolyOrder_Tensor : 3$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","max","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$

vars : [x, y, z]$

/* Generate kernels of selected types. */
printPrototypes() := block([],
  for bInd : 1 thru length(bName) do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
  
      maxPolyOrderB : maxPolyOrder[bInd],
  
      for polyOrder : 0 thru maxPolyOrderB do (

        printf(fh, "  double gyrofluid_heatflux_vol_~ax_p~a_~a(const double q_, const double m_, const double kappaPar, const double kappaPerp, const double kperpSq, const double *w, const double *dx, const double *jac, const double *jacDbmag, const double *sMom, const double *phi, double *primMom, double *out); ~%", c, polyOrder, bName[bInd]),

        for dir : 1 thru c do (
          printf(fh, "  double gyrofluid_heatflux_surf_~ax_p~a_~a_~a(const double q_, const double m_, const double kappaPar, const double kappaPerp, const double kperpSq, const double *wL1, const double *dxL1, const double *wR1, const double *dxR1, const double uMaxIn, const double *jacL, const double *jacDbmagL, const double *sMomL1, const double *sMomR1, const double *phiL1, const double *phiR1, double *primMomL1, const double *primMomR1, double *outL, double *outR); ~%", c, polyOrder, bName[bInd], vars[dir])
        ),
        printf(fh, "~%")
  
      )
    )
  )
)$

fh : openw("~/max-out/gyrofluid_heatflux_mod_decl.h")$
printf(fh, "#ifndef GYROFLUID_HEATFLUX_MOD_DECL_H ~%")$
printf(fh, "#define GYROFLUID_HEATFLUX_MOD_DECL_H ~%")$
printf(fh, "~%")$
printf(fh, "#include <math.h> ~%")$  /* For fabs and fmax functions. */
printf(fh, "~%")$
printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$
