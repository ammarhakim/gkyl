/*
  Create kernels for the volume contribution of the gyrofluid heat flux terms
  in the energy and perpendicular pressure equations.

*/
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("recovery")$
fpprec : 24$

/* Specify the FV stencil order.
     = 2 for second order.
     = 4 for fourth order. */
fvOrder : 2$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

basisFromVars(basisType, varsIn, pIn) := block(
  [basis,vars],
  dimIn : length(varsIn),
  if dimIn=0 then return([1]),

  /* Load a p>0 basis just to get the variables. */
  basis : getBasis(basisType, dimIn, 1),
  vars  : listofvars(basis),

  /* Load the desired basis. */
  basis : getBasis(basisType, dimIn, pIn),

  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),

  return(basis)
)$

writeCCompIncrCollect1(lhs, comp, rhs) := block([expr],
  expr : float(expand(rhs)),
  numE : length(expr),
  for i : 1 thru numE do (
    if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", lhs[(comp-1)*numE+i-1], gcfac(expr[i]))
  )
)$

calcGFheatVolKernels(fh, funcNm, dim, polyOrder, basisFun) := block(
  [],

  /* Load a p>0 basis just to get the variables. */
  kill(varsC, varsP, basisC, basisP),
  basis : getBasis(basisFun, dim, 1),
  vars  : listofvars(basis),

  /* Load the desired basis. */
  kill(varsC, varsP, basisC, basisP),
  basis : getBasis(basisFun, dim, polyOrder),
  numB  : length(basis),

  varLabel : makelist(string(vars[d]),d,1,dim),

  printf(fh, "~%"),
  printf(fh, "double ~a(const double q_, const double m_, const double kappaPar, const double kappaPerp, const double kperpSq, const double *w, const double *dx, const double *jac, const double *rBmag, const double *rBmagSq, const double *sMom, const double *phi, double *primMom, double *out) ~%{ ~%", funcNm),
  printf(fh, "  // q_,m_:   species charge and mass.~%"),
  printf(fh, "  // kappa:   heat conductivity coefficients.~%"),
  printf(fh, "  // kperpSq: k_perp^2.~%"),
  printf(fh, "  // w:       cell-center.~%"),
  printf(fh, "  // dx:      cell length.~%"),
  printf(fh, "  // jac:     jacobian.~%"),
  printf(fh, "  // rBmag:   reciprocal of magnetic field magnitude (1/B).~%"),
  printf(fh, "  // rBmagSq: rBmag^2.~%"),
  printf(fh, "  // sMom:    stepped moments (times Jacobian).~%"),
  printf(fh, "  // phi:     electrostatic potential.~%"),
  printf(fh, "  // primMom: primitive moments (upar, Tpar, Tperp).~%"),
  printf(fh, "  // out:     output increment.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru dim do (
    printf(fh, "  double rd~a2 = 2.0/dx[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~aSq4 = rd~a2*rd~a2;~%", varLabel[d], varLabel[d], varLabel[d])
  ),
  printf(fh, "~%"),

  numMom : 3+1,
  /* Moment expansions and coefficients. */
  moms_e : [],  moms_c : [],
  for m : 1 thru numMom do (
    newMom_e : doExpand(makelist(sMom[i-1+(m-1)*numB],i,1,numB),basis),
    moms_e   : endcons(newMom_e, moms_e),
    moms_c   : endcons(calcInnerProdList(vars,1,basis,newMom_e),moms_c)
  ),
  /* Primitive moments, upar, Tpar, Tperp */
  primMoms_e : [],  primMoms_c : [],
  for m : 1 thru 3 do (
    newMom_e   : doExpand(makelist(primMom[i-1+(m-1)*numB],i,1,numB),basis),
    primMoms_e : endcons(newMom_e, primMoms_e),
    primMoms_c : endcons(calcInnerProdList(vars,1,basis,newMom_e),primMoms_c)
  ),

  /* Stepped moment and primitive moment aliases. */
  m0_e : moms_e[1],  m1_e : moms_e[2],  m2_e : moms_e[3],  m2perp_e : moms_e[4],
  m0_c : moms_c[1],  m1_c : moms_c[2],  m2_c : moms_c[3],  m2perp_c : moms_c[4],
  upar_e : primMoms_e[1],  Tpar_e : primMoms_e[2],  Tperp_e : primMoms_e[3],
  upar_c : primMoms_c[1],  Tpar_c : primMoms_c[2],  Tperp_c : primMoms_c[3],

  numBzeros : makelist(0,i,1,numB),
  incr_c : [],
  for mI : 1 thru numMom do (
    incr_c : endcons(numBzeros, incr_c)
  ),

  qPhiDm_e : (q_/m_)*doExpand1(phi,basis),

  /* Quantities inside the inner-most derivated (which
     get recovered in the surface kernels). */
  hPar_e : Tpar_e,  hPerp_e : Tperp_e+m_*(1/2)*(-kperpSq)*qPhiDm_e,

  rBmag_e   : doExpand1(rBmag, basis),
  rBmagSq_e : doExpand1(rBmagSq, basis),

  h_e : [numBzeros, numBzeros, (kappaPar/2)*hPar_e+kappaPerp*hPerp_e, kappaPerp*hPerp_e],

  qFacs_e : [0, 0, rBmag_e, rBmagSq_e],

  basisPrime : diff(basis,x),

  for mI : 3 thru 4 do (
    incr_c[mI] : rdxSq4*calcInnerProdList(vars,1,diff(qFacs_e[mI]*basisPrime,x),h_e[mI])
  ),

  /* Write out the increments. */
  for mI : 3 thru 4 do (
    writeCCompIncrCollect1(out, mI, incr_c[mI]),
    printf(fh, "~%")
  ),

  /* Return CFL frequency */
  zMid     : makelist(vars[d]=0, d, 1, dim),
  rBmagMid : subst(zMid, rBmag_e),
  nJacMid  : subst(zMid, m0_e)/m_,
  cflFreq_qpar  : (kappaPar*rBmagMid/nJacMid)*rdxSq4,
  cflFreq_qperp : (kappaPerp*rBmagMid/nJacMid)*rdxSq4,

  printf(fh, "  return ~a*fmax(~a,~a); ~%", float(((polyOrder+1)^2)/(2*polyOrder+1)), float(cflFreq_qpar), float(cflFreq_qperp) ),

  printf(fh, "}~%")

)$
