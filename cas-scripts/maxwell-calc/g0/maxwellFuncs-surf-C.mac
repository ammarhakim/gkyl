load("modal-basis");
load("out-scripts");
load("maxwell-calc/maxwell-rp-mod");
load(stringproc)$
fpprec : 24$

/* For simpliciations */
let (c^2, c2);
let (c2*chi, c2chi);
let (c2*gamma, c2gamma);

cvars : [x, y, z]$
out : [outEx, outEy, outEz, outBx, outBy, outBz, outPh, outPs]$

/* Define variables and fluxes */
V : [Ex, Ey, Ez, Bx, By, Bz, phi, psi]$

/* Modified flux that scales B by r and E by 1/r. */
/* This will reduce the diffusion in the induction equation, dB/dt = -curl(E) by r = tau/c */
/* It will also increase the diffusion in the Ampere-Maxwell equation, dE/dt = c^2*curl(B) - J/epsilon_0 by r = tau/c */
modFlux : [
 [c^2*chi*phi, tau*c*Bz, -tau*c*By, gamma*psi, -c*Ez/tau, c*Ey/tau, chi*Ex, c^2*gamma*Bx],
 [-tau*c*Bz, c^2*chi*phi, tau*c*Bx, c*Ez/tau, gamma*psi, -c*Ex/tau, chi*Ey, c^2*gamma*By],
 [tau*c*By, -tau*c*Bx, c^2*chi*phi, -c*Ey/tau, c*Ex/tau, gamma*psi, chi*Ez, c^2*gamma*Bz]
]$

calcUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block([],
  kill(varsC, basisC),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x"),
  load(modNm),

  bC : if polyOrder = 0 then basisConstant else basisC[polyOrder],
  nbasis : length(bC),
  
  printf(fh, "double ~a~a_~ax_~a_p~a(const gkyl_maxwell_inp *meq, const double *w, const double *dx, const double tau, const double *ql, const double *qc, const double *qr, double* restrict out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),

  printf(fh, "  const double c = meq->c, chi = meq->chi, gamma = meq->gamma; ~%"),
  printf(fh, "  const double c2 = c*c; ~%"),
  printf(fh, "  const double c2chi = c2*chi, c2gamma = c2*gamma; ~% ~%"),
  printf(fh, "  const double dx1 = 2.0/dx[~a]; ~%", dir-1),
  
  printf(fh, "  const double *exl = &ql[~a]; ~%", 0*nbasis),
  printf(fh, "  const double *eyl = &ql[~a]; ~%", 1*nbasis),
  printf(fh, "  const double *ezl = &ql[~a]; ~%", 2*nbasis),
  printf(fh, "  const double *bxl = &ql[~a]; ~%", 3*nbasis),
  printf(fh, "  const double *byl = &ql[~a]; ~%", 4*nbasis),
  printf(fh, "  const double *bzl = &ql[~a]; ~%", 5*nbasis),
  printf(fh, "  const double *phl = &ql[~a]; ~%", 6*nbasis),
  printf(fh, "  const double *psl = &ql[~a]; ~% ~%", 7*nbasis),

  printf(fh, "  const double *exc = &qc[~a]; ~%", 0*nbasis),
  printf(fh, "  const double *eyc = &qc[~a]; ~%", 1*nbasis),
  printf(fh, "  const double *ezc = &qc[~a]; ~%", 2*nbasis),
  printf(fh, "  const double *bxc = &qc[~a]; ~%", 3*nbasis),
  printf(fh, "  const double *byc = &qc[~a]; ~%", 4*nbasis),
  printf(fh, "  const double *bzc = &qc[~a]; ~%", 5*nbasis),
  printf(fh, "  const double *phc = &qc[~a]; ~%", 6*nbasis),
  printf(fh, "  const double *psc = &qc[~a]; ~% ~%", 7*nbasis),

  printf(fh, "  const double *exr = &qr[~a]; ~%", 0*nbasis),
  printf(fh, "  const double *eyr = &qr[~a]; ~%", 1*nbasis),
  printf(fh, "  const double *ezr = &qr[~a]; ~%", 2*nbasis),
  printf(fh, "  const double *bxr = &qr[~a]; ~%", 3*nbasis),
  printf(fh, "  const double *byr = &qr[~a]; ~%", 4*nbasis),
  printf(fh, "  const double *bzr = &qr[~a]; ~%", 5*nbasis),
  printf(fh, "  const double *phr = &qr[~a]; ~%", 6*nbasis),
  printf(fh, "  const double *psr = &qr[~a]; ~% ~%", 7*nbasis),

  printf(fh, "  double *outEx = &out[~a]; ~%", 0*nbasis),
  printf(fh, "  double *outEy = &out[~a]; ~%", 1*nbasis),
  printf(fh, "  double *outEz = &out[~a]; ~%", 2*nbasis),
  printf(fh, "  double *outBx = &out[~a]; ~%", 3*nbasis),
  printf(fh, "  double *outBy = &out[~a]; ~%", 4*nbasis),
  printf(fh, "  double *outBz = &out[~a]; ~%", 5*nbasis),
  printf(fh, "  double *outPh = &out[~a]; ~%", 6*nbasis),
  printf(fh, "  double *outPs = &out[~a]; ~% ~%", 7*nbasis),

  printf(fh, "  double incr_l[~a]; ~% ~%", nbasis),
  printf(fh, "  double incr_r[~a]; ~% ~%", nbasis),

  Exll : doExpand1(exl,bC),
  Eyll : doExpand1(eyl,bC),
  Ezll : doExpand1(ezl,bC),
  Bxll : doExpand1(bxl,bC),
  Byll : doExpand1(byl,bC),
  Bzll : doExpand1(bzl,bC),
  phll : doExpand1(phl,bC),
  psll : doExpand1(psl,bC),

  Excl : doExpand1(exc,bC),
  Eycl : doExpand1(eyc,bC),
  Ezcl : doExpand1(ezc,bC),
  Bxcl : doExpand1(bxc,bC),
  Bycl : doExpand1(byc,bC),
  Bzcl : doExpand1(bzc,bC),
  phcl : doExpand1(phc,bC),
  pscl : doExpand1(psc,bC),

  Exrl : doExpand1(exr,bC),
  Eyrl : doExpand1(eyr,bC),
  Ezrl : doExpand1(ezr,bC),
  Bxrl : doExpand1(bxr,bC),
  Byrl : doExpand1(byr,bC),
  Bzrl : doExpand1(bzr,bC),
  phrl : doExpand1(phr,bC),
  psrl : doExpand1(psr,bC),

  cv : varsC[dir],

  subListL : subst(cv=1, [ExL=Exll, EyL=Eyll, EzL=Ezll, BxL=Bxll, ByL=Byll, BzL=Bzll, phiL=phll, psiL=psll]),
  subListCL : subst(cv=-1, [ExR=Excl, EyR=Eycl, EzR=Ezcl, BxR=Bxcl, ByR=Bycl, BzR=Bzcl, phiR=phcl, psiR=pscl]),
  subListCR : subst(cv=1, [ExL=Excl, EyL=Eycl, EzL=Ezcl, BxL=Bxcl, ByL=Bycl, BzL=Bzcl, phiL=phcl, psiL=pscl]),
  subListR : subst(cv=-1, [ExR=Exrl, EyR=Eyrl, EzR=Ezrl, BxR=Bxrl, ByR=Byrl, BzR=Bzrl, phiR=phrl, psiR=psrl]),

  numFluxL : subst(append(subListL, subListCL), calcNumFlux(V, modFlux[dir], dir)),
  numFluxR : subst(append(subListCR, subListR), calcNumFlux(V, modFlux[dir], dir)),

  surfVars : delete(cv,varsC),

  clst : [c2, gamma, chi, c2gamma, c2chi],

  for m : 1 thru 8 do (
    fhatL : letsimp(numFluxL[m][1]),

    incrl : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), fhatL),
    writeCExprsDoubleCollect1lhsc(incr_l, incrl, clst),
    printf(fh, "~%"),
  
    fhatR : letsimp(numFluxR[m][1]),  

    incrr : calcInnerProdList(surfVars, -1, subst(cv=1, bC), fhatR),
    writeCExprsDoubleCollect1lhsc(incr_r, incrr, clst),
    printf(fh, "~%"),

    incr_sl : makelist(incr_l[i-1], i, 1, nbasis),
    incr_sr : makelist(incr_r[i-1], i, 1, nbasis),
    writeCIncrExprsCollect1lhsc(out[m], dx1*incr_sl + dx1*incr_sr),
    printf(fh, "~%")
  ),

  printf(fh, "  return fmax(c, tau); ~%"),
  printf(fh, "} ~%")
)$

calcMaxwellSurfUpdater(fh, funcNm, cdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  for dir : 1 thru cdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) )
)$