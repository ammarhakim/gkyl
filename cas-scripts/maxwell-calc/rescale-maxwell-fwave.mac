assume(c>0)$
assume(r>0)$

V : [Ex, Ey, Ez, Bx, By, Bz]$
modFlux :[0, r^2*c^2*Bz, -r^2*c^2*By, 0, -Ez/r^2, Ey/r^2]$
flux(Ex,Ey,Ez,Bx,By,Bz) := [0, c^2*Bz, -c^2*By, 0, -Ez, Ey]$

A : genmatrix(lambda ([i,j], diff(modFlux[i],V[j])), 6, 6)$

[vals, vects] : eigenvectors(A)$
Rev : (Rev : matrix([]), for i from 1 thru length(vals[1])
        do (for j from 1 thru vals[2][i]
          do (Rev : addcol(Rev, transpose(matrix(vects[i][j]))))), Rev)$

Evs : (Evs : [], for i from 1 thru length(vals[1])
          do (for j from 1 thru vals[2][i]
            do (Evs : append(Evs, [vals[1][i]]))), Evs)$

R : Rev$
L : invert(R)$
EVS : Evs$

valPlus(x) := if x>0 then 1 else (if x=0 then 1/2 else 0);
valMinus(x) := if x<0 then 1 else (if x=0 then 1/2 else 0);

Apdq(dq) := sum(valPlus(EVS[i])*col(R,i)*row(L,i).dq, i, 1, 6)$
Amdq(dq) := sum(valMinus(EVS[i])*col(R,i)*row(L,i).dq, i, 1, 6)$

df : transpose(flux(E[1], E[2], E[3], B[1], B[2], B[3]))$
apdq_I : Apdq(df)$
amdq_I : Amdq(df)$

fl : fullratsimp(apdq_I + amdq_I)$
isZero : fullratsimp(fl - transpose(flux(E[1], E[2], E[3], B[1], B[2], B[3])))$

dfL : transpose(
  flux(E[1]-EL[1], E[2]-EL[2], E[3]-EL[3], B[1]-BL[1], B[2]-BL[2], B[3]-BL[3]))$
dfR : transpose(
  flux(ER[1]-E[1], ER[2]-E[2], ER[3]-E[3], BR[1]-B[1], BR[2]-B[2], BR[3]-B[3]))$

amdq_R : Amdq(dfR)$
apdq_L : Apdq(dfL)$

incr : fullratsimp(amdq_R + apdq_L)$

