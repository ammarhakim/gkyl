calcRecov1CellGenNonuniform(basisNm, recDir, dirs, polyOrder, C, dxlo, dxce, dxup, lo, ce, up) := block(
  /* Returns recovered polynomial defined over 1 cell with a 3-cell stencil
  Inputs:
    basisNm : name of used basis function ("Ser", "Tensor", or "Max");
      NOTE: This makes no difference for 1D recoveries so it should
      ideally be an optional input but I don't see a way around it
      now. --Petr Cagas
    recDir : direction of the recovery (x, y, or z)
    dirs : direction names, e.g. [x, y]
    C : continuity of the recovered solution (either 0 or 1)
    lo : can be one of the following
      * dg(A) : A is an array of expansion coefficients corresponding
        to logical space basis functions (in the lower cell)
      * bc(D=_, N=_, val=_) : a boundary condition definition
        D*f(x)+N*df(x)/dx=val which is used instead of expansion
        coefficients
      * dg(A, bc(D=_, N=_, val=_)) : a constrained recovery where
        expansion coefficients are used together with boundary
        conditions at the edge
    ce : dg(A), where A is an array of expansion coefficients corresponding
      to logical space basis functions (in the middle cell)
    up : similar to 'lo' but in the upper cell
  Outputs:
    recovered polynomial
  */
  [
  DoF, r, rLo, rUp, rExp, rSol, rSub,
  recEqList, projSubList,
  ba, baLo1D, baCe1D, baUp1D, baLoND, baCeND, baUpND, baVars,
  dimProjLo, dimProjCe, dimProjUp, qLo1D, qCe1D, qUp1D,
  wx, wy, wz,
  recDirIdx,
  numDims,
  shiftList
  ],

  for i : 1 thru length(dirs) do (
    if recDir=dirs[i] then recDirIdx : i
  ),

  ba : getBasis(basisNm, 1, polyOrder),
  ba : subst(x=recDir, ba),
  baCe1D : etaDir(recDir, 0, dxce[recDirIdx], ba),
  baLo1D : etaDir(recDir, -dxce[recDirIdx]/2-dxlo[recDirIdx]/2, dxlo[recDirIdx], ba),
  baUp1D : etaDir(recDir, dxce[recDirIdx]/2+dxup[recDirIdx]/2, dxup[recDirIdx], ba),
  /* Note that unlike in 2-cell or 3-cell recovery, the left and right
  basis functions are not required for the first part (1D) recovery;
  still, they are still required in the same spot as in the case of
  the other methods for clarity */

  DoF : polyOrder + 3,
  for i : 1 thru C do (
    /* Increase the final number of degrees of freedom for C_1 continuity */
    if is(op(lo)=dg) then DoF : DoF + 1,
    if is(op(up)=dg) then DoF : DoF + 1
  ),
  
  /* Forming and solving the equation system */
  rExp : doExpand(r, makelist(recDir^i, i, 0, DoF-1)),
  /* New solution is weakly equal to the original representation */
  recEqList : calcInnerProdList([recDir], 1, baCe1D,
    rExp-doExpand(qCe1D, baCe1D)),
  
  if is(op(lo)=dg) then (
    if length(args(lo)) > 1 then (
      rLo : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxlo, dxce, dg(qLo1D, args(lo)[2]), dg(qCe1D))
    ) else (
      rLo : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxlo, dxce, dg(qLo1D), dg(qCe1D))
    ),
    for i : 0 thru C do (
      recEqList : append(
        recEqList,
        [subst(recDir=0, diff(rLo, recDir, i))
          - subst(recDir=-dxce[recDirIdx]/2, diff(rExp, recDir, i))]
      )
    )
  ) else (
    recEqList : append(
      recEqList,
      [subst(args(lo), val - D*subst(recDir=-dxce[recDirIdx]/2, rExp)
        - N*subst(recDir=-dxce[recDirIdx]/2, diff(rExp, recDir)))]
    )
  ),
  
  if is(op(up)=dg) then (
    if length(args(up)) > 1 then (
      rUp : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxce, dxup, dg(qCe1D), dg(qUp1D, args(up)[2]))
    ) else (
      rUp : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxce, dxup, dg(qCe1D), dg(qUp1D))
    ),
    for i : 0 thru C do (
      recEqList : append(
        recEqList,
        [subst(recDir=0, diff(rUp, recDir, i))
          - subst(recDir=dxce[recDirIdx]/2, diff(rExp, recDir, i))]
      )
    )
  ) else (
    recEqList : append(
      recEqList,
      [subst(args(up), val - D*subst(recDir=dxce[recDirIdx]/2, rExp)
        - N*subst(recDir=dxce[recDirIdx]/2, diff(rExp, recDir)))]
    )
  ),

  rSol : linsolve(recEqList, makelist(r[i], i, 1, DoF)),
  rSub : fullratsimp(subst(rSol, rExp)),
  
  /* Backsubstitute the non-recovered directtions if needed */
  numDims : length(dirs),
  if numDims > 1 then (
    ba : getBasis(basisNm, numDims, polyOrder),
    baVars : listofvars(ba),
    ba : psubst(makelist(baVars[i]=dirs[i],i,1,numDims), ba),
    /* rescale basis */
    shiftList : makelist(0, i, 1, numDims),
    baLoND : eta(dirs, shiftList, dxlo, ba),
    baCeND : eta(dirs, shiftList, dxce, ba),
    baUpND : eta(dirs, shiftList, dxup, ba),
    /* shift basis */
    baLoND : etaDir(recDir, -dxce[recDirIdx]/2-dxlo[recDirIdx]/2, 2, baLoND),
    baUpND : etaDir(recDir, dxce[recDirIdx]/2+dxup[recDirIdx]/2, 2, baUpND),
    
    projSubList : [],
    if is(op(lo)=dg) then (
      dimProjLo : calcInnerProdListGen([recDir], [[-dxce[recDirIdx]/2-dxlo[recDirIdx], -dxce[recDirIdx]/2]],
        1, baLo1D, doExpand(args(lo)[1], baLoND)),
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=dimProjLo[i], i, 1, length(baCe1D))
      )
    ),
  
    dimProjCe : calcInnerProdListGen([recDir], [[-dxce[recDirIdx]/2, dxce[recDirIdx]/2]],
      1, baCe1D, doExpand(args(ce)[1], baCeND)),
    projSubList : append(
      projSubList,
      makelist(qCe1D[i]=dimProjCe[i], i, 1, length(baCe1D))
    ),
    
    if is(op(up)=dg) then (
      dimProjUp : calcInnerProdListGen([recDir], [[dxce[recDirIdx]/2, dxce[recDirIdx]/2+dxup[recDirIdx]]],
        1, baUp1D, doExpand(args(up)[1], baUpND)),
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=dimProjUp[i], i, 1, length(baCe1D))
      )
    )
  )
  else (
    projSubList : [],
    if is(op(lo)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=args(lo)[1][i], i, 1, length(baCe1D))
      )
    ),
    projSubList : append(
      projSubList,
      makelist(qCe1D[i]=args(ce)[1][i], i, 1, length(baCe1D))
    ),
    if is(op(up)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=args(up)[1][i], i, 1, length(baCe1D))
      )
    )
  ),
  
  return(expand(subst(projSubList, rSub)))
) $

calcRecov1CellGen(basisNm, recDir, dirs, polyOrder, C, lo, ce, up) := block(
  [dx],
  dx : makelist(2, i, 1, length(dirs)),
  return(calcRecov1CellGenNonuniform(basisNm, recDir, dirs, polyOrder, C, dx, dx, dx, lo, ce, up))
  )$

calcRecov1Cell(recDir, dirs, polyOrder, lo, ce, up) := calcRecov1CellGen("Ser", recDir, dirs, polyOrder, 0, lo, ce, up)$
