/* 
   Kernel to project boundary flux onto ghosts for given input distf.
*/
load("modal-basis");
load("out-scripts");
load(stringproc)$
load("fem-calc/femMatrices")$ /* Contains node info and modal-to-nodal transformation matrices/functions. */
fpprec : 24$


calcProjectFluxOnGhost(dir, fh, cdim, vdim, basisFun, polyOrder) := block([], 
  kill(varsC, varsP, basisC, basisP),

  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  polyOrder : p,

  bP : basisP[p],
  bC : basisC[p],
  NP : length(bP),
  
  /* Get name config space dimension in the direction parallel 
     to the magnetic field (x for 1x or z for 3x). */
  zVar : varsC[dir],
  vVar : varsP[cdim+dir],  

  funcNm : sconcat("ProjectFluxOnGhosts", cdim, "x", vdim, "vDir", dir, basisFun),           
  printf(fh, "~%"),
  printf(fh, "void ~a_P~a(const double wv, const double dv, const double zVal, const double *fIn, double *fHat) ~%{ ~%", funcNm, p),

  printf(fh, "  // fIn[~a]:    input distf. ~%", NP),
  printf(fh, "  // fHat[~a]:   projection of flux on ghost cell. ~%", NP),
  printf(fh, " ~%"),

  fIn_e : subst(zVar=zVal, doExpand1(fIn,bP)),
  fHat_c : calcInnerProdList(varsP, 1, subst(zVar=zVal, bP), (wv+vVar*dv/2)*fIn_e),
  writeCExprsNoExpand1(fHat, fHat_c),

  printf(fh, " ~%"),
  printf(fh, "}~%")
)$

bName        : "Ser"$
maxPolyOrder : 2$
minCdim      : 1$
minVdim      : 1$
maxCdim      : 3$
maxVdim      : 3$

for c : minCdim thru maxCdim do (
  fname : sconcat("~/max-out/ProjectFluxOnGhosts", bName, c, "x",".cpp"),
  fh : openw(fname),
  printf(fh, "#include <ProjectFluxOnGhosts.h> ~%"),
  printf(fh, "#include <math.h> ~%"),
  for v : c thru maxVdim do (
      for p : 1 thru maxPolyOrder do (
      	  dir : c,
    	  disp(printf(false,sconcat("Creating flux project on ghosts",bName," ~ax~av"),c,v)),
    	  print("dir = ", dir, c, v),
    	  calcProjectFluxOnGhost(dir, fh, c, v, bName, p)
      )
  ),
  close(fh)
)$
