load("modal-basis") $

load("recovery-calc/recovery-1cell") $
load("recovery-calc/recovery-2cell") $
load("recovery-calc/recovery-3cell") $
load("recovery-calc/recovery-face") $

/* -- Helper Functions -------------------------------------------- */

etaDir(dir, xc, dx, fn) := block(
  /* A helper function to shift basis functions in only one direction.
     Example: etaDir(y, dy/2, dy, fn) */
  return(subst(td=dir, subst(dir=2*(td-xc)/dx, fn)))
) $

eta(vars, xc, dx, fn) := block([out],
  /* A helper function to shift basis functions in all directions
     together
     Example: eta([dx/2, -dy/2], [dx, dy], fn) */
  out : etaDir(vars[1], xc[1], dx[1], fn),
  for d : 2 thru length(vars) do (
    out : etaDir(vars[d], xc[d], dx[d], out)
  ),
  return(out)
) $

getBasis(basisType, numDims, polyOrder) := block(
  [basis, varsC, basisC, varsP, basisP, basisConstant],
  if (numDims < 4) then (
    load(sconcat("basis-precalc/basis", basisType, numDims, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, numDims-3, "x", 3, "v"))
  ),
  if polyOrder > 0 then (
    basis : if (numDims<4) then basisC[polyOrder] else basisP[polyOrder]
  ) else (
    basis : basisConstant
  ),
  return(basis)
  ) $

getDirs(numDims, polyOrder) := block(
  [dirs, varsC, basisC, varsP, basisP, basisConstant],
  if (numDims < 4) then (
    load(sconcat("basis-precalc/basisSer", numDims, "x"))
  ) else (
    load(sconcat("basis-precalc/basisSer", numDims-3, "x", 3, "v"))
  ),
  if polyOrder > 0 then (
    dirs : if (numDims<4) then varsC else varsP
  ) else (
    dirs : 1
  ),
  return(dirs)
) $
