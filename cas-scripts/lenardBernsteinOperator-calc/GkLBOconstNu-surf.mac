load("modal-basis")$
load("out-scripts");
load(stringproc)$
load("positivity-calc/fhatAL-calc")$
fpprec : 24$

/* This script generates the kernels for the surface term
   contribution from Lenard Bernstein operator using
   two integrations by parts for the diffusive term and
   a constant collisionality nu. */

/* Numerical flux option. Only applicable when not using positivity.
     =0 global Lax-Friedrichs,
     =1 (for p<3 only) local (quadrature point) Lax-Friedrichs. */
numFluxOp : 1$

cvars : [x, y, z]$
varsV : [vpar, mu]$
cVars : [X, Y, Z]$
vVars : [Vpar, Mu]$

gkvsub    : [vx=vpar, vy=mu]$
gkvsubInv : [vpar=vx, mu=vy]$

vidx(cdim,vdim)  := makelist(i,i,cdim+1,cdim+vdim)$
vidx1(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

load ("scifac")$
writeCExprsCollect1c(lhs, rhs, clst, nSpaces) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e     : apply(collectterms, param),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], gcfac(e))
    )
  )
)$

writeCExprsCollect1s(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "    ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCIncrCollect1s(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "    ~a += ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCExprs1s(lhs, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      ep : ssubst("std::sinh","sinh",ep),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBarSq[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep),
        ep : ssubst(sconcat("g1Sq"),
                    sconcat("g1[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

writeCExprs1sI(lhs, iOut, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      ep : ssubst("std::sinh","sinh",ep),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBarSq[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep),
        ep : ssubst(sconcat("g1Sq"),
                    sconcat("g1[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[iOut], ep)
    )
  )
)$

writeCExprs1so(lhs, rhs, nSpaces) := block([expr],
  for i : 1 thru length(rhs) do (
    expr : float(expand(num(rhs[i]))/denom(rhs[i])),
    if expr # 0 then (
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], expr)
    )
  )
)$

writeCExprs1sP(lhs, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBar[",string(iC),"]*xBar[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

/* Given the value of the recovery polynomial (fRec) and its derivative
   (frecP) at the interface, this function computes the increments and
   writes them to the kernel file. */
compWriteIncr(fRec,fRecP, nSpaces) := block([incr_s1,incr_s2],

  /* Separate out diffusion part of Ghat to simplify Ghat assignment.
     Leave the rdv factor out for later multiplication. */
  Gdiff_c : fullratsimp(calcInnerProdList(varsP,1,bP,diffFac_e*fRecP)),
  alst    : doMakeExprLst(Gdiff_c, Gdiff),
  Gdiff_e : doExpand(alst, bP),
  
  /*   Calculate Ghat (drag+diffusion) projected on the phase basis. */
  Ghat_c : fullratsimp(GhatDrag_c+rdv*calcInnerProdList(varsP,1,bP,Gdiff_e)),
  GhatNoDiff_c : fullratsimp(GhatDrag_c),

  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  glst1      : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(glst1, bP),
  Ghat_final : subst(vv=1, Ghat_e),

  /* Increments to the right cell (some dimensional factors missing).
     incr_r1 and incr_r2 (farther below) have separate left/right symmetry. */
  incr_r1 :  calcInnerProdList(surfVars, -1, subst(vv=-1, bP), Ghat_final),
  incr_r2 :  fullratsimp(-calcInnerProdList(surfVars, -1, subst(vv=-1, bPp), diffFac_e*fRec)),

  /* Increments to the left cell (some dimensional factors missing). */
  incr_l1 :  calcInnerProdList(surfVars, 1, subst(vv=1, bP), Ghat_final),
  incr_l2 :  fullratsimp(-calcInnerProdList(surfVars, 1, subst(vv=1, bPp), diffFac_e*fRec)),

  clst : append(makelist(nuVtSqSum[i],i,0,NC-1), makelist(BmagInv[i],i,0,NC-1)),
  writeCExprsCollect1c(incr2, radcan(incr_r2), clst, nSpaces),
  printf(fh, "~%"),

  clst : append(makelist(nuVtSqSum[i],i,0,NC-1), makelist(BmagInv[i],i,0,NC-1)),
  writeCExprsCollect1c(Gdiff, Gdiff_c, clst, nSpaces),
  printf(fh, "~%"),

  /* Populate Ghat including the diffusion term. */
  clst : append([rdv], makelist(alphaDrag[i],i,0,NC-1)),
  writeCExprsCollect1c(Ghat, Ghat_c, clst, nSpaces)

)$

calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pMax, applyPos) := block([],
  if applyPos then (
    pOrderMax : 1
  ) else (
    pOrderMax : pMax
  ),

  for polyOrder : 1 thru pOrderMax do (

    kill(varsC, varsP, basisC, basisP),

    /*... Compute  1D recovery polynomial coefficients into hsol ...*/
    /* Load 1D basis. */
    load(sconcat("basis-precalc/basis", basisFun, 1, "x")),
    bC1 : basisC[polyOrder],
    N1  : length(bC1),

    eta(xc,dx,b) := subst(x=(w-xc)/(dx/2), b),

    /* Construct the 1D recovery polynomial */
    hOrder : 2*polyOrder+1,
    /* Left and right (of the boundary) basis sets */ 
    pL : eta(-1/2,1,bC1),
    pR : eta(1/2,1,bC1),
    /* Recovery polynomial expanded in z */
    h1 : doExpand1(hn,makelist(w^i,i,0,hOrder)),
    
    /* LHS of system of equations arising from weak equivalence relations */
    eqL : makelist(integrate(h1*pL[i],w,-1,0), i,1,polyOrder+1),
    eqR : makelist(integrate(h1*pR[i],w,0,1), i,1,polyOrder+1),
    LHS : append(eqL,eqR),
    A   : coefmatrix(LHS, makelist(hn[i],i,0,hOrder)),
    
    /* RHS is similar to the mass matrix */
    RHS : transpose(append(makelist(fl[i]/2,i,1,N1), makelist(fr[i]/2,i,1,N1))),
    
    /* solve system of equations for coefficients of h */
    S     : fullratsimp(invert(A) . RHS),
    hsol1 : makelist(S[i][1],i,1,hOrder+1),

    /*... Recovery polynomial coefficients of requested dimensionality ...*/
    kill(varsC, basisC),
    /* Load basis of dimensionality requested. */
    modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
    load(modNm),

    /* Variables. */
    vid      : vidx(cdim,vdim),
    vid1     : vidx1(cdim,vdim),
    vv       : varsV[dir],
    varsP    : subst(gkvsub, varsP),
    surfVars : delete(vv,varsP),

    /* Polynomial basis and its derivatives. */
    bP  : subst(gkvsub, basisP[polyOrder]),
    bC  : basisC[polyOrder],
    NP  : length(bP),
    NC  : length(bC),
    bPp : diff(bP,vv),

    fg : doExpand(f, bP),	/* Function expanded in basis. */

    /* Obtain the left and right function coefficients
       by projecting the function onto the direction of interest. */
    hcoeff : calcInnerProdList([vv], 1, subst(x=vv,bC1), fg),
    fls : subst(makelist(f[i]=fl[i],i,NP), hcoeff),
    frs : subst(makelist(f[i]=fr[i],i,NP), hcoeff),

    /* Substitute these "left" and "right" function coefficients,
       which contain variation along other dimensions, into the
       1D recovery polynomial coefficients computed above. */
    hsol : psubst(append(makelist(fl[i]=fls[i], i, 1, N1), makelist(fr[i]=frs[i], i, 1, N1)), hsol1),
    
    /* Because f's in hsol are index-1, we need to switch to
       0-indexed for C++. */
    subList : append(makelist(fr[i]=fr[i-1],i,1,NP),makelist(fl[i]=fl[i-1],i,1,NP)),
    hsol : psubst(subList,hsol),

    /* Write out the full recovery polynomial and its derivative. */
    h : sum(hsol[i]*vv^(i-1), i, 1, 2*N1),
    hp : diff(h,vv),
    /* Evaluate the recovery polynomial at the discontinuity. */
    hsol0 : subst(vv=0,h),
    hsolp0 : subst(vv=0,diff(h,vv)),

    /*............. Positivity-preserving recovery .............*/

    if (applyPos) then ( 
      /* In order to preserve positivity we will first use an exponential
         representation to the recovery polynomial when the interface
         value falls below zero. But in this case the interface is a
         hypersurface. We will evaluate the recovery polynomial at all
         the key (positivity control) points for now (other options are
         corners and quadrature points).*/


      /* This function evaluates the coefficients of the recovery polynomial
          at all combinations of (+/- evalPoint) points. */
      pointEval(fEvOut,fIn,evalVars,evalPoint,compIn) := block([v1,otherVars,fSub],
        v1        : evalVars[1],
        otherVars : delete(v1,evalVars),
        for iQ : -1 step 2 thru 1 do (
          fSub : subst(v1=iQ*evalPoint,fIn),
          if length(otherVars)>0 then (
            pointEval(fSub,otherVars,evalPoint,compIn)
          ) else (
            fEvOut[compIn][iHe] : fSub,
            iHe : iHe + 1
          )
        )
      ),

      /* Evaluate boundary value of recovery polynomial at key (control) points. */
      Ncp : 2^(cdim+vdim-1),  /* Number of control points. */
      hsolKP: [makelist(0,j,1,Ncp)],
      iHe : 1,
      pointEval(hsolKP,hsol[1],surfVars,1/3,1),

      /* Evaluate all the coefficients of the recovery polynomial
         at (surface) positivity control points. */
      hsolEv : makelist(makelist(0,j,1,Ncp),i,1,4),
      for iC : 1 thru 4 do (
        iHe : 1,
        pointEval(hsolEv,hsol[iC],surfVars,1/3,iC)
      ),

      /* At each point we evaluated the recovery poly, need to reconstruct
         an exponential, for which we need xBar, xBarSq and g1. */
      xBars : makelist(0,i,1,Ncp),
      for iCP : 1 thru Ncp do (
        xBars[iCP] : (hsolEv[2][iCP]+3*hsolEv[4][iCP]/5)/(3*hsolEv[1][iCP]+hsolEv[3][iCP])
      ),

      xBarsSq : makelist(xBar[i]*xBar[i],i,0,Ncp-1),
      g1s     : makelist(xBar[i]*(3-xBarSq[i])/(1-xBarSq[i]),i,0,Ncp-1)

      /* Building the exponentials out of g1s and the recovery poly is
         done farther below. */

    ),

    /*............. RECOVERY DONE ..............................*/

    printf(fh, "double ~a_~a_P~a(const double m_, const double cfll, const double cflr, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *BmagInv, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vVars[dir], polyOrder),
    printf(fh, "  // w[~a]:         Cell-center coordinates. ~%", cdim+vdim),
    printf(fh, "  // dxv[~a]:       Cell spacing. ~%", cdim+vdim),
    printf(fh, "  // nuSum:        collisionalities added (self and cross species collisionalities). ~%"),
    printf(fh, "  // vMuMidMax:    maximum midpoint value of v-u. ~%"),
    printf(fh, "  // nuUSum[~a]:    sum of bulk velocities times their respective collisionalities. ~%", NC),
    printf(fh, "  // nuVtSqSum[~a]: sum of thermal speeds squared time their respective collisionalities. ~%", NC),
    printf(fh, "  // fl/fr:        Distribution function in left/right cells ~%"),
    printf(fh, "  // outl/outr:    Incremented distribution function in left/right cells ~%"),
    printf(fh, "  double rdv = 1.0/dxvl[~a]; ~%", vid1[dir]),
    printf(fh, "  double rdv2L = 2.0/dxvl[~a]; ~%", vid1[dir]),
    printf(fh, "  double rdv2R = 2.0/dxvr[~a]; ~%", vid1[dir]),
    printf(fh, "  double rdvSq4L = rdv2L*rdv2L; ~%"),
    printf(fh, "  double rdvSq4R = rdv2R*rdv2R; ~%"),
    printf(fh, "~%"),

    /* First compute the contribution coming from the second
    ** integration by parts to left and right cells. */
    nuVtSqSum_e  : doExpand1(nuVtSqSum,bC),

    /* Now do the contribution from the generalized flux Ghat. */
    basisFlip : subst(vv=-1*vv, bP),
    signs     : fullratsimp(basisFlip/bP),
    /* Expand the average and jump functions in the phase basis. */
    favg_e  : doExpand1(favg, bP),
    fjump_e : doExpand1(fjump, bP),
    /* Expand the mean flow speed in the configuration basis. */
    nuUSum_e : doExpand1(nuUSum,bC),
    /* Expand the reciprocal of Bmag in configuration basis. */
    BmagInv_e : doExpand1(BmagInv,bC),

    /* Calculate the drift. */
    if dir = 1 then (
      alphaDr : nuSum*((1/2)*dxvl[vid1[dir]]*vv+wl[vid1[dir]])-nuUSum_e
    ) else (
      alphaDr : nuSum*(dxvl[vid1[dir]]*vv + 2*wl[vid1[dir]])
    ),
    /* Expand drag alpha (evaluated at the boundary) in conf basis to
       simplify assignment of Ghat. */
    alphaDrag_c : calcInnerProdList(varsC,1,bC,subst(vv=1,alphaDr)),
    alst        : doMakeExprLst(alphaDrag_c, alphaDrag),
    alphaDrag_e : doExpandLst(alst,bC),

    /* vMuMid is the value returned and from which vMuMidMax is computed. */
    zr     : makelist(varsP[d]=0, d, 1, length(varsP)),
    vMuMid : float(expand(fullratsimp(subst(zr,alphaDr/nuSum)))),

    /* Evaluate the average and jump functions at vv=1. */
    fhat_avg  : subst(vv=1, favg_e),
    fhat_jump : subst(vv=1, fjump_e),

    /* Factor to multiply hsol terms to simplify output */
    if dir = 1 then (
      diffFac_c : calcInnerProdList(varsC,1,bC,nuVtSqSum_e),
      alst      : doMakeExprLst(diffFac_c, nuVtSqSum),
      diffFac_e : doExpandLst(alst, bC)
    ) else (
      diffFac_c : calcInnerProdList(varsC,1,bC,m_*BmagInv_e*nuVtSqSum_e*subst(vv=1,alphaDr/nuSum)),
      alst      : doMakeExprLst(diffFac_c, diffFac),
      diffFac_e : doExpandLst(alst, bC)
    ),

    if (not applyPos) then (

      if numFluxOp=0 then (
        /* Use global Lax-Friedrichs penalty flux for the drag term. */
        GhatDrag_c : calcInnerProdList(varsP,alphaDrag_e,bP,(1/2)*fhat_avg)
                    +fullratsimp(calcInnerProdList(varsP,1,bP,-(1/2)*fhat_jump))
      ) elseif numFluxOp=1 then (
        /* Use local (quadrature point) Lax-Friedrichs penalty fluxes. */
        /* Function expanded in basis. */
        fl_e : doExpand1(fl, bP),
        fr_e : doExpand1(fr, bP),
        /* Surface basis. Equivalent to basis of one lower
        ** dimensionality without surface variable. */
        bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst(vv=0,bP)))*bP),
        /* Project alphaDrag evaluatated at interior surface onto surf basis. */
        alphaDrSurf_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=1,alphaDr))),
        alst          : doMakeExprLst(alphaDrSurf_c, alphaDrSurf),
        alphaDrSurf_e : doExpandLst(alst, bSurf),
        /* Upwind the drag term using quadrature point evaluation. */
        if polyOrder=1 then quad : 1/sqrt(3),
        if polyOrder=2 then quad : sqrt(3/5),
        nodes : eval_string(sconcat("nodes", cdim+vdim-1, "xp", polyOrder))*quad,
        /* Function to evaluate expansion g at quadrature nodes. */
        nodesub(g) := makelist(subst(makelist(surfVars[j]=nodes[i][j],j,1,length(varsP)-1),g),i,1,length(nodes)),
        /* Evaluate fl, fr, and alpha at quadrature nodes. */
        frQ : gcfac(float(nodesub(subst(vv=-1,fr_e)))),
        flQ : gcfac(float(nodesub(subst(vv=+1,fl_e)))),
        /* Note: alphaDrSurf_e is a surface expansion. */
        alphaq : gcfac(float(nodesub(alphaDrSurf_e))),
        /* Determine upwinding: */
        fUpQ       : gcfac(.5*(flQ+frQ)-.5*sgn(alphaQuad)*(flQ-frQ)),
        modToNod   : fullratsimp(calcModToNodPhaseWithNodesAndBasis(nodes,bSurf,surfVars)),
        fUpwind_c  : fullratsimp(invert(transpose(modToNod)).makelist(fUpwindQuad[i-1],i,1,length(nodes))),
        fUpwind_c  : gcfac(makelist(fUpwind_c[i][1],i,1,length(fUpwind_c))),
        fHatSurf_e : doExpand1(fUpwind,bSurf),

        GhatDrag_c : calcInnerProdList(varsP,alphaDrSurf_e,bP,fHatSurf_e)
      )

    ) else (
      /* Function expanded in basis. */
      fl_e : doExpand1(fl, bP),
      fr_e : doExpand1(fr, bP),
      /* Surface basis. Equivalent to basis of one lower
      ** dimensionality without surface variable. */
      bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst(vv=0,bP)))*bP),
      /* Project alphaDrag evaluated at interior surface onto surf basis. */
      alphaDrSurf_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=1,alphaDr))),
      alst          : doMakeExprLst(alphaDrSurf_c, alphaDrSurf),
      alphaDrSurf_e : doExpandLst(alst, bSurf),

      printf(fh, "  double alphaDrSurf[~a]; ~%", length(bSurf)),
      writeCExprsNoExpand1(alphaDrSurf, subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2],alphaDrSurf_c)),
      printf(fh, "~%"),
      /* Here need to change the sign of alphaDrSurf because calculation
         fHatAL assumed a convective term on the left side of the Gyrokinetic equation. */
      fHatSurf_e    : subst(gkvsub, fhatALgenUpwind2(subst(gkvsubInv,fl_e), subst(gkvsubInv,fr_e), 
                                                     -subst(gkvsubInv,alphaDrSurf_e), subst(gkvsubInv,vv), 
                                                     cfll, cflr, cdim, vdim, polyOrder)),
      GhatDrag_c : calcInnerProdList(varsP,alphaDrSurf_e,bP,fHatSurf_e)

    ),

    if (not applyPos) then (
      if numFluxOp=0 then (
        /* Declare and populate favg. */
        printf(fh, "  double favg[~a]; ~%", NP),
        for c : 1 thru NP do (
          printf(fh, "  favg[~a] = ~a*fr[~a]+fl[~a]; ~%", c-1, signs[c], c-1, c-1)
        ),
        printf(fh, "~%"),

        /* Declare and populate fjump. */
        printf(fh, "  double fjump[~a]; ~%", NP),
        for c : 1 thru NP do (
          printf(fh, "  fjump[~a] = nuSum*vMuMidMax*(fl[~a]-(~a*fr[~a])); ~%", c-1, c-1, signs[c], c-1)
        ),
        printf(fh, "~%"),

        /* Compute the drag part of Ghat separately. */
        printf(fh, "  double alphaDrag[~a]; ~%", NC),
        writeCExprs1(alphaDrag,alphaDrag_c),
        printf(fh, "~%")
      ) elseif numFluxOp=1 then (
        printf(fh, "  double alphaDrSurf[~a]; ~%", length(bSurf)),
        writeCExprsNoExpand1(alphaDrSurf, subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2],alphaDrSurf_c)),
        printf(fh, "~%"),

        printf(fh, "  double fUpwindQuad[~a];~%", length(nodes)),
        for i:1 thru length(alphaq) do (
          /* This subst eliminates the need for another variable, and removes
             the common factor (for p=1) which is not needed to determine
             sign (not working for p>1). */
          if polyOrder=1 then (
            rcoFac : 1./(content(alphaq[1],alphaDrSurf[0])[1]),
            printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=fullratsimp(alphaq[i]*rcoFac),fUpQ[i]))
          ) else (
            printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=alphaq[i],fUpQ[i]))
          )
        ),
        printf(fh, "~%"),
        printf(fh, "  double fUpwind[~a];~%", length(nodes)),
        writeCExprsNoExpand1(fUpwind, fUpwind_c),
        printf(fh, "~%")
      )
    ),

    /* Write out diffusion term factors if vdir=2 (otherwise it is just vtSq). */
    if dir = 2 then (
      printf(fh, "  double diffFac[~a]; ~%", NC),
      clst : makelist(nuVtSqSum[i],i,0,NC-1),
      writeCExprsCollect1c(diffFac, radcan(diffFac_c), clst, 0),
      printf(fh, "~%")
    ),

    /* Write the diffusive part of Ghat into its own variable. */
    printf(fh, "  double Gdiff[~a]; ~%", NP),

    /* Declare Ghat. */
    printf(fh, "  double Ghat[~a]; ~%", NP),

    /* Declare variable with contribution from second integration by parts. */
    printf(fh, "  double incr2[~a]; ~%", NP),
    printf(fh, "~%"),

    if (not applyPos) then (

      compWriteIncr(hsol[1],hsol[2],0)

    ) else (

      /* If value of recovery polynomial at the interface, evaluated at key
         points, is below zero, use its exponential representation. */
      hsolKPifCond : "(",
      for iS : 1 thru length(hsolKP[1]) do (
        hsolKPifCond : sconcat(hsolKPifCond,string(float(expand(hsolKP[1][iS]))),">=0.0)"),
        if iS<length(hsolKP[1]) then (
          hsolKPifCond : sconcat(hsolKPifCond," && (")
        )
      ),
      printf(fh,"  if ( ~a ) {~%",hsolKPifCond),

      compWriteIncr(hsol[1], hsol[2], 2),

      printf(fh,"  } else {~%"),
      printf(fh,"~%"),

      printf(fh,"    double xBar[~a];~%",Ncp),
      writeCExprs1so(xBar,xBars,2),
      printf(fh,"~%"),

      printf(fh,"    double xBarSq[~a];~%", Ncp),
      writeCExprs1sP(xBarSq,xBarsSq,2),
      printf(fh,"~%"),

      printf(fh,"    double g1[~a];~%",Ncp),
      writeCExprs1s(g1,g1s,2),
      printf(fh,"~%"),

      printf(fh,"    double gBound[~a];~%",Ncp),
      printf(fh,"    double gBoundP[~a];~%",Ncp),
      printf(fh,"~%"),

      for iCP : 1 thru Ncp do (
        /* When the function is very flat we need to compute the exponential
           differently so that 1/sinh(g1) doesn't blow up. */
        printf(fh,"    if (std::abs(g1[~a]) > 1.0e-15) {~%",iCP-1),

        printf(fh,"      double g1Sq = g1[~a]*g1[~a];~%",iCP-1,iCP-1),

        expg0  : [g1[iCP-1]*(hsolEv[1][iCP]+hsolEv[3][iCP]/3)/sinh(g1[iCP-1])],
        gprime : [g1[iCP-1]*expg0[1]],

        writeCExprs1sI(gBound,iCP-1,expg0,4),
        writeCExprs1sI(gBoundP,iCP-1,gprime,4),

        printf(fh,"    } else {~%"),

        expg0  : [hsolEv[1][iCP]+hsolEv[3][iCP]/3],
        gprime : [0.0],

        writeCExprs1sI(gBound,iCP-1,expg0,4),
        writeCExprs1sI(gBoundP,iCP-1,gprime,4),

        printf(fh,"    };~%"),
        printf(fh, "~%")
      ),

      compWriteIncr((gBound[0]+gBound[1])/2+3*(gBound[0]-gBound[1])*surfVars[1]/2,
                    (gBoundP[0]+gBoundP[1])/2+3*(gBoundP[0]-gBoundP[1])*surfVars[1]/2,2),

      printf(fh,"  };~%")
    ),
    printf(fh, "~%"),

    /* Write out increment 1. */
    printf(fh, "  double incr1[~a]; ~%", NP),
    writeCExprsCollect1(incr1, incr_r1, clst),
    printf(fh, "~%"),

    incr_s1 : makelist(incr1[i-1], i, 1, NP),
    incr_s2 : makelist(incr2[i-1], i, 1, NP),
    /* Don't do coefficients where the increment is zero */
    for i : 1 thru NP do (
      if (incr_r1[i] = 0) then
        incr_s1[i] : 0,
      if (incr_r2[i] = 0) then
        incr_s2[i] : 0
    ),
    /* Write out contribution right cell. */
    writeCIncrExprs1(outr, rdv2R*incr_s1+rdvSq4R*incr_s2), 
    printf(fh, "~%"),

    signs1 : makelist(1,i,1,NP),
    signs2 : makelist(1,i,1,NP),
    for i : 1 thru NP do (
      if (incr_r1[i] = 0) then
        false
      else
        signs1[i] : fullratsimp(incr_l1[i]/incr_r1[i]),
      if (incr_r2[i] = 0) then
        false
      else
        signs2[i] : fullratsimp(incr_l2[i]/incr_r2[i])
    ),
    incr_s1 : makelist(signs1[i]*incr1[i-1], i, 1, NP),
    incr_s2 : makelist(signs2[i]*incr2[i-1], i, 1, NP),
    /*incr_s2 : incr_l2,*/
    /* Don't do coefficients where the increment is zero */
    for i : 1 thru NP do (
      if (incr_r1[i] = 0) then
        incr_s1[i] : 0
    ),
    for i : 1 thru NP do (
      if (incr_r2[i] = 0) then
        incr_s2[i] : 0
    ),
    /* Write out contribution to left cell. */
    writeCIncrExprs1(outl, rdv2L*incr_s1+rdvSq4L*incr_s2), 
    printf(fh, "~%"),

    printf(fh, "  return std::abs(~a); ~%", vMuMid),
  
    printf(fh, "} ~%")
));

calcBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pMax, applyPos) := block([],
  if applyPos then (
    pOrderMax : 1
  ) else (
    pOrderMax : pMax
  ),

  for polyOrder : 1 thru pOrderMax do (

    kill(varsC, varsP, basisC, basisP),

    /* Load basis of dimensionality requested. */
    modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
    load(modNm),
 
    /* Variables. */
    vid      : vidx(cdim,vdim),
    vid1     : vidx1(cdim,vdim),
    vv       : varsV[dir],
    varsP    : subst(gkvsub, varsP),
    surfVars : delete(vv,varsP),

    /* Polynomial basis and its derivatives. */
    bP  : subst(gkvsub, basisP[polyOrder]),
    bC  : basisC[polyOrder],	
    NP  : length(bP),
    NC  : length(bC),
    bPp : diff(bP,vv),

    /* First compute the contribution coming from the second
    ** differentiation by parts to left and right cells. */
    nuVtSqSum_e : doExpand1(nuVtSqSum,bC),
    BmagInv_e   : doExpand1(BmagInv,bC),

    /* Function expanded in basis. */
    fl_e : doExpand1(fl, bP),
    fr_e : doExpand1(fr, bP),

    /* Factor to multiply boundary surf terms to simplify output */
    if dir = 1 then (
      diffFac_c : calcInnerProdList(varsC,1,bC,nuVtSqSum_e),
      alst      : doMakeExprLst(diffFac_c, nuVtSqSum)
    ) else (
      diffFac_c : calcInnerProdList(varsC,1,bC,m_*BmagInv_e*nuVtSqSum_e),
      alst      : doMakeExprLst(diffFac_c, diffFac)
    ),
    diffFac_e : doExpandLst(alst, bC),
    
    /* Contribution from second integration by parts. */
    if dir = 1 then (
      gl : diffFac_e*fl_e,
      gr : diffFac_e*fr_e
    ) else (
      /* Define drift term. */
      dr_l  : dxvl[vid1[dir]]*vv + 2*wl[vid1[dir]],
      gl    : diffFac_e*dr_l*fl_e,
      dr_r  : dxvr[vid1[dir]]*vv + 2*wr[vid1[dir]],
      gr    : diffFac_e*dr_r*fr_e
    ),

    /* Increments to the right cell (some dimensional factors missing).
    ** Here incr_r1 and incr_r2 have separate left/right symmetry. */
    incr_r2 : -calcInnerProdList(surfVars, -1, subst(vv=-1, bPp), subst(vv=-1, gr)),

    /* Increments to the left cell (some dimensional factors missing). */
    incr_l2 : -calcInnerProdList(surfVars, 1, subst(vv=1, bPp), subst(vv=1, gl)),

    printf(fh, "double ~a_~a_P~a(const double m_, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const int *idxl, const int *idxr, const double *BmagInv, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vVars[dir], polyOrder),
    printf(fh, "  // w[~a]:         Cell-center coordinates.~%", cdim+vdim),
    printf(fh, "  // dxv[~a]:       Cell spacing.~%", cdim+vdim),
    printf(fh, "  // idx[~a]:       current grid index.~%", cdim+vdim),
    printf(fh, "  // nuSum:        collisionalities added (self and cross species collisionalities). ~%"),
    printf(fh, "  // vMuMidMax:    maximum midpoint value of v-u. ~%"),
    printf(fh, "  // nuUSum[~a]:    sum of bulk velocities times their respective collisionalities. ~%", NC),
    printf(fh, "  // nuVtSqSum[~a]: sum of thermal speeds squared time their respective collisionalities. ~%", NC),
    printf(fh, "  // fl/fr:        Distribution function in left/right cells ~%"),
    printf(fh, "  // outl/outr:    Incremented distribution function in left/right cells ~%"),
    printf(fh, "  double rdvSq4L = 4.0/(dxvl[~a]*dxvl[~a]); ~%", vid1[dir], vid1[dir]),
    printf(fh, "  double rdvSq4R = 4.0/(dxvr[~a]*dxvr[~a]); ~%", vid1[dir], vid1[dir]),
    printf(fh, "~%"),

    /* Write out factors in diffusion term if dir=2, otherwise it's just vtSq. */
    if dir = 2 then (
      printf(fh, "  double diffFac[~a]; ~%", NC),
      clst : makelist(nuVtSqSum[i],i,0,NC-1),
      writeCExprsCollect1c(diffFac, radcan(diffFac_c), clst, 0),
      printf(fh, "~%")
    ),

    /* Write out increments. */
    clst : makelist(nuVtSqSum[i],i,0,NC-1), 

    printf(fh, "  if (idxr[~a] == 1) {~%", vid1[dir]),
    printf(fh, "~%"),

    /* Write out contribution right cell. */
    writeCIncrCollect1s(outr, rdvSq4R*incr_r2, clst),
    printf(fh, "~%"),
  
    printf(fh, "  } else {~%"),
    printf(fh, "~%"),

    /* Write out contribution to left cell. */
    writeCIncrCollect1s(outl, rdvSq4L*incr_l2, clst),
    printf(fh, "~%"),

    printf(fh, "  }~%"),

    printf(fh, "  return 0.0; ~%"),
  
    printf(fh, "} ~%")
));


calcGkLBOconstNuSurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrderMax, usePos) := block([],
  printf(fh, "#include <GkLBOModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrderMax, usePos) )
  
)$

calcGkLBOconstNuBoundarySurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrderMax, usePos) := block([],
  printf(fh, "#include <GkLBOModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrderMax, usePos) )
 
)$

