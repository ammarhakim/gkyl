cVars : [X, Y, Z]$
vVars : [Vpar, Mu]$

polyOrderMax : 3$

fh : openw("~/max-out/GkLBOModDecl.h")$

printf(fh, "#ifndef GKLBO_MOD_DELC_H ~%")$
printf(fh, "#define GKLBO_MOD_DELC_H ~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "#include <algorithm> ~%")$
printf(fh, "#include <Positivity.h> ~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "    return (T(0) < val) - (val < T(0)); ~%")$
printf(fh, "} ~%")$
printf(fh, "extern \"C\" { ~%")$

bName   : ["Ser","Max","Tensor"]$

for bInd : 1 thru length(bName) do (

  for ci : 1 thru 3 do (
    for vi : 1 thru 2 do (
  
      for pi : 1 thru polyOrderMax do (
        printf(fh, "double GkLBOconstNuVol~ax~av~aP~a(const double m_, const double *w, const double *dxv, const double *BmagInv, const double nuSum, const double *nuUSum, const double *nuVtSqSum, const double *f, double *out); ~%", ci, vi, bName[bInd], pi),
  
        for si : 1 thru vi do (
          printf(fh, "double GkLBOconstNuSurf~ax~av~a_~a_P~a(const double m_, const double cfll, const double cflr, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *BmagInv, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, bName[bInd], vVars[si], pi),
  
          printf(fh, "double GkLBOconstNuBoundarySurf~ax~av~a_~a_P~a(const double m_, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const int *idxl, const int *idxr, const double *BmagInv, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, bName[bInd], vVars[si], pi),
  
          if pi=1 then (
            /* Add kernels for positivity preserving algorithm. */
            printf(fh, "double GkLBOconstNuSurfPositivity~ax~av~a_~a_P~a(const double m_, const double cfll, const double cflr, const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *BmagInv, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, bName[bInd], vVars[si], pi)
          )
        ),
        printf(fh, "~%")
  
      ),
      printf(fh, "~%")
    )
  )
)$

printf(fh, "~% ~%")$

printf(fh, "} ~%")$

printf(fh, "#endif ~%")$

close(fh)$
