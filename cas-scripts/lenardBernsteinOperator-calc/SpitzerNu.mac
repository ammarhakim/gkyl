/* Generate kernels for the updater that computes the Spitzer
   collision frequency nu. */
/* Obtaining a full expansion for nu is likely to be a complex
   operation, so we will probably need a dedicated updater. For
   now only use cell average nu. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
fpprec : 24$

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 3$
minCdim_Max : 1$
maxCdim_Max : 3$

/* ...... END OF USER INPUTS........ */


writeCExprsCollect1r(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      ep : string(e),
      outStr : ssubst("gkyl_ipow(vtSq[0],3)","vtSq[0]^3",ep),
      outStr : ssubst("gkyl_ipow(vtSq0,3)","vtSq0^3",outStr),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], outStr)
    )
  )
)$

declareWriteCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
    ep : string(expr),
    outStr : ssubst("gkyl_ipow(vtSq[0],3)","vtSq[0]^3",ep),
    printf(fh, "  double ~a = ~a; ~%", lhs, outStr)
  )
)$

writeCExprsCs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
    ep : string(expr),
    outStr : ssubst("gkyl_ipow(vtSq[0],3)","vtSq[0]^3",ep),
    printf(fh, "    ~a = ~a; ~%", lhs, outStr)
  )
)$

calcSpitzerNu(fh, funcNm, cdim, basisFun, pMax) := block([],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

  for polyOrder : 1 thru pMax do (
    bC  : basisC[polyOrder],
    NC  : length(bC),
  
    /* Function declaration with input/output variables. */
    printf(fh, "void ~a_P~a(const double normNu, const double m_, const double *m0, const double *vtSq, double *nu) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // nuNorm:  collisionality normalized by (T_0^(3/2)/n_0). ~%"),
    printf(fh, "  // m_:      mass. ~%"),
    printf(fh, "  // m0[~a]:   number density. ~%", cdim),
    printf(fh, "  // vtSq[~a]: squared thermal speed, sqrt(T/m). ~%", cdim),
    printf(fh, "  // nu[~a]:   collisionality. ~%", cdim),
    printf(fh, " ~%"),

    /* List vtSq coefficients and expand in conf basis. */
    vtSq_c : makelist(vtSq[i],i,0,NC-1),
    vtSq_e : doExpand1(vtSq,bC),
    /* Expand density in conf basis. */
    m0_e : doExpand1(m0,bC),

    printf(fh, "  double temp[~a]; ~%", NC),
    writeCExprs1(temp,m_*vtSq_c),
    printf(fh, " ~%"),

    /* Expand temperature in conf basis. */
    temp_e : doExpand1(temp,bC),

    /* Expand sqrt of the temperature in conf basis. */
    printf(fh, "  double sqrtT[~a]; ~%", NC),
    sqrtT_c : calcInnerProdList(varsC,1.0,bC,sqrt(temp_e)),
    writeCExprs1(sqrtT,sqrtT_c),
    printf(fh, " ~%"),

    /* Expand sqrt of temperature in conf basis. */
    sqrtT_e : doExpand1(sqrtT,bC),

    /* Expand reciprocal of the temperature in conf basis. */
    printf(fh, "  double rSqrtT[~a]; ~%", NC),
    rSqrtT_c : calcInnerProdList(varsC,1.0,bC,1.0/sqrtT_e),
    print("here"),
    writeCExprs1(rSqrtT,rSqrtT_c),
    printf(fh, " ~%"),

    /* Expand reciprocal of sqrt temperature in conf basis. */
    rSqrtT_e : doExpand1(rSqrtT,bC),

    nu_c : normNu*calcInnerProdList(varsC,1.0,bC,m0_e*(rSqrtT_e^3)),

    writeCExprsCollect1(nu,nu_c,[normNu]),
    printf(fh, " ~%"),

    printf(fh, "} ~%"),
    printf(fh, " ~%")
  )
)$

calcCellAvSpitzerNuScale(fh, funcNm, cdim, basisFun, pMax) := block([],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

  for polyOrder : 1 thru pMax do (
    bC  : basisC[polyOrder],
    NC  : length(bC),
  
    /* Function declaration with input/output variables. */
    printf(fh, "void ~a_P~a(const double normNu, const double rmR3d2, const double massSq, const double chargeR4, const double eps0Sq, const double *m0, const double *vtSq, double *nu) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // nuNorm:  collisionality normalized by (T_0^(3/2)/n_0). ~%"),
    printf(fh, "  // rmR3d2:  reciprocal of mass raised to the (3/2) power. ~%"),
    printf(fh, "  // m0[~a]:   number density. ~%", NC),
    printf(fh, "  // vtSq[~a]: squared thermal speed, sqrt(T/m). ~%", NC),
    printf(fh, "  // nu[~a]:   collisionality. ~%", NC),
    printf(fh, " ~%"),

    m0_e   : doExpand1(m0,bC),
    vtSq_e : doExpand1(vtSq,bC),

    m0Av    : innerProd(varsC,1.0,1.0,m0_e)/innerProd(varsC,1.0,1.0,1.0),
    vtSqAv  : innerProd(varsC,1.0,1.0,vtSq_e)/innerProd(varsC,1.0,1.0,1.0),

    radexpand: false,
    nu_c : normNu*rmR3d2*calcInnerProdList(varsC,1.0,bC,m0Av/sqrt(vtSqAv^3)),

    writeCExprsCollect1r(nu,nu_c,[normNu,rmR3d2]),
    printf(fh, " ~%"),

    printf(fh, "} ~%"),
    printf(fh, " ~%")
  )
)$

calcCellAvSpitzerNuBuild(fh, funcNm, cdim, basisFun, pMax) := block([],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

  for polyOrder : 1 thru pMax do (
    bC  : basisC[polyOrder],
    NC  : length(bC),
  
    /* Function declaration with input/output variables. */
    printf(fh, "void ~a_P~a(const double elemCharge, const double mass, const double massSq, const double chargeR4, const double eps0Sq, const double *m0, const double *vtSq, double *nu) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // elemCharge: elementary charge. ~%"),
    printf(fh, "  // mass:       mass of this species. ~%"),
    printf(fh, "  // massSq:     mass of this species squared. ~%"),
    printf(fh, "  // chargeR4:   charge of this species raised to the power of 4. ~%"),
    printf(fh, "  // eps0Sq:     vacuum permittivity squared. ~%"),
    printf(fh, "  // m0[~a]:      number density. ~%", NC),
    printf(fh, "  // vtSq[~a]:    squared thermal speed, sqrt(T/m). ~%", NC),
    printf(fh, "  // nu[~a]:      collisionality. ~%", NC),
    printf(fh, " ~%"),

    m0_e   : doExpand1(m0,bC),
    vtSq_e : doExpand1(vtSq,bC),

    m0Av    : innerProd(varsC,1.0,1.0,m0_e)/innerProd(varsC,1.0,1.0,1.0),
    vtSqAv  : innerProd(varsC,1.0,1.0,vtSq_e)/innerProd(varsC,1.0,1.0,1.0),

/*    printf(fh, "  double n0    = ~a;~%", m0Av[1]),
    printf(fh, "  double vtSq0 = ~a;~%", vtSqAv[1]),
    printf(fh, "  double T0    = ~a;~%", vtSqAv[1]*mass/elemCharge), */
    declareWriteCExprsC(n0, m0Av),
    declareWriteCExprsC(vtSq0, vtSqAv),
    declareWriteCExprsC(T0, vtSqAv*mass/elemCharge),

    /* These are the expressions from Braginskii's 1965 paper. */
    printf(fh, "  double logLambda;~%"),
    printf(fh, "  if (T0 < 50.0) {~%"),
    logLambdaL : 23.4-1.15*log10(n0*1.0e-6)+3.45*log10(T0),
    writeCExprsCs(logLambda, logLambdaL),
    printf(fh, "  } else {~%"),
    logLambdaU : 25.3-1.15*log10(n0*1.0e-6)+2.3*log10(T0),
    writeCExprsCs(logLambda, logLambdaU),
    printf(fh, "  }~%"),

    radexpand: false,
    nu_c : calcInnerProdList(varsC,1.0,bC,chargeR4*logLambda*n0/(6.0*sqrt(2*(%pi^3))*sqrt(vtSq0^3)*eps0Sq*massSq)),

    writeCExprsCollect1r(nu,nu_c,[charge,eps0]),
    printf(fh, " ~%"),

    printf(fh, "} ~%"),
    printf(fh, " ~%")
  )
)$

bName        : ["Ser","Max"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max]$
minCdim      : [minCdim_Ser, minCdim_Max]$
minVdim      : [minVdim_Ser, minVdim_Max]$
maxCdim      : [maxCdim_Ser, maxCdim_Max]$
maxVdim      : [maxVdim_Ser, maxVdim_Max]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    disp(printf(false,sconcat("Creating SpitzerNu",bName[bInd]," ~ax"),c)),
    fname : sconcat("~/max-out/SpitzerNu", bName[bInd], c, "x", ".cpp"),
    fh : openw(fname),

    printf(fh, "#include <SpitzerNuModDecl.h> ~%"),
    printf(fh, "#include <math.h> ~%"),
    printf(fh, "#include <../../Lib/gkyl_ipow.h> ~%~%"),

    /*.Full expansion just projecting n/T^(3/2) onto basis. */
    /*funcName : sconcat("SpitzerNu", c, "x", bName[bInd]),
    calcSpitzerNu(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]), */

    /*.Using cell-average values of n and T. */
    funcName : sconcat("SpitzerNuCellAvScale", c, "x", bName[bInd]),
    calcCellAvSpitzerNuScale(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /*.Build cell-average collisionality from scratch. */
    funcName : sconcat("SpitzerNuCellAvBuild", c, "x", bName[bInd]),
    calcCellAvSpitzerNuBuild(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),
    close(fh)
  )
)$

