load("modal-basis")$
load("out-scripts");
load(stringproc)$
load("recovery")$
fpprec : 24$

/* This script generates the kernels for the surface term
   contribution from Lenard Bernstein operator using
   two integrations by parts for the diffusive term and
   a constant collisionality nu. */

cvars : [x, y, z]$
cVars : [X, Y, Z]$
varsV : [vx, vy, vz]$
vvars : [VX, VY, VZ]$
nuUSumx : [sumNuUx, sumNuUy, sumNuUz]$

vidx(cdim,vdim)  := makelist(i,i,cdim+1,cdim+vdim)$
vidx1(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

load ("scifac")$
writeCExprsCollect1c(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCExprsCollect1s(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "    ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCIncrExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "    ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcConstNuUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder, isNonuniform) := block(
  [modNm,vid,vid1,vv,surfVars,bP,bC,NP,NC,bPp,hOrder,h_e,hsol],

  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  pDim : cdim+vdim,

  /* Variables. */
  vid  : vidx(cdim,vdim),
  vid1 : vidx1(cdim,vdim),
  vv   : varsV[dir],
  surfVars : delete(vv,varsP),

  /* Polynomial basis and its derivatives. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  NP : length(bP),
  NC : length(bC),
  bPp : diff(bP,vv),

  /* Construct the recovery polynomial */
  hOrder : 2*polyOrder+1,
  if isNonuniform then (
    recDxvL : makelist(2,i,1,pDim),  recDxvL[cdim+dir] : dxvl[vid1[dir]],
    recDxvR : makelist(2,i,1,pDim),  recDxvR[cdim+dir] : dxvr[vid1[dir]],
    h_e : fullratsimp(calcRecov2CellGenNonuniform(basisFun,vv,varsP,polyOrder,recDxvL,recDxvR,
                                                  dg(makelist(fl[i-1],i,1,NP)), dg(makelist(fr[i-1],i,1,NP)))),
    rdv2DiffFac : 1
  ) else (
    h_e : calcRecov2CellGen(basisFun,vv,varsP,polyOrder,dg(makelist(fl[i-1],i,1,NP)), dg(makelist(fr[i-1],i,1,NP))),
    rdv2DiffFac : rdv2L
  ),
  hsol : cons(subst(vv=0,h_e),makelist(subst(vv=0,diff(h_e,vv,ord)/(ord!)),ord,1,hOrder)),

  /* First compute the contribution coming from the second
     differentiation by parts to left and right cells. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),

  /* Now do the contribution from the generalized flux Ghat. */
  basisFlip : subst(vv=-1*vv, bP),
  signs     : fullratsimp(basisFlip/bP),
  /* Expand the average and jump functions in the phase basis. */
  favg_e  : doExpand1(favg, bP),
  fjump_e : doExpand1(fjump, bP),
  /* Expand the mean flow speed in the configuration basis. */
  nuUSum_e : doExpand1(nuUSumx[dir],bC),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : nuSum*((1/2)*dxvl[vid1[dir]]*vv+wl[vid1[dir]])-nuUSum_e,
  /* Expand drag alpha (evaluated at the boundary) in conf basis to
     simplify assignment of Ghat. */
  alphaDrag_c : calcInnerProdList(varsC,1,bC,subst(vv=1,alphaDr)),
  alphaDrag_e : doExpand1(alphaDrag,bC),

  /* vMuMid is the value returned and from which vMuMidMax is computed. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),
  vMuMid : float(expand(fullratsimp(subst(zr,alphaDr/nuSum)))),

  /* Evaluate the average and jump functions at vv=1. */
  fhat_avg  : subst(vv=1, favg_e),
  fhat_jump : subst(vv=1, fjump_e),

  /* Separate out diffusion part of Ghat to simplify Ghat assignment.
  ** Leave the rdv factor out for later multiplication. */
  Gdiff_c : calcInnerProdList(varsP,1,bP,nuVtSqSum_e*hsol[2]),
  Gdiff_e : doExpand(Gdiff_c, bP),

  /* Calculate Ghat projected on the phase basis. */
  Ghat_c  : calcInnerProdList(varsP,1,bP,-(1/2)*fhat_jump)
           +calcInnerProdList(varsP,1,bP, (1/2)*alphaDrag_e*fhat_avg)
           +rdv2DiffFac*calcInnerProdList(varsP,1,bP,Gdiff_e),

  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  glst1      : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(glst1, bP),
  Ghat_final : subst(vv=1, Ghat_e),

  /* Increments to the right cell (some dimensional factors missing).
  ** Here incr_r1 and incr_r2 have separate left/right symmetry. */
  incr_r1 :  calcInnerProdList(surfVars, -1, subst(vv=-1, bP), Ghat_final),
  incr_r2 : -calcInnerProdList(surfVars, -1, subst(vv=-1, bPp), nuVtSqSum_e*hsol[1]),

  /* Increments to the left cell (some dimensional factors missing). */
  incr_l1 :  calcInnerProdList(surfVars, 1, subst(vv=1, bP), Ghat_final),
  incr_l2 : -calcInnerProdList(surfVars, 1, subst(vv=1, bPp), nuVtSqSum_e*hsol[1]),

  printf(fh, "double ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], polyOrder),
  printf(fh, "  // w[~a]:          Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:        Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuSum:         collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // vMuMidMax:     maximum midpoint value of v-u. ~%"),
  printf(fh, "  // nuUSum[~a]:     sum of bulk velocities times their respective collisionalities. ~%", vdim*NC),
  printf(fh, "  // nuVtSqSum[~a]:  sum of thermal speeds squared time their respective collisionalities. ~%", NC),
  printf(fh, "  // fl/fr:         Distribution function in left/right cells ~%"),
  printf(fh, "  // outl/outr:     Incremented distribution function in left/right cells ~%"),
  printf(fh, "  double rdv2L = 2.0/dxvl[~a]; ~%", vid1[dir]),
  printf(fh, "  double rdv2R = 2.0/dxvr[~a]; ~%", vid1[dir]),
  printf(fh, "  double rdvSq4L = 4.0/(dxvl[~a]*dxvl[~a]); ~%", vid1[dir], vid1[dir]),
  printf(fh, "  double rdvSq4R = 4.0/(dxvr[~a]*dxvr[~a]); ~%", vid1[dir], vid1[dir]),
  printf(fh, "~%"),

  /* Create pointer to component of u relevant to this surface. */
  printf(fh, "  const double *sumNuU~a = &nuUSum[~a]; ~%", cvars[dir], NC*(dir-1)),
  printf(fh, "~%"),

  /* Declare and populate favg. */
  printf(fh, "  double favg[~a]; ~%", NP),
  for c : 1 thru NP do (
    printf(fh, "  favg[~a] = ~a*fr[~a]+fl[~a]; ~%", c-1, signs[c], c-1, c-1)
  ),
  printf(fh, "~%"),

  /* Declare and populate fjump. */
  printf(fh, "  double fjump[~a]; ~%", NP),
  for c : 1 thru NP do (
    printf(fh, "  fjump[~a] = nuSum*vMuMidMax*(fl[~a]-(~a*fr[~a])); ~%", c-1, c-1, signs[c], c-1)
  ),
  printf(fh, "~%"),

  /* Compute the nu*(vl-u) drift part of Ghat separately. */
  printf(fh, "  double alphaDrag[~a]; ~%", NC),
  writeCExprs1(alphaDrag,alphaDrag_c),
  printf(fh, "~%"),

  /* Declare and zero out Ghat. */
  printf(fh, "  double Ghat[~a]; ~%", NP),
  printf(fh, "  for(unsigned short int i=0; i<~a; ++i){ ~%", NP),
  printf(fh, "    Ghat[i]=0.0; ~%", 0),
  printf(fh, "  }; ~%"),
  printf(fh, "~%"),

  /* Populate Ghat. */
  quants : [dxvl,dxvr],
  tempVars : [],
  tempVars : writeCExprs1noPowers(Ghat, Ghat_c, quants, tempVars),
  printf(fh, "~%"),

  /* Write out increments. */
  printf(fh, "  double incr1[~a]; ~%", NP),
  clst : append([rdv2L], makelist(alphaDrag[i],i,0,NC-1)),
  writeCExprsCollect1(incr1, incr_r1, clst),
  printf(fh, "~%"),

  printf(fh, "  double incr2[~a]; ~%", NP),
  tempVars : writeCExprs1noPowers(incr2, radcan(incr_r2), quants, tempVars),
  printf(fh, "~%"),

  incr_s1 : makelist(incr1[i-1], i, 1, NP),
  incr_s2 : makelist(incr2[i-1], i, 1, NP),
  /* Don't do coefficients where the increment is zero */
  for i : 1 thru NP do (
    if (incr_r1[i] = 0) then
      incr_s1[i] : 0,
    if (incr_r2[i] = 0) then
      incr_s2[i] : 0
  ), 
  /* Write out contribution right cell. */
  writeCIncrExprs1(outr, rdv2R*incr_s1+rdvSq4R*incr_s2), 
  printf(fh, "~%"),

  signs1 : makelist(1,i,1,NP),
  signs2 : makelist(1,i,1,NP),
  for i : 1 thru NP do (
      if (incr_r1[i] = 0) then
        false
      else
        signs1[i] : fullratsimp(incr_l1[i]/incr_r1[i]),
      if (incr_r2[i] = 0) then
        false
      else
        signs2[i] : fullratsimp(incr_l2[i]/incr_r2[i])
  ),
  incr_s1 : makelist(signs1[i]*incr1[i-1], i, 1, NP),
  incr_s2 : makelist(signs2[i]*incr2[i-1], i, 1, NP),
  /* Don't do coefficients where the increment is zero */
  for i : 1 thru NP do (
    if (incr_r1[i] = 0) then
      incr_s1[i] : 0
  ), 
  for i : 1 thru NP do (
    if (incr_r2[i] = 0) then
      incr_s2[i] : 0
  ), 
  /* Write out contribution to left cell. */
  writeCIncrExprs1(outl, rdv2L*incr_s1+rdvSq4L*incr_s2), 
  printf(fh, "~%"),

  printf(fh, "  return std::abs(~a); ~%", vMuMid),

  printf(fh, "} ~%")
);

calcConstNuBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],

  kill(varsC, varsP, basisC, basisP),

  /* Load basis of dimensionality requested. */
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  /* Variables. */
  vid  : vidx(cdim,vdim),
  vid1 : vidx1(cdim,vdim),
  vv   : varsV[dir],
  surfVars : delete(vv,varsP),

  /* Polynomial basis and its derivatives. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  NP : length(bP),
  NC : length(bC),
  bPp : diff(bP,vv),

  /* First compute the contribution coming from the second
  ** differentiation by parts to left and right cells. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),

  /* Function expanded in basis. */
  fl_e : doExpand1(fl, bP),
  fr_e : doExpand1(fr, bP),
  /* Contribution from second differentiation by parts. */
  gl : nuVtSqSum_e*fl_e,
  gr : nuVtSqSum_e*fr_e,

  /* Increments to the right cell (some dimensional factors missing).
  ** Here incr_r1 and incr_r2 have separate left/right symmetry. */
  incr_r2 : -calcInnerProdList(surfVars, -1, subst(vv=-1, bPp), subst(vv=-1,gr)),

  /* Increments to the left cell (some dimensional factors missing). */
  incr_l2 : -calcInnerProdList(surfVars, 1, subst(vv=1, bPp), subst(vv=1,gl)),

  printf(fh, "double ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const int *idxl, const int *idxr, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], polyOrder),
  printf(fh, "  // w[~a]:       Cell-center coordinates.~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:     Cell spacing.~%", cdim+vdim),
  printf(fh, "  // idx[~a]:     current grid index.~%", cdim+vdim),
  printf(fh, "  // nuSum:         collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // vMuMidMax:     maximum midpoint value of v-u. ~%"),
  printf(fh, "  // nuUSum[~a]:     sum of bulk velocities times their respective collisionalities. ~%", vdim*NC, vdim),
  printf(fh, "  // nuVtSqSum[~a]:  sum of thermal speeds squared time their respective collisionalities. ~%", NC),
  printf(fh, "  // fl/fr:      Distribution function in left/right cells ~%"),
  printf(fh, "  // outl/outr:  Incremented distribution function in left/right cells ~%"),
  printf(fh, "  double rdvSq4L = 4.0/(dxvl[~a]*dxvl[~a]); ~%", vid1[dir], vid1[dir]),
  printf(fh, "  double rdvSq4R = 4.0/(dxvr[~a]*dxvr[~a]); ~%", vid1[dir], vid1[dir]),
  printf(fh, "~%"),

  /* Write out increments. */
  clst : makelist(nuVtSqSum[i],i,0,NC-1), 

  printf(fh, "  if (idxr[~a] == 1) {~%", vid1[dir]),
  printf(fh, "~%"),

  incr_s2 : incr_r2,
  /* Don't do coefficients where the increment is zero */
  for i : 1 thru NP do (
    if (incr_r2[i] = 0) then
      incr_s2[i] : 0
  ), 
  /* Write out contribution right cell. */
  writeCIncrExprs1s(outr, rdvSq4R*incr_s2), 
  printf(fh, "~%"),

  printf(fh, "  } else {~%"),
  printf(fh, "~%"),

  incr_s2 : incr_l2,
  /* Don't do coefficients where the increment is zero */
  for i : 1 thru NP do (
    if (incr_l2[i] = 0) then
      incr_s2[i] : 0
  ), 
  /* Write out contribution to left cell. */
  writeCIncrExprs1s(outl, rdvSq4L*incr_s2), 
  printf(fh, "~%"),
  printf(fh, "  }~%"),

  printf(fh, "  return 0.0; ~%"),

  printf(fh, "} ~%")
);

calcVmLBOconstNuSurfUpdater(fh, funcNm, cdim, vdim, basisFun, pOrder, isNonuniform) := block([],
  printf(fh, "#include <VmLBOModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcConstNuUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pOrder, isNonuniform) )
)$

calcVmLBOconstNuBoundarySurfUpdater(fh, funcNm, cdim, vdim, basisFun, pOrder) := block([],
  printf(fh, "#include <VmLBOModDecl.h> ~%"),
  for dir : 1 thru vdim do ( calcConstNuBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, pOrder) )
)$

