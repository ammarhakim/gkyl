load("modal-basis")$
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the volume term
   contribution from Lenard Bernstein operator to the
   gyrokinetic equation using two integrations by parts for
   the diffusive term. */

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

varsV : [vpar, mu]$
gkvsub: [vx=vpar,vy=mu]$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

load ("scifac")$
writeCExprsCollect1c(rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
     if expr[i] # 0.0 then printf(fh, "  ~a += ~a; ~%", out[i-1], gcfac(expr[i]))
  )
)$

calcGkLBOconstNuVolUpdater(fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
  printf(fh, "#include <GkLBOModDecl.h> ~%"),
  for polyOrder : 1 thru pMax do (

    kill(varsC, varsP, basisC, basisP),
    /* Load basis of dimensionality requested. */
    modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
    load(modNm),
    vid : vidx(cdim,vdim),
    /* Rename independent variables in bases. */
    varsP : subst(gkvsub, varsP),

    /* Polynomial basis and its derivatives. */
    bP : subst(gkvsub, basisP[polyOrder]),
    bC : basisC[polyOrder],
    NP : length(bP),
    NC : length(bC),

    /* Expand distribution function f in phase basis. */
    f_e  : doExpand1(f, bP),
    /* Expand flow speed sum(nu*u) and sum(nu*vtSq) in configuration basis. */
    nuUSum_e    : doExpand1(nuUSum, bC),
    nuVtSqSum_e : doExpand1(nuVtSqSum, bC),    
    
    /* vpar contribution. */
    cv   : varsV[1],
    bPp  : diff(bP,cv),
    bPpp : diff(bP,cv,2),
    alphaVpar_c : calcInnerProdList(varsP,1,bP,-nuSum*cv + rdv2[0]*(-nuSum*w[vid[1]] + nuUSum_e)),
    alst0       : doMakeExprLst(alphaVpar_c, alphaVpar),
    alphaVpar_e : doExpandLst(alst0, bP),

    facVpar_c : calcInnerProdList(varsC,rdvSq4[0],bC,nuVtSqSum_e),
    alst1     : doMakeExprLst(facVpar_c, facVpar),
    facVpar_e : doExpandLst(alst1, bC),

    incr : fullratsimp(calcInnerProdList(varsP,alphaVpar_e,bPp,f_e)
           +calcInnerProdList(varsP,facVpar_e,bPpp,f_e)),
    
    /* mu contribution. Last 3 terms from 2nd int by parts */
    if vdim = 2 then (
	cv   : varsV[2],
	bPp  : diff(bP,cv),
    	bPpp : diff(bP,cv,2),
	BmagInv_e : doExpand1(BmagInv,bC),

	alphaMu_c : calcInnerProdList(varsP,1,bP,2*(-nuSum*cv + rdv2[1]*(-nuSum*w[vid[2]] + m_*BmagInv_e*nuVtSqSum_e))),
	mlst0     : doMakeExprLst(alphaMu_c, alphaMu),
    	alphaMu_e : doExpandLst(mlst0, bP),

	facMu_c : calcInnerProdList(varsP,1,bP,2*m_*BmagInv_e*nuVtSqSum_e*(rdv2[1]*cv + rdvSq4[1]*w[vid[2]])),
	mlst1   : doMakeExprLst(facMu_c, facMu),
    	facMu_e : doExpandLst(mlst1, bP),
	
	incr : fullratsimp(incr
              +calcInnerProdList(varsP,alphaMu_e,bPp,f_e)
              +calcInnerProdList(varsP,facMu_e,bPpp,f_e))
    ),
    
    printf(fh, "double ~aP~a(const double m_, const double *w, const double *dxv, const double *BmagInv, const double nuSum, const double *nuUSum, const double *nuVtSqSum, const double *f, double *out) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // w[~a]:      Cell-center coordinates. ~%", cdim+vdim),
    printf(fh, "  // dxv[~a]:    Cell spacing. ~%", cdim+vdim),
    printf(fh, "  // nuSum:     collisionalities added (self and cross species collisionalities). ~%"),
    printf(fh, "  // nuUSum:    sum of bulk velocities times their respective collisionalities. ~%"),
    printf(fh, "  // nuVtSqSum: sum of thermal speeds squared time their respective collisionalities. ~%"),
    printf(fh, "  // f[~a]:      Input distribution function. ~%", NP),
    printf(fh, "  // out[~a]:    Incremented output ~%", NP),
    cid : cidx(cdim),
    printf(fh, "  double rdv2[~a]; ~%", vdim),
    printf(fh, "  double rdvSq4[~a]; ~%", vdim),
    for dir : 1 thru vdim do (
      printf(fh, "  rdv2[~a]   = 2.0/dxv[~a]; ~%", dir-1, vid[dir]),
      printf(fh, "  rdvSq4[~a] = rdv2[~a]*rdv2[~a]; ~%", dir-1, dir-1, dir-1),
      printf(fh, "  rdv2[~a]   = rdv2[~a]; ~%", dir-1, dir-1)
    ),
    printf(fh, "~%"),

    /* Print vpar alpha and factor in diffusive term. */
    printf(fh, "  double alphaVpar[~a]; ~%", NP),
    clst : [rdv2[0]],
    writeCExprsCollect1(alphaVpar, alphaVpar_c, clst),
    printf(fh, "~%"),

    if polyOrder>1 then (
      printf(fh, "  double facVpar[~a]; ~%", NC),
      clst : [rdvSq4[0]],
      writeCExprsCollect1(facVpar, facVpar_c, clst),
      printf(fh, "~%")
    ),

    if vdim = 2 then (
      /* Print mu alpha and factor in diffusive term. */
      printf(fh, "  double alphaMu[~a]; ~%", NP),
      writeCExprsCollect1(alphaMu, alphaMu_c, []),
      printf(fh, "~%"),

      if polyOrder>1 then (
        printf(fh, "  double facMu[~a]; ~%", NP),
        writeCExprsCollect1(facMu, facMu_c, []),
        printf(fh, "~%")    
      )
    ),

    clst : makelist(f[i],i,0,NC-1),
    writeCExprsCollect1c(radcan(incr)),
    printf(fh, "~%"),

    /* Return coefficients for CFL condition */
    zr : makelist(varsP[d]=0, d, 1, length(varsP)),
    alphaVparMid : float(expand(fullratsimp(subst(zr,alphaVpar_e)))),
    if polyOrder=1 then (
      facVparMid   : float(expand(fullratsimp(subst(zr,doExpand(facVpar_c,bC)))))
    ) else (
      facVparMid   : float(expand(fullratsimp(subst(zr,facVpar_e))))
    ),
    if vdim = 1 then (
      expr  : float(expand(fullratsimp(((polyOrder+1)**2)*facVparMid/(2*polyOrder+1)))),
      param : cons(expr, [float(expand(((polyOrder+1)**2)/(2*polyOrder+1))), rdvSq4[1], m_, w[vid[1]]]),
      eColl : apply(collectterms, param),
      printf(fh, "  return std::abs(~a) + ~a; ~%", alphaVparMid, eColl )
    ),
    if vdim = 2 then (
      alphaMuD_c : calcInnerProdList(varsP,1,bP,2*nuSum*(-cv + rdv2[1]*(-w[vid[2]]))),
      alphaMuD_e : doExpand(alphaMuD_c, bP),

      alphaMuDMid : float(expand(fullratsimp(subst(zr,alphaMuD_e)))),
      if polyOrder=1 then (
       	facMuMid : float(expand(fullratsimp(subst(zr,doExpand(facMu_c,bP)))))
      ) else (
       	facMuMid : float(expand(fullratsimp(subst(zr,facMu_e))))
      ),
      expr  : float(expand(fullratsimp(-alphaMuDMid+((polyOrder+1)**2)*(facVparMid+facMuMid)/(2*polyOrder+1)))),
      param : cons(expr, [float(expand(((polyOrder+1)**2)/(2*polyOrder+1))), rdvSq4[1], m_, w[vid[2]]]),
      eColl : apply(collectterms, param),
      printf(fh, "  return std::abs(~a) + ~a; ~%", alphaVparMid, eColl )
    ),
    printf(fh, "~%"),
  
    printf(fh, "} ~%")
));

