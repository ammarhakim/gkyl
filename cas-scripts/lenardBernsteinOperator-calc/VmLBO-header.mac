/* Generate the header file for vlasov LBO kernels. */

/* ...... USER INPUTS........ */

/* Generate kernels for "uni"form, "nonuni"form or "both" grid types. */
grid : "both"$

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
minVdim_Max : 1$
maxCdim_Max : 3$
maxVdim_Max : 3$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$


/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser", "Max", "Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

/* Is non-uniform booleans. */
if     grid="uni"    then (gridType : [false])
elseif grid="nonuni" then (gridType : [true])
elseif grid="both"   then (gridType : [false,true])$

cvars : [X, Y, Z]$

fh : openw("~/max-out/VmLBOModDecl.h")$

printf(fh, "#ifndef VMLBO_MOD_DECL_H ~%")$
printf(fh, "#define VMLBO_MOD_DECL_H ~%")$
printf(fh, "~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "    return (T(0) < val) - (val < T(0)); ~%")$
printf(fh, "}~%")$
printf(fh, "~%")$
printf(fh, "extern \"C\" { ~%")$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      if (c+v=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : 1 thru maxPolyOrderB do (

        printf(fh, "double VmLBOconstNuVol~ax~av~aP~a(const double *w, const double *dxv, const double nuSum, const double *nuUSum, const double *nuVtSqSum, const double *f, double *out); ~%", c, v, bName[bInd], polyOrder),

        for surfDir : 1 thru v do (

          for gridInd : 1 thru length(gridType) do (
            isNonuniform : gridType[gridInd],
            if isNonuniform then (gridStr : "Nonuniform") else (gridStr : ""),
            printf(fh, "double VmLBOconstNuSurf~a~ax~av~a_V~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", gridStr, c, v, bName[bInd], cvars[surfDir], polyOrder)
          ),
          printf(fh, "double VmLBOconstNuUpwindSurf~ax~av~a_V~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", c, v, bName[bInd], cvars[surfDir], polyOrder),

          printf(fh, "double VmLBOconstNuBoundarySurf~ax~av~a_V~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const int *idxl, const int *idxr, const double nuSum, const double vMuMidMax, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fr, double *outl, double *outr); ~%", c, v, bName[bInd], cvars[surfDir], polyOrder)
        ),
        printf(fh, "~%")
      )
    ),
    printf(fh, "~%")
  )
)$

printf(fh, "} ~%")$

printf(fh, "~%")$

printf(fh, "#endif ~%")$

close(fh)$
