load("lenardBernsteinOperator-calc/GkLBOconstNu-vol")$
load(stringproc)$

/* This script calls the functions which calculate the
   updates from the GkLBO volume term contributions. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
maxCdim_Ser : 0$

/* Maximal order basis. */
maxPolyOrder_Max : 3$
minCdim_Max : 1$
maxCdim_Max : 0$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 1$

gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "max", "tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      for polyOrder : 1 thru maxPolyOrderB do (

        disp(printf(false,sconcat("Creating volume GkLBOconstNu",bName[bInd]," ~ax~avP~a"),c,v,polyOrder)),
        fname : sconcat("~/max-out/GkLBOconstNu", bName[bInd], c, "x", v, "vP", polyOrder, ".cpp"),
        fh : openw(fname),
        funcName : sconcat("GkLBOconstNuVol", c, "x", v, "v", bName[bInd]),
        calcGkLBOconstNuVolUpdater(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)

      )
    )
  )
);


