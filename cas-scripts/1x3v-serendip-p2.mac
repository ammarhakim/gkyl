load("/Users/ahakim/research/gkyl-project/gkyl/cas-scripts/modal-basis.mac");
fpprec : 24$

varP : [x, vx, vy, vz]$
basisN : gsOrthoNorm(varP, makeSerendipBasis(varP, 2))$
fl : transpose(makelist(f[i], i, 0, length(basisN)-1))$

/* Streaming volume integral */
GVX : calcWeightedGradStiffMatrix(x, varP, vx, basisN)$
G1 : calcWeightedGradStiffMatrix(x, varP, 1, basisN)$
StreamVol : expand(radcan( (vFac*GVX + wFac*G1).fl ))$
SV : float(StreamVol)$

fh : openw("~/SV-1x3v-s2-x.cxx")$
for i : 1 thru length(fl) do (
  if SV[i,1] # 0.0 then printf(fh, "~a += ~a; ~%", V[i-1], SV[i,1])
);
close(fh);

/* Force terms */
varC : [x]$
confBasisN : gsOrthoNorm(varC, makeMaxOrderBasis(varC, 2))$
FV_EX : sum(E[i-1]*calcWeightedGradStiffMatrix(vx, varP, confBasisN[i], basisN), i, 1, length(confBasisN))$
ForceVol : expand(radcan( FV_EX.fl ))$
subList : makelist(E[i-1]=concat(E,i-1), i, 1, length(confBasisN))$
FV : subst(subList, float(ForceVol))$

fh : openw("~/FV-1x3v-s2-ax.cxx")$
printf(fh, "double E0 = E[0]*exFac, E1 = E[1]*exFac, E2 = E[2]*exFac; ~%");
for i : 1 thru length(fl) do (
  if FV[i,1] # 0.0 then printf(fh, "~a += ~a; ~%", V[i-1], FV[i,1])
);
close(fh);