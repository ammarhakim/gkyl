/*
  Generate kernels that compute the parallel electric field
  for a 1D GK simulation from the field equation that arises
  from summing the q*vpar moments of the GK equations.
*/
load("zeroCurrentGkEpar/zeroCurrentGkEpar_funcs")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 1$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cD : minDim[bInd] thru maxDim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : 1 thru maxPolyOrderB do (

      disp(printf(false,sconcat("Creating zeroCurrentGkEpar_divP_ ~ax p~a ",bName[bInd]),cD,polyOrder)),

      fname : sconcat("~/max-out/zeroCurrentGkEpar_divP_", cD, "x_p", polyOrder, "_", bName[bInd], ".cpp"),
      fh : openw(fname),
      printf(fh, "#include <zeroCurrentGkEpar_divP_mod_decl.h>~%~%"),

      funcName : sconcat("zeroCurrentGkEpar_divP_", cD, "x_p", polyOrder, "_", bName[bInd]),
      genDivPressure(fh, funcName, cD, bName[bInd], polyOrder),

      close(fh)
    )
  )
);
